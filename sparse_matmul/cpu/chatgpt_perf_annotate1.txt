 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1960 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000052b4 <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)>:
    0.26 :   52b4:   endbr64
    0.00 :   52b8:   push   %rbp
    0.05 :   52b9:   mov    %rsp,%rbp
    0.15 :   52bc:   push   %rbx
    0.72 :   52bd:   sub    $0x68,%rsp
    2.60 :   52c1:   mov    %rdi,-0x68(%rbp)
    0.15 :   52c5:   mov    %rsi,-0x70(%rbp)
    0.26 :   52c9:   mov    %fs:0x28,%rax
    0.05 :   52d2:   mov    %rax,-0x18(%rbp)
    0.05 :   52d6:   xor    %eax,%eax
    0.10 :   52d8:   mov    -0x68(%rbp),%rax
    1.74 :   52dc:   mov    %rax,-0x50(%rbp)
    3.45 :   52e0:   mov    -0x70(%rbp),%rdx
    0.79 :   52e4:   mov    -0x50(%rbp),%rax
    1.02 :   52e8:   mov    %rdx,%rsi
    0.00 :   52eb:   mov    %rax,%rdi
    0.05 :   52ee:   call   6564 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const>
    0.25 :   52f3:   mov    %rax,-0x48(%rbp)
    5.61 :   52f7:   mov    -0x48(%rbp),%rdx
   20.46 :   52fb:   mov    -0x50(%rbp),%rax
    0.26 :   52ff:   mov    %rdx,%rsi
    0.00 :   5302:   mov    %rax,%rdi
    0.00 :   5305:   call   659a <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const>
    1.74 :   530a:   mov    %rax,-0x40(%rbp)
    5.59 :   530e:   mov    -0x48(%rbp),%rcx
    0.72 :   5312:   mov    -0x70(%rbp),%rdx
    2.75 :   5316:   mov    -0x40(%rbp),%rsi
   16.08 :   531a:   mov    -0x50(%rbp),%rax
    0.05 :   531e:   mov    %rax,%rdi
    0.00 :   5321:   call   65cc <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const>
    0.05 :   5326:   mov    %rax,-0x38(%rbp)
    1.23 :   532a:   cmpq   $0x0,-0x38(%rbp)
   25.96 :   532f:   je     534a <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)+0x96>
    0.61 :   5331:   mov    -0x38(%rbp),%rax
    1.02 :   5335:   add    $0x8,%rax
    0.26 :   5339:   mov    %rax,%rdi
    0.00 :   533c:   call   54d4 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v()>
    0.61 :   5341:   lea    0x4(%rax),%rbx
    2.71 :   5345:   jmp    53cb <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)+0x117>
    0.00 :   534a:   mov    -0x50(%rbp),%rbx
    0.00 :   534e:   mov    -0x70(%rbp),%rdx
    0.00 :   5352:   lea    -0x58(%rbp),%rax
    0.00 :   5356:   mov    %rdx,%rsi
    0.00 :   5359:   mov    %rax,%rdi
    0.00 :   535c:   call   661c <std::tuple<int const&>::tuple<true, true>(int const&)>
    0.00 :   5361:   lea    -0x59(%rbp),%rcx
    0.00 :   5365:   lea    -0x58(%rbp),%rdx
    0.05 :   5369:   lea    -0x30(%rbp),%rax
    0.00 :   536d:   mov    %rcx,%r8
    0.00 :   5370:   mov    %rdx,%rcx
    0.00 :   5373:   lea    0x6d18(%rip),%rdx        # c092 <std::piecewise_construct>
    0.00 :   537a:   mov    %rbx,%rsi
    0.05 :   537d:   mov    %rax,%rdi
    0.00 :   5380:   call   6646 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>
    0.00 :   5385:   mov    -0x28(%rbp),%rcx
    0.38 :   5389:   mov    -0x48(%rbp),%rdx
    0.00 :   538d:   mov    -0x40(%rbp),%rsi
    0.00 :   5391:   mov    -0x50(%rbp),%rax
    0.00 :   5395:   mov    $0x1,%r8d
    0.00 :   539b:   mov    %rax,%rdi
    0.00 :   539e:   call   6704 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>
    0.00 :   53a3:   mov    %rax,-0x58(%rbp)
    0.10 :   53a7:   movq   $0x0,-0x28(%rbp)
    0.10 :   53af:   lea    -0x58(%rbp),%rax
    0.00 :   53b3:   mov    %rax,%rdi
    0.00 :   53b6:   call   6828 <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator->() const>
    0.05 :   53bb:   lea    0x4(%rax),%rbx
    0.00 :   53bf:   lea    -0x30(%rbp),%rax
    0.00 :   53c3:   mov    %rax,%rdi
    0.05 :   53c6:   call   66ca <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>
    0.00 :   53cb:   mov    %rbx,%rax
    0.00 :   53ce:   mov    -0x18(%rbp),%rdx
    1.32 :   53d2:   sub    %fs:0x28,%rdx
    0.10 :   53db:   je     5402 <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)+0x14e>
    0.00 :   53dd:   jmp    53fd <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)+0x149>
    0.00 :   53df:   endbr64
    0.00 :   53e3:   mov    %rax,%rbx
    0.00 :   53e6:   lea    -0x30(%rbp),%rax
    0.00 :   53ea:   mov    %rax,%rdi
    0.00 :   53ed:   call   66ca <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>
    0.00 :   53f2:   mov    %rbx,%rax
    0.00 :   53f5:   mov    %rax,%rdi
    0.00 :   53f8:   call   2580 <_Unwind_Resume@plt>
    0.00 :   53fd:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   5402:   mov    -0x8(%rbp),%rbx
    0.31 :   5406:   leave
    0.10 :   5407:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1696 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000386b <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]>:
    0.00 :   386b:   endbr64
    0.00 :   386f:   push   %rbp
    0.00 :   3870:   mov    %rsp,%rbp
    0.00 :   3873:   push   %r12
    0.00 :   3875:   push   %rbx
    0.00 :   3876:   sub    $0xa0,%rsp
    0.00 :   387d:   mov    %rdi,-0xa8(%rbp)
    0.00 :   3884:   mov    %fs:0x28,%rax
    0.00 :   388d:   mov    %rax,-0x18(%rbp)
    0.00 :   3891:   xor    %eax,%eax
    0.00 :   3893:   mov    -0xa8(%rbp),%rax
    0.00 :   389a:   mov    0x28(%rax),%eax
    0.00 :   389d:   mov    %eax,-0x90(%rbp)
    0.00 :   38a3:   lea    -0x50(%rbp),%rax
    0.00 :   38a7:   mov    %rax,%rdi
    0.00 :   38aa:   call   414e <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::unordered_map()>
    0.00 :   38af:   mov    -0x90(%rbp),%ebx
    0.00 :   38b5:   call   25c0 <omp_get_num_threads@plt>
    0.00 :   38ba:   mov    %eax,%r12d
    0.00 :   38bd:   call   2530 <omp_get_thread_num@plt>
    0.00 :   38c2:   mov    %eax,%esi
    0.00 :   38c4:   mov    %ebx,%eax
    0.00 :   38c6:   cltd
    0.00 :   38c7:   idiv   %r12d
    0.00 :   38ca:   mov    %eax,%ecx
    0.00 :   38cc:   mov    %ebx,%eax
    0.00 :   38ce:   cltd
    0.00 :   38cf:   idiv   %r12d
    0.00 :   38d2:   mov    %edx,%eax
    0.00 :   38d4:   cmp    %eax,%esi
    0.00 :   38d6:   jl     3bfa <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x38f>
    0.00 :   38dc:   imul   %ecx,%esi
    0.00 :   38df:   mov    %esi,%edx
    0.00 :   38e1:   add    %edx,%eax
    0.00 :   38e3:   lea    (%rax,%rcx,1),%ebx
    0.00 :   38e6:   cmp    %ebx,%eax
    0.00 :   38e8:   jge    3bd8 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x36d>
    0.00 :   38ee:   mov    %eax,-0xa0(%rbp)
    0.00 :   38f4:   lea    -0x50(%rbp),%rax
    0.00 :   38f8:   mov    %rax,%rdi
    0.00 :   38fb:   call   44f8 <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::clear()>
    0.00 :   3900:   mov    -0xa8(%rbp),%rax
    0.00 :   3907:   mov    (%rax),%rax
    0.00 :   390a:   mov    %rax,%rdx
    0.00 :   390d:   mov    -0xa0(%rbp),%eax
    0.00 :   3913:   cltq
    0.00 :   3915:   mov    %rax,%rsi
    0.00 :   3918:   mov    %rdx,%rdi
    0.00 :   391b:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   3920:   mov    (%rax),%eax
    0.00 :   3922:   mov    %eax,-0x8c(%rbp)
    0.00 :   3928:   mov    -0xa8(%rbp),%rax
    0.00 :   392f:   mov    (%rax),%rax
    0.00 :   3932:   mov    %rax,%rdx
    0.00 :   3935:   mov    -0xa0(%rbp),%eax
    0.00 :   393b:   add    $0x1,%eax
    0.00 :   393e:   cltq
    0.00 :   3940:   mov    %rax,%rsi
    0.00 :   3943:   mov    %rdx,%rdi
    0.00 :   3946:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   394b:   mov    (%rax),%eax
    0.00 :   394d:   mov    %eax,-0x88(%rbp)
    0.00 :   3953:   mov    -0x8c(%rbp),%eax
    0.00 :   3959:   mov    %eax,-0x9c(%rbp)
    0.00 :   395f:   nop
    0.00 :   3960:   mov    -0x9c(%rbp),%eax
    0.12 :   3966:   cmp    -0x88(%rbp),%eax
    0.00 :   396c:   jl     3a8e <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x223>
    0.00 :   3972:   movl   $0x0,-0x98(%rbp)
    0.00 :   397c:   lea    -0x50(%rbp),%rax
    0.00 :   3980:   mov    %rax,-0x60(%rbp)
    0.00 :   3984:   mov    -0x60(%rbp),%rax
    0.00 :   3988:   mov    %rax,%rdi
    0.00 :   398b:   call   458a <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::begin()>
    0.00 :   3990:   mov    %rax,-0x70(%rbp)
    0.00 :   3994:   mov    -0x60(%rbp),%rax
    0.00 :   3998:   mov    %rax,%rdi
    0.00 :   399b:   call   45a8 <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::end()>
    0.00 :   39a0:   mov    %rax,-0x68(%rbp)
    0.00 :   39a4:   nop
    0.00 :   39a5:   lea    -0x68(%rbp),%rdx
    0.00 :   39a9:   lea    -0x70(%rbp),%rax
    0.00 :   39ad:   mov    %rdx,%rsi
    0.00 :   39b0:   mov    %rax,%rdi
    0.00 :   39b3:   call   45c6 <std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, float>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, float>, false> const&)>
    0.00 :   39b8:   test   %al,%al
    0.06 :   39ba:   jne    3a00 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x195>
    0.00 :   39bc:   mov    -0x98(%rbp),%r12d
    0.00 :   39c3:   mov    -0xa0(%rbp),%eax
    0.00 :   39c9:   add    $0x1,%eax
    0.00 :   39cc:   movslq %eax,%rdx
    0.00 :   39cf:   mov    -0xa8(%rbp),%rax
    0.00 :   39d6:   mov    0x10(%rax),%rax
    0.00 :   39da:   mov    %rdx,%rsi
    0.00 :   39dd:   mov    %rax,%rdi
    0.00 :   39e0:   call   4790 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :   39e5:   mov    %r12d,(%rax)
    0.00 :   39e8:   addl   $0x1,-0xa0(%rbp)
    0.00 :   39ef:   cmp    %ebx,-0xa0(%rbp)
    0.00 :   39f5:   jl     38f4 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x89>
    0.00 :   39fb:   jmp    3bd8 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x36d>
    0.00 :   3a00:   lea    -0x70(%rbp),%rax
    0.00 :   3a04:   mov    %rax,%rdi
    0.00 :   3a07:   call   460e <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator*() const>
    0.06 :   3a0c:   mov    %rax,-0x58(%rbp)
    0.18 :   3a10:   mov    -0xa0(%rbp),%eax
    0.06 :   3a16:   movslq %eax,%rdx
    0.00 :   3a19:   mov    -0xa8(%rbp),%rax
    0.06 :   3a20:   mov    0x18(%rax),%rax
    0.42 :   3a24:   mov    %rdx,%rsi
    0.00 :   3a27:   mov    %rax,%rdi
    0.00 :   3a2a:   call   4634 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long)>
    0.12 :   3a2f:   mov    %rax,%rdx
    0.00 :   3a32:   mov    -0x58(%rbp),%rax
    0.00 :   3a36:   mov    %rax,%rsi
    0.00 :   3a39:   mov    %rdx,%rdi
    0.00 :   3a3c:   call   4662 <std::vector<int, std::allocator<int> >::push_back(int const&)>
    0.00 :   3a41:   mov    -0xa0(%rbp),%eax
    0.00 :   3a47:   movslq %eax,%rdx
    0.00 :   3a4a:   mov    -0xa8(%rbp),%rax
    0.00 :   3a51:   mov    0x20(%rax),%rax
    0.06 :   3a55:   mov    %rdx,%rsi
    0.00 :   3a58:   mov    %rax,%rdi
    0.00 :   3a5b:   call   46e2 <std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >::operator[](unsigned long)>
    0.06 :   3a60:   mov    %rax,%rdx
    0.00 :   3a63:   mov    -0x58(%rbp),%rax
    0.00 :   3a67:   add    $0x4,%rax
    0.00 :   3a6b:   mov    %rax,%rsi
    0.00 :   3a6e:   mov    %rdx,%rdi
    0.06 :   3a71:   call   4710 <std::vector<float, std::allocator<float> >::push_back(float const&)>
    0.00 :   3a76:   addl   $0x1,-0x98(%rbp)
    0.06 :   3a7d:   lea    -0x70(%rbp),%rax
    0.12 :   3a81:   mov    %rax,%rdi
    0.00 :   3a84:   call   45ec <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator++()>
    0.12 :   3a89:   jmp    39a5 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x13a>
    0.00 :   3a8e:   mov    -0xa8(%rbp),%rax
    0.00 :   3a95:   mov    (%rax),%rax
    0.00 :   3a98:   lea    0x18(%rax),%rdx
    0.00 :   3a9c:   mov    -0x9c(%rbp),%eax
    0.00 :   3aa2:   cltq
    0.00 :   3aa4:   mov    %rax,%rsi
    0.00 :   3aa7:   mov    %rdx,%rdi
    0.00 :   3aaa:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   3aaf:   mov    (%rax),%eax
    0.12 :   3ab1:   mov    %eax,-0x84(%rbp)
    0.00 :   3ab7:   mov    -0xa8(%rbp),%rax
    0.00 :   3abe:   mov    (%rax),%rax
    0.00 :   3ac1:   lea    0x30(%rax),%rdx
    0.00 :   3ac5:   mov    -0x9c(%rbp),%eax
    0.00 :   3acb:   cltq
    0.00 :   3acd:   mov    %rax,%rsi
    0.00 :   3ad0:   mov    %rdx,%rdi
    0.06 :   3ad3:   call   453c <std::vector<float, std::allocator<float> >::operator[](unsigned long) const>
    0.00 :   3ad8:   movss  (%rax),%xmm0
    0.12 :   3adc:   movss  %xmm0,-0x80(%rbp)
    0.06 :   3ae1:   mov    -0xa8(%rbp),%rax
    0.00 :   3ae8:   mov    0x8(%rax),%rax
    0.00 :   3aec:   mov    %rax,%rdx
    0.00 :   3aef:   mov    -0x84(%rbp),%eax
    0.00 :   3af5:   cltq
    0.00 :   3af7:   mov    %rax,%rsi
    0.00 :   3afa:   mov    %rdx,%rdi
    0.00 :   3afd:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   3b02:   mov    (%rax),%eax
    0.29 :   3b04:   mov    %eax,-0x7c(%rbp)
    0.00 :   3b07:   mov    -0xa8(%rbp),%rax
    0.00 :   3b0e:   mov    0x8(%rax),%rax
    0.00 :   3b12:   mov    %rax,%rdx
    0.00 :   3b15:   mov    -0x84(%rbp),%eax
    0.00 :   3b1b:   add    $0x1,%eax
    0.00 :   3b1e:   cltq
    0.00 :   3b20:   mov    %rax,%rsi
    0.00 :   3b23:   mov    %rdx,%rdi
    0.00 :   3b26:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   3b2b:   mov    (%rax),%eax
    0.00 :   3b2d:   mov    %eax,-0x78(%rbp)
    0.00 :   3b30:   mov    -0x7c(%rbp),%eax
    0.18 :   3b33:   mov    %eax,-0x94(%rbp)
    0.00 :   3b39:   nop
    1.71 :   3b3a:   mov    -0x94(%rbp),%eax
    1.69 :   3b40:   cmp    -0x78(%rbp),%eax
    0.95 :   3b43:   jl     3b51 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x2e6>
    0.00 :   3b45:   addl   $0x1,-0x9c(%rbp)
    0.30 :   3b4c:   jmp    3960 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0xf5>
    0.00 :   3b51:   mov    -0xa8(%rbp),%rax
    0.24 :   3b58:   mov    0x8(%rax),%rax
    2.71 :   3b5c:   lea    0x18(%rax),%rdx
    1.36 :   3b60:   mov    -0x94(%rbp),%eax
    1.48 :   3b66:   cltq
    0.30 :   3b68:   mov    %rax,%rsi
    0.00 :   3b6b:   mov    %rdx,%rdi
    0.06 :   3b6e:   call   4518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    0.00 :   3b73:   mov    (%rax),%eax
   21.94 :   3b75:   mov    %eax,-0x68(%rbp)
    0.06 :   3b78:   mov    -0xa8(%rbp),%rax
    0.18 :   3b7f:   mov    0x8(%rax),%rax
    0.77 :   3b83:   lea    0x30(%rax),%rdx
    0.47 :   3b87:   mov    -0x94(%rbp),%eax
    0.12 :   3b8d:   cltq
    0.00 :   3b8f:   mov    %rax,%rsi
    0.00 :   3b92:   mov    %rdx,%rdi
    2.77 :   3b95:   call   453c <std::vector<float, std::allocator<float> >::operator[](unsigned long) const>
    0.06 :   3b9a:   movss  (%rax),%xmm0
   19.57 :   3b9e:   movss  %xmm0,-0x74(%rbp)
    4.61 :   3ba3:   lea    -0x68(%rbp),%rdx
    0.00 :   3ba7:   lea    -0x50(%rbp),%rax
    0.00 :   3bab:   mov    %rdx,%rsi
    0.00 :   3bae:   mov    %rax,%rdi
    0.00 :   3bb1:   call   4560 <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::operator[](int const&)>
    1.65 :   3bb6:   movss  (%rax),%xmm1
    9.18 :   3bba:   movss  -0x80(%rbp),%xmm0
    3.61 :   3bbf:   mulss  -0x74(%rbp),%xmm0
   12.05 :   3bc4:   addss  %xmm1,%xmm0
    7.04 :   3bc8:   movss  %xmm0,(%rax)
    2.60 :   3bcc:   addl   $0x1,-0x94(%rbp)
    0.18 :   3bd3:   jmp    3b3a <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x2cf>
    0.00 :   3bd8:   call   25b0 <GOMP_barrier@plt>
    0.00 :   3bdd:   lea    -0x50(%rbp),%rax
    0.00 :   3be1:   mov    %rax,%rdi
    0.00 :   3be4:   call   416e <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::~unordered_map()>
    0.00 :   3be9:   mov    -0x18(%rbp),%rax
    0.00 :   3bed:   sub    %fs:0x28,%rax
    0.00 :   3bf6:   je     3c0c <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x3a1>
    0.00 :   3bf8:   jmp    3c07 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x39c>
    0.00 :   3bfa:   mov    $0x0,%eax
    0.00 :   3bff:   add    $0x1,%ecx
    0.00 :   3c02:   jmp    38dc <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0]+0x71>
    0.00 :   3c07:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   3c0c:   add    $0xa0,%rsp
    0.00 :   3c13:   pop    %rbx
    0.00 :   3c14:   pop    %r12
    0.00 :   3c16:   pop    %rbp
    0.00 :   3c17:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1673 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007922 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const>:
    0.06 :   7922:   endbr64
    0.00 :   7926:   push   %rbp
    0.58 :   7927:   mov    %rsp,%rbp
    0.12 :   792a:   sub    $0x30,%rsp
    3.72 :   792e:   mov    %rdi,-0x18(%rbp)
    0.24 :   7932:   mov    %rsi,-0x20(%rbp)
    1.14 :   7936:   mov    %rdx,-0x28(%rbp)
    0.30 :   793a:   mov    %rcx,-0x30(%rbp)
    0.12 :   793e:   mov    -0x18(%rbp),%rax
    3.05 :   7942:   mov    (%rax),%rdx
   14.53 :   7945:   mov    -0x20(%rbp),%rax
    1.02 :   7949:   shl    $0x3,%rax
    0.06 :   794d:   add    %rdx,%rax
    0.49 :   7950:   mov    (%rax),%rax
   24.46 :   7953:   mov    %rax,-0x10(%rbp)
    0.00 :   7957:   cmpq   $0x0,-0x10(%rbp)
   23.72 :   795c:   jne    7968 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0x46>
    0.00 :   795e:   mov    $0x0,%eax
    1.20 :   7963:   jmp    79fd <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xdb>
    0.66 :   7968:   mov    -0x10(%rbp),%rax
    0.30 :   796c:   mov    (%rax),%rax
   14.87 :   796f:   mov    %rax,-0x8(%rbp)
    0.00 :   7973:   mov    -0x8(%rbp),%rax
    0.48 :   7977:   lea    0x8(%rax),%rcx
    1.38 :   797b:   mov    -0x30(%rbp),%rdx
    0.00 :   797f:   mov    -0x28(%rbp),%rsi
    0.10 :   7983:   mov    -0x18(%rbp),%rax
    0.18 :   7987:   mov    %rax,%rdi
    0.00 :   798a:   call   882e <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const>
    3.35 :   798f:   test   %al,%al
    0.00 :   7991:   je     7999 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0x77>
    0.00 :   7993:   mov    -0x10(%rbp),%rax
    0.90 :   7997:   jmp    79fd <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xdb>
    0.00 :   7999:   mov    -0x8(%rbp),%rax
    0.00 :   799d:   mov    (%rax),%rax
    0.00 :   79a0:   test   %rax,%rax
    0.00 :   79a3:   je     79ca <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xa8>
    0.00 :   79a5:   mov    -0x8(%rbp),%rax
    0.00 :   79a9:   mov    %rax,%rdi
    0.00 :   79ac:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    0.00 :   79b1:   lea    0x8(%rax),%rdx
    0.00 :   79b5:   mov    -0x18(%rbp),%rax
    0.00 :   79b9:   mov    %rdx,%rsi
    0.00 :   79bc:   mov    %rax,%rdi
    0.00 :   79bf:   call   88da <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const>
    0.00 :   79c4:   cmp    %rax,-0x20(%rbp)
    0.00 :   79c8:   je     79d1 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xaf>
    0.00 :   79ca:   mov    $0x1,%eax
    0.00 :   79cf:   jmp    79d6 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xb4>
    0.00 :   79d1:   mov    $0x0,%eax
    0.00 :   79d6:   test   %al,%al
    0.00 :   79d8:   jne    79f7 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0xd5>
    0.00 :   79da:   mov    -0x8(%rbp),%rax
    0.00 :   79de:   mov    %rax,-0x10(%rbp)
    0.00 :   79e2:   mov    -0x8(%rbp),%rax
    0.00 :   79e6:   mov    %rax,%rdi
    0.00 :   79e9:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    0.00 :   79ee:   mov    %rax,-0x8(%rbp)
    0.00 :   79f2:   jmp    7973 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const+0x51>
    0.00 :   79f7:   nop
    0.00 :   79f8:   mov    $0x0,%eax
    1.19 :   79fd:   leave
    1.80 :   79fe:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1042 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003f62 <std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const>:
    4.91 :   3f62:   endbr64
    5.47 :   3f66:   push   %rbp
    4.33 :   3f67:   mov    %rsp,%rbp
    2.79 :   3f6a:   mov    %rdi,-0x8(%rbp)
    0.87 :   3f6e:   mov    %rsi,-0x10(%rbp)
    0.96 :   3f72:   mov    %rdx,-0x18(%rbp)
    0.77 :   3f76:   mov    -0x10(%rbp),%rax
   10.12 :   3f7a:   mov    $0x0,%edx
    0.00 :   3f7f:   divq   -0x18(%rbp)
   64.53 :   3f83:   mov    %rdx,%rax
    5.26 :   3f86:   pop    %rbp
    0.00 :   3f87:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (992 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000065cc <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const>:
    0.00 :   65cc:   endbr64
    0.00 :   65d0:   push   %rbp
    0.10 :   65d1:   mov    %rsp,%rbp
    0.10 :   65d4:   sub    $0x30,%rsp
    5.75 :   65d8:   mov    %rdi,-0x18(%rbp)
    0.10 :   65dc:   mov    %rsi,-0x20(%rbp)
    0.10 :   65e0:   mov    %rdx,-0x28(%rbp)
    0.00 :   65e4:   mov    %rcx,-0x30(%rbp)
    0.20 :   65e8:   mov    -0x30(%rbp),%rcx
    3.67 :   65ec:   mov    -0x28(%rbp),%rdx
    0.71 :   65f0:   mov    -0x20(%rbp),%rsi
    6.08 :   65f4:   mov    -0x18(%rbp),%rax
    0.99 :   65f8:   mov    %rax,%rdi
    0.00 :   65fb:   call   7922 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_before_node(unsigned long, int const&, unsigned long) const>
    6.55 :   6600:   mov    %rax,-0x8(%rbp)
    6.25 :   6604:   cmpq   $0x0,-0x8(%rbp)
   36.90 :   6609:   je     6614 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const+0x48>
    1.26 :   660b:   mov    -0x8(%rbp),%rax
    1.61 :   660f:   mov    (%rax),%rax
   29.01 :   6612:   jmp    6619 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_find_node(unsigned long, int const&, unsigned long) const+0x4d>
    0.20 :   6614:   mov    $0x0,%eax
    0.00 :   6619:   leave
    0.40 :   661a:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (739 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a0fc <std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const>:
   38.62 :   a0fc:   endbr64
    0.00 :   a100:   push   %rbp
    2.43 :   a101:   mov    %rsp,%rbp
    0.00 :   a104:   mov    %rdi,-0x8(%rbp)
    2.71 :   a108:   mov    -0x8(%rbp),%rax
   55.56 :   a10c:   pop    %rbp
    0.68 :   a10d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (684 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000078b0 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const>:
   26.71 :   78b0:   endbr64
    0.44 :   78b4:   push   %rbp
    0.44 :   78b5:   mov    %rsp,%rbp
    0.29 :   78b8:   sub    $0x10,%rsp
    4.21 :   78bc:   mov    %rdi,-0x8(%rbp)
    3.83 :   78c0:   mov    -0x8(%rbp),%rax
   64.07 :   78c4:   mov    %rax,%rdi
    0.00 :   78c7:   call   881c <std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const>
    0.00 :   78cc:   leave
    0.00 :   78cd:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (632 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000882e <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const>:
    6.88 :   882e:   endbr64
    0.00 :   8832:   push   %rbp
    3.01 :   8833:   mov    %rsp,%rbp
    0.00 :   8836:   push   %rbx
    1.09 :   8837:   sub    $0x38,%rsp
    0.16 :   883b:   mov    %rdi,-0x28(%rbp)
    5.36 :   883f:   mov    %rsi,-0x30(%rbp)
    0.16 :   8843:   mov    %rdx,-0x38(%rbp)
    0.16 :   8847:   mov    %rcx,-0x40(%rbp)
    3.01 :   884b:   mov    %fs:0x28,%rax
    0.00 :   8854:   mov    %rax,-0x18(%rbp)
    1.11 :   8858:   xor    %eax,%eax
    0.16 :   885a:   mov    -0x40(%rbp),%rdx
    1.58 :   885e:   mov    -0x38(%rbp),%rax
    8.73 :   8862:   mov    %rdx,%rsi
    0.00 :   8865:   mov    %rax,%rdi
    0.32 :   8868:   call   977b <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&)>
    0.32 :   886d:   test   %al,%al
    0.00 :   886f:   je     88bb <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const+0x8d>
    0.00 :   8871:   mov    -0x28(%rbp),%rax
    0.16 :   8875:   mov    %rax,%rdi
    9.19 :   8878:   call   9792 <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const>
    0.32 :   887d:   mov    %rax,%rbx
   10.15 :   8880:   mov    -0x40(%rbp),%rax
    1.72 :   8884:   mov    %rax,%rdi
    0.00 :   8887:   call   97b0 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v() const>
    9.20 :   888c:   mov    %rax,%rdx
    6.45 :   888f:   lea    -0x19(%rbp),%rax
    0.48 :   8893:   mov    %rdx,%rsi
    0.16 :   8896:   mov    %rax,%rdi
    0.00 :   8899:   call   97ce <decltype ((get<0>)((forward<std::pair<int const, float> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, float> const&>(std::pair<int const, float> const&) const>
    3.81 :   889e:   mov    %rax,%rdx
    0.16 :   88a1:   mov    -0x30(%rbp),%rax
   12.24 :   88a5:   mov    %rax,%rsi
    0.00 :   88a8:   mov    %rbx,%rdi
    0.00 :   88ab:   call   97f8 <std::equal_to<int>::operator()(int const&, int const&) const>
    2.54 :   88b0:   test   %al,%al
    5.24 :   88b2:   je     88bb <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const+0x8d>
    0.00 :   88b4:   mov    $0x1,%eax
    0.47 :   88b9:   jmp    88c0 <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const+0x92>
    0.00 :   88bb:   mov    $0x0,%eax
    0.00 :   88c0:   mov    -0x18(%rbp),%rdx
    0.64 :   88c4:   sub    %fs:0x28,%rdx
    2.82 :   88cd:   je     88d4 <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_equals(int const&, unsigned long, std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const+0xa6>
    0.00 :   88cf:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   88d4:   mov    -0x8(%rbp),%rbx
    0.32 :   88d8:   leave
    1.91 :   88d9:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (605 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000097f8 <std::equal_to<int>::operator()(int const&, int const&) const>:
    7.62 :   97f8:   endbr64
    0.33 :   97fc:   push   %rbp
    0.17 :   97fd:   mov    %rsp,%rbp
    0.00 :   9800:   mov    %rdi,-0x8(%rbp)
    5.13 :   9804:   mov    %rsi,-0x10(%rbp)
    0.50 :   9808:   mov    %rdx,-0x18(%rbp)
    1.48 :   980c:   mov    -0x10(%rbp),%rax
   27.95 :   9810:   mov    (%rax),%edx
   16.98 :   9812:   mov    -0x18(%rbp),%rax
    2.32 :   9816:   mov    (%rax),%eax
   22.14 :   9818:   cmp    %eax,%edx
    4.65 :   981a:   sete   %al
   10.58 :   981d:   pop    %rbp
    0.17 :   981e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (545 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006564 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const>:
    3.94 :   6564:   endbr64
    1.10 :   6568:   push   %rbp
    8.10 :   6569:   mov    %rsp,%rbp
    0.74 :   656c:   sub    $0x10,%rsp
    1.29 :   6570:   mov    %rdi,-0x8(%rbp)
    1.66 :   6574:   mov    %rsi,-0x10(%rbp)
    6.42 :   6578:   mov    -0x8(%rbp),%rax
   30.15 :   657c:   mov    %rax,%rdi
    0.55 :   657f:   call   78b0 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash() const>
    0.37 :   6584:   mov    %rax,%rdx
   12.50 :   6587:   mov    -0x10(%rbp),%rax
    1.09 :   658b:   mov    (%rax),%eax
   21.47 :   658d:   mov    %eax,%esi
    0.00 :   658f:   mov    %rdx,%rdi
    0.00 :   6592:   call   3f32 <std::hash<int>::operator()(int) const>
    5.66 :   6597:   leave
    4.96 :   6598:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (541 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000659a <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const>:
    0.19 :   659a:   endbr64
    0.00 :   659e:   push   %rbp
    0.56 :   659f:   mov    %rsp,%rbp
   12.52 :   65a2:   sub    $0x10,%rsp
    0.56 :   65a6:   mov    %rdi,-0x8(%rbp)
    1.12 :   65aa:   mov    %rsi,-0x10(%rbp)
    5.02 :   65ae:   mov    -0x8(%rbp),%rax
   10.31 :   65b2:   mov    0x8(%rax),%rdx
   43.81 :   65b6:   mov    -0x10(%rbp),%rcx
    1.48 :   65ba:   mov    -0x8(%rbp),%rax
    4.78 :   65be:   mov    %rcx,%rsi
    0.19 :   65c1:   mov    %rax,%rdi
    0.00 :   65c4:   call   78ce <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const>
   13.89 :   65c9:   leave
    5.59 :   65ca:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (536 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a658 <int const& std::__pair_get<0ul>::__const_get<int const, float>(std::pair<int const, float> const&)>:
    1.68 :   a658:   endbr64
    1.99 :   a65c:   push   %rbp
    0.37 :   a65d:   mov    %rsp,%rbp
    0.00 :   a660:   mov    %rdi,-0x8(%rbp)
    4.28 :   a664:   mov    -0x8(%rbp),%rax
   89.25 :   a668:   pop    %rbp
    2.42 :   a669:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (516 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000688e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr()>:
    0.97 :   688e:   endbr64
    0.20 :   6892:   push   %rbp
    0.58 :   6893:   mov    %rsp,%rbp
    0.00 :   6896:   sub    $0x10,%rsp
   13.60 :   689a:   mov    %rdi,-0x8(%rbp)
    0.39 :   689e:   mov    -0x8(%rbp),%rax
   70.30 :   68a2:   mov    %rax,%rdi
    0.00 :   68a5:   call   7d48 <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_ptr()>
    1.52 :   68aa:   leave
   12.45 :   68ab:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (507 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000881c <std::__detail::_Hashtable_ebo_helper<1, std::hash<int>, true>::_M_cget() const>:
    0.99 :   881c:   endbr64
    0.00 :   8820:   push   %rbp
    1.19 :   8821:   mov    %rsp,%rbp
    0.20 :   8824:   mov    %rdi,-0x8(%rbp)
    1.66 :   8828:   mov    -0x8(%rbp),%rax
   95.96 :   882c:   pop    %rbp
    0.00 :   882d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (463 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a950 <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_addr() const>:
    0.00 :   a950:   endbr64
    0.00 :   a954:   push   %rbp
    0.22 :   a955:   mov    %rsp,%rbp
    0.00 :   a958:   mov    %rdi,-0x8(%rbp)
    2.16 :   a95c:   mov    -0x8(%rbp),%rax
   96.97 :   a960:   pop    %rbp
    0.65 :   a961:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (442 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004518 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>:
    2.05 :   4518:   endbr64
    3.38 :   451c:   push   %rbp
    7.68 :   451d:   mov    %rsp,%rbp
    6.78 :   4520:   mov    %rdi,-0x8(%rbp)
    2.03 :   4524:   mov    %rsi,-0x10(%rbp)
    3.85 :   4528:   mov    -0x8(%rbp),%rax
   16.31 :   452c:   mov    (%rax),%rdx
   47.73 :   452f:   mov    -0x10(%rbp),%rax
    0.68 :   4533:   shl    $0x2,%rax
    0.00 :   4537:   add    %rdx,%rax
    7.91 :   453a:   pop    %rbp
    1.59 :   453b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (421 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a63a <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_ptr() const>:
   14.13 :   a63a:   endbr64
    0.00 :   a63e:   push   %rbp
    0.24 :   a63f:   mov    %rsp,%rbp
    2.38 :   a642:   sub    $0x10,%rsp
    1.90 :   a646:   mov    %rdi,-0x8(%rbp)
    0.71 :   a64a:   mov    -0x8(%rbp),%rax
   78.98 :   a64e:   mov    %rax,%rdi
    0.00 :   a651:   call   a950 <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_addr() const>
    0.00 :   a656:   leave
    1.66 :   a657:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (309 samples, percent: local period)
---------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005a930 <__GI___printf_fp_l>:
    0.00 :   5a930:  endbr64
    0.00 :   5a934:  push   %rbp
    0.00 :   5a935:  mov    %rsp,%rbp
    0.00 :   5a938:  push   %r15
    0.00 :   5a93a:  push   %r14
    0.00 :   5a93c:  push   %r13
    0.00 :   5a93e:  push   %r12
    0.00 :   5a940:  mov    %rdi,%r12
    0.00 :   5a943:  mov    %rdx,%rdi
    0.00 :   5a946:  push   %rbx
    0.00 :   5a947:  sub    $0x128,%rsp
    0.00 :   5a94e:  mov    %rdx,-0xb8(%rbp)
    0.00 :   5a955:  mov    %rsi,-0xf8(%rbp)
    0.00 :   5a95c:  mov    %fs:0x28,%rax
    0.00 :   5a965:  mov    %rax,-0x38(%rbp)
    0.00 :   5a969:  xor    %eax,%eax
    0.00 :   5a96b:  movzbl 0xd(%rdx),%eax
    1.54 :   5a96f:  movl   $0x0,-0xa4(%rbp)
    0.00 :   5a979:  movl   $0x0,-0xa0(%rbp)
    0.00 :   5a983:  mov    %eax,%edx
    0.00 :   5a985:  shr    $0x2,%dl
    0.00 :   5a988:  mov    %edx,%ebx
    0.35 :   5a98a:  movzbl 0xc(%rdi),%edx
    0.28 :   5a98e:  mov    %eax,%edi
    0.00 :   5a990:  and    $0x1,%ebx
    0.00 :   5a993:  mov    %ebx,-0xbc(%rbp)
    0.00 :   5a999:  and    $0x1,%edi
    0.00 :   5a99c:  jne    5ab50 <__GI___printf_fp_l+0x220>
    0.00 :   5a9a2:  mov    0x8(%rsi),%rsi
    0.00 :   5a9a6:  mov    0x40(%rsi),%rbx
    0.34 :   5a9aa:  mov    %rbx,-0x108(%rbp)
    0.00 :   5a9b1:  mov    0x58(%rsi),%ebx
    0.00 :   5a9b4:  mov    %ebx,-0xc0(%rbp)
    0.00 :   5a9ba:  test   %dl,%dl
    0.00 :   5a9bc:  js     5acf0 <__GI___printf_fp_l+0x3c0>
    0.00 :   5a9c2:  movq   $0x0,-0xe8(%rbp)
    0.00 :   5a9cd:  movl   $0x0,-0x114(%rbp)
    0.00 :   5a9d7:  movq   $0x0,-0x110(%rbp)
    0.00 :   5a9e2:  mov    (%rcx),%rcx
    0.00 :   5a9e5:  test   $0x10,%al
    0.00 :   5a9e7:  je     5ac28 <__GI___printf_fp_l+0x2f8>
    0.00 :   5a9ed:  movdqa (%rcx),%xmm2
    0.00 :   5a9f1:  mov    %dl,-0xe0(%rbp)
    0.00 :   5a9f7:  movdqa %xmm2,%xmm1
    0.00 :   5a9fb:  movdqa %xmm2,%xmm0
    0.00 :   5a9ff:  movaps %xmm2,-0xd0(%rbp)
    0.00 :   5aa06:  call   1ba060 <__unordtf2>
    0.00 :   5aa0b:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa13:  movzbl -0xe0(%rbp),%edx
    0.00 :   5aa1a:  test   %rax,%rax
    0.00 :   5aa1d:  jne    5b8af <__GI___printf_fp_l+0xf7f>
    0.00 :   5aa23:  movdqa %xmm2,%xmm0
    0.00 :   5aa27:  movdqa 0x187741(%rip),%xmm1        # 1e2170 <othermask+0xe0>
    0.00 :   5aa2f:  pand   0x1876d9(%rip),%xmm0        # 1e2110 <othermask+0x80>
    0.00 :   5aa37:  movaps %xmm2,-0xd0(%rbp)
    0.00 :   5aa3e:  mov    %dl,-0xf0(%rbp)
    0.00 :   5aa44:  movaps %xmm0,-0xe0(%rbp)
    0.00 :   5aa4b:  call   1ba060 <__unordtf2>
    0.00 :   5aa50:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa58:  test   %rax,%rax
    0.00 :   5aa5b:  jne    5b7a8 <__GI___printf_fp_l+0xe78>
    0.00 :   5aa61:  movdqa 0x187707(%rip),%xmm1        # 1e2170 <othermask+0xe0>
    0.00 :   5aa69:  movdqa -0xe0(%rbp),%xmm0
    0.00 :   5aa71:  call   1ba460 <__letf2>
    0.00 :   5aa76:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa7e:  test   %rax,%rax
    0.00 :   5aa81:  jle    5b7a8 <__GI___printf_fp_l+0xe78>
    0.00 :   5aa87:  mov    -0xb8(%rbp),%rax
    0.00 :   5aa8e:  movmskps %xmm2,%r13d
    0.00 :   5aa92:  lea    0x17dc6e(%rip),%r14        # 1d8707 <not_available+0x1a9>
    0.00 :   5aa99:  movzbl -0xf0(%rbp),%edx
    0.00 :   5aaa0:  and    $0x8,%r13d
    0.00 :   5aaa4:  movslq 0x8(%rax),%rcx
    0.00 :   5aaa8:  mov    0x1bf349(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5aaaf:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5aab6:  mov    %fs:(%rax),%rax
    0.00 :   5aaba:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5aabf:  lea    0x187f6a(%rip),%rax        # 1e2a30 <default_rwlockattr+0x358>
    0.00 :   5aac6:  lea    0x187f43(%rip),%rcx        # 1e2a10 <default_rwlockattr+0x338>
    0.00 :   5aacd:  cmove  %rax,%rcx
    0.00 :   5aad1:  lea    0x17daf2(%rip),%rax        # 1d85ca <not_available+0x6c>
    0.00 :   5aad8:  cmove  %rax,%r14
    0.00 :   5aadc:  mov    -0xb8(%rbp),%rax
    0.00 :   5aae3:  mov    0x4(%rax),%ebx
    0.00 :   5aae6:  mov    %edx,%eax
    0.00 :   5aae8:  shr    $0x5,%al
    0.00 :   5aaeb:  xor    $0x1,%eax
    0.00 :   5aaee:  and    $0x1,%eax
    0.00 :   5aaf1:  test   %r13d,%r13d
    0.00 :   5aaf4:  je     5ada8 <__GI___printf_fp_l+0x478>
    0.00 :   5aafa:  sub    $0x4,%ebx
    0.00 :   5aafd:  test   %ebx,%ebx
    0.00 :   5aaff:  setg   %r15b
    0.00 :   5ab03:  jle    5ab0d <__GI___printf_fp_l+0x1dd>
    0.00 :   5ab05:  test   %al,%al
    0.00 :   5ab07:  jne    5ad00 <__GI___printf_fp_l+0x3d0>
    0.00 :   5ab0d:  xor    %r13d,%r13d
    0.00 :   5ab10:  mov    -0xbc(%rbp),%eax
    0.00 :   5ab16:  test   %eax,%eax
    0.00 :   5ab18:  je     5af18 <__GI___printf_fp_l+0x5e8>
    0.00 :   5ab1e:  mov    0xa0(%r12),%rax
    0.00 :   5ab26:  test   %rax,%rax
    0.00 :   5ab29:  je     5cc6d <__GI___printf_fp_l+0x233d>
    0.00 :   5ab2f:  mov    0x20(%rax),%rdx
    0.00 :   5ab33:  cmp    0x28(%rax),%rdx
    0.00 :   5ab37:  jae    5cc6d <__GI___printf_fp_l+0x233d>
    0.00 :   5ab3d:  lea    0x4(%rdx),%rsi
    0.00 :   5ab41:  mov    %rsi,0x20(%rax)
    0.00 :   5ab45:  movl   $0x2d,(%rdx)
    0.00 :   5ab4b:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5ab50:  mov    %rsi,%r11
    0.00 :   5ab53:  mov    0x20(%rsi),%rsi
    0.00 :   5ab57:  mov    0x50(%rsi),%rbx
    0.00 :   5ab5b:  cmpb   $0x0,(%rbx)
    0.00 :   5ab5e:  mov    %rbx,-0x108(%rbp)
    0.00 :   5ab65:  jne    5ab76 <__GI___printf_fp_l+0x246>
    0.00 :   5ab67:  mov    0x8(%r11),%r8
    0.00 :   5ab6b:  mov    0x40(%r8),%rbx
    0.00 :   5ab6f:  mov    %rbx,-0x108(%rbp)
    0.00 :   5ab76:  mov    0x198(%rsi),%ebx
    0.00 :   5ab7c:  mov    %ebx,-0xc0(%rbp)
    0.00 :   5ab82:  test   %ebx,%ebx
    0.00 :   5ab84:  jne    5ab9b <__GI___printf_fp_l+0x26b>
    0.00 :   5ab86:  mov    -0xf8(%rbp),%rbx
    0.00 :   5ab8d:  mov    0x8(%rbx),%r8
    0.00 :   5ab91:  mov    0x58(%r8),%ebx
    0.00 :   5ab95:  mov    %ebx,-0xc0(%rbp)
    0.00 :   5ab9b:  test   %dl,%dl
    0.00 :   5ab9d:  jns    5a9c2 <__GI___printf_fp_l+0x92>
    0.00 :   5aba3:  mov    0x60(%rsi),%rsi
    0.00 :   5aba7:  mov    %rsi,-0xe8(%rbp)
    0.00 :   5abae:  movzbl (%rsi),%esi
    0.00 :   5abb1:  mov    %sil,-0xd0(%rbp)
    0.00 :   5abb8:  sub    $0x1,%esi
    0.00 :   5abbb:  cmp    $0x7d,%sil
    0.00 :   5abbf:  ja     5a9c2 <__GI___printf_fp_l+0x92>
    0.00 :   5abc5:  mov    -0xbc(%rbp),%r8d
    0.00 :   5abcc:  test   %r8d,%r8d
    0.00 :   5abcf:  je     5af58 <__GI___printf_fp_l+0x628>
    0.00 :   5abd5:  test   %dil,%dil
    0.00 :   5abd8:  jne    5b878 <__GI___printf_fp_l+0xf48>
    0.00 :   5abde:  mov    -0xf8(%rbp),%rsi
    0.00 :   5abe5:  mov    0x8(%rsi),%rsi
    0.00 :   5abe9:  mov    0x60(%rsi),%esi
    0.00 :   5abec:  mov    %esi,-0x114(%rbp)
    0.00 :   5abf2:  mov    -0x114(%rbp),%edi
    0.00 :   5abf8:  xor    %esi,%esi
    0.00 :   5abfa:  mov    (%rcx),%rcx
    0.00 :   5abfd:  movq   $0x0,-0x110(%rbp)
    0.00 :   5ac08:  test   %edi,%edi
    0.00 :   5ac0a:  cmovne -0xe8(%rbp),%rsi
    0.00 :   5ac12:  mov    %rsi,-0xe8(%rbp)
    0.00 :   5ac19:  test   $0x10,%al
    0.00 :   5ac1b:  jne    5a9ed <__GI___printf_fp_l+0xbd>
    0.00 :   5ac21:  nopl   0x0(%rax)
    0.00 :   5ac28:  test   $0x1,%dl
    0.00 :   5ac2b:  je     5acb0 <__GI___printf_fp_l+0x380>
    0.00 :   5ac31:  fldt   (%rcx)
    0.00 :   5ac33:  fucomi %st(0),%st
    0.00 :   5ac35:  jp     5cddf <__GI___printf_fp_l+0x24af>
    0.00 :   5ac3b:  fld    %st(0)
    0.00 :   5ac3d:  fabs
    0.00 :   5ac3f:  fldt   0x18742b(%rip)        # 1e2070 <in6addr_any+0x90>
    0.00 :   5ac45:  fxch   %st(1)
    0.00 :   5ac47:  fucomip %st(1),%st
    0.00 :   5ac49:  fstp   %st(0)
    0.00 :   5ac4b:  jbe    5b688 <__GI___printf_fp_l+0xd58>
    0.00 :   5ac51:  fxam
    0.00 :   5ac53:  fnstsw %ax
    0.00 :   5ac55:  fstp   %st(0)
    0.00 :   5ac57:  mov    %eax,%r13d
    0.00 :   5ac5a:  and    $0x200,%r13d
    0.00 :   5ac61:  mov    -0xb8(%rbp),%rax
    0.00 :   5ac68:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5ac6f:  lea    0x17da91(%rip),%r14        # 1d8707 <not_available+0x1a9>
    0.00 :   5ac76:  movslq 0x8(%rax),%rcx
    0.00 :   5ac7a:  mov    0x1bf177(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5ac81:  mov    %fs:(%rax),%rax
    0.00 :   5ac85:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5ac8a:  lea    0x187d9f(%rip),%rax        # 1e2a30 <default_rwlockattr+0x358>
    0.00 :   5ac91:  lea    0x187d78(%rip),%rcx        # 1e2a10 <default_rwlockattr+0x338>
    0.00 :   5ac98:  cmove  %rax,%rcx
    0.00 :   5ac9c:  lea    0x17d927(%rip),%rax        # 1d85ca <not_available+0x6c>
    0.00 :   5aca3:  cmove  %rax,%r14
    0.00 :   5aca7:  jmp    5aadc <__GI___printf_fp_l+0x1ac>
    0.00 :   5acac:  nopl   0x0(%rax)
    0.00 :   5acb0:  movsd  (%rcx),%xmm0
    0.68 :   5acb4:  ucomisd %xmm0,%xmm0
    0.34 :   5acb8:  jp     5cdf4 <__GI___printf_fp_l+0x24c4>
    2.44 :   5acbe:  movapd %xmm0,%xmm1
    0.00 :   5acc2:  andpd  0x1873c6(%rip),%xmm1        # 1e2090 <othermask>
    1.25 :   5acca:  ucomisd 0x187a0e(%rip),%xmm1        # 1e26e0 <default_rwlockattr+0x8>
    1.28 :   5acd2:  jbe    5afb0 <__GI___printf_fp_l+0x680>
    0.00 :   5acd8:  movmskpd %xmm0,%r13d
    0.00 :   5acdd:  and    $0x1,%r13d
    0.00 :   5ace1:  jmp    5ac61 <__GI___printf_fp_l+0x331>
    0.00 :   5ace6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   5acf0:  mov    0x50(%rsi),%rsi
    0.00 :   5acf4:  mov    %rsi,-0xe8(%rbp)
    0.00 :   5acfb:  jmp    5abae <__GI___printf_fp_l+0x27e>
    0.00 :   5ad00:  mov    -0xbc(%rbp),%edx
    0.00 :   5ad06:  movslq %ebx,%r13
    0.00 :   5ad09:  mov    $0x20,%esi
    0.00 :   5ad0e:  mov    %r12,%rdi
    0.00 :   5ad11:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5ad18:  test   %edx,%edx
    0.00 :   5ad1a:  mov    %r13,%rdx
    0.00 :   5ad1d:  je     5af40 <__GI___printf_fp_l+0x610>
    0.00 :   5ad23:  call   824e0 <_IO_wpadn>
    0.00 :   5ad28:  mov    -0xd0(%rbp),%rcx
    0.00 :   5ad2f:  cmp    %r13,%rax
    0.00 :   5ad32:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ad38:  mov    -0xa4(%rbp),%eax
    0.00 :   5ad3e:  mov    %ebx,%r13d
    0.00 :   5ad41:  mov    $0x1,%r15d
    0.00 :   5ad47:  test   %eax,%eax
    0.00 :   5ad49:  jne    5ab10 <__GI___printf_fp_l+0x1e0>
    0.00 :   5ad4f:  mov    -0xb8(%rbp),%rax
    0.00 :   5ad56:  movzbl 0xc(%rax),%edx
    0.00 :   5ad5a:  test   $0x40,%dl
    0.00 :   5ad5d:  jne    5adc9 <__GI___printf_fp_l+0x499>
    0.00 :   5ad5f:  and    $0x10,%edx
    0.00 :   5ad62:  je     5ae08 <__GI___printf_fp_l+0x4d8>
    0.00 :   5ad68:  mov    -0xbc(%rbp),%eax
    0.00 :   5ad6e:  test   %eax,%eax
    0.00 :   5ad70:  je     5b90d <__GI___printf_fp_l+0xfdd>
    0.00 :   5ad76:  mov    0xa0(%r12),%rax
    0.00 :   5ad7e:  test   %rax,%rax
    0.00 :   5ad81:  je     5d20f <__GI___printf_fp_l+0x28df>
    0.00 :   5ad87:  mov    0x20(%rax),%rdx
    0.00 :   5ad8b:  cmp    0x28(%rax),%rdx
    0.00 :   5ad8f:  jae    5d20f <__GI___printf_fp_l+0x28df>
    0.00 :   5ad95:  lea    0x4(%rdx),%rsi
    0.00 :   5ad99:  mov    %rsi,0x20(%rax)
    0.00 :   5ad9d:  movl   $0x20,(%rdx)
    0.00 :   5ada3:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5ada5:  nopl   (%rax)
    0.00 :   5ada8:  test   $0x50,%dl
    0.00 :   5adab:  jne    5af00 <__GI___printf_fp_l+0x5d0>
    0.00 :   5adb1:  sub    $0x3,%ebx
    0.00 :   5adb4:  test   %ebx,%ebx
    0.00 :   5adb6:  setg   %r15b
    0.00 :   5adba:  jle    5adc4 <__GI___printf_fp_l+0x494>
    0.00 :   5adbc:  test   %al,%al
    0.00 :   5adbe:  jne    5ad00 <__GI___printf_fp_l+0x3d0>
    0.00 :   5adc4:  test   $0x40,%dl
    0.00 :   5adc7:  je     5ad5f <__GI___printf_fp_l+0x42f>
    0.00 :   5adc9:  mov    -0xbc(%rbp),%eax
    0.00 :   5adcf:  test   %eax,%eax
    0.00 :   5add1:  je     5b7e0 <__GI___printf_fp_l+0xeb0>
    0.00 :   5add7:  mov    0xa0(%r12),%rax
    0.00 :   5addf:  test   %rax,%rax
    0.00 :   5ade2:  je     5d053 <__GI___printf_fp_l+0x2723>
    0.00 :   5ade8:  mov    0x20(%rax),%rdx
    0.00 :   5adec:  cmp    0x28(%rax),%rdx
    0.00 :   5adf0:  jae    5d053 <__GI___printf_fp_l+0x2723>
    0.00 :   5adf6:  lea    0x4(%rdx),%rsi
    0.00 :   5adfa:  mov    %rsi,0x20(%rax)
    0.00 :   5adfe:  movl   $0x2b,(%rdx)
    0.00 :   5ae04:  add    $0x1,%r13d
    0.00 :   5ae08:  mov    -0xbc(%rbp),%eax
    0.00 :   5ae0e:  test   %eax,%eax
    0.00 :   5ae10:  je     5b710 <__GI___printf_fp_l+0xde0>
    0.00 :   5ae16:  mov    0xa0(%r12),%rax
    0.00 :   5ae1e:  mov    (%rcx),%esi
    0.00 :   5ae20:  test   %rax,%rax
    0.00 :   5ae23:  je     5b801 <__GI___printf_fp_l+0xed1>
    0.00 :   5ae29:  mov    0x20(%rax),%rdx
    0.00 :   5ae2d:  cmp    %rdx,0x28(%rax)
    0.00 :   5ae31:  jbe    5b801 <__GI___printf_fp_l+0xed1>
    0.00 :   5ae37:  lea    0x4(%rdx),%rdi
    0.00 :   5ae3b:  mov    %rdi,0x20(%rax)
    0.00 :   5ae3f:  mov    %esi,(%rdx)
    0.00 :   5ae41:  cmp    $0xffffffff,%esi
    0.00 :   5ae44:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ae4a:  mov    0x4(%rcx),%esi
    0.00 :   5ae4d:  add    $0x1,%r13d
    0.00 :   5ae51:  lea    0x8(%rcx),%r14
    0.00 :   5ae55:  mov    0x20(%rax),%rdx
    0.00 :   5ae59:  cmp    %rdx,0x28(%rax)
    0.00 :   5ae5d:  jbe    5b83c <__GI___printf_fp_l+0xf0c>
    0.00 :   5ae63:  lea    0x4(%rdx),%rcx
    0.00 :   5ae67:  mov    %rcx,0x20(%rax)
    0.00 :   5ae6b:  mov    %esi,(%rdx)
    0.00 :   5ae6d:  cmp    $0xffffffff,%esi
    0.00 :   5ae70:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ae76:  mov    (%r14),%esi
    0.00 :   5ae79:  add    $0x1,%r13d
    0.00 :   5ae7d:  mov    0x20(%rax),%rdx
    0.00 :   5ae81:  cmp    0x28(%rax),%rdx
    0.00 :   5ae85:  jae    5b865 <__GI___printf_fp_l+0xf35>
    0.00 :   5ae8b:  lea    0x4(%rdx),%rcx
    0.00 :   5ae8f:  cmp    $0xffffffff,%esi
    0.00 :   5ae92:  mov    %rcx,0x20(%rax)
    0.00 :   5ae96:  sete   %al
    0.00 :   5ae99:  mov    %esi,(%rdx)
    0.00 :   5ae9b:  test   %al,%al
    0.00 :   5ae9d:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5aea3:  mov    -0xb8(%rbp),%rax
    0.00 :   5aeaa:  add    $0x1,%r13d
    0.00 :   5aeae:  testb  $0x20,0xc(%rax)
    0.00 :   5aeb2:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5aeb4:  test   %r15b,%r15b
    0.00 :   5aeb7:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5aeb9:  movslq %ebx,%r14
    0.00 :   5aebc:  mov    $0x20,%esi
    0.00 :   5aec1:  mov    %r12,%rdi
    0.00 :   5aec4:  mov    %r14,%rdx
    0.00 :   5aec7:  call   824e0 <_IO_wpadn>
    0.00 :   5aecc:  cmp    %r14,%rax
    0.00 :   5aecf:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5aed5:  add    %ebx,%r13d
    0.00 :   5aed8:  mov    -0x38(%rbp),%rax
    0.00 :   5aedc:  sub    %fs:0x28,%rax
    0.00 :   5aee5:  jne    5d4ba <__GI___printf_fp_l+0x2b8a>
    0.00 :   5aeeb:  lea    -0x28(%rbp),%rsp
    0.34 :   5aeef:  mov    %r13d,%eax
    0.00 :   5aef2:  pop    %rbx
    0.00 :   5aef3:  pop    %r12
    0.00 :   5aef5:  pop    %r13
    0.00 :   5aef7:  pop    %r14
    0.00 :   5aef9:  pop    %r15
    0.00 :   5aefb:  pop    %rbp
    0.00 :   5aefc:  ret
    0.00 :   5aefd:  nopl   (%rax)
    0.00 :   5af00:  sub    $0x4,%ebx
    0.00 :   5af03:  test   %ebx,%ebx
    0.00 :   5af05:  setg   %r15b
    0.00 :   5af09:  jg     5adbc <__GI___printf_fp_l+0x48c>
    0.00 :   5af0f:  jmp    5adc4 <__GI___printf_fp_l+0x494>
    0.00 :   5af14:  nopl   0x0(%rax)
    0.00 :   5af18:  mov    0x28(%r12),%rax
    0.00 :   5af1d:  cmp    0x30(%r12),%rax
    0.00 :   5af22:  jae    5cff6 <__GI___printf_fp_l+0x26c6>
    0.00 :   5af28:  lea    0x1(%rax),%rdx
    0.00 :   5af2c:  mov    %rdx,0x28(%r12)
    0.00 :   5af31:  movb   $0x2d,(%rax)
    0.00 :   5af34:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5af39:  nopl   0x0(%rax)
    0.00 :   5af40:  call   806a0 <_IO_padn>
    0.00 :   5af45:  mov    -0xd0(%rbp),%rcx
    0.00 :   5af4c:  jmp    5ad2f <__GI___printf_fp_l+0x3ff>
    0.00 :   5af51:  nopl   0x0(%rax)
    0.00 :   5af58:  test   %dil,%dil
    0.00 :   5af5b:  jne    5b894 <__GI___printf_fp_l+0xf64>
    0.00 :   5af61:  mov    -0xf8(%rbp),%rsi
    0.00 :   5af68:  mov    0x8(%rsi),%rsi
    0.00 :   5af6c:  mov    0x48(%rsi),%rbx
    0.00 :   5af70:  mov    %rbx,-0x110(%rbp)
    0.00 :   5af77:  mov    %rbx,%rsi
    0.00 :   5af7a:  movzbl (%rsi),%ebx
    0.00 :   5af7d:  neg    %bl
    0.00 :   5af7f:  sbb    %edi,%edi
    0.00 :   5af81:  and    $0xfffffffe,%edi
    0.00 :   5af84:  cmpb   $0x0,(%rsi)
    0.00 :   5af87:  mov    $0x0,%esi
    0.00 :   5af8c:  cmovne -0xe8(%rbp),%rsi
    0.00 :   5af94:  mov    %edi,-0x114(%rbp)
    0.00 :   5af9a:  mov    %rsi,-0xe8(%rbp)
    0.00 :   5afa1:  jmp    5a9e2 <__GI___printf_fp_l+0xb2>
    0.00 :   5afa6:  cs nopw 0x0(%rax,%rax,1)
    0.68 :   5afb0:  lea    -0x60(%rbp),%r15
    0.00 :   5afb4:  lea    -0xa4(%rbp),%rcx
    0.00 :   5afbb:  mov    $0x2,%esi
    0.00 :   5afc0:  lea    -0x98(%rbp),%rdx
    0.00 :   5afc7:  mov    %r15,%rdi
    0.00 :   5afca:  call   564c0 <__mpn_extract_double>
    0.00 :   5afcf:  mov    %eax,%r14d
    0.00 :   5afd2:  mov    %rax,%r13
    0.57 :   5afd5:  shl    $0x6,%r14d
    0.00 :   5afd9:  sub    $0x34,%r14d
    0.00 :   5afdd:  mov    -0x98(%rbp),%ecx
    0.00 :   5afe3:  mov    %rsp,%rsi
    0.00 :   5afe6:  mov    %r13,-0x88(%rbp)
    0.00 :   5afed:  mov    %ecx,%eax
    0.00 :   5afef:  neg    %eax
    0.34 :   5aff1:  cmovs  %ecx,%eax
    0.00 :   5aff4:  add    $0x3f,%eax
    0.00 :   5aff7:  sar    $0x6,%eax
    0.00 :   5affa:  add    $0x4,%eax
    0.34 :   5affd:  cltq
    0.34 :   5afff:  lea    0x17(,%rax,8),%rax
    0.34 :   5b007:  mov    %rax,%rdi
    0.00 :   5b00a:  mov    %rax,%rdx
    0.00 :   5b00d:  and    $0xfffffffffffff000,%rdi
    0.34 :   5b014:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b018:  sub    %rdi,%rsi
    0.28 :   5b01b:  cmp    %rsi,%rsp
    0.00 :   5b01e:  je     5b035 <__GI___printf_fp_l+0x705>
    0.00 :   5b020:  sub    $0x1000,%rsp
    0.00 :   5b027:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b030:  cmp    %rsi,%rsp
    0.00 :   5b033:  jne    5b020 <__GI___printf_fp_l+0x6f0>
    0.00 :   5b035:  and    $0xfff,%edx
    0.00 :   5b03b:  sub    %rdx,%rsp
    0.00 :   5b03e:  test   %rdx,%rdx
    0.24 :   5b041:  jne    5b902 <__GI___printf_fp_l+0xfd2>
    0.00 :   5b047:  mov    %rax,%r8
    0.00 :   5b04a:  lea    0xf(%rsp),%rdi
    0.00 :   5b04f:  mov    %rsp,%rsi
    0.00 :   5b052:  mov    %rax,%rdx
    0.00 :   5b055:  and    $0xfffffffffffff000,%r8
    0.00 :   5b05c:  and    $0xfffffffffffffff0,%rdi
    0.00 :   5b060:  and    $0xfffffffffffffff0,%rdx
    0.58 :   5b064:  sub    %r8,%rsi
    0.00 :   5b067:  mov    %rdi,-0x90(%rbp)
    0.00 :   5b06e:  cmp    %rsi,%rsp
    0.00 :   5b071:  je     5b088 <__GI___printf_fp_l+0x758>
    0.00 :   5b073:  sub    $0x1000,%rsp
    0.00 :   5b07a:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b083:  cmp    %rsi,%rsp
    0.00 :   5b086:  jne    5b073 <__GI___printf_fp_l+0x743>
    0.00 :   5b088:  and    $0xfff,%edx
    0.00 :   5b08e:  sub    %rdx,%rsp
    0.00 :   5b091:  test   %rdx,%rdx
    0.00 :   5b094:  je     5b09c <__GI___printf_fp_l+0x76c>
    0.00 :   5b096:  orq    $0x0,-0x8(%rsp,%rdx,1)
    1.16 :   5b09c:  lea    0xf(%rsp),%rdx
    0.00 :   5b0a1:  mov    %rsp,%rsi
    0.00 :   5b0a4:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b0a8:  mov    %rdx,-0x70(%rbp)
    0.00 :   5b0ac:  mov    %rax,%rdx
    0.00 :   5b0af:  and    $0xfffffffffffff000,%rax
    0.00 :   5b0b5:  sub    %rax,%rsi
    0.00 :   5b0b8:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b0bc:  cmp    %rsi,%rsp
    0.00 :   5b0bf:  je     5b0d6 <__GI___printf_fp_l+0x7a6>
    0.00 :   5b0c1:  sub    $0x1000,%rsp
    0.00 :   5b0c8:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b0d1:  cmp    %rsi,%rsp
    0.00 :   5b0d4:  jne    5b0c1 <__GI___printf_fp_l+0x791>
    0.34 :   5b0d6:  mov    %rdx,%rax
    0.00 :   5b0d9:  and    $0xfff,%eax
    0.00 :   5b0de:  sub    %rax,%rsp
    0.00 :   5b0e1:  test   %rax,%rax
    0.00 :   5b0e4:  je     5b0ec <__GI___printf_fp_l+0x7bc>
    0.00 :   5b0e6:  orq    $0x0,-0x8(%rsp,%rax,1)
    0.35 :   5b0ec:  lea    0xf(%rsp),%rax
    0.00 :   5b0f1:  movq   $0x0,-0x78(%rbp)
    0.00 :   5b0f9:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b0fd:  mov    %rax,-0x80(%rbp)
    0.00 :   5b101:  cmp    $0x2,%ecx
    0.00 :   5b104:  jle    5c19b <__GI___printf_fp_l+0x186b>
    0.00 :   5b10a:  lea    (%rcx,%r14,1),%esi
    0.00 :   5b10e:  test   %esi,%esi
    0.00 :   5b110:  lea    0x3f(%rsi),%edx
    0.67 :   5b113:  cmovns %esi,%edx
    0.00 :   5b116:  sar    $0x6,%edx
    0.00 :   5b119:  test   $0x3f,%sil
    0.34 :   5b11d:  jne    5c895 <__GI___printf_fp_l+0x1f65>
    0.00 :   5b123:  test   %r13,%r13
    0.00 :   5b126:  jle    5cca1 <__GI___printf_fp_l+0x2371>
    0.00 :   5b12c:  movslq %edx,%rbx
    0.00 :   5b12f:  mov    %r15,%rsi
    0.00 :   5b132:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5b138:  lea    0x0(,%r13,8),%rdx
    0.00 :   5b140:  lea    (%rdi,%rbx,8),%rdi
    0.00 :   5b144:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   5b149:  mov    -0xd0(%rbp),%ecx
    0.00 :   5b14f:  add    %rbx,%r13
    0.00 :   5b152:  mov    %rbx,%rdx
    0.00 :   5b155:  mov    %r13,-0x88(%rbp)
    0.00 :   5b15c:  test   %rdx,%rdx
    0.00 :   5b15f:  jle    5b17f <__GI___printf_fp_l+0x84f>
    0.00 :   5b161:  mov    -0x90(%rbp),%rdi
    0.00 :   5b168:  shl    $0x3,%rdx
    0.00 :   5b16c:  xor    %esi,%esi
    0.00 :   5b16e:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5b174:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   5b179:  mov    -0xd0(%rbp),%ecx
    0.00 :   5b17f:  mov    $0xc,%r13d
    0.00 :   5b185:  xor    %r14d,%r14d
    0.00 :   5b188:  xor    %eax,%eax
    0.00 :   5b18a:  mov    -0x78(%rbp),%rdx
    0.00 :   5b18e:  lea    0x171ce3(%rip),%r15        # 1cce78 <_fpioconst_pow10+0x138>
    0.00 :   5b195:  mov    %r12,-0xd0(%rbp)
    0.63 :   5b19c:  mov    %r14d,%r12d
    0.00 :   5b19f:  mov    %r13d,%r14d
    0.00 :   5b1a2:  lea    -0x138(%r15),%rbx
    0.00 :   5b1a9:  mov    %eax,%r13d
    0.00 :   5b1ac:  jmp    5b20e <__GI___printf_fp_l+0x8de>
    0.00 :   5b1ae:  xchg   %ax,%ax
    0.00 :   5b1b0:  mov    -0xb8(%rbp),%rax
    0.00 :   5b1b7:  testb  $0x10,0xd(%rax)
    0.92 :   5b1bb:  jne    5b930 <__GI___printf_fp_l+0x1000>
    0.68 :   5b1c1:  mov    0x8(%r15),%rdx
    0.00 :   5b1c5:  mov    (%r15),%rax
    0.00 :   5b1c8:  lea    0x171cf1(%rip),%rcx        # 1ccec0 <__tens>
    0.35 :   5b1cf:  mov    %rdx,-0x68(%rbp)
    0.00 :   5b1d3:  lea    (%rcx,%rax,8),%rsi
    0.00 :   5b1d7:  shl    $0x3,%rdx
    0.00 :   5b1db:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   5b1e0:  mov    -0x68(%rbp),%rdx
    0.00 :   5b1e4:  cmp    %rdx,-0x88(%rbp)
    0.35 :   5b1eb:  jg     5b270 <__GI___printf_fp_l+0x940>
    0.00 :   5b1f1:  je     5c1e0 <__GI___printf_fp_l+0x18b0>
    0.24 :   5b1f7:  mov    -0x78(%rbp),%rdx
    0.00 :   5b1fb:  sub    $0x1,%r14d
    0.34 :   5b1ff:  cmp    %rbx,%r15
    0.00 :   5b202:  je     5b2c3 <__GI___printf_fp_l+0x993>
    0.00 :   5b208:  mov    -0x98(%rbp),%ecx
    0.31 :   5b20e:  mov    -0x8(%r15),%eax
    0.34 :   5b212:  sub    $0x18,%r15
    0.00 :   5b216:  add    %r12d,%eax
    0.67 :   5b219:  sub    $0x1,%eax
    2.27 :   5b21c:  cmp    %ecx,%eax
    1.67 :   5b21e:  jg     5b1fb <__GI___printf_fp_l+0x8cb>
    0.00 :   5b220:  mov    -0x70(%rbp),%rdi
    0.00 :   5b224:  test   %rdx,%rdx
    0.00 :   5b227:  je     5b1b0 <__GI___printf_fp_l+0x880>
    0.00 :   5b229:  mov    (%r15),%rcx
    0.00 :   5b22c:  mov    0x8(%r15),%rax
    0.00 :   5b230:  lea    0x171c89(%rip),%rsi        # 1ccec0 <__tens>
    0.00 :   5b237:  lea    0x8(%rsi,%rcx,8),%rcx
    0.00 :   5b23c:  mov    -0x80(%rbp),%rsi
    0.00 :   5b240:  lea    -0x1(%rax),%r8
    0.00 :   5b244:  call   54f90 <__mpn_mul>
    0.00 :   5b249:  mov    0x8(%r15),%rdx
    0.00 :   5b24d:  add    -0x78(%rbp),%rdx
    0.00 :   5b251:  test   %rax,%rax
    0.00 :   5b254:  je     5b978 <__GI___printf_fp_l+0x1048>
    0.00 :   5b25a:  sub    $0x1,%rdx
    0.00 :   5b25e:  mov    %rdx,-0x68(%rbp)
    0.00 :   5b262:  cmp    %rdx,-0x88(%rbp)
    0.00 :   5b269:  jle    5b1f1 <__GI___printf_fp_l+0x8c1>
    0.00 :   5b26b:  nopl   0x0(%rax,%rax,1)
    0.00 :   5b270:  mov    -0x70(%rbp),%rsi
    1.01 :   5b274:  mov    -0x80(%rbp),%rdi
    0.00 :   5b278:  mov    %rdx,-0x78(%rbp)
    0.00 :   5b27c:  shl    $0x3,%rdx
    0.00 :   5b280:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   5b285:  mov    -0x78(%rbp),%rdx
    0.00 :   5b289:  mov    -0x80(%rbp),%rax
    0.00 :   5b28d:  bsr    -0x8(%rax,%rdx,8),%rax
    2.93 :   5b293:  mov    %edx,%ecx
    0.00 :   5b295:  shl    $0x6,%ecx
    0.00 :   5b298:  lea    -0x81(%rcx),%r10d
    0.00 :   5b29f:  mov    %r14d,%ecx
    0.00 :   5b2a2:  sub    $0x1,%r14d
    0.00 :   5b2a6:  xor    $0x3f,%rax
    0.23 :   5b2aa:  sub    %eax,%r10d
    0.00 :   5b2ad:  mov    $0x1,%eax
    0.00 :   5b2b2:  shl    %cl,%eax
    0.00 :   5b2b4:  mov    %r10d,%r12d
    0.00 :   5b2b7:  or     %eax,%r13d
    0.00 :   5b2ba:  cmp    %rbx,%r15
    0.00 :   5b2bd:  jne    5b208 <__GI___printf_fp_l+0x8d8>
    0.00 :   5b2c3:  mov    %r13d,-0x98(%rbp)
    0.00 :   5b2ca:  mov    -0xd0(%rbp),%r12
    0.00 :   5b2d1:  test   %rdx,%rdx
    0.00 :   5b2d4:  jle    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5b2d6:  mov    -0x80(%rbp),%rdi
    0.00 :   5b2da:  bsr    -0x8(%rdi,%rdx,8),%rsi
    0.35 :   5b2e0:  mov    (%rdi),%rax
    0.00 :   5b2e3:  xor    $0x3f,%rsi
    0.00 :   5b2e7:  mov    %esi,%ecx
    0.00 :   5b2e9:  test   %rax,%rax
    0.00 :   5b2ec:  jne    5d3c0 <__GI___printf_fp_l+0x2a90>
    0.00 :   5b2f2:  mov    -0x90(%rbp),%r9
    0.00 :   5b2f9:  mov    %rdi,%rsi
    0.00 :   5b2fc:  xor    %r13d,%r13d
    0.00 :   5b2ff:  jmp    5b325 <__GI___printf_fp_l+0x9f5>
    0.00 :   5b301:  nopl   0x0(%rax)
    0.00 :   5b308:  mov    0x8(%rsi),%r8
    0.00 :   5b30c:  lea    0x1(%rax),%r14d
    0.00 :   5b310:  add    $0x8,%rsi
    0.00 :   5b314:  add    $0x1,%rax
    0.00 :   5b318:  add    $0x8,%r13
    0.00 :   5b31c:  test   %r8,%r8
    0.00 :   5b31f:  jne    5ca47 <__GI___printf_fp_l+0x2117>
    0.00 :   5b325:  mov    (%r9,%r13,1),%r8
    0.00 :   5b329:  mov    %eax,%r14d
    0.00 :   5b32c:  test   %r8,%r8
    0.00 :   5b32f:  je     5b308 <__GI___printf_fp_l+0x9d8>
    0.00 :   5b331:  test   %ecx,%ecx
    0.00 :   5b333:  jne    5cf27 <__GI___printf_fp_l+0x25f7>
    0.00 :   5b339:  test   %r14d,%r14d
    0.00 :   5b33c:  jne    5ceb1 <__GI___printf_fp_l+0x2581>
    0.00 :   5b342:  nopw   0x0(%rax,%rax,1)
    0.00 :   5b348:  mov    -0xb8(%rbp),%rsi
    0.00 :   5b34f:  mov    0x1bea92(%rip),%rdx        # 219de8 <_DYNAMIC+0x228>
    0.00 :   5b356:  mov    0x4(%rsi),%eax
    0.34 :   5b359:  movslq 0x8(%rsi),%rcx
    0.00 :   5b35d:  mov    (%rsi),%edi
    0.00 :   5b35f:  mov    %eax,-0x138(%rbp)
    0.00 :   5b365:  mov    %fs:(%rdx),%rdx
    0.00 :   5b369:  mov    %rcx,%rax
    0.00 :   5b36c:  mov    %edi,-0xf0(%rbp)
    0.00 :   5b372:  mov    (%rdx,%rcx,4),%ecx
    0.34 :   5b375:  mov    %ecx,-0x13c(%rbp)
    0.00 :   5b37b:  cmp    $0x65,%cl
    0.00 :   5b37e:  je     5c2a8 <__GI___printf_fp_l+0x1978>
    0.34 :   5b384:  cmpb   $0x66,-0x13c(%rbp)
    1.33 :   5b38b:  je     5c3d4 <__GI___printf_fp_l+0x1aa4>
    0.00 :   5b391:  movl   $0x6,-0x128(%rbp)
    0.00 :   5b39b:  test   %edi,%edi
    0.00 :   5b39d:  js     5b3ad <__GI___printf_fp_l+0xa7d>
    0.00 :   5b39f:  mov    $0x1,%edx
    0.00 :   5b3a4:  cmovne %edi,%edx
    0.00 :   5b3a7:  mov    %edx,-0x128(%rbp)
    0.00 :   5b3ad:  mov    -0xa0(%rbp),%r14d
    0.00 :   5b3b4:  mov    -0x98(%rbp),%edx
    0.00 :   5b3ba:  test   %r14d,%r14d
    0.24 :   5b3bd:  je     5c452 <__GI___printf_fp_l+0x1b22>
    0.00 :   5b3c3:  cmp    $0x4,%edx
    0.00 :   5b3c6:  jg     5c859 <__GI___printf_fp_l+0x1f29>
    0.00 :   5b3cc:  movl   $0x0,-0x118(%rbp)
    0.00 :   5b3d6:  mov    -0x128(%rbp),%eax
    0.00 :   5b3dc:  mov    %eax,-0xe0(%rbp)
    0.34 :   5b3e2:  movslq -0x128(%rbp),%rax
    0.00 :   5b3e9:  movl   $0x66,-0x9c(%rbp)
    0.00 :   5b3f3:  add    $0x5,%rax
    0.00 :   5b3f7:  mov    %rax,-0x120(%rbp)
    0.00 :   5b3fe:  mov    -0xb8(%rbp),%rax
    0.00 :   5b405:  xor    %esi,%esi
    0.00 :   5b407:  testb  $0x8,0xc(%rax)
    0.00 :   5b40b:  mov    -0xe0(%rbp),%eax
    1.00 :   5b411:  cmove  %esi,%eax
    1.02 :   5b414:  mov    %eax,-0xf0(%rbp)
    0.00 :   5b41a:  cmpq   $0x0,-0xe8(%rbp)
    0.00 :   5b422:  je     5c350 <__GI___printf_fp_l+0x1a20>
    0.00 :   5b428:  mov    -0xe8(%rbp),%rax
    0.00 :   5b42f:  movzbl (%rax),%eax
    0.00 :   5b432:  mov    %al,-0xd0(%rbp)
    0.00 :   5b438:  sub    $0x1,%eax
    0.00 :   5b43b:  cmp    $0x7d,%al
    0.00 :   5b43d:  ja     5c3c0 <__GI___printf_fp_l+0x1a90>
    0.00 :   5b443:  mov    -0x118(%rbp),%edx
    0.00 :   5b449:  mov    -0xe8(%rbp),%rax
    0.00 :   5b450:  xor    %r9d,%r9d
    0.00 :   5b453:  jmp    5b47d <__GI___printf_fp_l+0xb4d>
    0.00 :   5b455:  nopl   (%rax)
    0.00 :   5b458:  movzbl 0x1(%rax),%r8d
    0.00 :   5b45d:  add    $0x1,%rax
    0.00 :   5b461:  lea    0x1(%r9),%edi
    0.00 :   5b465:  sub    %ecx,%edx
    0.00 :   5b467:  cmp    $0x7e,%r8b
    0.00 :   5b46b:  ja     5c90b <__GI___printf_fp_l+0x1fdb>
    0.00 :   5b471:  test   %r8b,%r8b
    0.00 :   5b474:  je     5c91c <__GI___printf_fp_l+0x1fec>
    0.00 :   5b47a:  mov    %edi,%r9d
    0.00 :   5b47d:  movsbl (%rax),%ecx
    0.00 :   5b480:  cmp    %ecx,%edx
    0.00 :   5b482:  ja     5b458 <__GI___printf_fp_l+0xb28>
    0.00 :   5b484:  mov    %r9d,%eax
    0.00 :   5b487:  mov    %r9d,-0x124(%rbp)
    0.00 :   5b48e:  add    $0x1,%eax
    0.00 :   5b491:  cltq
    0.00 :   5b493:  add    %rax,-0x120(%rbp)
    0.00 :   5b49a:  movabs $0x3ffffffffffffffc,%rax
    0.00 :   5b4a4:  cmp    %rax,-0x120(%rbp)
    0.00 :   5b4ab:  ja     5c840 <__GI___printf_fp_l+0x1f10>
    0.00 :   5b4b1:  movslq -0xe0(%rbp),%rax
    0.64 :   5b4b8:  mov    -0x120(%rbp),%rdi
    0.34 :   5b4bf:  mov    %esi,-0xd0(%rbp)
    0.34 :   5b4c5:  cmp    %rdi,%rax
    0.00 :   5b4c8:  ja     5c840 <__GI___printf_fp_l+0x1f10>
    0.00 :   5b4ce:  lea    0x8(,%rdi,4),%r15
    0.00 :   5b4d6:  mov    %r15,%rdi
    0.00 :   5b4d9:  call   909a0 <__libc_alloca_cutoff>
    0.00 :   5b4de:  mov    -0xd0(%rbp),%esi
    0.00 :   5b4e4:  test   %eax,%eax
    0.00 :   5b4e6:  jne    5b4f5 <__GI___printf_fp_l+0xbc5>
    0.00 :   5b4e8:  cmp    $0x1000,%r15
    0.00 :   5b4ef:  ja     5ce5e <__GI___printf_fp_l+0x252e>
    0.00 :   5b4f5:  add    $0x17,%r15
    0.00 :   5b4f9:  mov    %rsp,%rdx
    0.00 :   5b4fc:  mov    %r15,%rax
    0.00 :   5b4ff:  and    $0xfffffffffffff000,%r15
    0.34 :   5b506:  sub    %r15,%rdx
    0.93 :   5b509:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b50d:  cmp    %rdx,%rsp
    0.00 :   5b510:  je     5b527 <__GI___printf_fp_l+0xbf7>
    0.00 :   5b512:  sub    $0x1000,%rsp
    0.00 :   5b519:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b522:  cmp    %rdx,%rsp
    0.00 :   5b525:  jne    5b512 <__GI___printf_fp_l+0xbe2>
    0.00 :   5b527:  and    $0xfff,%eax
    0.00 :   5b52c:  sub    %rax,%rsp
    0.00 :   5b52f:  test   %rax,%rax
    0.00 :   5b532:  je     5b53a <__GI___printf_fp_l+0xc0a>
    0.00 :   5b534:  orq    $0x0,-0x8(%rsp,%rax,1)
    1.43 :   5b53a:  movl   $0x1,-0x14c(%rbp)
    0.00 :   5b544:  lea    0xf(%rsp),%rax
    0.00 :   5b549:  movl   $0x0,-0x140(%rbp)
    0.00 :   5b553:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b557:  mov    %rax,-0x130(%rbp)
    0.00 :   5b55e:  mov    -0xa0(%rbp),%r13d
    0.00 :   5b565:  lea    0x8(%rax),%r14
    0.00 :   5b569:  test   %r13d,%r13d
    0.00 :   5b56c:  je     5b57b <__GI___printf_fp_l+0xc4b>
    0.00 :   5b56e:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5b575:  je     5c9f0 <__GI___printf_fp_l+0x20c0>
    0.00 :   5b57b:  mov    -0x118(%rbp),%eax
    0.00 :   5b581:  test   %eax,%eax
    0.00 :   5b583:  jle    5cfaa <__GI___printf_fp_l+0x267a>
    0.00 :   5b589:  mov    -0x130(%rbp),%rdi
    1.02 :   5b590:  sub    $0x1,%eax
    0.00 :   5b593:  mov    %r14,%r15
    0.00 :   5b596:  lea    -0xa0(%rbp),%r13
    0.00 :   5b59d:  lea    0xc(%rdi,%rax,4),%rbx
    0.68 :   5b5a2:  nopw   0x0(%rax,%rax,1)
    0.00 :   5b5a8:  mov    %r13,%rdi
    0.00 :   5b5ab:  add    $0x4,%r15
    0.00 :   5b5af:  call   5a4d0 <hack_digit>
    0.34 :   5b5b4:  mov    %eax,-0x4(%r15)
    0.00 :   5b5b8:  cmp    %rbx,%r15
    0.00 :   5b5bb:  jne    5b5a8 <__GI___printf_fp_l+0xc78>
    0.00 :   5b5bd:  mov    -0x118(%rbp),%eax
    0.33 :   5b5c3:  mov    %rax,%rcx
    0.00 :   5b5c6:  lea    (%r14,%rax,4),%rax
    0.00 :   5b5ca:  mov    %ecx,-0x134(%rbp)
    0.00 :   5b5d0:  mov    -0xb8(%rbp),%rdi
    0.34 :   5b5d7:  testb  $0x8,0xc(%rdi)
    0.00 :   5b5db:  jne    5b5eb <__GI___printf_fp_l+0xcbb>
    0.58 :   5b5dd:  mov    -0xf0(%rbp),%ebx
    0.00 :   5b5e3:  test   %ebx,%ebx
    0.00 :   5b5e5:  jle    5c9b4 <__GI___printf_fp_l+0x2084>
    0.00 :   5b5eb:  mov    -0xc0(%rbp),%ecx
    0.00 :   5b5f1:  lea    0x4(%rax),%r15
    0.00 :   5b5f5:  mov    $0x1,%esi
    0.34 :   5b5fa:  mov    %ecx,(%rax)
    0.00 :   5b5fc:  mov    -0xf0(%rbp),%eax
    0.00 :   5b602:  xor    %ebx,%ebx
    0.00 :   5b604:  mov    %r12,-0x148(%rbp)
    0.00 :   5b60b:  mov    %r13,%r12
    0.33 :   5b60e:  movl   $0x0,-0x100(%rbp)
    0.00 :   5b618:  mov    %ebx,%r13d
    0.00 :   5b61b:  mov    %esi,%ebx
    0.34 :   5b61d:  mov    %eax,-0xd0(%rbp)
    0.00 :   5b623:  mov    -0xd0(%rbp),%eax
    1.37 :   5b629:  mov    %eax,%r9d
    0.00 :   5b62c:  cmp    %r13d,%eax
    0.34 :   5b62f:  jg     5b64c <__GI___printf_fp_l+0xd1c>
    0.00 :   5b631:  cmp    %r13d,-0xe0(%rbp)
    0.94 :   5b638:  jle    5b999 <__GI___printf_fp_l+0x1069>
    0.00 :   5b63e:  cmpq   $0x1,-0x88(%rbp)
    1.24 :   5b646:  jle    5b988 <__GI___printf_fp_l+0x1058>
    0.00 :   5b64c:  mov    %r12,%rdi
    0.00 :   5b64f:  add    $0x1,%r13d
    0.00 :   5b653:  add    $0x4,%r15
    0.00 :   5b657:  call   5a4d0 <hack_digit>
    0.29 :   5b65c:  mov    %eax,-0x4(%r15)
    1.03 :   5b660:  test   %ebx,%ebx
    0.00 :   5b662:  jne    5b66d <__GI___printf_fp_l+0xd3d>
    0.00 :   5b664:  cmp    $0x30,%eax
    0.00 :   5b667:  je     5c030 <__GI___printf_fp_l+0x1700>
    0.00 :   5b66d:  mov    -0xd0(%rbp),%eax
    1.01 :   5b673:  mov    $0x1,%ebx
    0.00 :   5b678:  mov    %eax,%r9d
    0.34 :   5b67b:  cmp    %r13d,%eax
    0.68 :   5b67e:  jle    5b631 <__GI___printf_fp_l+0xd01>
    0.00 :   5b680:  jmp    5b64c <__GI___printf_fp_l+0xd1c>
    0.00 :   5b682:  nopw   0x0(%rax,%rax,1)
    0.00 :   5b688:  lea    -0x60(%rbp),%r15
    0.00 :   5b68c:  sub    $0x10,%rsp
    0.00 :   5b690:  lea    -0xa4(%rbp),%rcx
    0.00 :   5b697:  mov    $0x2,%esi
    0.00 :   5b69c:  lea    -0x98(%rbp),%rdx
    0.00 :   5b6a3:  mov    %r15,%rdi
    0.00 :   5b6a6:  fstpt  (%rsp)
    0.00 :   5b6a9:  call   56550 <__mpn_extract_long_double>
    0.00 :   5b6ae:  pop    %rcx
    0.00 :   5b6af:  pop    %rsi
    0.00 :   5b6b0:  mov    %eax,%r14d
    0.00 :   5b6b3:  mov    %rax,%r13
    0.00 :   5b6b6:  shl    $0x6,%r14d
    0.00 :   5b6ba:  sub    $0x3f,%r14d
    0.00 :   5b6be:  jmp    5afdd <__GI___printf_fp_l+0x6ad>
    0.00 :   5b6c3:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5b6ca:  mov    $0x2d,%esi
    0.00 :   5b6cf:  mov    %r12,%rdi
    0.00 :   5b6d2:  call   838b0 <__woverflow>
    0.00 :   5b6d7:  mov    -0xe0(%rbp),%r9d
    0.00 :   5b6de:  cmp    $0xffffffff,%eax
    0.00 :   5b6e1:  sete   %al
    0.00 :   5b6e4:  test   %al,%al
    0.00 :   5b6e6:  je     5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5b6ec:  mov    -0x14c(%rbp),%eax
    0.00 :   5b6f2:  test   %eax,%eax
    0.00 :   5b6f4:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5b6f6:  mov    -0x130(%rbp),%rdi
    0.00 :   5b6fd:  call   28370 <free@plt>
    0.00 :   5b702:  mov    $0xffffffff,%r13d
    0.00 :   5b708:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5b70d:  nopl   (%rax)
    0.00 :   5b710:  movzbl (%r14),%edx
    0.00 :   5b714:  mov    0x28(%r12),%rax
    0.00 :   5b719:  cmp    %rax,0x30(%r12)
    0.00 :   5b71e:  jbe    5cbf0 <__GI___printf_fp_l+0x22c0>
    0.00 :   5b724:  lea    0x1(%rax),%rcx
    0.00 :   5b728:  mov    %rcx,0x28(%r12)
    0.00 :   5b72d:  mov    %dl,(%rax)
    0.00 :   5b72f:  movzbl 0x1(%r14),%edx
    0.00 :   5b734:  mov    0x28(%r12),%rax
    0.00 :   5b739:  cmp    %rax,0x30(%r12)
    0.00 :   5b73e:  jbe    5cbd0 <__GI___printf_fp_l+0x22a0>
    0.00 :   5b744:  lea    0x1(%rax),%rcx
    0.00 :   5b748:  mov    %rcx,0x28(%r12)
    0.00 :   5b74d:  mov    %dl,(%rax)
    0.00 :   5b74f:  movzbl 0x2(%r14),%edx
    0.00 :   5b754:  mov    0x28(%r12),%rax
    0.00 :   5b759:  cmp    0x30(%r12),%rax
    0.00 :   5b75e:  jae    5cbb2 <__GI___printf_fp_l+0x2282>
    0.00 :   5b764:  lea    0x1(%rax),%rcx
    0.00 :   5b768:  mov    %rcx,0x28(%r12)
    0.00 :   5b76d:  mov    %dl,(%rax)
    0.00 :   5b76f:  mov    -0xb8(%rbp),%rax
    0.00 :   5b776:  add    $0x3,%r13d
    0.00 :   5b77a:  testb  $0x20,0xc(%rax)
    0.00 :   5b77e:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5b784:  test   %r15b,%r15b
    0.00 :   5b787:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5b78d:  movslq %ebx,%r14
    0.00 :   5b790:  mov    $0x20,%esi
    0.00 :   5b795:  mov    %r12,%rdi
    0.00 :   5b798:  mov    %r14,%rdx
    0.00 :   5b79b:  call   806a0 <_IO_padn>
    0.00 :   5b7a0:  jmp    5aecc <__GI___printf_fp_l+0x59c>
    0.00 :   5b7a5:  nopl   (%rax)
    0.00 :   5b7a8:  lea    -0x60(%rbp),%r15
    0.00 :   5b7ac:  lea    -0xa4(%rbp),%rcx
    0.00 :   5b7b3:  movdqa %xmm2,%xmm0
    0.00 :   5b7b7:  mov    $0x2,%esi
    0.00 :   5b7bc:  lea    -0x98(%rbp),%rdx
    0.00 :   5b7c3:  mov    %r15,%rdi
    0.00 :   5b7c6:  call   566b0 <__mpn_extract_float128>
    0.00 :   5b7cb:  mov    %eax,%r14d
    0.00 :   5b7ce:  mov    %rax,%r13
    0.00 :   5b7d1:  shl    $0x6,%r14d
    0.00 :   5b7d5:  sub    $0x70,%r14d
    0.00 :   5b7d9:  jmp    5afdd <__GI___printf_fp_l+0x6ad>
    0.00 :   5b7de:  xchg   %ax,%ax
    0.00 :   5b7e0:  mov    0x28(%r12),%rax
    0.00 :   5b7e5:  cmp    0x30(%r12),%rax
    0.00 :   5b7ea:  jae    5d1fe <__GI___printf_fp_l+0x28ce>
    0.00 :   5b7f0:  lea    0x1(%rax),%rdx
    0.00 :   5b7f4:  mov    %rdx,0x28(%r12)
    0.00 :   5b7f9:  movb   $0x2b,(%rax)
    0.00 :   5b7fc:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5b801:  mov    %r12,%rdi
    0.00 :   5b804:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5b80b:  call   838b0 <__woverflow>
    0.00 :   5b810:  mov    -0xd0(%rbp),%rcx
    0.00 :   5b817:  cmp    $0xffffffff,%eax
    0.00 :   5b81a:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5b820:  mov    0xa0(%r12),%rax
    0.00 :   5b828:  mov    0x4(%rcx),%esi
    0.00 :   5b82b:  add    $0x1,%r13d
    0.00 :   5b82f:  lea    0x8(%rcx),%r14
    0.00 :   5b833:  test   %rax,%rax
    0.00 :   5b836:  jne    5ae55 <__GI___printf_fp_l+0x525>
    0.00 :   5b83c:  mov    %r12,%rdi
    0.00 :   5b83f:  call   838b0 <__woverflow>
    0.00 :   5b844:  cmp    $0xffffffff,%eax
    0.00 :   5b847:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5b84d:  mov    0xa0(%r12),%rax
    0.00 :   5b855:  mov    (%r14),%esi
    0.00 :   5b858:  add    $0x1,%r13d
    0.00 :   5b85c:  test   %rax,%rax
    0.00 :   5b85f:  jne    5ae7d <__GI___printf_fp_l+0x54d>
    0.00 :   5b865:  mov    %r12,%rdi
    0.00 :   5b868:  call   838b0 <__woverflow>
    0.00 :   5b86d:  cmp    $0xffffffff,%eax
    0.00 :   5b870:  sete   %al
    0.00 :   5b873:  jmp    5ae9b <__GI___printf_fp_l+0x56b>
    0.00 :   5b878:  mov    -0xf8(%rbp),%rbx
    0.00 :   5b87f:  mov    0x20(%rbx),%rsi
    0.00 :   5b883:  mov    0x1a0(%rsi),%edi
    0.00 :   5b889:  mov    %edi,-0x114(%rbp)
    0.00 :   5b88f:  jmp    5abf2 <__GI___printf_fp_l+0x2c2>
    0.00 :   5b894:  mov    -0xf8(%rbp),%rdi
    0.00 :   5b89b:  mov    0x20(%rdi),%rsi
    0.00 :   5b89f:  mov    0x58(%rsi),%rsi
    0.00 :   5b8a3:  mov    %rsi,-0x110(%rbp)
    0.00 :   5b8aa:  jmp    5af7a <__GI___printf_fp_l+0x64a>
    0.00 :   5b8af:  movmskps %xmm2,%r13d
    0.00 :   5b8b3:  and    $0x8,%r13d
    0.00 :   5b8b7:  mov    -0xb8(%rbp),%rax
    0.00 :   5b8be:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5b8c5:  lea    0x17ce37(%rip),%r14        # 1d8703 <not_available+0x1a5>
    0.00 :   5b8cc:  movslq 0x8(%rax),%rcx
    0.00 :   5b8d0:  mov    0x1be521(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5b8d7:  mov    %fs:(%rax),%rax
    0.00 :   5b8db:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5b8e0:  lea    0x187139(%rip),%rax        # 1e2a20 <default_rwlockattr+0x348>
    0.00 :   5b8e7:  lea    0x187112(%rip),%rcx        # 1e2a00 <default_rwlockattr+0x328>
    0.00 :   5b8ee:  cmove  %rax,%rcx
    0.00 :   5b8f2:  lea    0x17ccdb(%rip),%rax        # 1d85d4 <not_available+0x76>
    0.00 :   5b8f9:  cmove  %rax,%r14
    0.00 :   5b8fd:  jmp    5aadc <__GI___printf_fp_l+0x1ac>
    0.00 :   5b902:  orq    $0x0,-0x8(%rsp,%rdx,1)
    1.95 :   5b908:  jmp    5b047 <__GI___printf_fp_l+0x717>
    0.00 :   5b90d:  mov    0x28(%r12),%rax
    0.00 :   5b912:  cmp    0x30(%r12),%rax
    0.00 :   5b917:  jae    5d406 <__GI___printf_fp_l+0x2ad6>
    0.00 :   5b91d:  lea    0x1(%rax),%rdx
    0.00 :   5b921:  mov    %rdx,0x28(%r12)
    0.00 :   5b926:  movb   $0x20,(%rax)
    0.00 :   5b929:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5b92e:  xchg   %ax,%ax
    0.00 :   5b930:  mov    0x8(%r15),%rax
    0.00 :   5b934:  lea    0x171585(%rip),%rcx        # 1ccec0 <__tens>
    0.00 :   5b93b:  add    $0x8,%rdi
    0.00 :   5b93f:  lea    0x1(%rax),%rdx
    0.00 :   5b943:  mov    (%r15),%rax
    0.00 :   5b946:  mov    %rdx,-0x68(%rbp)
    0.00 :   5b94a:  shl    $0x3,%rdx
    0.00 :   5b94e:  lea    (%rcx,%rax,8),%rsi
    0.00 :   5b952:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   5b957:  mov    -0x70(%rbp),%rax
    0.00 :   5b95b:  movq   $0x0,(%rax)
    0.00 :   5b962:  mov    -0x68(%rbp),%rdx
    0.00 :   5b966:  addl   $0x40,-0x98(%rbp)
    0.00 :   5b96d:  jmp    5b1e4 <__GI___printf_fp_l+0x8b4>
    0.00 :   5b972:  nopw   0x0(%rax,%rax,1)
    0.00 :   5b978:  sub    $0x2,%rdx
    0.00 :   5b97c:  mov    %rdx,-0x68(%rbp)
    0.00 :   5b980:  jmp    5b1e4 <__GI___printf_fp_l+0x8b4>
    0.00 :   5b985:  nopl   (%rax)
    0.00 :   5b988:  mov    -0x90(%rbp),%rax
    0.35 :   5b98f:  cmpq   $0x0,(%rax)
    0.00 :   5b993:  jne    5b64c <__GI___printf_fp_l+0xd1c>
    0.00 :   5b999:  mov    %r13d,%ebx
    0.00 :   5b99c:  mov    %r12,%r13
    0.00 :   5b99f:  mov    -0x148(%rbp),%r12
    0.58 :   5b9a6:  mov    -0x4(%r15),%edx
    1.03 :   5b9aa:  cmp    -0xc0(%rbp),%edx
    0.00 :   5b9b0:  jne    5b9b6 <__GI___printf_fp_l+0x1086>
    0.00 :   5b9b2:  mov    -0x8(%r15),%edx
    0.00 :   5b9b6:  mov    %r13,%rdi
    0.00 :   5b9b9:  mov    %edx,-0xe0(%rbp)
    0.00 :   5b9bf:  mov    %r9d,-0xd0(%rbp)
    0.00 :   5b9c6:  call   5a4d0 <hack_digit>
    0.00 :   5b9cb:  mov    -0xd0(%rbp),%r9d
    0.00 :   5b9d2:  mov    -0xe0(%rbp),%edx
    0.00 :   5b9d8:  cmp    $0x30,%eax
    0.00 :   5b9db:  mov    %eax,%esi
    0.00 :   5b9dd:  setne  %dil
    0.00 :   5b9e1:  cmp    $0x35,%eax
    0.00 :   5b9e4:  setne  %al
    0.00 :   5b9e7:  and    %al,%dil
    0.00 :   5b9ea:  jne    5ba2b <__GI___printf_fp_l+0x10fb>
    0.00 :   5b9ec:  mov    -0x88(%rbp),%rax
    1.37 :   5b9f3:  cmp    $0x1,%rax
    0.00 :   5b9f7:  je     5ca21 <__GI___printf_fp_l+0x20f1>
    0.00 :   5b9fd:  cmpq   $0x0,-0x78(%rbp)
    0.00 :   5ba02:  jne    5ba26 <__GI___printf_fp_l+0x10f6>
    0.00 :   5ba04:  mov    -0x90(%rbp),%r10
    0.00 :   5ba0b:  test   %rax,%rax
    0.00 :   5ba0e:  jne    5ba1e <__GI___printf_fp_l+0x10ee>
    0.00 :   5ba10:  jmp    5ba2b <__GI___printf_fp_l+0x10fb>
    0.00 :   5ba12:  nopw   0x0(%rax,%rax,1)
    0.00 :   5ba18:  sub    $0x1,%rax
    0.00 :   5ba1c:  je     5ba2b <__GI___printf_fp_l+0x10fb>
    0.00 :   5ba1e:  cmpq   $0x0,-0x8(%r10,%rax,8)
    0.00 :   5ba24:  je     5ba18 <__GI___printf_fp_l+0x10e8>
    0.00 :   5ba26:  mov    $0x1,%edi
    0.00 :   5ba2b:  fnstcw -0xa6(%rbp)
    1.58 :   5ba31:  movzwl -0xa6(%rbp),%eax
    1.65 :   5ba38:  and    $0xc00,%ax
    0.35 :   5ba3c:  cmp    $0x800,%ax
    0.27 :   5ba40:  je     5c75c <__GI___printf_fp_l+0x1e2c>
    0.00 :   5ba46:  ja     5c060 <__GI___printf_fp_l+0x1730>
    0.00 :   5ba4c:  test   %ax,%ax
    0.00 :   5ba4f:  jne    5c070 <__GI___printf_fp_l+0x1740>
    0.00 :   5ba55:  cmp    $0x34,%esi
    0.00 :   5ba58:  jle    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5ba5a:  and    $0x1,%edx
    0.27 :   5ba5d:  jne    5c093 <__GI___printf_fp_l+0x1763>
    0.00 :   5ba63:  test   %dil,%dil
    0.00 :   5ba66:  jne    5c093 <__GI___printf_fp_l+0x1763>
    0.00 :   5ba6c:  nopl   0x0(%rax)
    0.00 :   5ba70:  cmp    %r9d,%ebx
    0.34 :   5ba73:  jg     5ba8c <__GI___printf_fp_l+0x115c>
    0.00 :   5ba75:  jmp    5ba93 <__GI___printf_fp_l+0x1163>
    0.00 :   5ba77:  nopw   0x0(%rax,%rax,1)
    0.00 :   5ba80:  sub    $0x1,%ebx
    0.00 :   5ba83:  sub    $0x4,%r15
    0.00 :   5ba87:  cmp    %r9d,%ebx
    0.00 :   5ba8a:  jle    5ba93 <__GI___printf_fp_l+0x1163>
    0.00 :   5ba8c:  cmpl   $0x30,-0x4(%r15)
    1.02 :   5ba91:  je     5ba80 <__GI___printf_fp_l+0x1150>
    0.34 :   5ba93:  test   %ebx,%ebx
    0.00 :   5ba95:  jne    5bab8 <__GI___printf_fp_l+0x1188>
    0.00 :   5ba97:  mov    -0xb8(%rbp),%rax
    0.00 :   5ba9e:  testb  $0x8,0xc(%rax)
    0.00 :   5baa2:  jne    5bab8 <__GI___printf_fp_l+0x1188>
    0.00 :   5baa4:  mov    -0xc0(%rbp),%eax
    0.00 :   5baaa:  cmp    %eax,-0x4(%r15)
    0.00 :   5baae:  jne    5bab8 <__GI___printf_fp_l+0x1188>
    0.00 :   5bab0:  sub    $0x4,%r15
    0.00 :   5bab4:  nopl   0x0(%rax)
    0.00 :   5bab8:  mov    -0xe8(%rbp),%rcx
    0.00 :   5babf:  test   %rcx,%rcx
    0.00 :   5bac2:  je     5bc1a <__GI___printf_fp_l+0x12ea>
    0.00 :   5bac8:  mov    -0x134(%rbp),%edx
    0.00 :   5bace:  mov    -0x118(%rbp),%eax
    0.00 :   5bad4:  mov    %edx,%ebx
    0.00 :   5bad6:  cmp    %eax,%edx
    0.00 :   5bad8:  je     5bb27 <__GI___printf_fp_l+0x11f7>
    0.00 :   5bada:  movl   $0x0,-0x124(%rbp)
    0.00 :   5bae4:  movzbl (%rcx),%eax
    0.00 :   5bae7:  mov    %al,-0xd0(%rbp)
    0.00 :   5baed:  sub    $0x1,%eax
    0.00 :   5baf0:  cmp    $0x7d,%al
    0.00 :   5baf2:  ja     5bc1a <__GI___printf_fp_l+0x12ea>
    0.00 :   5baf8:  mov    %rcx,%rax
    0.00 :   5bafb:  xor    %esi,%esi
    0.00 :   5bafd:  jmp    5bb1a <__GI___printf_fp_l+0x11ea>
    0.00 :   5baff:  nop
    0.00 :   5bb00:  movzbl 0x1(%rax),%ecx
    0.00 :   5bb04:  add    $0x1,%rax
    0.00 :   5bb08:  add    $0x1,%esi
    0.00 :   5bb0b:  sub    %edi,%edx
    0.00 :   5bb0d:  cmp    $0x7e,%cl
    0.00 :   5bb10:  ja     5bb21 <__GI___printf_fp_l+0x11f1>
    0.00 :   5bb12:  test   %cl,%cl
    0.00 :   5bb14:  je     5ce02 <__GI___printf_fp_l+0x24d2>
    0.00 :   5bb1a:  movsbl (%rax),%edi
    0.00 :   5bb1d:  cmp    %edi,%edx
    0.00 :   5bb1f:  ja     5bb00 <__GI___printf_fp_l+0x11d0>
    0.00 :   5bb21:  mov    %esi,-0x124(%rbp)
    0.00 :   5bb27:  mov    -0x124(%rbp),%edi
    0.00 :   5bb2d:  test   %edi,%edi
    0.00 :   5bb2f:  je     5bc1a <__GI___printf_fp_l+0x12ea>
    0.00 :   5bb35:  movslq -0x134(%rbp),%rax
    0.00 :   5bb3c:  movslq %edi,%r13
    0.00 :   5bb3f:  mov    %r15,%rdx
    0.00 :   5bb42:  lea    (%r14,%rax,4),%rsi
    0.00 :   5bb46:  add    %r13,%rax
    0.00 :   5bb49:  lea    0x0(,%rax,4),%rcx
    0.00 :   5bb51:  sub    %rsi,%rdx
    0.00 :   5bb54:  lea    (%r14,%rcx,1),%rdi
    0.00 :   5bb58:  sar    $0x2,%rdx
    0.00 :   5bb5c:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5bb63:  call   c5af0 <wmemmove>
    0.00 :   5bb68:  mov    -0xd0(%rbp),%rcx
    0.00 :   5bb6f:  mov    -0x114(%rbp),%r8d
    0.00 :   5bb76:  lea    -0x4(%r14,%rcx,1),%rdi
    0.00 :   5bb7b:  mov    -0xe8(%rbp),%rcx
    0.00 :   5bb82:  movsbl (%rcx),%r9d
    0.00 :   5bb86:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   5bb90:  mov    %ebx,%esi
    0.00 :   5bb92:  mov    %rdi,%rax
    0.00 :   5bb95:  sub    %r9d,%esi
    0.00 :   5bb98:  nopl   0x0(%rax,%rax,1)
    0.00 :   5bba0:  lea    -0x1(%rbx),%edx
    0.00 :   5bba3:  sub    $0x4,%rax
    0.00 :   5bba7:  mov    %rdx,%rbx
    0.00 :   5bbaa:  mov    (%r14,%rdx,4),%edx
    0.00 :   5bbae:  mov    %edx,0x4(%rax)
    0.00 :   5bbb1:  cmp    %esi,%ebx
    0.00 :   5bbb3:  jne    5bba0 <__GI___printf_fp_l+0x1270>
    0.00 :   5bbb5:  lea    -0x1(%r9),%eax
    0.00 :   5bbb9:  neg    %rax
    0.00 :   5bbbc:  shl    $0x2,%rax
    0.00 :   5bbc0:  lea    -0x4(%rdi,%rax,1),%rdx
    0.00 :   5bbc5:  lea    -0x8(%rdi,%rax,1),%rdi
    0.00 :   5bbca:  mov    %r8d,(%rdx)
    0.00 :   5bbcd:  movsbl 0x1(%rcx),%r9d
    0.00 :   5bbd2:  cmp    $0x7e,%r9b
    0.00 :   5bbd6:  ja     5bc00 <__GI___printf_fp_l+0x12d0>
    0.00 :   5bbd8:  test   %r9b,%r9b
    0.00 :   5bbdb:  je     5bbf0 <__GI___printf_fp_l+0x12c0>
    0.00 :   5bbdd:  add    $0x1,%rcx
    0.00 :   5bbe1:  cmp    %esi,%r9d
    0.00 :   5bbe4:  jae    5bc00 <__GI___printf_fp_l+0x12d0>
    0.00 :   5bbe6:  mov    %esi,%ebx
    0.00 :   5bbe8:  jmp    5bb90 <__GI___printf_fp_l+0x1260>
    0.00 :   5bbea:  nopw   0x0(%rax,%rax,1)
    0.00 :   5bbf0:  movsbl (%rcx),%r9d
    0.00 :   5bbf4:  cmp    %esi,%r9d
    0.00 :   5bbf7:  jb     5bbe6 <__GI___printf_fp_l+0x12b6>
    0.00 :   5bbf9:  nopl   0x0(%rax)
    0.00 :   5bc00:  lea    -0x1(%rsi),%eax
    0.00 :   5bc03:  sub    $0x4,%rdi
    0.00 :   5bc07:  mov    %rax,%rsi
    0.00 :   5bc0a:  mov    (%r14,%rax,4),%eax
    0.00 :   5bc0e:  mov    %eax,0x4(%rdi)
    0.00 :   5bc11:  cmp    %r14,%rdi
    0.00 :   5bc14:  ja     5bc00 <__GI___printf_fp_l+0x12d0>
    0.00 :   5bc16:  lea    (%r15,%r13,4),%r15
    0.00 :   5bc1a:  mov    -0x9c(%rbp),%edx
    0.00 :   5bc20:  cmp    $0x66,%edx
    0.68 :   5bc23:  je     5bcb3 <__GI___printf_fp_l+0x1383>
    0.00 :   5bc29:  mov    -0xa0(%rbp),%ecx
    0.00 :   5bc2f:  mov    -0x98(%rbp),%eax
    0.00 :   5bc35:  mov    $0x2b,%edi
    0.00 :   5bc3a:  test   %ecx,%ecx
    0.00 :   5bc3c:  jne    5d037 <__GI___printf_fp_l+0x2707>
    0.00 :   5bc42:  movd   %edx,%xmm0
    0.00 :   5bc46:  movd   %edi,%xmm3
    0.00 :   5bc4a:  lea    0x8(%r15),%rsi
    0.00 :   5bc4e:  punpckldq %xmm3,%xmm0
    0.00 :   5bc52:  movq   %xmm0,(%r15)
    0.00 :   5bc57:  cmp    $0x9,%eax
    0.00 :   5bc5a:  jle    5c33d <__GI___printf_fp_l+0x1a0d>
    0.00 :   5bc60:  mov    $0xa,%ecx
    0.00 :   5bc65:  nopl   (%rax)
    0.00 :   5bc68:  lea    (%rcx,%rcx,4),%ecx
    0.00 :   5bc6b:  add    %ecx,%ecx
    0.00 :   5bc6d:  cmp    %eax,%ecx
    0.00 :   5bc6f:  jle    5bc68 <__GI___printf_fp_l+0x1338>
    0.00 :   5bc71:  nopl   0x0(%rax)
    0.00 :   5bc78:  movslq %ecx,%rcx
    0.00 :   5bc7b:  add    $0x4,%rsi
    0.00 :   5bc7f:  mov    %rcx,%rdi
    0.00 :   5bc82:  imul   $0x66666667,%rcx,%rcx
    0.00 :   5bc89:  mov    %edi,%edx
    0.00 :   5bc8b:  sar    $0x1f,%edx
    0.00 :   5bc8e:  sar    $0x22,%rcx
    0.00 :   5bc92:  sub    %edx,%ecx
    0.00 :   5bc94:  cltd
    0.00 :   5bc95:  idiv   %ecx
    0.00 :   5bc97:  add    $0x30,%eax
    0.00 :   5bc9a:  mov    %eax,-0x4(%rsi)
    0.00 :   5bc9d:  mov    %edx,%eax
    0.00 :   5bc9f:  cmp    $0x6d,%edi
    0.00 :   5bca2:  jg     5bc78 <__GI___printf_fp_l+0x1348>
    0.00 :   5bca4:  mov    %edx,-0x98(%rbp)
    0.00 :   5bcaa:  add    $0x30,%eax
    0.00 :   5bcad:  lea    0x4(%rsi),%r15
    0.00 :   5bcb1:  mov    %eax,(%rsi)
    0.00 :   5bcb3:  mov    -0xb8(%rbp),%rcx
    0.34 :   5bcba:  mov    -0xa4(%rbp),%eax
    0.00 :   5bcc0:  mov    %r15,%rbx
    0.00 :   5bcc3:  sub    %r14,%rbx
    0.00 :   5bcc6:  movzbl 0xc(%rcx),%edx
    0.00 :   5bcca:  test   %eax,%eax
    0.00 :   5bccc:  jne    5c138 <__GI___printf_fp_l+0x1808>
    0.00 :   5bcd2:  test   $0x50,%dl
    0.68 :   5bcd5:  jne    5c138 <__GI___printf_fp_l+0x1808>
    0.00 :   5bcdb:  mov    -0x138(%rbp),%edi
    0.34 :   5bce1:  mov    %rbx,%rax
    0.34 :   5bce4:  sar    $0x2,%rax
    0.00 :   5bce8:  sub    %eax,%edi
    0.00 :   5bcea:  mov    %edi,-0xd0(%rbp)
    0.00 :   5bcf0:  test   $0x20,%dl
    0.00 :   5bcf3:  jne    5c903 <__GI___printf_fp_l+0x1fd3>
    0.00 :   5bcf9:  mov    0x10(%rcx),%esi
    0.00 :   5bcfc:  cmp    $0x30,%esi
    0.00 :   5bcff:  je     5c903 <__GI___printf_fp_l+0x1fd3>
    0.00 :   5bd05:  mov    -0xd0(%rbp),%eax
    1.60 :   5bd0b:  test   %eax,%eax
    0.00 :   5bd0d:  jle    5c903 <__GI___printf_fp_l+0x1fd3>
    0.00 :   5bd13:  movslq -0xd0(%rbp),%r13
    0.00 :   5bd1a:  mov    -0xbc(%rbp),%eax
    0.00 :   5bd20:  mov    %r12,%rdi
    0.00 :   5bd23:  mov    %r13,%rdx
    0.00 :   5bd26:  test   %eax,%eax
    0.00 :   5bd28:  je     5ce9b <__GI___printf_fp_l+0x256b>
    0.00 :   5bd2e:  call   824e0 <_IO_wpadn>
    0.00 :   5bd33:  cmp    %r13,%rax
    0.00 :   5bd36:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
    0.00 :   5bd3c:  mov    -0xa4(%rbp),%eax
    0.00 :   5bd42:  mov    -0xd0(%rbp),%r9d
    0.00 :   5bd49:  test   %eax,%eax
    0.00 :   5bd4b:  je     5c360 <__GI___printf_fp_l+0x1a30>
    0.00 :   5bd51:  mov    -0xbc(%rbp),%r11d
    0.00 :   5bd58:  test   %r11d,%r11d
    0.00 :   5bd5b:  je     5c6f0 <__GI___printf_fp_l+0x1dc0>
    0.00 :   5bd61:  mov    0xa0(%r12),%rax
    0.00 :   5bd69:  test   %rax,%rax
    0.00 :   5bd6c:  je     5b6c3 <__GI___printf_fp_l+0xd93>
    0.00 :   5bd72:  mov    0x20(%rax),%rdx
    0.00 :   5bd76:  cmp    0x28(%rax),%rdx
    0.00 :   5bd7a:  jae    5b6c3 <__GI___printf_fp_l+0xd93>
    0.00 :   5bd80:  lea    0x4(%rdx),%rsi
    0.00 :   5bd84:  mov    %rsi,0x20(%rax)
    0.00 :   5bd88:  movl   $0x2d,(%rdx)
    0.00 :   5bd8e:  mov    -0xb8(%rbp),%rax
    0.00 :   5bd95:  add    $0x1,%r9d
    0.00 :   5bd99:  movzbl 0xc(%rax),%eax
    0.00 :   5bd9d:  test   $0x20,%al
    0.34 :   5bd9f:  jne    5bdbc <__GI___printf_fp_l+0x148c>
    0.00 :   5bda1:  mov    -0xb8(%rbp),%rax
    0.00 :   5bda8:  cmpl   $0x30,0x10(%rax)
    0.68 :   5bdac:  jne    5bdbc <__GI___printf_fp_l+0x148c>
    0.00 :   5bdae:  mov    -0xd0(%rbp),%edi
    0.00 :   5bdb4:  test   %edi,%edi
    0.00 :   5bdb6:  jg     5ce16 <__GI___printf_fp_l+0x24e6>
    0.68 :   5bdbc:  mov    -0xbc(%rbp),%ecx
    0.00 :   5bdc2:  mov    -0xb8(%rbp),%rax
    0.00 :   5bdc9:  test   %ecx,%ecx
    0.00 :   5bdcb:  jne    5c208 <__GI___printf_fp_l+0x18d8>
    0.00 :   5bdd1:  testb  $0x8,0xd(%rax)
    0.00 :   5bdd5:  je     5bdf6 <__GI___printf_fp_l+0x14c6>
    0.00 :   5bdd7:  mov    -0xf8(%rbp),%rax
    0.00 :   5bdde:  mov    (%rax),%rax
    0.00 :   5bde1:  mov    0xa8(%rax),%eax
    0.00 :   5bde7:  imul   -0x120(%rbp),%rax
    0.00 :   5bdef:  mov    %rax,-0x120(%rbp)
    0.68 :   5bdf6:  mov    -0x108(%rbp),%rdi
    0.00 :   5bdfd:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5be04:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   5be09:  mov    -0x110(%rbp),%rdi
    0.00 :   5be10:  mov    -0xe0(%rbp),%r9d
    0.34 :   5be17:  mov    %rax,%rbx
    0.00 :   5be1a:  test   %rdi,%rdi
    0.00 :   5be1d:  je     5cba8 <__GI___printf_fp_l+0x2278>
    0.00 :   5be23:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   5be28:  mov    -0xe0(%rbp),%r9d
    0.00 :   5be2f:  mov    %rax,%r13
    0.00 :   5be32:  movslq -0x124(%rbp),%rax
    0.00 :   5be39:  imul   %r13,%rax
    0.00 :   5be3d:  mov    -0x120(%rbp),%rdi
    0.00 :   5be44:  lea    0x2(%rdi,%rbx,1),%rdx
    0.00 :   5be49:  add    %rdx,%rax
    0.00 :   5be4c:  mov    -0x140(%rbp),%edx
    0.00 :   5be52:  mov    %rax,-0xf0(%rbp)
    0.00 :   5be59:  test   %edx,%edx
    0.00 :   5be5b:  jne    5d14c <__GI___printf_fp_l+0x281c>
    0.00 :   5be61:  add    $0x17,%rax
    0.00 :   5be65:  mov    %rsp,%rsi
    0.00 :   5be68:  mov    %rax,%rdx
    0.33 :   5be6b:  and    $0xfffffffffffff000,%rax
    0.34 :   5be71:  sub    %rax,%rsi
    0.00 :   5be74:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5be78:  cmp    %rsi,%rsp
    0.00 :   5be7b:  je     5be92 <__GI___printf_fp_l+0x1562>
    0.00 :   5be7d:  sub    $0x1000,%rsp
    0.00 :   5be84:  orq    $0x0,0xff8(%rsp)
    0.00 :   5be8d:  cmp    %rsi,%rsp
    0.00 :   5be90:  jne    5be7d <__GI___printf_fp_l+0x154d>
    0.00 :   5be92:  and    $0xfff,%edx
    0.00 :   5be98:  sub    %rdx,%rsp
    0.00 :   5be9b:  test   %rdx,%rdx
    0.00 :   5be9e:  je     5bea6 <__GI___printf_fp_l+0x1576>
    0.00 :   5bea0:  orq    $0x0,-0x8(%rsp,%rdx,1)
    3.07 :   5bea6:  lea    0xf(%rsp),%rax
    0.00 :   5beab:  and    $0xfffffffffffffff0,%rax
    0.00 :   5beaf:  mov    %rax,-0xe0(%rbp)
    0.00 :   5beb6:  cmp    %r14,%r15
    0.00 :   5beb9:  jbe    5d0b5 <__GI___printf_fp_l+0x2785>
    0.00 :   5bebf:  mov    %r13,-0xe8(%rbp)
    0.00 :   5bec6:  mov    -0xe0(%rbp),%rdi
    0.57 :   5becd:  mov    %r12,-0x100(%rbp)
    0.00 :   5bed4:  mov    -0x114(%rbp),%r13d
    0.00 :   5bedb:  mov    %r15,%r12
    0.00 :   5bede:  mov    %r14,%r15
    0.00 :   5bee1:  mov    %r9d,-0xf8(%rbp)
    0.00 :   5bee8:  mov    %rbx,%r14
    0.00 :   5beeb:  mov    -0xc0(%rbp),%ebx
    0.00 :   5bef1:  jmp    5bf10 <__GI___printf_fp_l+0x15e0>
    0.00 :   5bef3:  nopl   0x0(%rax,%rax,1)
    0.00 :   5bef8:  cmp    %edx,%r13d
    0.00 :   5befb:  je     5c180 <__GI___printf_fp_l+0x1850>
    0.34 :   5bf01:  mov    %dl,(%rdi)
    1.94 :   5bf03:  add    $0x1,%rdi
    0.00 :   5bf07:  add    $0x4,%r15
    0.00 :   5bf0b:  cmp    %r15,%r12
    0.00 :   5bf0e:  jbe    5bf32 <__GI___printf_fp_l+0x1602>
    0.00 :   5bf10:  mov    (%r15),%edx
    0.00 :   5bf13:  cmp    %ebx,%edx
    0.00 :   5bf15:  jne    5bef8 <__GI___printf_fp_l+0x15c8>
    0.00 :   5bf17:  mov    -0x108(%rbp),%rsi
    0.00 :   5bf1e:  mov    %r14,%rdx
    0.00 :   5bf21:  add    $0x4,%r15
    0.00 :   5bf25:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   5bf2a:  mov    %rax,%rdi
    0.00 :   5bf2d:  cmp    %r15,%r12
    0.00 :   5bf30:  ja     5bf10 <__GI___printf_fp_l+0x15e0>
    0.00 :   5bf32:  mov    -0xb8(%rbp),%rax
    0.34 :   5bf39:  mov    -0xf8(%rbp),%r9d
    0.00 :   5bf40:  mov    -0x100(%rbp),%r12
    0.00 :   5bf47:  testb  $0x8,0xd(%rax)
    1.68 :   5bf4b:  jne    5d0e5 <__GI___printf_fp_l+0x27b5>
    0.34 :   5bf51:  mov    -0xe0(%rbp),%r14
    0.65 :   5bf58:  sub    %r14,%rdi
    0.00 :   5bf5b:  mov    %rdi,%rbx
    0.00 :   5bf5e:  mov    %rdi,%r8
    0.00 :   5bf61:  cmp    $0x14,%rdi
    0.00 :   5bf65:  jle    5c7ad <__GI___printf_fp_l+0x1e7d>
    0.00 :   5bf6b:  mov    0xd8(%r12),%rbx
    0.00 :   5bf73:  lea    0x1baa86(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   5bf7a:  lea    0x1bb7e7(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   5bf81:  sub    %rdx,%rax
    0.00 :   5bf84:  mov    %rbx,%rcx
    0.00 :   5bf87:  sub    %rdx,%rcx
    0.00 :   5bf8a:  cmp    %rcx,%rax
    0.00 :   5bf8d:  jbe    5d2f0 <__GI___printf_fp_l+0x29c0>
    0.00 :   5bf93:  mov    0x38(%rbx),%rax
    0.00 :   5bf97:  mov    %r9d,-0xf0(%rbp)
    0.00 :   5bf9e:  mov    %r8,%rdx
    0.00 :   5bfa1:  mov    %r14,%rsi
    0.00 :   5bfa4:  mov    %r12,%rdi
    0.00 :   5bfa7:  mov    %r8,-0xe8(%rbp)
    0.00 :   5bfae:  call   *%rax
    0.00 :   5bfb0:  mov    -0xe8(%rbp),%r8
    0.00 :   5bfb7:  mov    -0xf0(%rbp),%r9d
    0.00 :   5bfbe:  cmp    %r8,%rax
    0.00 :   5bfc1:  jne    5d443 <__GI___printf_fp_l+0x2b13>
    0.00 :   5bfc7:  lea    (%r9,%r8,1),%r13d
    0.24 :   5bfcb:  mov    -0x140(%rbp),%r14d
    0.00 :   5bfd2:  test   %r14d,%r14d
    0.00 :   5bfd5:  jne    5cfc3 <__GI___printf_fp_l+0x2693>
    0.00 :   5bfdb:  mov    -0xb8(%rbp),%rax
    0.00 :   5bfe2:  testb  $0x20,0xc(%rax)
    0.00 :   5bfe6:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5bfec:  mov    -0xd0(%rbp),%ecx
    0.00 :   5bff2:  test   %ecx,%ecx
    0.00 :   5bff4:  jle    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5bffa:  mov    %r12,%rdi
    0.00 :   5bffd:  mov    -0xbc(%rbp),%r12d
    0.00 :   5c004:  movslq %ecx,%rbx
    0.00 :   5c007:  mov    0x10(%rax),%esi
    0.00 :   5c00a:  mov    %rbx,%rdx
    0.00 :   5c00d:  test   %r12d,%r12d
    0.00 :   5c010:  je     5cd61 <__GI___printf_fp_l+0x2431>
    0.00 :   5c016:  call   824e0 <_IO_wpadn>
    0.00 :   5c01b:  cmp    %rbx,%rax
    0.00 :   5c01e:  jne    5d443 <__GI___printf_fp_l+0x2b13>
    0.00 :   5c024:  add    -0xd0(%rbp),%r13d
    0.00 :   5c02b:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5c030:  mov    -0xf0(%rbp),%eax
    0.00 :   5c036:  addl   $0x1,-0xe0(%rbp)
    0.00 :   5c03d:  test   %eax,%eax
    0.00 :   5c03f:  jle    5b623 <__GI___printf_fp_l+0xcf3>
    0.00 :   5c045:  addl   $0x1,-0x100(%rbp)
    0.00 :   5c04c:  mov    -0x100(%rbp),%edi
    0.00 :   5c052:  add    %edi,%eax
    0.00 :   5c054:  mov    %eax,-0xd0(%rbp)
    0.00 :   5c05a:  jmp    5b623 <__GI___printf_fp_l+0xcf3>
    0.00 :   5c05f:  nop
    0.00 :   5c060:  cmp    $0xc00,%ax
    0.00 :   5c064:  je     5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c06a:  jmp    28961 <__GI___printf_fp_l.cold>
    0.00 :   5c06f:  nop
    0.00 :   5c070:  cmp    $0x400,%ax
    0.00 :   5c074:  jne    5d51a <__GI___printf_fp_l+0x2bea>
    0.00 :   5c07a:  mov    -0xa4(%rbp),%r8d
    0.00 :   5c081:  test   %r8d,%r8d
    0.00 :   5c084:  je     5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c08a:  cmp    $0x34,%esi
    0.00 :   5c08d:  jle    5ba63 <__GI___printf_fp_l+0x1133>
    0.00 :   5c093:  mov    -0x4(%r15),%esi
    0.68 :   5c097:  test   %ebx,%ebx
    0.00 :   5c099:  je     5c2ee <__GI___printf_fp_l+0x19be>
    0.00 :   5c09f:  mov    -0xc0(%rbp),%edx
    0.00 :   5c0a5:  lea    -0x4(%r15),%rax
    0.00 :   5c0a9:  xor    %edi,%edi
    0.00 :   5c0ab:  cmp    %esi,-0xc0(%rbp)
    0.00 :   5c0b1:  jne    5c0d8 <__GI___printf_fp_l+0x17a8>
    0.00 :   5c0b3:  jmp    5cca9 <__GI___printf_fp_l+0x2379>
    0.00 :   5c0b8:  nopl   0x0(%rax,%rax,1)
    0.00 :   5c0c0:  movl   $0x30,(%rax)
    0.32 :   5c0c6:  mov    -0x4(%rax),%esi
    0.00 :   5c0c9:  sub    $0x4,%rax
    0.00 :   5c0cd:  add    $0x1,%edi
    0.00 :   5c0d0:  cmp    %edx,%esi
    0.00 :   5c0d2:  je     5cca9 <__GI___printf_fp_l+0x2379>
    0.00 :   5c0d8:  cmp    $0x39,%esi
    0.00 :   5c0db:  je     5c0c0 <__GI___printf_fp_l+0x1790>
    0.00 :   5c0dd:  cmp    -0xf0(%rbp),%edi
    0.00 :   5c0e3:  jne    5c113 <__GI___printf_fp_l+0x17e3>
    0.00 :   5c0e5:  mov    -0x100(%rbp),%r10d
    0.00 :   5c0ec:  test   %r10d,%r10d
    0.00 :   5c0ef:  jle    5c113 <__GI___printf_fp_l+0x17e3>
    0.00 :   5c0f1:  subl   $0x1,-0x100(%rbp)
    0.00 :   5c0f8:  mov    -0x100(%rbp),%edi
    0.00 :   5c0fe:  cmp    -0xc0(%rbp),%esi
    0.00 :   5c104:  je     5ccc1 <__GI___printf_fp_l+0x2391>
    0.00 :   5c10a:  add    -0xf0(%rbp),%edi
    0.00 :   5c110:  mov    %edi,%r9d
    0.00 :   5c113:  add    $0x1,%esi
    0.00 :   5c116:  mov    %esi,(%rax)
    0.00 :   5c118:  cmp    %esi,-0xc0(%rbp)
    0.34 :   5c11e:  je     5c2f1 <__GI___printf_fp_l+0x19c1>
    0.00 :   5c124:  cmp    %r9d,%ebx
    0.00 :   5c127:  jg     5ba8c <__GI___printf_fp_l+0x115c>
    0.00 :   5c12d:  jmp    5bab8 <__GI___printf_fp_l+0x1188>
    0.00 :   5c132:  nopw   0x0(%rax,%rax,1)
    0.00 :   5c138:  mov    -0x138(%rbp),%edi
    0.00 :   5c13e:  mov    %rbx,%rsi
    0.00 :   5c141:  sar    $0x2,%rsi
    0.00 :   5c145:  sub    $0x1,%edi
    0.00 :   5c148:  sub    %esi,%edi
    0.00 :   5c14a:  and    $0x20,%edx
    0.00 :   5c14d:  mov    %edi,-0xd0(%rbp)
    0.00 :   5c153:  jne    5c170 <__GI___printf_fp_l+0x1840>
    0.00 :   5c155:  mov    -0xb8(%rbp),%rsi
    0.00 :   5c15c:  mov    0x10(%rsi),%esi
    0.00 :   5c15f:  test   %edi,%edi
    0.00 :   5c161:  jle    5c170 <__GI___printf_fp_l+0x1840>
    0.00 :   5c163:  cmp    $0x30,%esi
    0.00 :   5c166:  jne    5bd13 <__GI___printf_fp_l+0x13e3>
    0.00 :   5c16c:  nopl   0x0(%rax)
    0.00 :   5c170:  xor    %r9d,%r9d
    0.00 :   5c173:  jmp    5bd49 <__GI___printf_fp_l+0x1419>
    0.00 :   5c178:  nopl   0x0(%rax,%rax,1)
    0.00 :   5c180:  mov    -0xe8(%rbp),%rdx
    0.00 :   5c187:  mov    -0x110(%rbp),%rsi
    0.00 :   5c18e:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   5c193:  mov    %rax,%rdi
    0.00 :   5c196:  jmp    5bf07 <__GI___printf_fp_l+0x15d7>
    0.00 :   5c19b:  test   %ecx,%ecx
    0.00 :   5c19d:  js     5c47a <__GI___printf_fp_l+0x1b4a>
    0.00 :   5c1a3:  mov    %r13,%rdx
    0.00 :   5c1a6:  add    %r14d,%ecx
    0.00 :   5c1a9:  mov    %r15,%rsi
    0.00 :   5c1ac:  call   54d10 <__mpn_lshift>
    0.00 :   5c1b1:  mov    %rax,%r8
    0.00 :   5c1b4:  mov    -0x88(%rbp),%rax
    0.00 :   5c1bb:  lea    0x1(%rax),%rdx
    0.00 :   5c1bf:  mov    %rdx,-0x88(%rbp)
    0.00 :   5c1c6:  mov    -0x90(%rbp),%rdx
    0.00 :   5c1cd:  mov    %r8,(%rdx,%rax,8)
    0.00 :   5c1d1:  movl   $0x0,-0x98(%rbp)
    0.34 :   5c1db:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5c1e0:  mov    -0x70(%rbp),%rsi
    0.34 :   5c1e4:  mov    -0x90(%rbp),%rdi
    0.00 :   5c1eb:  call   54620 <__mpn_cmp>
    0.00 :   5c1f0:  mov    -0x68(%rbp),%rdx
    0.00 :   5c1f4:  test   %eax,%eax
    0.34 :   5c1f6:  jns    5b270 <__GI___printf_fp_l+0x940>
    0.00 :   5c1fc:  jmp    5b1f7 <__GI___printf_fp_l+0x8c7>
    0.00 :   5c201:  nopl   0x0(%rax)
    0.00 :   5c208:  testb  $0x8,0xd(%rax)
    0.00 :   5c20c:  jne    5d12e <__GI___printf_fp_l+0x27fe>
    0.00 :   5c212:  sar    $0x2,%rbx
    0.00 :   5c216:  mov    %rbx,%r8
    0.00 :   5c219:  cmp    %r14,%r15
    0.00 :   5c21c:  jne    5c771 <__GI___printf_fp_l+0x1e41>
    0.00 :   5c222:  lea    0x1(%rbx),%r15d
    0.00 :   5c226:  test   %rbx,%rbx
    0.00 :   5c229:  je     5d430 <__GI___printf_fp_l+0x2b00>
    0.00 :   5c22f:  mov    %r12,%rdi
    0.00 :   5c232:  mov    %r15d,%r12d
    0.00 :   5c235:  mov    %r9d,%r15d
    0.00 :   5c238:  jmp    5c273 <__GI___printf_fp_l+0x1943>
    0.00 :   5c23a:  nopw   0x0(%rax,%rax,1)
    0.00 :   5c240:  mov    0x20(%rax),%rdx
    0.00 :   5c244:  cmp    0x28(%rax),%rdx
    0.00 :   5c248:  jae    5c287 <__GI___printf_fp_l+0x1957>
    0.00 :   5c24a:  lea    0x4(%rdx),%rcx
    0.00 :   5c24e:  cmp    $0xffffffff,%esi
    0.00 :   5c251:  mov    %rcx,0x20(%rax)
    0.00 :   5c255:  sete   %al
    0.00 :   5c258:  mov    %esi,(%rdx)
    0.00 :   5c25a:  test   %al,%al
    0.00 :   5c25c:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
    0.00 :   5c262:  lea    (%r12,%r15,1),%r13d
    0.00 :   5c266:  sub    %ebx,%r13d
    0.00 :   5c269:  sub    $0x1,%rbx
    0.00 :   5c26d:  je     5cd6b <__GI___printf_fp_l+0x243b>
    0.00 :   5c273:  mov    0xa0(%rdi),%rax
    0.00 :   5c27a:  add    $0x4,%r14
    0.00 :   5c27e:  mov    -0x4(%r14),%esi
    0.00 :   5c282:  test   %rax,%rax
    0.00 :   5c285:  jne    5c240 <__GI___printf_fp_l+0x1910>
    0.00 :   5c287:  mov    %rdi,-0xe0(%rbp)
    0.00 :   5c28e:  call   838b0 <__woverflow>
    0.00 :   5c293:  mov    -0xe0(%rbp),%rdi
    0.00 :   5c29a:  cmp    $0xffffffff,%eax
    0.00 :   5c29d:  sete   %al
    0.00 :   5c2a0:  jmp    5c25a <__GI___printf_fp_l+0x192a>
    0.00 :   5c2a2:  nopw   0x0(%rax,%rax,1)
    0.00 :   5c2a8:  mov    %eax,-0x9c(%rbp)
    0.00 :   5c2ae:  movslq %edi,%rax
    0.00 :   5c2b1:  test   %eax,%eax
    0.00 :   5c2b3:  js     5c99a <__GI___printf_fp_l+0x206a>
    0.00 :   5c2b9:  add    $0x8,%rax
    0.00 :   5c2bd:  mov    %rax,-0x120(%rbp)
    0.00 :   5c2c4:  mov    -0xf0(%rbp),%eax
    0.00 :   5c2ca:  mov    $0x1,%esi
    0.00 :   5c2cf:  movl   $0x7fffffff,-0x128(%rbp)
    0.00 :   5c2d9:  movl   $0x1,-0x118(%rbp)
    0.00 :   5c2e3:  mov    %eax,-0xe0(%rbp)
    0.00 :   5c2e9:  jmp    5b41a <__GI___printf_fp_l+0xaea>
    0.00 :   5c2ee:  mov    %r15,%rax
    0.00 :   5c2f1:  mov    -0xc0(%rbp),%edi
    0.00 :   5c2f7:  cmp    %edi,-0x4(%rax)
    0.00 :   5c2fa:  jne    5c300 <__GI___printf_fp_l+0x19d0>
    0.00 :   5c2fc:  sub    $0x4,%rax
    0.00 :   5c300:  sub    $0x4,%rax
    0.00 :   5c304:  cmp    %r14,%rax
    0.00 :   5c307:  jae    5c323 <__GI___printf_fp_l+0x19f3>
    0.00 :   5c309:  jmp    5c935 <__GI___printf_fp_l+0x2005>
    0.00 :   5c30e:  xchg   %ax,%ax
    0.00 :   5c310:  movl   $0x30,(%rax)
    0.00 :   5c316:  sub    $0x4,%rax
    0.00 :   5c31a:  cmp    %rax,%r14
    0.00 :   5c31d:  ja     5c935 <__GI___printf_fp_l+0x2005>
    0.00 :   5c323:  mov    (%rax),%esi
    0.00 :   5c325:  cmp    $0x39,%esi
    0.00 :   5c328:  je     5c310 <__GI___printf_fp_l+0x19e0>
    0.00 :   5c32a:  cmp    %r14,%rax
    0.00 :   5c32d:  jb     5c935 <__GI___printf_fp_l+0x2005>
    0.00 :   5c333:  add    $0x1,%esi
    0.00 :   5c336:  mov    %esi,(%rax)
    0.00 :   5c338:  jmp    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c33d:  movl   $0x30,0x8(%r15)
    0.00 :   5c345:  lea    0xc(%r15),%rsi
    0.00 :   5c349:  jmp    5bcaa <__GI___printf_fp_l+0x137a>
    0.00 :   5c34e:  xchg   %ax,%ax
    0.00 :   5c350:  movl   $0x0,-0x124(%rbp)
    0.00 :   5c35a:  jmp    5b4b1 <__GI___printf_fp_l+0xb81>
    0.00 :   5c35f:  nop
    0.00 :   5c360:  mov    -0xb8(%rbp),%rax
    0.00 :   5c367:  movzbl 0xc(%rax),%edx
    0.00 :   5c36b:  mov    %edx,%eax
    0.00 :   5c36d:  test   $0x40,%dl
    0.00 :   5c370:  je     5c711 <__GI___printf_fp_l+0x1de1>
    0.00 :   5c376:  mov    -0xbc(%rbp),%r10d
    0.00 :   5c37d:  test   %r10d,%r10d
    0.00 :   5c380:  je     5cd40 <__GI___printf_fp_l+0x2410>
    0.00 :   5c386:  mov    0xa0(%r12),%rax
    0.00 :   5c38e:  test   %rax,%rax
    0.00 :   5c391:  je     5d31a <__GI___printf_fp_l+0x29ea>
    0.00 :   5c397:  mov    0x20(%rax),%rdx
    0.00 :   5c39b:  cmp    0x28(%rax),%rdx
    0.00 :   5c39f:  jae    5d31a <__GI___printf_fp_l+0x29ea>
    0.00 :   5c3a5:  lea    0x4(%rdx),%rsi
    0.00 :   5c3a9:  mov    %rsi,0x20(%rax)
    0.00 :   5c3ad:  movl   $0x2b,(%rdx)
    0.00 :   5c3b3:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5c3b8:  nopl   0x0(%rax,%rax,1)
    0.00 :   5c3c0:  movl   $0x0,-0x124(%rbp)
    0.00 :   5c3ca:  mov    $0x1,%eax
    0.00 :   5c3cf:  jmp    5b493 <__GI___printf_fp_l+0xb63>
    0.00 :   5c3d4:  movl   $0x66,-0x9c(%rbp)
    0.00 :   5c3de:  movslq %edi,%rdx
    0.00 :   5c3e1:  test   %edi,%edi
    0.00 :   5c3e3:  jns    5c3f4 <__GI___printf_fp_l+0x1ac4>
    0.00 :   5c3e5:  movl   $0x6,-0xf0(%rbp)
    0.00 :   5c3ef:  mov    $0x6,%edx
    0.00 :   5c3f4:  mov    -0xa0(%rbp),%eax
    0.00 :   5c3fa:  mov    %eax,-0x124(%rbp)
    0.00 :   5c400:  test   %eax,%eax
    0.00 :   5c402:  jne    5cc10 <__GI___printf_fp_l+0x22e0>
    0.00 :   5c408:  movslq -0x98(%rbp),%rax
    0.00 :   5c40f:  cmpq   $0x0,-0xe8(%rbp)
    0.00 :   5c417:  mov    $0x1,%esi
    0.00 :   5c41c:  movl   $0x7fffffff,-0x128(%rbp)
    0.00 :   5c426:  lea    0x1(%rax),%edi
    0.00 :   5c429:  lea    0x2(%rdx,%rax,1),%rax
    0.00 :   5c42e:  mov    %rax,-0x120(%rbp)
    0.00 :   5c435:  mov    -0xf0(%rbp),%eax
    0.00 :   5c43b:  mov    %edi,-0x118(%rbp)
    0.00 :   5c441:  mov    %eax,-0xe0(%rbp)
    0.00 :   5c447:  jne    5b428 <__GI___printf_fp_l+0xaf8>
    0.00 :   5c44d:  jmp    5b49a <__GI___printf_fp_l+0xb6a>
    0.00 :   5c452:  cmp    %edx,-0x128(%rbp)
    0.00 :   5c458:  jle    5c859 <__GI___printf_fp_l+0x1f29>
    0.00 :   5c45e:  mov    -0x128(%rbp),%esi
    0.00 :   5c464:  lea    0x1(%rdx),%eax
    0.00 :   5c467:  mov    %eax,-0x118(%rbp)
    0.00 :   5c46d:  sub    %eax,%esi
    0.00 :   5c46f:  mov    %esi,-0xe0(%rbp)
    0.00 :   5c475:  jmp    5b3e2 <__GI___printf_fp_l+0xab2>
    0.00 :   5c47a:  mov    %r15,%rsi
    0.00 :   5c47d:  mov    %r13,%rdx
    0.00 :   5c480:  mov    %r14d,%ecx
    0.00 :   5c483:  mov    $0xc,%r15d
    0.00 :   5c489:  call   54d10 <__mpn_lshift>
    0.00 :   5c48e:  mov    -0x98(%rbp),%esi
    0.00 :   5c494:  movl   $0x0,-0xd0(%rbp)
    0.00 :   5c49e:  lea    0x1709d3(%rip),%rbx        # 1cce78 <_fpioconst_pow10+0x138>
    0.00 :   5c4a5:  mov    %rax,%r8
    0.00 :   5c4a8:  mov    -0x88(%rbp),%rax
    0.00 :   5c4af:  mov    %r12,-0xe0(%rbp)
    0.00 :   5c4b6:  neg    %esi
    0.00 :   5c4b8:  lea    0x1(%rax),%rdx
    0.00 :   5c4bc:  mov    %rdx,-0x88(%rbp)
    0.00 :   5c4c3:  mov    -0x90(%rbp),%rdx
    0.00 :   5c4ca:  mov    %r8,(%rdx,%rax,8)
    0.00 :   5c4ce:  movl   $0x1,-0xa0(%rbp)
    0.00 :   5c4d8:  mov    %esi,-0x98(%rbp)
    0.00 :   5c4de:  jmp    5c585 <__GI___printf_fp_l+0x1c55>
    0.00 :   5c4e3:  nopl   0x0(%rax,%rax,1)
    0.00 :   5c4e8:  lea    0x8(%rcx,%rax,8),%r10
    0.00 :   5c4ed:  mov    %r9,%r8
    0.00 :   5c4f0:  mov    %rsi,%rcx
    0.00 :   5c4f3:  mov    %r10,%rsi
    0.00 :   5c4f6:  call   54f90 <__mpn_mul>
    0.00 :   5c4fb:  mov    -0x88(%rbp),%rsi
    0.00 :   5c502:  mov    0x8(%rbx),%r8
    0.00 :   5c506:  add    %rsi,%r8
    0.00 :   5c509:  test   %rax,%rax
    0.00 :   5c50c:  je     5c5d0 <__GI___printf_fp_l+0x1ca0>
    0.00 :   5c512:  sub    $0x1,%r8
    0.00 :   5c516:  mov    %r8,-0x68(%rbp)
    0.00 :   5c51a:  mov    -0x70(%rbp),%r10
    0.00 :   5c51e:  lea    0x0(,%r8,8),%rdx
    0.00 :   5c526:  mov    %r8,%r13
    0.00 :   5c529:  lea    -0x8(%r10,%rdx,1),%rax
    0.00 :   5c52e:  bsr    (%rax),%rcx
    0.00 :   5c532:  sub    %rsi,%r13
    0.00 :   5c535:  mov    -0x98(%rbp),%esi
    0.00 :   5c53b:  add    $0x1,%r13
    0.00 :   5c53f:  shl    $0x6,%r13d
    0.00 :   5c543:  lea    0x3(%rsi),%edi
    0.00 :   5c546:  xor    $0x3f,%rcx
    0.00 :   5c54a:  sub    %ecx,%r13d
    0.00 :   5c54d:  mov    %ecx,%r12d
    0.00 :   5c550:  sub    $0x1,%r13d
    0.00 :   5c554:  cmp    %r13d,%edi
    0.00 :   5c557:  je     5c698 <__GI___printf_fp_l+0x1d68>
    0.00 :   5c55d:  lea    0x2(%rsi),%eax
    0.00 :   5c560:  cmp    %eax,%r13d
    0.00 :   5c563:  jle    5c5e8 <__GI___printf_fp_l+0x1cb8>
    0.00 :   5c569:  lea    0x1707e8(%rip),%rax        # 1ccd58 <_fpioconst_pow10+0x18>
    0.00 :   5c570:  sub    $0x1,%r15d
    0.00 :   5c574:  cmp    %rax,%rbx
    0.00 :   5c577:  je     5caf3 <__GI___printf_fp_l+0x21c3>
    0.00 :   5c57d:  test   %esi,%esi
    0.00 :   5c57f:  jle    5cea5 <__GI___printf_fp_l+0x2575>
    0.00 :   5c585:  sub    $0x18,%rbx
    0.00 :   5c589:  cmp    %esi,0x14(%rbx)
    0.00 :   5c58c:  jg     5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c58e:  mov    0x8(%rbx),%rax
    0.00 :   5c592:  mov    -0x70(%rbp),%rdi
    0.00 :   5c596:  lea    0x170923(%rip),%rcx        # 1ccec0 <__tens>
    0.00 :   5c59d:  mov    -0x88(%rbp),%r9
    0.00 :   5c5a4:  mov    -0x90(%rbp),%rsi
    0.00 :   5c5ab:  lea    -0x1(%rax),%rdx
    0.00 :   5c5af:  mov    (%rbx),%rax
    0.00 :   5c5b2:  cmp    %rdx,%r9
    0.00 :   5c5b5:  jl     5c4e8 <__GI___printf_fp_l+0x1bb8>
    0.00 :   5c5bb:  mov    %rdx,%r8
    0.00 :   5c5be:  lea    0x8(%rcx,%rax,8),%rcx
    0.00 :   5c5c3:  mov    %r9,%rdx
    0.00 :   5c5c6:  call   54f90 <__mpn_mul>
    0.00 :   5c5cb:  jmp    5c4fb <__GI___printf_fp_l+0x1bcb>
    0.00 :   5c5d0:  sub    $0x2,%r8
    0.00 :   5c5d4:  mov    %r8,-0x68(%rbp)
    0.00 :   5c5d8:  jmp    5c51a <__GI___printf_fp_l+0x1bea>
    0.00 :   5c5dd:  mov    -0x70(%rbp),%r10
    0.00 :   5c5e1:  mov    -0x68(%rbp),%r8
    0.00 :   5c5e5:  nopl   (%rax)
    0.00 :   5c5e8:  mov    $0x1,%eax
    0.00 :   5c5ed:  mov    %r15d,%ecx
    0.00 :   5c5f0:  sub    %r13d,%esi
    0.00 :   5c5f3:  shl    %cl,%eax
    0.00 :   5c5f5:  or     %eax,-0xd0(%rbp)
    0.00 :   5c5fb:  mov    %r12d,%eax
    0.00 :   5c5fe:  sub    %esi,%eax
    0.00 :   5c600:  test   %esi,%esi
    0.00 :   5c602:  mov    %esi,-0x98(%rbp)
    0.00 :   5c608:  cmovs  %eax,%r12d
    0.00 :   5c60c:  mov    (%r10),%rax
    0.00 :   5c60f:  test   %rax,%rax
    0.00 :   5c612:  jne    5d18e <__GI___printf_fp_l+0x285e>
    0.00 :   5c618:  lea    0x8(%r10),%rdx
    0.00 :   5c61c:  mov    $0x1,%eax
    0.00 :   5c621:  nopl   0x0(%rax)
    0.00 :   5c628:  mov    (%rdx),%rcx
    0.00 :   5c62b:  lea    -0x1(%rax),%r9d
    0.00 :   5c62f:  movslq %eax,%rdi
    0.00 :   5c632:  mov    %rdx,%r14
    0.00 :   5c635:  lea    0x0(,%rax,8),%r11
    0.00 :   5c63d:  mov    %rax,%r13
    0.00 :   5c640:  add    $0x8,%rdx
    0.00 :   5c644:  add    $0x1,%rax
    0.00 :   5c648:  test   %rcx,%rcx
    0.00 :   5c64b:  je     5c628 <__GI___printf_fp_l+0x1cf8>
    0.00 :   5c64d:  cmp    $0x3f,%r12d
    0.00 :   5c651:  jne    5cc20 <__GI___printf_fp_l+0x22f0>
    0.00 :   5c657:  sub    %rdi,%r8
    0.00 :   5c65a:  test   %r8,%r8
    0.00 :   5c65d:  jle    5c688 <__GI___printf_fp_l+0x1d58>
    0.00 :   5c65f:  mov    -0x90(%rbp),%r9
    0.00 :   5c666:  lea    (%r10,%r13,8),%rcx
    0.00 :   5c66a:  xor    %eax,%eax
    0.00 :   5c66c:  nopl   0x0(%rax)
    0.00 :   5c670:  mov    (%rcx,%rax,8),%rdx
    0.00 :   5c674:  mov    %rdx,(%r9,%rax,8)
    0.00 :   5c678:  mov    -0x68(%rbp),%r8
    0.00 :   5c67c:  add    $0x1,%rax
    0.00 :   5c680:  sub    %rdi,%r8
    0.00 :   5c683:  cmp    %rax,%r8
    0.00 :   5c686:  jg     5c670 <__GI___printf_fp_l+0x1d40>
    0.00 :   5c688:  mov    %r8,-0x88(%rbp)
    0.00 :   5c68f:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c694:  nopl   0x0(%rax)
    0.00 :   5c698:  cmp    $0x3c,%ecx
    0.00 :   5c69b:  jg     5cd7e <__GI___printf_fp_l+0x244e>
    0.00 :   5c6a1:  mov    $0x3c,%ecx
    0.00 :   5c6a6:  mov    $0xa,%edi
    0.00 :   5c6ab:  movq   $0x0,-0x50(%rbp)
    0.00 :   5c6b3:  sub    %r12d,%ecx
    0.00 :   5c6b6:  shl    %cl,%rdi
    0.00 :   5c6b9:  mov    %rdi,-0x48(%rbp)
    0.00 :   5c6bd:  mov    %rdi,%rcx
    0.00 :   5c6c0:  lea    0x2(%rsi),%edi
    0.00 :   5c6c3:  cmp    %edi,%r13d
    0.00 :   5c6c6:  jle    5c5e8 <__GI___printf_fp_l+0x1cb8>
    0.00 :   5c6cc:  cmp    %rcx,(%rax)
    0.00 :   5c6cf:  jb     5c5e8 <__GI___printf_fp_l+0x1cb8>
    0.00 :   5c6d5:  jne    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c6db:  mov    -0x50(%rbp),%rax
    0.00 :   5c6df:  cmp    %rax,-0x10(%r10,%rdx,1)
    0.00 :   5c6e4:  jae    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c6ea:  jmp    5c5e8 <__GI___printf_fp_l+0x1cb8>
    0.00 :   5c6ef:  nop
    0.00 :   5c6f0:  mov    0x28(%r12),%rax
    0.00 :   5c6f5:  cmp    0x30(%r12),%rax
    0.00 :   5c6fa:  jae    5d2ca <__GI___printf_fp_l+0x299a>
    0.00 :   5c700:  lea    0x1(%rax),%rdx
    0.00 :   5c704:  mov    %rdx,0x28(%r12)
    0.00 :   5c709:  movb   $0x2d,(%rax)
    0.00 :   5c70c:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5c711:  and    $0x10,%edx
    0.00 :   5c714:  je     5bd9d <__GI___printf_fp_l+0x146d>
    0.00 :   5c71a:  mov    -0xbc(%rbp),%r8d
    0.00 :   5c721:  test   %r8d,%r8d
    0.00 :   5c724:  je     5d064 <__GI___printf_fp_l+0x2734>
    0.00 :   5c72a:  mov    0xa0(%r12),%rax
    0.00 :   5c732:  test   %rax,%rax
    0.00 :   5c735:  je     5d475 <__GI___printf_fp_l+0x2b45>
    0.00 :   5c73b:  mov    0x20(%rax),%rdx
    0.00 :   5c73f:  cmp    0x28(%rax),%rdx
    0.00 :   5c743:  jae    5d475 <__GI___printf_fp_l+0x2b45>
    0.00 :   5c749:  lea    0x4(%rdx),%rsi
    0.00 :   5c74d:  mov    %rsi,0x20(%rax)
    0.00 :   5c751:  movl   $0x20,(%rdx)
    0.00 :   5c757:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5c75c:  mov    -0xa4(%rbp),%r10d
    0.00 :   5c763:  test   %r10d,%r10d
    0.00 :   5c766:  jne    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c76c:  jmp    5c08a <__GI___printf_fp_l+0x175a>
    0.00 :   5c771:  mov    0xd8(%r12),%rbx
    0.00 :   5c779:  lea    0x1ba280(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   5c780:  lea    0x1bafe1(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   5c787:  sub    %rdx,%rax
    0.00 :   5c78a:  mov    %rbx,%rcx
    0.00 :   5c78d:  sub    %rdx,%rcx
    0.00 :   5c790:  cmp    %rcx,%rax
    0.00 :   5c793:  jbe    5d295 <__GI___printf_fp_l+0x2965>
    0.00 :   5c799:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5c7a4:  mov    0x38(%rbx),%rax
    0.00 :   5c7a8:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5c7ad:  mov    %r14,%r15
    0.00 :   5c7b0:  mov    %r9d,%r13d
    0.00 :   5c7b3:  test   %rdi,%rdi
    0.00 :   5c7b6:  jne    5c7e2 <__GI___printf_fp_l+0x1eb2>
    0.00 :   5c7b8:  jmp    5d0c2 <__GI___printf_fp_l+0x2792>
    0.00 :   5c7bd:  nopl   (%rax)
    0.00 :   5c7c0:  lea    0x1(%rax),%rcx
    0.61 :   5c7c4:  mov    %rcx,0x28(%r12)
    0.35 :   5c7c9:  mov    %dl,(%rax)
    5.81 :   5c7cb:  mov    %r14,%rdx
    0.00 :   5c7ce:  lea    0x0(%r13,%r15,1),%eax
    0.00 :   5c7d3:  sub    %r15,%rdx
    0.34 :   5c7d6:  sub    %r14d,%eax
    0.00 :   5c7d9:  add    %rbx,%rdx
    0.00 :   5c7dc:  je     5c88d <__GI___printf_fp_l+0x1f5d>
    0.00 :   5c7e2:  add    $0x1,%r15
    0.00 :   5c7e6:  mov    0x28(%r12),%rax
    5.43 :   5c7eb:  movzbl -0x1(%r15),%edx
    1.27 :   5c7f0:  cmp    0x30(%r12),%rax
    0.69 :   5c7f5:  jb     5c7c0 <__GI___printf_fp_l+0x1e90>
    0.00 :   5c7f7:  movzbl %dl,%esi
    0.00 :   5c7fa:  mov    %r12,%rdi
    0.00 :   5c7fd:  call   8d800 <__overflow>
    0.00 :   5c802:  cmp    $0xffffffff,%eax
    0.00 :   5c805:  jne    5c7cb <__GI___printf_fp_l+0x1e9b>
    0.00 :   5c807:  mov    -0x14c(%rbp),%r15d
    0.00 :   5c80e:  mov    %eax,%r13d
    0.00 :   5c811:  test   %r15d,%r15d
    0.00 :   5c814:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5c81a:  mov    -0xe0(%rbp),%rdi
    0.00 :   5c821:  call   28370 <free@plt>
    0.00 :   5c826:  mov    -0x130(%rbp),%rdi
    0.00 :   5c82d:  call   28370 <free@plt>
    0.00 :   5c832:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5c837:  nopw   0x0(%rax,%rax,1)
    0.00 :   5c840:  mov    0x1bd5c9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   5c847:  mov    $0xffffffff,%r13d
    0.00 :   5c84d:  movl   $0x22,%fs:(%rax)
    0.00 :   5c854:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5c859:  movl   $0x1,-0x118(%rbp)
    0.00 :   5c863:  sub    $0x2,%eax
    0.00 :   5c866:  mov    %eax,-0x9c(%rbp)
    0.00 :   5c86c:  mov    -0x128(%rbp),%eax
    0.00 :   5c872:  sub    $0x1,%eax
    0.00 :   5c875:  mov    %eax,-0xe0(%rbp)
    0.00 :   5c87b:  cltq
    0.00 :   5c87d:  add    $0x8,%rax
    0.00 :   5c881:  mov    %rax,-0x120(%rbp)
    0.00 :   5c888:  jmp    5b3fe <__GI___printf_fp_l+0xace>
    0.00 :   5c88d:  mov    %eax,%r13d
    0.00 :   5c890:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
    0.00 :   5c895:  mov    %esi,%eax
    0.00 :   5c897:  movslq %edx,%rdx
    0.00 :   5c89a:  sar    $0x1f,%eax
    0.00 :   5c89d:  lea    (%rdi,%rdx,8),%rdi
    0.00 :   5c8a1:  mov    %r13,%rdx
    0.69 :   5c8a4:  shr    $0x1a,%eax
    0.00 :   5c8a7:  lea    (%rsi,%rax,1),%ecx
    0.00 :   5c8aa:  mov    %r15,%rsi
    0.35 :   5c8ad:  and    $0x3f,%ecx
    0.00 :   5c8b0:  sub    %eax,%ecx
    0.00 :   5c8b2:  call   54d10 <__mpn_lshift>
    1.37 :   5c8b7:  mov    -0x98(%rbp),%ecx
    0.00 :   5c8bd:  mov    -0x88(%rbp),%rsi
    0.00 :   5c8c4:  add    %ecx,%r14d
    0.00 :   5c8c7:  lea    0x3f(%r14),%edx
    0.00 :   5c8cb:  cmovns %r14d,%edx
    0.00 :   5c8cf:  sar    $0x6,%edx
    0.00 :   5c8d2:  movslq %edx,%rdx
    0.00 :   5c8d5:  add    %rdx,%rsi
    0.00 :   5c8d8:  mov    %rsi,-0x88(%rbp)
    0.00 :   5c8df:  test   %rax,%rax
    0.00 :   5c8e2:  je     5b15c <__GI___printf_fp_l+0x82c>
    0.00 :   5c8e8:  lea    0x1(%rsi),%rdi
    0.00 :   5c8ec:  mov    %rdi,-0x88(%rbp)
    0.00 :   5c8f3:  mov    -0x90(%rbp),%rdi
    0.00 :   5c8fa:  mov    %rax,(%rdi,%rsi,8)
    0.00 :   5c8fe:  jmp    5b15c <__GI___printf_fp_l+0x82c>
    0.00 :   5c903:  xor    %r9d,%r9d
    0.00 :   5c906:  jmp    5c36b <__GI___printf_fp_l+0x1a3b>
    0.00 :   5c90b:  lea    0x2(%r9),%eax
    0.00 :   5c90f:  mov    %edi,-0x124(%rbp)
    0.00 :   5c915:  cltq
    0.00 :   5c917:  jmp    5b493 <__GI___printf_fp_l+0xb63>
    0.00 :   5c91c:  lea    -0x1(%rdx),%eax
    0.00 :   5c91f:  xor    %edx,%edx
    0.00 :   5c921:  div    %ecx
    0.00 :   5c923:  add    %edi,%eax
    0.00 :   5c925:  mov    %eax,-0x124(%rbp)
    0.00 :   5c92b:  add    $0x1,%eax
    0.00 :   5c92e:  cltq
    0.00 :   5c930:  jmp    5b493 <__GI___printf_fp_l+0xb63>
    0.00 :   5c935:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5c93c:  je     5d085 <__GI___printf_fp_l+0x2755>
    0.00 :   5c942:  mov    -0x130(%rbp),%rax
    0.00 :   5c949:  cmpl   $0x1,-0xa0(%rbp)
    0.00 :   5c950:  movl   $0x31,0x8(%rax)
    0.00 :   5c957:  sbb    %eax,%eax
    0.00 :   5c959:  and    $0x2,%eax
    0.00 :   5c95c:  sub    $0x1,%eax
    0.00 :   5c95f:  add    %eax,-0x98(%rbp)
    0.00 :   5c965:  jne    5c971 <__GI___printf_fp_l+0x2041>
    0.00 :   5c967:  movl   $0x0,-0xa0(%rbp)
    0.00 :   5c971:  mov    -0x134(%rbp),%eax
    0.00 :   5c977:  mov    -0x128(%rbp),%ecx
    0.00 :   5c97d:  add    %ebx,%eax
    0.00 :   5c97f:  cmp    %ecx,%eax
    0.00 :   5c981:  jle    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c987:  sub    %ecx,%eax
    0.00 :   5c989:  movslq %eax,%rsi
    0.00 :   5c98c:  sub    %eax,%ebx
    0.00 :   5c98e:  shl    $0x2,%rsi
    0.00 :   5c992:  sub    %rsi,%r15
    0.00 :   5c995:  jmp    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c99a:  movq   $0xe,-0x120(%rbp)
    0.00 :   5c9a5:  movl   $0x6,-0xf0(%rbp)
    0.00 :   5c9af:  jmp    5c2c4 <__GI___printf_fp_l+0x1994>
    0.00 :   5c9b4:  mov    -0xe0(%rbp),%r11d
    0.00 :   5c9bb:  test   %r11d,%r11d
    0.00 :   5c9be:  jle    5d01c <__GI___printf_fp_l+0x26ec>
    0.00 :   5c9c4:  cmpq   $0x1,-0x88(%rbp)
    0.00 :   5c9cc:  jg     5b5eb <__GI___printf_fp_l+0xcbb>
    0.00 :   5c9d2:  mov    -0x90(%rbp),%rdx
    0.00 :   5c9d9:  cmpq   $0x0,(%rdx)
    0.00 :   5c9dd:  jne    5b5eb <__GI___printf_fp_l+0xcbb>
    0.00 :   5c9e3:  mov    %rax,%r15
    0.00 :   5c9e6:  mov    $0x1,%esi
    0.00 :   5c9eb:  jmp    5b5fc <__GI___printf_fp_l+0xccc>
    0.00 :   5c9f0:  mov    -0xc0(%rbp),%ebx
    0.00 :   5c9f6:  lea    0x10(%rax),%r15
    0.00 :   5c9fa:  subl   $0x1,-0x98(%rbp)
    0.00 :   5ca01:  lea    -0xa0(%rbp),%r13
    0.00 :   5ca08:  movl   $0x30,0x8(%rax)
    0.00 :   5ca0f:  mov    %ebx,0xc(%rax)
    0.00 :   5ca12:  movl   $0x0,-0x134(%rbp)
    0.00 :   5ca1c:  jmp    5b5fc <__GI___printf_fp_l+0xccc>
    0.00 :   5ca21:  mov    -0x90(%rbp),%r10
    0.00 :   5ca28:  cmpq   $0x0,(%r10)
    0.34 :   5ca2c:  je     5ba2b <__GI___printf_fp_l+0x10fb>
    0.00 :   5ca32:  cmpq   $0x0,-0x78(%rbp)
    0.00 :   5ca37:  mov    $0x1,%eax
    0.00 :   5ca3c:  je     5ba1e <__GI___printf_fp_l+0x10ee>
    0.00 :   5ca42:  jmp    5ba26 <__GI___printf_fp_l+0x10f6>
    0.00 :   5ca47:  test   %ecx,%ecx
    0.00 :   5ca49:  je     5ceb1 <__GI___printf_fp_l+0x2581>
    0.00 :   5ca4f:  xor    %eax,%eax
    0.00 :   5ca51:  mov    (%r9,%r13,1),%r9
    0.00 :   5ca55:  tzcnt  %r8,%rax
    0.00 :   5ca5a:  mov    %eax,%r8d
    0.00 :   5ca5d:  test   %r9,%r9
    0.00 :   5ca60:  je     5d180 <__GI___printf_fp_l+0x2850>
    0.00 :   5ca66:  xor    %r8d,%r8d
    0.00 :   5ca69:  mov    $0x40,%r15d
    0.00 :   5ca6f:  tzcnt  %r9,%r8
    0.00 :   5ca74:  cmp    %r8d,%eax
    0.00 :   5ca77:  cmovle %eax,%r8d
    0.00 :   5ca7b:  sub    %ecx,%r15d
    0.00 :   5ca7e:  movslq %r14d,%rbx
    0.00 :   5ca81:  cmp    %r8d,%r15d
    0.00 :   5ca84:  jle    5cf4c <__GI___printf_fp_l+0x261c>
    0.00 :   5ca8a:  sub    $0x1,%r14d
    0.00 :   5ca8e:  sub    $0x8,%r13
    0.00 :   5ca92:  mov    %r15d,%ecx
    0.00 :   5ca95:  movslq %r14d,%r14
    0.00 :   5ca98:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5ca9c:  sub    %r14,%rdx
    0.00 :   5ca9f:  call   54e30 <__mpn_rshift>
    0.00 :   5caa4:  mov    -0x90(%rbp),%rdi
    0.00 :   5caab:  mov    %r15d,%ecx
    0.00 :   5caae:  sub    %rbx,-0x78(%rbp)
    0.00 :   5cab2:  mov    -0x88(%rbp),%rdx
    0.00 :   5cab9:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5cabd:  sub    %r14,%rdx
    0.00 :   5cac0:  call   54e30 <__mpn_rshift>
    0.00 :   5cac5:  mov    -0x88(%rbp),%rdx
    0.00 :   5cacc:  mov    -0x90(%rbp),%rcx
    0.00 :   5cad3:  mov    %rdx,%rax
    0.00 :   5cad6:  sub    %r14,%rax
    0.00 :   5cad9:  cmpq   $0x0,-0x8(%rcx,%rax,8)
    0.00 :   5cadf:  jne    5cae7 <__GI___printf_fp_l+0x21b7>
    0.00 :   5cae1:  mov    %rdx,%rax
    0.00 :   5cae4:  sub    %rbx,%rax
    0.00 :   5cae7:  mov    %rax,-0x88(%rbp)
    0.00 :   5caee:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5caf3:  mov    -0xe0(%rbp),%r12
    0.00 :   5cafa:  test   %esi,%esi
    0.00 :   5cafc:  jle    5cb97 <__GI___printf_fp_l+0x2267>
    0.00 :   5cb02:  mov    -0x88(%rbp),%rdx
    0.00 :   5cb09:  mov    -0x70(%rbp),%rdi
    0.00 :   5cb0d:  mov    $0xa,%ecx
    0.00 :   5cb12:  mov    -0x90(%rbp),%rsi
    0.00 :   5cb19:  call   55420 <__mpn_mul_1>
    0.00 :   5cb1e:  mov    -0x70(%rbp),%rsi
    0.00 :   5cb22:  xor    %edi,%edi
    0.00 :   5cb24:  mov    $0x4,%edx
    0.00 :   5cb29:  mov    -0x88(%rbp),%r8
    0.00 :   5cb30:  mov    -0x98(%rbp),%eax
    0.00 :   5cb36:  mov    %edx,%ecx
    0.00 :   5cb38:  mov    %r8,-0x68(%rbp)
    0.00 :   5cb3c:  tzcnt  (%rsi),%rdi
    0.00 :   5cb41:  cmp    %edx,%eax
    0.00 :   5cb43:  cmovle %eax,%ecx
    0.00 :   5cb46:  cmp    %edi,%ecx
    0.00 :   5cb48:  jle    5d0ca <__GI___printf_fp_l+0x279a>
    0.00 :   5cb4e:  mov    $0x40,%r9d
    0.00 :   5cb54:  mov    -0x90(%rbp),%rdi
    0.00 :   5cb5b:  mov    %r8,%rdx
    0.00 :   5cb5e:  sub    %ecx,%r9d
    0.00 :   5cb61:  mov    %r9d,%ecx
    0.00 :   5cb64:  call   54d10 <__mpn_lshift>
    0.00 :   5cb69:  test   %rax,%rax
    0.00 :   5cb6c:  je     5cb85 <__GI___printf_fp_l+0x2255>
    0.00 :   5cb6e:  mov    -0x68(%rbp),%rdx
    0.00 :   5cb72:  lea    0x1(%rdx),%rcx
    0.00 :   5cb76:  mov    %rcx,-0x68(%rbp)
    0.00 :   5cb7a:  mov    -0x90(%rbp),%rcx
    0.00 :   5cb81:  mov    %rax,(%rcx,%rdx,8)
    0.00 :   5cb85:  mov    -0x68(%rbp),%rax
    0.00 :   5cb89:  orl    $0x1,-0xd0(%rbp)
    0.00 :   5cb90:  mov    %rax,-0x88(%rbp)
    0.00 :   5cb97:  mov    -0xd0(%rbp),%eax
    0.00 :   5cb9d:  mov    %eax,-0x98(%rbp)
    0.00 :   5cba3:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5cba8:  xor    %eax,%eax
    0.00 :   5cbaa:  xor    %r13d,%r13d
    0.00 :   5cbad:  jmp    5be3d <__GI___printf_fp_l+0x150d>
    0.00 :   5cbb2:  movzbl %dl,%esi
    0.00 :   5cbb5:  mov    %r12,%rdi
    0.00 :   5cbb8:  call   8d800 <__overflow>
    0.00 :   5cbbd:  cmp    $0xffffffff,%eax
    0.00 :   5cbc0:  jne    5b76f <__GI___printf_fp_l+0xe3f>
    0.00 :   5cbc6:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cbcb:  nopl   0x0(%rax,%rax,1)
    0.00 :   5cbd0:  movzbl %dl,%esi
    0.00 :   5cbd3:  mov    %r12,%rdi
    0.00 :   5cbd6:  call   8d800 <__overflow>
    0.00 :   5cbdb:  cmp    $0xffffffff,%eax
    0.00 :   5cbde:  jne    5b74f <__GI___printf_fp_l+0xe1f>
    0.00 :   5cbe4:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cbe9:  nopl   0x0(%rax)
    0.00 :   5cbf0:  movzbl %dl,%esi
    0.00 :   5cbf3:  mov    %r12,%rdi
    0.00 :   5cbf6:  call   8d800 <__overflow>
    0.00 :   5cbfb:  cmp    $0xffffffff,%eax
    0.00 :   5cbfe:  jne    5b72f <__GI___printf_fp_l+0xdff>
    0.00 :   5cc04:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cc09:  nopl   0x0(%rax)
    0.00 :   5cc10:  lea    0x2(%rdx),%rax
    0.00 :   5cc14:  mov    %rax,-0x120(%rbp)
    0.00 :   5cc1b:  jmp    5c2c4 <__GI___printf_fp_l+0x1994>
    0.00 :   5cc20:  xor    %eax,%eax
    0.00 :   5cc22:  tzcnt  %rcx,%rax
    0.00 :   5cc27:  mov    $0x3f,%ecx
    0.00 :   5cc2c:  sub    %r12d,%ecx
    0.00 :   5cc2f:  mov    -0x90(%rbp),%r12
    0.00 :   5cc36:  cmp    %ecx,%eax
    0.00 :   5cc38:  jge    5d32b <__GI___printf_fp_l+0x29fb>
    0.00 :   5cc3e:  movslq %r9d,%r13
    0.00 :   5cc41:  mov    %r8,%rdx
    0.00 :   5cc44:  lea    -0x8(%r10,%r11,1),%rsi
    0.00 :   5cc49:  sub    %r13,%rdx
    0.00 :   5cc4c:  mov    %r12,%rdi
    0.00 :   5cc4f:  call   54e30 <__mpn_rshift>
    0.00 :   5cc54:  mov    -0x68(%rbp),%rax
    0.00 :   5cc58:  mov    -0x98(%rbp),%esi
    0.00 :   5cc5e:  sub    %r13,%rax
    0.00 :   5cc61:  mov    %rax,-0x88(%rbp)
    0.00 :   5cc68:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5cc6d:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5cc74:  mov    $0x2d,%esi
    0.00 :   5cc79:  mov    %r12,%rdi
    0.00 :   5cc7c:  call   838b0 <__woverflow>
    0.00 :   5cc81:  mov    -0xd0(%rbp),%rcx
    0.00 :   5cc88:  cmp    $0xffffffff,%eax
    0.00 :   5cc8b:  sete   %al
    0.00 :   5cc8e:  test   %al,%al
    0.00 :   5cc90:  je     5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5cc96:  mov    $0xffffffff,%r13d
    0.00 :   5cc9c:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5cca1:  movslq %edx,%rbx
    0.00 :   5cca4:  jmp    5b14f <__GI___printf_fp_l+0x81f>
    0.00 :   5cca9:  cmp    -0xf0(%rbp),%edi
    0.00 :   5ccaf:  jne    5ccc1 <__GI___printf_fp_l+0x2391>
    0.00 :   5ccb1:  mov    -0x100(%rbp),%r8d
    0.00 :   5ccb8:  test   %r8d,%r8d
    0.00 :   5ccbb:  jg     5c0f1 <__GI___printf_fp_l+0x17c1>
    0.00 :   5ccc1:  mov    -0xf0(%rbp),%r9d
    0.00 :   5ccc8:  add    -0x100(%rbp),%r9d
    0.00 :   5cccf:  cmpb   $0x67,-0x13c(%rbp)
    0.00 :   5ccd6:  mov    (%rax),%esi
    0.00 :   5ccd8:  jne    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5ccde:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5cce5:  jne    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cceb:  mov    -0xb8(%rbp),%rdi
    0.00 :   5ccf2:  testb  $0x8,0xc(%rdi)
    0.00 :   5ccf6:  je     5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5ccfc:  mov    -0x130(%rbp),%rdi
    0.00 :   5cd03:  add    $0xc,%rdi
    0.00 :   5cd07:  cmp    %rdi,%rax
    0.00 :   5cd0a:  jne    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cd10:  mov    -0x130(%rbp),%rdi
    0.00 :   5cd17:  cmpl   $0x30,0x8(%rdi)
    0.00 :   5cd1b:  jne    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cd21:  mov    -0x100(%rbp),%edi
    0.00 :   5cd27:  mov    -0xf0(%rbp),%ecx
    0.00 :   5cd2d:  lea    -0x1(%rdi,%rcx,1),%r9d
    0.00 :   5cd32:  jmp    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cd37:  nopw   0x0(%rax,%rax,1)
    0.00 :   5cd40:  mov    0x28(%r12),%rax
    0.00 :   5cd45:  cmp    0x30(%r12),%rax
    0.00 :   5cd4a:  jae    5d464 <__GI___printf_fp_l+0x2b34>
    0.00 :   5cd50:  lea    0x1(%rax),%rdx
    0.00 :   5cd54:  mov    %rdx,0x28(%r12)
    0.00 :   5cd59:  movb   $0x2b,(%rax)
    0.00 :   5cd5c:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5cd61:  call   806a0 <_IO_padn>
    0.00 :   5cd66:  jmp    5c01b <__GI___printf_fp_l+0x16eb>
    0.00 :   5cd6b:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5cd76:  mov    %rdi,%r12
    0.00 :   5cd79:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
    0.00 :   5cd7e:  lea    -0x50(%rbp),%rdi
    0.00 :   5cd82:  mov    $0x40,%ecx
    0.00 :   5cd87:  mov    $0x2,%edx
    0.00 :   5cd8c:  movdqa 0x1854bc(%rip),%xmm4        # 1e2250 <othermask+0x1c0>
    0.00 :   5cd94:  mov    %rdi,%rsi
    0.00 :   5cd97:  sub    %r12d,%ecx
    0.00 :   5cd9a:  movaps %xmm4,-0x50(%rbp)
    0.00 :   5cd9e:  call   54d10 <__mpn_lshift>
    0.00 :   5cda3:  mov    -0x98(%rbp),%esi
    0.00 :   5cda9:  lea    0x2(%rsi),%eax
    0.00 :   5cdac:  cmp    %r13d,%eax
    0.00 :   5cdaf:  jge    5c5dd <__GI___printf_fp_l+0x1cad>
    0.00 :   5cdb5:  lea    0x3(%rsi),%eax
    0.00 :   5cdb8:  cmp    %r13d,%eax
    0.00 :   5cdbb:  jne    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5cdc1:  mov    -0x68(%rbp),%r8
    0.00 :   5cdc5:  mov    -0x70(%rbp),%r10
    0.00 :   5cdc9:  mov    -0x48(%rbp),%rcx
    0.00 :   5cdcd:  lea    0x0(,%r8,8),%rdx
    0.00 :   5cdd5:  lea    -0x8(%r10,%rdx,1),%rax
    0.00 :   5cdda:  jmp    5c6cc <__GI___printf_fp_l+0x1d9c>
    0.00 :   5cddf:  fxam
    0.00 :   5cde1:  fnstsw %ax
    0.00 :   5cde3:  fstp   %st(0)
    0.00 :   5cde5:  mov    %eax,%r13d
    0.00 :   5cde8:  and    $0x200,%r13d
    0.00 :   5cdef:  jmp    5b8b7 <__GI___printf_fp_l+0xf87>
    0.00 :   5cdf4:  movmskpd %xmm0,%r13d
    0.00 :   5cdf9:  and    $0x1,%r13d
    0.00 :   5cdfd:  jmp    5b8b7 <__GI___printf_fp_l+0xf87>
    0.00 :   5ce02:  lea    -0x1(%rdx),%eax
    0.00 :   5ce05:  xor    %edx,%edx
    0.00 :   5ce07:  div    %edi
    0.00 :   5ce09:  add    %esi,%eax
    0.00 :   5ce0b:  mov    %eax,-0x124(%rbp)
    0.00 :   5ce11:  jmp    5bb27 <__GI___printf_fp_l+0x11f7>
    0.00 :   5ce16:  mov    -0xbc(%rbp),%esi
    0.00 :   5ce1c:  movslq -0xd0(%rbp),%r13
    0.00 :   5ce23:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5ce2a:  mov    %r12,%rdi
    0.00 :   5ce2d:  test   %esi,%esi
    0.00 :   5ce2f:  mov    %r13,%rdx
    0.00 :   5ce32:  mov    $0x30,%esi
    0.00 :   5ce37:  je     5d11d <__GI___printf_fp_l+0x27ed>
    0.00 :   5ce3d:  call   824e0 <_IO_wpadn>
    0.00 :   5ce42:  mov    -0xe0(%rbp),%r9d
    0.00 :   5ce49:  cmp    %r13,%rax
    0.00 :   5ce4c:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
    0.00 :   5ce52:  add    -0xd0(%rbp),%r9d
    0.00 :   5ce59:  jmp    5bdbc <__GI___printf_fp_l+0x148c>
    0.00 :   5ce5e:  mov    %r15,%rdi
    0.00 :   5ce61:  mov    %esi,-0xd0(%rbp)
    0.00 :   5ce67:  call   28380 <malloc@plt>
    0.00 :   5ce6c:  mov    %rax,-0x130(%rbp)
    0.00 :   5ce73:  test   %rax,%rax
    0.00 :   5ce76:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ce7c:  movl   $0x0,-0x14c(%rbp)
    0.00 :   5ce86:  mov    -0xd0(%rbp),%esi
    0.00 :   5ce8c:  movl   $0x1,-0x140(%rbp)
    0.00 :   5ce96:  jmp    5b55e <__GI___printf_fp_l+0xc2e>
    0.00 :   5ce9b:  call   806a0 <_IO_padn>
    0.00 :   5cea0:  jmp    5bd33 <__GI___printf_fp_l+0x1403>
    0.00 :   5cea5:  mov    -0xe0(%rbp),%r12
    0.00 :   5ceac:  jmp    5cb97 <__GI___printf_fp_l+0x2267>
    0.00 :   5ceb1:  movslq %r14d,%r14
    0.00 :   5ceb4:  sub    %r14,%rdx
    0.00 :   5ceb7:  test   %rdx,%rdx
    0.00 :   5ceba:  jle    5cee0 <__GI___printf_fp_l+0x25b0>
    0.00 :   5cebc:  lea    (%rdi,%rax,8),%rsi
    0.00 :   5cec0:  xor    %ecx,%ecx
    0.00 :   5cec2:  nopw   0x0(%rax,%rax,1)
    0.00 :   5cec8:  mov    (%rsi,%rcx,8),%rdx
    0.00 :   5cecc:  mov    %rdx,(%rdi,%rcx,8)
    0.00 :   5ced0:  mov    -0x78(%rbp),%rdx
    0.00 :   5ced4:  add    $0x1,%rcx
    0.00 :   5ced8:  sub    %r14,%rdx
    0.00 :   5cedb:  cmp    %rcx,%rdx
    0.00 :   5cede:  jg     5cec8 <__GI___printf_fp_l+0x2598>
    0.00 :   5cee0:  mov    %rdx,-0x78(%rbp)
    0.00 :   5cee4:  mov    -0x88(%rbp),%rdx
    0.00 :   5ceeb:  sub    %r14,%rdx
    0.00 :   5ceee:  test   %rdx,%rdx
    0.00 :   5cef1:  jle    5cf1b <__GI___printf_fp_l+0x25eb>
    0.00 :   5cef3:  lea    (%r9,%rax,8),%rcx
    0.00 :   5cef7:  xor    %eax,%eax
    0.00 :   5cef9:  nopl   0x0(%rax)
    0.00 :   5cf00:  mov    (%rcx,%rax,8),%rdx
    0.00 :   5cf04:  mov    %rdx,(%r9,%rax,8)
    0.00 :   5cf08:  mov    -0x88(%rbp),%rdx
    0.00 :   5cf0f:  add    $0x1,%rax
    0.00 :   5cf13:  sub    %r14,%rdx
    0.00 :   5cf16:  cmp    %rax,%rdx
    0.00 :   5cf19:  jg     5cf00 <__GI___printf_fp_l+0x25d0>
    0.00 :   5cf1b:  mov    %rdx,-0x88(%rbp)
    0.00 :   5cf22:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5cf27:  mov    $0x40,%r15d
    0.00 :   5cf2d:  tzcnt  %r8,%r8
    0.32 :   5cf32:  sub    %ecx,%r15d
    0.00 :   5cf35:  test   %r14d,%r14d
    0.00 :   5cf38:  jne    5ca7e <__GI___printf_fp_l+0x214e>
    0.00 :   5cf3e:  xor    %r14d,%r14d
    0.68 :   5cf41:  xor    %ebx,%ebx
    0.00 :   5cf43:  cmp    %r8d,%r15d
    0.00 :   5cf46:  jg     5d240 <__GI___printf_fp_l+0x2910>
    0.00 :   5cf4c:  sub    %rbx,%rdx
    0.00 :   5cf4f:  mov    %r15d,%ecx
    0.00 :   5cf52:  add    $0x1,%r14d
    0.00 :   5cf56:  call   54e30 <__mpn_rshift>
    0.00 :   5cf5b:  mov    -0x90(%rbp),%rdi
    0.34 :   5cf62:  mov    %r15d,%ecx
    0.00 :   5cf65:  movslq %r14d,%r14
    0.00 :   5cf68:  mov    -0x88(%rbp),%rdx
    0.00 :   5cf6f:  sub    %r14,-0x78(%rbp)
    0.00 :   5cf73:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5cf77:  sub    %rbx,%rdx
    0.00 :   5cf7a:  call   54e30 <__mpn_rshift>
    0.00 :   5cf7f:  mov    -0x88(%rbp),%rdx
    0.00 :   5cf86:  mov    -0x90(%rbp),%rcx
    0.00 :   5cf8d:  mov    %rdx,%rax
    0.34 :   5cf90:  sub    %rbx,%rax
    0.00 :   5cf93:  cmpq   $0x0,-0x8(%rcx,%rax,8)
    1.52 :   5cf99:  jne    5cae7 <__GI___printf_fp_l+0x21b7>
    0.00 :   5cf9f:  mov    %rdx,%rax
    0.00 :   5cfa2:  sub    %r14,%rax
    0.00 :   5cfa5:  jmp    5cae7 <__GI___printf_fp_l+0x21b7>
    0.00 :   5cfaa:  movl   $0x0,-0x134(%rbp)
    0.00 :   5cfb4:  mov    %r14,%rax
    0.00 :   5cfb7:  lea    -0xa0(%rbp),%r13
    0.00 :   5cfbe:  jmp    5b5d0 <__GI___printf_fp_l+0xca0>
    0.00 :   5cfc3:  mov    -0xe0(%rbp),%rdi
    0.00 :   5cfca:  call   28370 <free@plt>
    0.00 :   5cfcf:  mov    -0x130(%rbp),%rdi
    0.00 :   5cfd6:  call   28370 <free@plt>
    0.00 :   5cfdb:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5cfe6:  movq   $0x0,-0x130(%rbp)
    0.00 :   5cff1:  jmp    5bfdb <__GI___printf_fp_l+0x16ab>
    0.00 :   5cff6:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5cffd:  mov    $0x2d,%esi
    0.00 :   5d002:  mov    %r12,%rdi
    0.00 :   5d005:  call   8d800 <__overflow>
    0.00 :   5d00a:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d011:  cmp    $0xffffffff,%eax
    0.00 :   5d014:  sete   %al
    0.00 :   5d017:  jmp    5cc8e <__GI___printf_fp_l+0x235e>
    0.00 :   5d01c:  movl   $0x0,-0x100(%rbp)
    0.00 :   5d026:  mov    -0xf0(%rbp),%r9d
    0.00 :   5d02d:  mov    %rax,%r15
    0.00 :   5d030:  xor    %ebx,%ebx
    0.00 :   5d032:  jmp    5b9a6 <__GI___printf_fp_l+0x1076>
    0.00 :   5d037:  cmpb   $0x67,-0x13c(%rbp)
    0.00 :   5d03e:  jne    5d049 <__GI___printf_fp_l+0x2719>
    0.00 :   5d040:  cmp    $0x4,%eax
    0.00 :   5d043:  je     5d4bf <__GI___printf_fp_l+0x2b8f>
    0.00 :   5d049:  mov    $0x2d,%edi
    0.00 :   5d04e:  jmp    5bc42 <__GI___printf_fp_l+0x1312>
    0.00 :   5d053:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d05a:  mov    $0x2b,%esi
    0.00 :   5d05f:  jmp    5cc79 <__GI___printf_fp_l+0x2349>
    0.00 :   5d064:  mov    0x28(%r12),%rax
    0.00 :   5d069:  cmp    0x30(%r12),%rax
    0.00 :   5d06e:  jae    5d4a9 <__GI___printf_fp_l+0x2b79>
    0.00 :   5d074:  lea    0x1(%rax),%rdx
    0.00 :   5d078:  mov    %rdx,0x28(%r12)
    0.00 :   5d07d:  movb   $0x20,(%rax)
    0.00 :   5d080:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5d085:  mov    -0x128(%rbp),%esi
    0.00 :   5d08b:  mov    -0x130(%rbp),%rax
    0.00 :   5d092:  cmp    %esi,-0x134(%rbp)
    0.00 :   5d098:  je     5d339 <__GI___printf_fp_l+0x2a09>
    0.00 :   5d09e:  addl   $0x1,-0x134(%rbp)
    0.00 :   5d0a5:  lea    0x4(%rax),%r14
    0.00 :   5d0a9:  movl   $0x31,0x4(%rax)
    0.00 :   5d0b0:  jmp    5c971 <__GI___printf_fp_l+0x2041>
    0.00 :   5d0b5:  mov    -0xb8(%rbp),%rax
    0.00 :   5d0bc:  testb  $0x8,0xd(%rax)
    0.00 :   5d0c0:  jne    5d0de <__GI___printf_fp_l+0x27ae>
    0.00 :   5d0c2:  mov    %r9d,%r13d
    0.00 :   5d0c5:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
    0.00 :   5d0ca:  mov    -0x90(%rbp),%rdi
    0.00 :   5d0d1:  mov    %r8,%rdx
    0.00 :   5d0d4:  call   54e30 <__mpn_rshift>
    0.00 :   5d0d9:  jmp    5cb85 <__GI___printf_fp_l+0x2255>
    0.00 :   5d0de:  mov    -0xe0(%rbp),%rdi
    0.00 :   5d0e5:  mov    -0xe0(%rbp),%rax
    0.00 :   5d0ec:  mov    -0xf0(%rbp),%rbx
    0.00 :   5d0f3:  mov    %rdi,%rsi
    0.00 :   5d0f6:  mov    %r9d,-0xe8(%rbp)
    0.00 :   5d0fd:  add    %rax,%rbx
    0.00 :   5d100:  mov    %rax,%rdi
    0.00 :   5d103:  mov    %rbx,%rdx
    0.00 :   5d106:  call   5a620 <_i18n_number_rewrite>
    0.00 :   5d10b:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d112:  mov    %rbx,%rdi
    0.00 :   5d115:  mov    %rax,%r14
    0.00 :   5d118:  jmp    5bf58 <__GI___printf_fp_l+0x1628>
    0.00 :   5d11d:  call   806a0 <_IO_padn>
    0.00 :   5d122:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d129:  jmp    5ce49 <__GI___printf_fp_l+0x2519>
    0.00 :   5d12e:  xor    %edx,%edx
    0.00 :   5d130:  xor    %esi,%esi
    0.00 :   5d132:  xor    %edi,%edi
    0.00 :   5d134:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d13b:  call   5a620 <_i18n_number_rewrite>
    0.00 :   5d140:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d147:  jmp    5c212 <__GI___printf_fp_l+0x18e2>
    0.00 :   5d14c:  mov    %rax,%rdi
    0.00 :   5d14f:  mov    %r9d,-0xe8(%rbp)
    0.00 :   5d156:  call   28380 <malloc@plt>
    0.00 :   5d15b:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d162:  test   %rax,%rax
    0.00 :   5d165:  mov    %rax,-0xe0(%rbp)
    0.00 :   5d16c:  jne    5beb6 <__GI___printf_fp_l+0x1586>
    0.00 :   5d172:  jmp    5b6f6 <__GI___printf_fp_l+0xdc6>
    0.00 :   5d177:  nopw   0x0(%rax,%rax,1)
    0.00 :   5d180:  mov    $0x40,%r15d
    0.00 :   5d186:  sub    %ecx,%r15d
    0.00 :   5d189:  jmp    5ca7e <__GI___printf_fp_l+0x214e>
    0.00 :   5d18e:  cmp    $0x3f,%r12d
    0.00 :   5d192:  je     5d4ef <__GI___printf_fp_l+0x2bbf>
    0.00 :   5d198:  mov    $0x3f,%ecx
    0.00 :   5d19d:  tzcnt  %rax,%rax
    0.00 :   5d1a2:  sub    %r12d,%ecx
    0.00 :   5d1a5:  cmp    %ecx,%eax
    0.00 :   5d1a7:  jl     5d1be <__GI___printf_fp_l+0x288e>
    0.00 :   5d1a9:  mov    -0x90(%rbp),%r12
    0.00 :   5d1b0:  xor    %r13d,%r13d
    0.00 :   5d1b3:  mov    %r8,%rdx
    0.00 :   5d1b6:  mov    %r10,%rsi
    0.00 :   5d1b9:  jmp    5cc4c <__GI___printf_fp_l+0x231c>
    0.00 :   5d1be:  mov    -0x90(%rbp),%rdi
    0.00 :   5d1c5:  mov    %r8,%rdx
    0.00 :   5d1c8:  mov    %r10,%rsi
    0.00 :   5d1cb:  lea    0x1(%r12),%ecx
    0.00 :   5d1d0:  call   54d10 <__mpn_lshift>
    0.00 :   5d1d5:  mov    -0x90(%rbp),%rdx
    0.00 :   5d1dc:  mov    -0x98(%rbp),%esi
    0.00 :   5d1e2:  mov    %rax,%r8
    0.00 :   5d1e5:  mov    -0x68(%rbp),%rax
    0.00 :   5d1e9:  add    $0x1,%rax
    0.00 :   5d1ed:  mov    %rax,-0x88(%rbp)
    0.00 :   5d1f4:  mov    %r8,-0x8(%rdx,%rax,8)
    0.00 :   5d1f9:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5d1fe:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d205:  mov    $0x2b,%esi
    0.00 :   5d20a:  jmp    5d002 <__GI___printf_fp_l+0x26d2>
    0.00 :   5d20f:  mov    $0x20,%esi
    0.00 :   5d214:  mov    %r12,%rdi
    0.00 :   5d217:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d21e:  call   838b0 <__woverflow>
    0.00 :   5d223:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d22a:  cmp    $0xffffffff,%eax
    0.00 :   5d22d:  jne    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5d233:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5d238:  nopl   0x0(%rax,%rax,1)
    0.00 :   5d240:  mov    %rdi,%rsi
    0.00 :   5d243:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5d249:  call   54d10 <__mpn_lshift>
    0.00 :   5d24e:  mov    -0x90(%rbp),%rdi
    0.00 :   5d255:  mov    -0xd0(%rbp),%ecx
    0.00 :   5d25b:  mov    -0x88(%rbp),%rdx
    0.00 :   5d262:  mov    %rdi,%rsi
    0.00 :   5d265:  call   54d10 <__mpn_lshift>
    0.00 :   5d26a:  test   %rax,%rax
    0.00 :   5d26d:  je     5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5d273:  mov    -0x88(%rbp),%rdx
    0.00 :   5d27a:  lea    0x1(%rdx),%rcx
    0.00 :   5d27e:  mov    %rcx,-0x88(%rbp)
    0.00 :   5d285:  mov    -0x90(%rbp),%rcx
    0.00 :   5d28c:  mov    %rax,(%rcx,%rdx,8)
    0.00 :   5d290:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5d295:  mov    %r8,-0xf0(%rbp)
    0.00 :   5d29c:  mov    %r9d,-0xe8(%rbp)
    0.00 :   5d2a3:  call   89ef0 <_IO_vtable_check>
    0.00 :   5d2a8:  mov    0x38(%rbx),%rax
    0.00 :   5d2ac:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5d2b7:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d2be:  mov    -0xf0(%rbp),%r8
    0.00 :   5d2c5:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5d2ca:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d2d1:  mov    $0x2d,%esi
    0.00 :   5d2d6:  mov    %r12,%rdi
    0.00 :   5d2d9:  call   8d800 <__overflow>
    0.00 :   5d2de:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d2e5:  cmp    $0xffffffff,%eax
    0.00 :   5d2e8:  sete   %al
    0.00 :   5d2eb:  jmp    5b6e4 <__GI___printf_fp_l+0xdb4>
    0.00 :   5d2f0:  mov    %r9d,-0xe8(%rbp)
    0.00 :   5d2f7:  mov    %rdi,-0xf0(%rbp)
    0.00 :   5d2fe:  call   89ef0 <_IO_vtable_check>
    0.00 :   5d303:  mov    0x38(%rbx),%rax
    0.00 :   5d307:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d30e:  mov    -0xf0(%rbp),%r8
    0.00 :   5d315:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5d31a:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d321:  mov    $0x2b,%esi
    0.00 :   5d326:  jmp    5b6cf <__GI___printf_fp_l+0xd9f>
    0.00 :   5d32b:  movslq %edi,%r13
    0.00 :   5d32e:  mov    %r14,%r10
    0.00 :   5d331:  sub    %r13,%r8
    0.00 :   5d334:  jmp    5d1b3 <__GI___printf_fp_l+0x2883>
    0.00 :   5d339:  mov    -0xc0(%rbp),%esi
    0.00 :   5d33f:  movl   $0x31,(%rax)
    0.00 :   5d345:  mov    %esi,0x4(%rax)
    0.00 :   5d348:  mov    -0xb8(%rbp),%rax
    0.00 :   5d34f:  testb  $0x8,0xc(%rax)
    0.00 :   5d353:  jne    5d35d <__GI___printf_fp_l+0x2a2d>
    0.00 :   5d355:  test   %ebx,%ebx
    0.00 :   5d357:  je     5d486 <__GI___printf_fp_l+0x2b56>
    0.00 :   5d35d:  movslq -0x134(%rbp),%rax
    0.00 :   5d364:  mov    -0x130(%rbp),%rdi
    0.00 :   5d36b:  movl   $0x30,0x8(%rdi,%rax,4)
    0.00 :   5d373:  lea    0x1(%rbx,%rax,1),%ebx
    0.00 :   5d377:  mov    %rdi,%r14
    0.00 :   5d37a:  mov    -0xb8(%rbp),%rax
    0.00 :   5d381:  addl   $0x1,-0x98(%rbp)
    0.00 :   5d388:  movslq 0x8(%rax),%rsi
    0.00 :   5d38c:  mov    0x1bca65(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5d393:  mov    %fs:(%rax),%rax
    0.00 :   5d397:  movl   $0x1,-0x134(%rbp)
    0.00 :   5d3a1:  movzwl (%rax,%rsi,2),%eax
    0.00 :   5d3a5:  and    $0x100,%ax
    0.00 :   5d3a9:  cmp    $0x1,%ax
    0.00 :   5d3ad:  sbb    %eax,%eax
    0.00 :   5d3af:  and    $0x20,%eax
    0.00 :   5d3b2:  add    $0x45,%eax
    0.00 :   5d3b5:  mov    %eax,-0x9c(%rbp)
    0.00 :   5d3bb:  jmp    5c971 <__GI___printf_fp_l+0x2041>
    0.00 :   5d3c0:  test   %esi,%esi
    0.00 :   5d3c2:  je     5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5d3c8:  mov    -0x90(%rbp),%rsi
    0.00 :   5d3cf:  tzcnt  %rax,%rax
    0.00 :   5d3d4:  mov    %eax,%r8d
    0.00 :   5d3d7:  mov    (%rsi),%r13
    0.00 :   5d3da:  test   %r13,%r13
    0.00 :   5d3dd:  je     5d498 <__GI___printf_fp_l+0x2b68>
    0.00 :   5d3e3:  xor    %r8d,%r8d
    0.00 :   5d3e6:  mov    $0x40,%r15d
    0.00 :   5d3ec:  mov    %rdi,%rsi
    0.00 :   5d3ef:  tzcnt  %r13,%r8
    0.00 :   5d3f4:  cmp    %r8d,%eax
    0.00 :   5d3f7:  cmovle %eax,%r8d
    0.00 :   5d3fb:  sub    %ecx,%r15d
    0.00 :   5d3fe:  xor    %r13d,%r13d
    0.00 :   5d401:  jmp    5cf3e <__GI___printf_fp_l+0x260e>
    0.00 :   5d406:  mov    $0x20,%esi
    0.00 :   5d40b:  mov    %r12,%rdi
    0.00 :   5d40e:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d415:  call   8d800 <__overflow>
    0.00 :   5d41a:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d421:  cmp    $0xffffffff,%eax
    0.00 :   5d424:  jne    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5d42a:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5d42f:  nop
    0.00 :   5d430:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5d43b:  mov    %r9d,%r13d
    0.00 :   5d43e:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
    0.00 :   5d443:  mov    -0x14c(%rbp),%r11d
    0.00 :   5d44a:  test   %r11d,%r11d
    0.00 :   5d44d:  jne    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5d453:  mov    -0xe0(%rbp),%rdi
    0.00 :   5d45a:  call   28370 <free@plt>
    0.00 :   5d45f:  jmp    5b6f6 <__GI___printf_fp_l+0xdc6>
    0.00 :   5d464:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d46b:  mov    $0x2b,%esi
    0.00 :   5d470:  jmp    5d2d6 <__GI___printf_fp_l+0x29a6>
    0.00 :   5d475:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d47c:  mov    $0x20,%esi
    0.00 :   5d481:  jmp    5b6cf <__GI___printf_fp_l+0xd9f>
    0.00 :   5d486:  mov    -0x128(%rbp),%ebx
    0.00 :   5d48c:  mov    -0x130(%rbp),%r14
    0.00 :   5d493:  jmp    5d37a <__GI___printf_fp_l+0x2a4a>
    0.00 :   5d498:  mov    $0x40,%r15d
    0.00 :   5d49e:  mov    %rdi,%rsi
    0.00 :   5d4a1:  sub    %ecx,%r15d
    0.00 :   5d4a4:  jmp    5cf3e <__GI___printf_fp_l+0x260e>
    0.00 :   5d4a9:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d4b0:  mov    $0x20,%esi
    0.00 :   5d4b5:  jmp    5d2d6 <__GI___printf_fp_l+0x29a6>
    0.00 :   5d4ba:  call   136550 <__stack_chk_fail>
    0.00 :   5d4bf:  mov    $0x6,%edx
    0.00 :   5d4c4:  lea    0x185575(%rip),%rsi        # 1e2a40 <default_rwlockattr+0x368>
    0.00 :   5d4cb:  mov    %r14,%rdi
    0.00 :   5d4ce:  call   c5ae0 <wmemcpy>
    0.00 :   5d4d3:  mov    -0xc0(%rbp),%eax
    0.00 :   5d4d9:  mov    %eax,0x4(%r14)
    0.00 :   5d4dd:  lea    0x8(%r14),%rax
    0.00 :   5d4e1:  cmp    %r15,%rax
    0.00 :   5d4e4:  jbe    5d4f9 <__GI___printf_fp_l+0x2bc9>
    0.00 :   5d4e6:  add    $0x14,%r15
    0.00 :   5d4ea:  jmp    5bcb3 <__GI___printf_fp_l+0x1383>
    0.00 :   5d4ef:  xor    %r13d,%r13d
    0.00 :   5d4f2:  xor    %edi,%edi
    0.00 :   5d4f4:  jmp    5c657 <__GI___printf_fp_l+0x1d27>
    0.00 :   5d4f9:  mov    %r15,%rdx
    0.00 :   5d4fc:  lea    0x18(%r14),%rdi
    0.00 :   5d500:  mov    $0x30,%esi
    0.00 :   5d505:  add    $0x10,%r15
    0.00 :   5d509:  sub    %rax,%rdx
    0.00 :   5d50c:  sar    $0x2,%rdx
    0.00 :   5d510:  call   283f0 <*ABS*+0xc5b00@plt>
    0.00 :   5d515:  jmp    5bcb3 <__GI___printf_fp_l+0x1383>
    0.00 :   5d51a:  jmp    28961 <__GI___printf_fp_l.cold>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (395 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008b8a <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_addr()>:
    1.52 :   8b8a:   endbr64
    0.00 :   8b8e:   push   %rbp
    0.75 :   8b8f:   mov    %rsp,%rbp
   15.11 :   8b92:   mov    %rdi,-0x8(%rbp)
    1.27 :   8b96:   mov    -0x8(%rbp),%rax
   80.34 :   8b9a:   pop    %rbp
    1.01 :   8b9b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (391 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000453c <std::vector<float, std::allocator<float> >::operator[](unsigned long) const>:
    0.26 :   453c:   endbr64
    0.00 :   4540:   push   %rbp
    0.51 :   4541:   mov    %rsp,%rbp
    0.26 :   4544:   mov    %rdi,-0x8(%rbp)
    0.51 :   4548:   mov    %rsi,-0x10(%rbp)
    0.77 :   454c:   mov    -0x8(%rbp),%rax
   28.90 :   4550:   mov    (%rax),%rdx
   40.48 :   4553:   mov    -0x10(%rbp),%rax
   23.70 :   4557:   shl    $0x2,%rax
    0.26 :   455b:   add    %rdx,%rax
    3.34 :   455e:   pop    %rbp
    1.02 :   455f:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (389 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000097ce <decltype ((get<0>)((forward<std::pair<int const, float> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, float> const&>(std::pair<int const, float> const&) const>:
    9.00 :   97ce:   endbr64
    6.19 :   97d2:   push   %rbp
    1.54 :   97d3:   mov    %rsp,%rbp
   10.05 :   97d6:   sub    $0x10,%rsp
    0.00 :   97da:   mov    %rdi,-0x8(%rbp)
    2.32 :   97de:   mov    %rsi,-0x10(%rbp)
    7.98 :   97e2:   mov    -0x10(%rbp),%rax
   37.55 :   97e6:   mov    %rax,%rdi
    1.03 :   97e9:   call   a12c <std::pair<int const, float> const& std::forward<std::pair<int const, float> const&>(std::remove_reference<std::pair<int const, float> const&>::type&)>
    3.87 :   97ee:   mov    %rax,%rdi
    0.00 :   97f1:   call   a13e <std::tuple_element<0ul, std::pair<int const, float> >::type const& std::get<0ul, int const, float>(std::pair<int const, float> const&)>
    1.55 :   97f6:   leave
   18.91 :   97f7:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (378 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a13e <std::tuple_element<0ul, std::pair<int const, float> >::type const& std::get<0ul, int const, float>(std::pair<int const, float> const&)>:
    1.33 :   a13e:   endbr64
    0.27 :   a142:   push   %rbp
   11.71 :   a143:   mov    %rsp,%rbp
    4.44 :   a146:   sub    $0x10,%rsp
    2.13 :   a14a:   mov    %rdi,-0x8(%rbp)
    0.27 :   a14e:   mov    -0x8(%rbp),%rax
   73.47 :   a152:   mov    %rax,%rdi
    0.00 :   a155:   call   a658 <int const& std::__pair_get<0ul>::__const_get<int const, float>(std::pair<int const, float> const&)>
    1.32 :   a15a:   leave
    5.06 :   a15b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (375 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000054d4 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v()>:
    0.78 :   54d4:   endbr64
    0.00 :   54d8:   push   %rbp
   10.16 :   54d9:   mov    %rsp,%rbp
    2.39 :   54dc:   sub    $0x10,%rsp
    4.81 :   54e0:   mov    %rdi,-0x8(%rbp)
    0.26 :   54e4:   mov    -0x8(%rbp),%rax
   77.07 :   54e8:   mov    %rax,%rdi
    0.00 :   54eb:   call   688e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr()>
    0.80 :   54f0:   leave
    3.72 :   54f1:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (352 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009f0c <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)>:
    1.43 :   9f0c:   endbr64
    1.98 :   9f10:   push   %rbp
    1.40 :   9f11:   mov    %rsp,%rbp
    0.00 :   9f14:   mov    %rdi,-0x8(%rbp)
    0.00 :   9f18:   mov    %rsi,-0x10(%rbp)
    0.00 :   9f1c:   mov    -0x8(%rbp),%rax
   19.14 :   9f20:   mov    (%rax),%edx
   33.50 :   9f22:   mov    -0x10(%rbp),%rax
    4.49 :   9f26:   mov    (%rax),%eax
    7.68 :   9f28:   cmp    %eax,%edx
    1.14 :   9f2a:   jl     9f53 <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)+0x47>
    0.00 :   9f2c:   mov    -0x10(%rbp),%rax
   14.00 :   9f30:   mov    (%rax),%edx
    3.13 :   9f32:   mov    -0x8(%rbp),%rax
    0.00 :   9f36:   mov    (%rax),%eax
    1.14 :   9f38:   cmp    %eax,%edx
    0.85 :   9f3a:   jl     9f5a <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)+0x4e>
    0.00 :   9f3c:   mov    -0x8(%rbp),%rax
    0.00 :   9f40:   movss  0x4(%rax),%xmm1
    0.00 :   9f45:   mov    -0x10(%rbp),%rax
    0.00 :   9f49:   movss  0x4(%rax),%xmm0
    0.00 :   9f4e:   comiss %xmm1,%xmm0
    0.00 :   9f51:   jbe    9f5a <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)+0x4e>
    0.00 :   9f53:   mov    $0x1,%eax
    6.46 :   9f58:   jmp    9f5f <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)+0x53>
    0.00 :   9f5a:   mov    $0x0,%eax
    0.00 :   9f5f:   pop    %rbp
    3.66 :   9f60:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (309 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a12c <std::pair<int const, float> const& std::forward<std::pair<int const, float> const&>(std::remove_reference<std::pair<int const, float> const&>::type&)>:
    9.09 :   a12c:   endbr64
    0.00 :   a130:   push   %rbp
    1.94 :   a131:   mov    %rsp,%rbp
    0.32 :   a134:   mov    %rdi,-0x8(%rbp)
    3.24 :   a138:   mov    -0x8(%rbp),%rax
   63.45 :   a13c:   pop    %rbp
   21.94 :   a13d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (264 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004560 <std::unordered_map<int, float, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<int const, float> > >::operator[](int const&)>:
    0.00 :   4560:   endbr64
    3.78 :   4564:   push   %rbp
   25.02 :   4565:   mov    %rsp,%rbp
    0.00 :   4568:   sub    $0x10,%rsp
    0.00 :   456c:   mov    %rdi,-0x8(%rbp)
    0.76 :   4570:   mov    %rsi,-0x10(%rbp)
    0.75 :   4574:   mov    -0x8(%rbp),%rax
    3.79 :   4578:   mov    -0x10(%rbp),%rdx
    7.88 :   457c:   mov    %rdx,%rsi
   22.03 :   457f:   mov    %rax,%rdi
    0.00 :   4582:   call   52b4 <std::__detail::_Map_base<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](int const&)>
   25.78 :   4587:   leave
   10.21 :   4588:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (252 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>:
    8.78 :   9382:   endbr64
    1.20 :   9386:   push   %rbp
    1.58 :   9387:   mov    %rsp,%rbp
    0.40 :   938a:   mov    %rdi,-0x8(%rbp)
    2.39 :   938e:   mov    -0x8(%rbp),%rax
   15.87 :   9392:   mov    (%rax),%rax
   65.11 :   9395:   pop    %rbp
    4.68 :   9396:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (249 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000097b0 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v() const>:
    0.00 :   97b0:   endbr64
    0.00 :   97b4:   push   %rbp
    0.00 :   97b5:   mov    %rsp,%rbp
    0.00 :   97b8:   sub    $0x10,%rsp
   32.18 :   97bc:   mov    %rdi,-0x8(%rbp)
    3.24 :   97c0:   mov    -0x8(%rbp),%rax
   37.91 :   97c4:   mov    %rax,%rdi
    0.00 :   97c7:   call   a10e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr() const>
    2.02 :   97cc:   leave
   24.65 :   97cd:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (241 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a10e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr() const>:
    0.83 :   a10e:   endbr64
    0.42 :   a112:   push   %rbp
   18.32 :   a113:   mov    %rsp,%rbp
    0.00 :   a116:   sub    $0x10,%rsp
   10.75 :   a11a:   mov    %rdi,-0x8(%rbp)
    0.83 :   a11e:   mov    -0x8(%rbp),%rax
   31.11 :   a122:   mov    %rax,%rdi
    0.00 :   a125:   call   a63a <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_ptr() const>
    0.41 :   a12a:   leave
   37.33 :   a12b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (224 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000078ce <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const>:
    0.00 :   78ce:   endbr64
    0.00 :   78d2:   push   %rbp
   26.78 :   78d3:   mov    %rsp,%rbp
    0.44 :   78d6:   sub    $0x30,%rsp
   10.72 :   78da:   mov    %rdi,-0x18(%rbp)
    0.00 :   78de:   mov    %rsi,-0x20(%rbp)
    0.90 :   78e2:   mov    %rdx,-0x28(%rbp)
    0.45 :   78e6:   mov    %fs:0x28,%rax
    0.00 :   78ef:   mov    %rax,-0x8(%rbp)
   28.59 :   78f3:   xor    %eax,%eax
    0.45 :   78f5:   mov    -0x28(%rbp),%rdx
   22.78 :   78f9:   mov    -0x20(%rbp),%rcx
    1.78 :   78fd:   lea    -0x9(%rbp),%rax
    0.00 :   7901:   mov    %rcx,%rsi
    0.00 :   7904:   mov    %rax,%rdi
    0.00 :   7907:   call   3f62 <std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const>
    0.00 :   790c:   mov    -0x8(%rbp),%rdx
    1.79 :   7910:   sub    %fs:0x28,%rdx
    0.84 :   7919:   je     7920 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long, unsigned long) const+0x52>
    0.00 :   791b:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   7920:   leave
    4.48 :   7921:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (221 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007d48 <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_ptr()>:
    1.35 :   7d48:   endbr64
    0.45 :   7d4c:   push   %rbp
    4.07 :   7d4d:   mov    %rsp,%rbp
   10.97 :   7d50:   sub    $0x10,%rsp
   34.86 :   7d54:   mov    %rdi,-0x8(%rbp)
    2.72 :   7d58:   mov    -0x8(%rbp),%rax
   41.96 :   7d5c:   mov    %rax,%rdi
    0.00 :   7d5f:   call   8b8a <__gnu_cxx::__aligned_buffer<std::pair<int const, float> >::_M_addr()>
    1.36 :   7d64:   leave
    2.27 :   7d65:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (120 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009263 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   9263:   endbr64
    0.00 :   9267:   push   %rbp
    0.00 :   9268:   mov    %rsp,%rbp
    0.00 :   926b:   sub    $0x20,%rsp
    0.00 :   926f:   mov    %rdi,-0x8(%rbp)
    0.00 :   9273:   mov    %rsi,-0x10(%rbp)
    0.00 :   9277:   mov    %rdx,-0x18(%rbp)
    0.00 :   927b:   jmp    9289 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x26>
    0.00 :   927d:   lea    -0x8(%rbp),%rax
    2.43 :   9281:   mov    %rax,%rdi
    0.00 :   9284:   call   935e <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator++()>
    2.53 :   9289:   mov    -0x18(%rbp),%rdx
    3.35 :   928d:   mov    -0x8(%rbp),%rcx
   40.71 :   9291:   lea    -0x19(%rbp),%rax
    0.00 :   9295:   mov    %rcx,%rsi
    0.00 :   9298:   mov    %rax,%rdi
    0.00 :   929b:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    4.19 :   92a0:   test   %al,%al
    0.00 :   92a2:   jne    927d <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x1a>
    0.00 :   92a4:   lea    -0x10(%rbp),%rax
    0.00 :   92a8:   mov    %rax,%rdi
    0.00 :   92ab:   call   9ee8 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator--()>
    0.00 :   92b0:   jmp    92be <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x5b>
    0.00 :   92b2:   lea    -0x10(%rbp),%rax
    3.33 :   92b6:   mov    %rax,%rdi
    0.00 :   92b9:   call   9ee8 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator--()>
    0.83 :   92be:   mov    -0x10(%rbp),%rdx
   26.78 :   92c2:   mov    -0x18(%rbp),%rcx
    1.66 :   92c6:   lea    -0x19(%rbp),%rax
    0.00 :   92ca:   mov    %rcx,%rsi
    0.00 :   92cd:   mov    %rax,%rdi
    0.00 :   92d0:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    3.31 :   92d5:   test   %al,%al
    0.00 :   92d7:   jne    92b2 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x4f>
    0.00 :   92d9:   lea    -0x10(%rbp),%rdx
    0.84 :   92dd:   lea    -0x8(%rbp),%rax
    0.00 :   92e1:   mov    %rdx,%rsi
    0.00 :   92e4:   mov    %rax,%rdi
    0.84 :   92e7:   call   9de0 <bool __gnu_cxx::operator< <std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   92ec:   xor    $0x1,%eax
    0.00 :   92ef:   test   %al,%al
    1.68 :   92f1:   je     92f9 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x96>
    0.00 :   92f3:   mov    -0x8(%rbp),%rax
    0.84 :   92f7:   jmp    931d <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0xba>
    0.00 :   92f9:   mov    -0x10(%rbp),%rdx
    1.67 :   92fd:   mov    -0x8(%rbp),%rax
    0.00 :   9301:   mov    %rdx,%rsi
    0.00 :   9304:   mov    %rax,%rdi
    0.00 :   9307:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    3.35 :   930c:   lea    -0x8(%rbp),%rax
    1.68 :   9310:   mov    %rax,%rdi
    0.00 :   9313:   call   935e <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator++()>
    0.00 :   9318:   jmp    9289 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x26>
    0.00 :   931d:   leave
    0.00 :   931e:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (88 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005a4d0 <hack_digit>:
    2.43 :   5a4d0:  push   %r12
    0.00 :   5a4d2:  push   %rbx
    7.77 :   5a4d3:  mov    %rdi,%rbx
    1.04 :   5a4d6:  sub    $0x8,%rsp
    1.18 :   5a4da:  mov    (%rdi),%eax
    2.18 :   5a4dc:  test   %eax,%eax
    0.00 :   5a4de:  je     5a4ea <hack_digit+0x1a>
    0.00 :   5a4e0:  cmpl   $0x66,0x4(%rdi)
    0.00 :   5a4e4:  je     5a5d8 <hack_digit+0x108>
    0.00 :   5a4ea:  mov    0x28(%rbx),%r9
    1.16 :   5a4ee:  mov    0x18(%rbx),%rdx
    1.17 :   5a4f2:  mov    0x10(%rbx),%rdi
    2.38 :   5a4f6:  test   %r9,%r9
    1.16 :   5a4f9:  je     5a5a8 <hack_digit+0xd8>
    0.00 :   5a4ff:  cmp    %rdx,%r9
    1.19 :   5a502:  jle    5a540 <hack_digit+0x70>
    0.00 :   5a504:  mov    $0x30,%r12d
    0.00 :   5a50a:  mov    $0xa,%ecx
    0.00 :   5a50f:  mov    %rdi,%rsi
    0.00 :   5a512:  call   55420 <__mpn_mul_1>
    3.52 :   5a517:  test   %rax,%rax
    0.00 :   5a51a:  je     5a530 <hack_digit+0x60>
    0.00 :   5a51c:  mov    0x18(%rbx),%rdx
    4.39 :   5a520:  mov    0x10(%rbx),%rcx
    1.17 :   5a524:  lea    0x1(%rdx),%rsi
    0.00 :   5a528:  mov    %rsi,0x18(%rbx)
    0.00 :   5a52c:  mov    %rax,(%rcx,%rdx,8)
    4.81 :   5a530:  add    $0x8,%rsp
    7.48 :   5a534:  mov    %r12d,%eax
    0.00 :   5a537:  pop    %rbx
    3.05 :   5a538:  pop    %r12
    0.00 :   5a53a:  ret
    0.00 :   5a53b:  nopl   0x0(%rax,%rax,1)
    0.00 :   5a540:  mov    0x30(%rbx),%r10
    2.35 :   5a544:  mov    0x20(%rbx),%r8
    0.00 :   5a548:  mov    %rdx,%rcx
    0.00 :   5a54b:  xor    %esi,%esi
    0.00 :   5a54d:  mov    %rdi,%rdx
    0.00 :   5a550:  mov    %r10,%rdi
    1.21 :   5a553:  call   546c0 <__mpn_divrem>
    0.00 :   5a558:  mov    0x30(%rbx),%rdx
    0.00 :   5a55c:  mov    %rax,%r8
    0.00 :   5a55f:  mov    0x18(%rbx),%rax
    0.00 :   5a563:  sub    0x28(%rbx),%rax
    1.18 :   5a567:  mov    %r8,(%rdx,%rax,8)
    5.12 :   5a56b:  mov    (%rdx),%r12
   23.71 :   5a56e:  mov    0x28(%rbx),%rdx
    0.00 :   5a572:  mov    %rdx,0x18(%rbx)
    0.00 :   5a576:  test   %rdx,%rdx
    0.00 :   5a579:  je     5a600 <hack_digit+0x130>
    0.00 :   5a57f:  mov    0x10(%rbx),%rdi
    0.00 :   5a583:  jmp    5a592 <hack_digit+0xc2>
    0.00 :   5a585:  nopl   (%rax)
    0.00 :   5a588:  sub    $0x1,%rdx
    0.00 :   5a58c:  mov    %rdx,0x18(%rbx)
    0.00 :   5a590:  je     5a600 <hack_digit+0x130>
    0.00 :   5a592:  cmpq   $0x0,-0x8(%rdi,%rdx,8)
    3.58 :   5a598:  je     5a588 <hack_digit+0xb8>
    1.21 :   5a59a:  add    $0x30,%r12d
    3.57 :   5a59e:  jmp    5a50a <hack_digit+0x3a>
    0.00 :   5a5a3:  nopl   0x0(%rax,%rax,1)
    0.00 :   5a5a8:  lea    -0x8(%rdi,%rdx,8),%rbx
    2.37 :   5a5ad:  mov    $0xa,%ecx
    3.54 :   5a5b2:  sub    $0x1,%rdx
    0.00 :   5a5b6:  mov    %rdi,%rsi
    0.00 :   5a5b9:  mov    (%rbx),%r12
    2.02 :   5a5bc:  call   55420 <__mpn_mul_1>
    0.00 :   5a5c1:  mov    %rax,(%rbx)
    0.00 :   5a5c4:  add    $0x30,%r12d
    0.00 :   5a5c8:  add    $0x8,%rsp
    0.00 :   5a5cc:  mov    %r12d,%eax
    0.00 :   5a5cf:  pop    %rbx
    3.09 :   5a5d0:  pop    %r12
    1.00 :   5a5d2:  ret
    0.00 :   5a5d3:  nopl   0x0(%rax,%rax,1)
    0.00 :   5a5d8:  mov    0x8(%rdi),%eax
    0.00 :   5a5db:  mov    $0x30,%r12d
    0.00 :   5a5e1:  lea    -0x1(%rax),%edx
    0.00 :   5a5e4:  mov    %edx,0x8(%rdi)
    0.00 :   5a5e7:  test   %eax,%eax
    0.00 :   5a5e9:  jle    5a4ea <hack_digit+0x1a>
    0.00 :   5a5ef:  add    $0x8,%rsp
    0.00 :   5a5f3:  mov    %r12d,%eax
    0.00 :   5a5f6:  pop    %rbx
    0.00 :   5a5f7:  pop    %r12
    0.00 :   5a5f9:  ret
    0.00 :   5a5fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   5a600:  movq   $0x1,0x18(%rbx)
    0.00 :   5a608:  add    $0x30,%r12d
    0.00 :   5a60c:  add    $0x8,%rsp
    0.00 :   5a610:  mov    %r12d,%eax
    0.00 :   5a613:  pop    %rbx
    0.00 :   5a614:  pop    %r12
    0.00 :   5a616:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (115 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009792 <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_M_eq() const>:
    0.00 :   9792:   endbr64
   18.07 :   9796:   push   %rbp
    6.95 :   9797:   mov    %rsp,%rbp
    0.00 :   979a:   sub    $0x10,%rsp
    0.87 :   979e:   mov    %rdi,-0x8(%rbp)
   41.00 :   97a2:   mov    -0x8(%rbp),%rax
   24.37 :   97a6:   mov    %rax,%rdi
    0.00 :   97a9:   call   a0fc <std::__detail::_Hashtable_ebo_helper<0, std::equal_to<int>, true>::_M_cget() const>
    0.88 :   97ae:   leave
    7.86 :   97af:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (108 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009ee8 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator--()>:
    1.86 :   9ee8:   endbr64
    3.72 :   9eec:   push   %rbp
    2.74 :   9eed:   mov    %rsp,%rbp
    0.00 :   9ef0:   mov    %rdi,-0x8(%rbp)
    2.79 :   9ef4:   mov    -0x8(%rbp),%rax
   22.27 :   9ef8:   mov    (%rax),%rax
   27.91 :   9efb:   lea    -0x8(%rax),%rdx
    5.58 :   9eff:   mov    -0x8(%rbp),%rax
    0.93 :   9f03:   mov    %rdx,(%rax)
   15.65 :   9f06:   mov    -0x8(%rbp),%rax
   15.61 :   9f0a:   pop    %rbp
    0.93 :   9f0b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (107 samples, percent: local period)
---------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004ad4 <std::pair<int, float>::operator=(std::pair<int, float>&&)>:
    0.00 :   4ad4:   endbr64
    6.59 :   4ad8:   push   %rbp
    1.87 :   4ad9:   mov    %rsp,%rbp
    0.00 :   4adc:   sub    $0x10,%rsp
    0.00 :   4ae0:   mov    %rdi,-0x8(%rbp)
    0.00 :   4ae4:   mov    %rsi,-0x10(%rbp)
    0.92 :   4ae8:   mov    -0x10(%rbp),%rax
    3.74 :   4aec:   mov    %rax,%rdi
    2.79 :   4aef:   call   41bc <int&& std::forward<int>(std::remove_reference<int>::type&)>
    0.00 :   4af4:   mov    (%rax),%edx
   22.21 :   4af6:   mov    -0x8(%rbp),%rax
    0.94 :   4afa:   mov    %edx,(%rax)
   15.84 :   4afc:   mov    -0x10(%rbp),%rax
    0.00 :   4b00:   add    $0x4,%rax
    0.00 :   4b04:   mov    %rax,%rdi
    0.00 :   4b07:   call   5d9c <float&& std::forward<float>(std::remove_reference<float>::type&)>
    0.00 :   4b0c:   movss  (%rax),%xmm0
   35.82 :   4b10:   mov    -0x8(%rbp),%rax
    0.00 :   4b14:   movss  %xmm0,0x4(%rax)
    9.28 :   4b19:   mov    -0x8(%rbp),%rax
    0.00 :   4b1d:   leave
    0.00 :   4b1e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (97 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000977b <std::__detail::_Hashtable_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true> >::_S_equals(unsigned long, std::__detail::_Hash_node_code_cache<false> const&)>:
   15.44 :   977b:   endbr64
    7.22 :   977f:   push   %rbp
    0.00 :   9780:   mov    %rsp,%rbp
    1.03 :   9783:   mov    %rdi,-0x8(%rbp)
   43.34 :   9787:   mov    %rsi,-0x10(%rbp)
    0.00 :   978b:   mov    $0x1,%eax
    0.00 :   9790:   pop    %rbp
   32.97 :   9791:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (71 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000075030 <__vfprintf_internal>:
    1.50 :   75030:  endbr64
    0.00 :   75034:  push   %r15
    0.00 :   75036:  push   %r14
    0.00 :   75038:  push   %r13
    0.00 :   7503a:  push   %r12
    0.00 :   7503c:  push   %rbp
    0.00 :   7503d:  mov    %rdi,%rbp
    0.00 :   75040:  push   %rbx
    1.50 :   75041:  sub    $0x538,%rsp
    0.00 :   75048:  mov    %rsi,0x8(%rsp)
    0.00 :   7504d:  mov    %rdx,0x20(%rsp)
    0.00 :   75052:  mov    %ecx,0x7c(%rsp)
    0.00 :   75056:  mov    %fs:0x28,%rax
    2.97 :   7505f:  mov    %rax,0x528(%rsp)
    0.00 :   75067:  mov    0x1a4da2(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   7506e:  mov    %fs:(%rax),%eax
    4.38 :   75071:  mov    %eax,0x90(%rsp)
    1.49 :   75078:  mov    0xc0(%rdi),%eax
    0.00 :   7507e:  test   %eax,%eax
    0.00 :   75080:  jne    75500 <__vfprintf_internal+0x4d0>
    0.00 :   75086:  movl   $0xffffffff,0xc0(%rdi)
    0.00 :   75090:  mov    0x0(%rbp),%ebx
    0.00 :   75093:  test   $0x8,%bl
    0.00 :   75096:  jne    77380 <__vfprintf_internal+0x2350>
    0.00 :   7509c:  cmpq   $0x0,0x8(%rsp)
    2.87 :   750a2:  je     77440 <__vfprintf_internal+0x2410>
    2.96 :   750a8:  test   $0x2,%bl
    0.00 :   750ab:  jne    76620 <__vfprintf_internal+0x15f0>
    0.00 :   750b1:  mov    0x20(%rsp),%rax
    0.00 :   750b6:  mov    0x8(%rsp),%rdi
    0.00 :   750bb:  mov    $0x25,%esi
    0.00 :   750c0:  movdqu (%rax),%xmm1
    0.00 :   750c4:  movups %xmm1,0x118(%rsp)
    0.00 :   750cc:  mov    0x10(%rax),%rax
    0.00 :   750d0:  movaps %xmm1,0x10(%rsp)
    0.00 :   750d5:  mov    %rax,0x128(%rsp)
    0.00 :   750dd:  call   284d0 <*ABS*+0xab010@plt>
    1.64 :   750e2:  mov    %rbp,0xf8(%rsp)
    0.00 :   750ea:  mov    %rax,0x68(%rsp)
    0.00 :   750ef:  movb   $0x0,0xa6(%rsp)
    0.00 :   750f7:  and    $0x80,%bh
    0.00 :   750fa:  je     75518 <__vfprintf_internal+0x4e8>
    0.00 :   75100:  mov    0xd8(%rbp),%r12
    1.11 :   75107:  lea    0x1a265a(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   7510e:  mov    0x68(%rsp),%rbx
    0.00 :   75113:  lea    0x1a18e6(%rip),%rcx        # 216a00 <_IO_helper_jumps>
    0.00 :   7511a:  sub    0x1a36f7(%rip),%rax        # 218818 <tryfunc.0+0x18>
    0.00 :   75121:  sub    0x8(%rsp),%rbx
    0.00 :   75126:  mov    %rax,0x30(%rsp)
    0.00 :   7512b:  mov    %rax,%rdi
    0.00 :   7512e:  mov    %r12,%rax
    0.00 :   75131:  sub    %rcx,%rax
    0.00 :   75134:  cmp    %rax,%rdi
    0.00 :   75137:  jbe    769d0 <__vfprintf_internal+0x19a0>
    0.00 :   7513d:  mov    0x8(%rsp),%rsi
    0.00 :   75142:  mov    %rbx,%rdx
    0.00 :   75145:  mov    %rbp,%rdi
    0.00 :   75148:  call   *0x38(%r12)
    1.51 :   7514d:  cmp    %rax,%rbx
    0.00 :   75150:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   75156:  movslq %ebx,%rdx
    0.00 :   75159:  mov    %rbx,%rax
    0.00 :   7515c:  mov    %ebx,%r12d
    1.51 :   7515f:  shr    $0x3f,%rax
    0.00 :   75163:  cmp    %rdx,%rbx
    0.00 :   75166:  mov    $0x1,%edx
    1.45 :   7516b:  cmovne %edx,%eax
    0.00 :   7516e:  test   %eax,%eax
    0.00 :   75170:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   75176:  test   %ebx,%ebx
    0.00 :   75178:  js     7533d <__vfprintf_internal+0x30d>
    0.00 :   7517e:  mov    0x68(%rsp),%r13
    0.00 :   75183:  cmpb   $0x0,0x0(%r13)
    1.47 :   75188:  je     7533d <__vfprintf_internal+0x30d>
    0.00 :   7518e:  mov    0x1a7833(%rip),%rbx        # 21c9c8 <__printf_function_table>
    0.00 :   75195:  mov    %rbx,0x98(%rsp)
    1.06 :   7519d:  test   %rbx,%rbx
    0.00 :   751a0:  jne    77128 <__vfprintf_internal+0x20f8>
    0.00 :   751a6:  cmpq   $0x0,0x1a782a(%rip)        # 21c9d8 <__printf_modifier_table>
    0.00 :   751ae:  jne    752c8 <__vfprintf_internal+0x298>
    0.00 :   751b4:  cmpq   $0x0,0x1a66fc(%rip)        # 21b8b8 <__printf_va_arg_table>
    0.00 :   751bc:  jne    752c8 <__vfprintf_internal+0x298>
    0.00 :   751c2:  mov    0x7c(%rsp),%eax
    1.50 :   751c6:  movl   $0x0,0xa0(%rsp)
    0.00 :   751d1:  movl   $0x0,0x78(%rsp)
    0.00 :   751d9:  movq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   751e5:  mov    %eax,%ebx
    0.00 :   751e7:  and    $0x1,%ebx
    0.00 :   751ea:  mov    %bl,0xa7(%rsp)
    0.00 :   751f1:  mov    %eax,%ebx
    0.00 :   751f3:  and    $0x2,%eax
    0.00 :   751f6:  and    $0x8,%ebx
    0.00 :   751f9:  mov    %eax,0xa8(%rsp)
    0.00 :   75200:  mov    %ebx,0xac(%rsp)
    0.00 :   75207:  nopw   0x0(%rax,%rax,1)
    0.00 :   75210:  lea    0x1(%r13),%rbx
    0.00 :   75214:  movzbl 0x1(%r13),%r13d
    0.00 :   75219:  lea    0x550(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75220:  lea    -0x20(%r13),%eax
    0.00 :   75224:  cmp    $0x5a,%al
    0.00 :   75226:  ja     75251 <__vfprintf_internal+0x221>
    0.00 :   75228:  movsbl %r13b,%eax
    0.00 :   7522c:  lea    0x15c4ad(%rip),%rdx        # 1d16e0 <jump_table>
    0.00 :   75233:  lea    0x15c426(%rip),%rdi        # 1d1660 <step0_jumps.9>
    0.00 :   7523a:  sub    $0x20,%eax
    0.00 :   7523d:  cltq
    0.00 :   7523f:  movzbl (%rdx,%rax,1),%eax
    1.04 :   75243:  movslq (%rdi,%rax,4),%rsi
    2.97 :   75247:  lea    0x522(%rip),%rax        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7524e:  add    %rax,%rsi
    0.00 :   75251:  mov    0x1a4d18(%rip),%rax        # 219f70 <_DYNAMIC+0x3b0>
    0.00 :   75258:  xor    %r11d,%r11d
    0.00 :   7525b:  xor    %r10d,%r10d
    0.00 :   7525e:  xor    %r15d,%r15d
    0.00 :   75261:  xor    %edx,%edx
    0.00 :   75263:  mov    $0xffffffff,%r14d
    0.00 :   75269:  lea    0x15c1f0(%rip),%r8        # 1d1460 <step4_jumps.5>
    0.00 :   75270:  mov    $0x7fffffff,%r9d
    2.98 :   75276:  mov    %fs:(%rax),%rax
    0.00 :   7527a:  movl   $0x0,0x5c(%rsp)
    0.00 :   75282:  movl   $0x0,0x10(%rsp)
    0.00 :   7528a:  mov    %rax,0x60(%rsp)
    0.00 :   7528f:  lea    0x15c44a(%rip),%rax        # 1d16e0 <jump_table>
    0.00 :   75296:  movl   $0x0,0x50(%rsp)
    0.00 :   7529e:  movl   $0x0,0x40(%rsp)
    0.00 :   752a6:  movl   $0x0,0x28(%rsp)
    0.00 :   752ae:  movl   $0x0,0x58(%rsp)
    0.00 :   752b6:  movl   $0x0,0x4c(%rsp)
    0.00 :   752be:  movb   $0x20,0x38(%rsp)
    0.00 :   752c3:  jmp    *%rsi
    0.00 :   752c5:  nopl   (%rax)
    0.00 :   752c8:  movl   $0x0,0xa0(%rsp)
    0.00 :   752d3:  movq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   752df:  sub    $0x8,%rsp
    0.00 :   752e3:  mov    %r12d,%r9d
    0.00 :   752e6:  mov    %rbp,%rdi
    0.00 :   752e9:  mov    0x84(%rsp),%ebx
    0.00 :   752f0:  push   %rbx
    0.00 :   752f1:  push   0xa8(%rsp)
    0.00 :   752f8:  push   0x98(%rsp)
    0.00 :   752ff:  mov    0xb0(%rsp),%ebx
    0.00 :   75306:  push   %rbx
    0.00 :   75307:  lea    0x168(%rsp),%rdx
    0.00 :   7530f:  push   %rdx
    0.00 :   75310:  push   0x98(%rsp)
    0.00 :   75317:  push   %rax
    0.00 :   75318:  mov    0x60(%rsp),%rcx
    0.00 :   7531d:  mov    0xe0(%rsp),%edx
    0.00 :   75324:  mov    0x48(%rsp),%rsi
    0.00 :   75329:  lea    0x158(%rsp),%r8
    0.00 :   75331:  call   72b40 <printf_positional>
    0.00 :   75336:  add    $0x40,%rsp
    0.00 :   7533a:  mov    %eax,%r12d
    0.00 :   7533d:  testl  $0x8000,0x0(%rbp)
    0.00 :   75344:  je     75380 <__vfprintf_internal+0x350>
    2.93 :   75346:  cmpb   $0x0,0xa6(%rsp)
    0.00 :   7534e:  jne    75588 <__vfprintf_internal+0x558>
    0.00 :   75354:  mov    0x528(%rsp),%rax
    0.00 :   7535c:  sub    %fs:0x28,%rax
    0.00 :   75365:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   7536b:  add    $0x538,%rsp
    0.00 :   75372:  mov    %r12d,%eax
    0.00 :   75375:  pop    %rbx
    0.00 :   75376:  pop    %rbp
    0.00 :   75377:  pop    %r12
    0.00 :   75379:  pop    %r13
    1.47 :   7537b:  pop    %r14
    1.47 :   7537d:  pop    %r15
    0.00 :   7537f:  ret
    0.00 :   75380:  mov    0x88(%rbp),%rdi
    0.00 :   75387:  mov    0x4(%rdi),%eax
    0.00 :   7538a:  sub    $0x1,%eax
    0.00 :   7538d:  mov    %eax,0x4(%rdi)
    0.00 :   75390:  jne    75346 <__vfprintf_internal+0x316>
    0.00 :   75392:  movq   $0x0,0x8(%rdi)
    0.00 :   7539a:  xchg   %eax,(%rdi)
    0.00 :   7539c:  cmp    $0x1,%eax
    0.00 :   7539f:  jle    75346 <__vfprintf_internal+0x316>
    0.00 :   753a1:  call   91300 <__lll_lock_wake_private>
    0.00 :   753a6:  jmp    75346 <__vfprintf_internal+0x316>
    0.00 :   753a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   753b0:  endbr64
    0.00 :   753b4:  endbr64
    0.00 :   753b8:  movzbl 0x1(%rbx),%r13d
    0.00 :   753bd:  lea    0x1(%rbx),%rdx
    0.00 :   753c1:  lea    0x3a8(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   753c8:  lea    -0x20(%r13),%ecx
    0.00 :   753cc:  cmp    $0x5a,%cl
    0.00 :   753cf:  ja     755a0 <__vfprintf_internal+0x570>
    0.00 :   753d5:  movsbl %r13b,%ecx
    0.00 :   753d9:  lea    0x390(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   753e0:  mov    $0x1,%r10d
    0.00 :   753e6:  sub    $0x20,%ecx
    0.00 :   753e9:  movslq %ecx,%rcx
    0.00 :   753ec:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   753f0:  movslq (%r8,%rcx,4),%rsi
    0.00 :   753f4:  add    %rbx,%rsi
    0.00 :   753f7:  mov    %rdx,%rbx
    0.00 :   753fa:  xor    %edx,%edx
    0.00 :   753fc:  jmp    *%rsi
    0.00 :   753fe:  xchg   %ax,%ax
    0.00 :   75400:  endbr64
    0.00 :   75404:  endbr64
    0.00 :   75408:  cmpb   $0x0,0xa7(%rsp)
    1.51 :   75410:  jne    771e5 <__vfprintf_internal+0x21b5>
    0.00 :   75416:  mov    %edx,%ecx
    0.00 :   75418:  and    $0x1,%ecx
    0.00 :   7541b:  mov    0x10(%rsp),%eax
    0.00 :   7541f:  movzbl %cl,%ecx
    1.51 :   75422:  movsbl %r13b,%r13d
    0.00 :   75426:  movl   $0x0,0xdc(%rsp)
    0.00 :   75431:  mov    %r14d,0xd0(%rsp)
    0.00 :   75439:  mov    %eax,0xd4(%rsp)
    0.00 :   75440:  lea    (%r15,%r15,1),%eax
    0.00 :   75444:  or     %ecx,%eax
    0.00 :   75446:  lea    0x0(,%r10,4),%ecx
    0.00 :   7544e:  mov    %r13d,0xd8(%rsp)
    1.46 :   75456:  or     %ecx,%eax
    0.00 :   75458:  movzwl 0x4c(%rsp),%ecx
    0.00 :   7545d:  shl    $0x3,%ecx
    0.00 :   75460:  or     %ecx,%eax
    0.00 :   75462:  movzwl 0x58(%rsp),%ecx
    0.00 :   75467:  shl    $0x4,%ecx
    0.00 :   7546a:  or     %ecx,%eax
    0.00 :   7546c:  movzwl 0x28(%rsp),%ecx
    0.00 :   75471:  shl    $0x5,%ecx
    0.00 :   75474:  or     %ecx,%eax
    0.00 :   75476:  movzwl 0x40(%rsp),%ecx
    1.48 :   7547b:  shl    $0x6,%ecx
    0.00 :   7547e:  or     %ecx,%eax
    1.49 :   75480:  movzwl 0x50(%rsp),%ecx
    0.00 :   75485:  shl    $0x7,%ecx
    0.00 :   75488:  or     %ecx,%eax
    0.00 :   7548a:  movzwl 0x5c(%rsp),%ecx
    0.00 :   7548f:  shl    $0xb,%ecx
    0.00 :   75492:  or     %ecx,%eax
    1.49 :   75494:  mov    %ax,0xdc(%rsp)
    0.00 :   7549c:  movzbl 0x38(%rsp),%eax
    0.00 :   754a1:  mov    %eax,0xe0(%rsp)
    0.00 :   754a8:  test   %edx,%edx
    0.00 :   754aa:  je     755b0 <__vfprintf_internal+0x580>
    0.00 :   754b0:  mov    0xac(%rsp),%esi
    0.00 :   754b7:  test   %esi,%esi
    0.00 :   754b9:  je     768a0 <__vfprintf_internal+0x1870>
    0.00 :   754bf:  mov    0x20(%rsp),%rcx
    0.00 :   754c4:  orb    $0x10,0xdd(%rsp)
    0.00 :   754cc:  mov    0x4(%rcx),%edx
    0.00 :   754cf:  cmp    $0xaf,%edx
    0.00 :   754d5:  ja     76d80 <__vfprintf_internal+0x1d50>
    0.00 :   754db:  mov    %edx,%eax
    0.00 :   754dd:  add    $0x10,%edx
    0.00 :   754e0:  add    0x10(%rcx),%rax
    0.00 :   754e4:  mov    %edx,0x4(%rcx)
    0.00 :   754e7:  movdqa (%rax),%xmm3
    0.00 :   754eb:  movaps %xmm3,0xc0(%rsp)
    0.00 :   754f3:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   754f8:  nopl   0x0(%rax,%rax,1)
    0.00 :   75500:  cmp    $0xffffffff,%eax
    0.00 :   75503:  je     75090 <__vfprintf_internal+0x60>
    0.00 :   75509:  mov    $0xffffffff,%r12d
    0.00 :   7550f:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   75514:  nopl   0x0(%rax)
    0.00 :   75518:  mov    0x1a4a21(%rip),%rax        # 219f40 <_IO_funlockfile@@GLIBC_2.2.5+0x1b7ef0>
    0.00 :   7551f:  lea    0xf0(%rsp),%rdi
    0.00 :   75527:  mov    %rax,0xf0(%rsp)
    0.00 :   7552f:  call   911c0 <__GI___libc_cleanup_push_defer>
    0.00 :   75534:  mov    0x0(%rbp),%eax
    0.00 :   75537:  and    $0x8000,%eax
    0.00 :   7553c:  jne    77590 <__vfprintf_internal+0x2560>
    0.00 :   75542:  mov    %fs:0x10,%rbx
    0.00 :   7554b:  mov    0x88(%rbp),%rdi
    0.00 :   75552:  cmp    %rbx,0x8(%rdi)
    0.00 :   75556:  je     75572 <__vfprintf_internal+0x542>
    0.00 :   75558:  mov    $0x1,%edx
    0.00 :   7555d:  lock cmpxchg %edx,(%rdi)
    0.00 :   75561:  jne    76ee0 <__vfprintf_internal+0x1eb0>
    0.00 :   75567:  mov    0x88(%rbp),%rdi
    0.00 :   7556e:  mov    %rbx,0x8(%rdi)
    0.00 :   75572:  addl   $0x1,0x4(%rdi)
    0.00 :   75576:  movb   $0x1,0xa6(%rsp)
    0.00 :   7557e:  jmp    75100 <__vfprintf_internal+0xd0>
    0.00 :   75583:  nopl   0x0(%rax,%rax,1)
    0.00 :   75588:  lea    0xf0(%rsp),%rdi
    0.00 :   75590:  call   91200 <__GI___libc_cleanup_pop_restore>
    0.00 :   75595:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7559a:  nopw   0x0(%rax,%rax,1)
    0.00 :   755a0:  mov    %rdx,%rbx
    0.00 :   755a3:  mov    $0x1,%r10d
    0.00 :   755a9:  xor    %edx,%edx
    0.00 :   755ab:  jmp    *%rsi
    0.00 :   755ad:  nopl   (%rax)
    0.00 :   755b0:  mov    0x20(%rsp),%rsi
    2.98 :   755b5:  mov    0x4(%rsi),%eax
    0.00 :   755b8:  cmp    $0xaf,%eax
    0.00 :   755bd:  ja     76d00 <__vfprintf_internal+0x1cd0>
    0.00 :   755c3:  mov    %eax,%edx
    0.00 :   755c5:  add    $0x10,%eax
    1.50 :   755c8:  add    0x10(%rsi),%rdx
    0.00 :   755cc:  mov    %eax,0x4(%rsi)
    0.00 :   755cf:  movsd  (%rdx),%xmm0
    4.44 :   755d3:  movsd  %xmm0,0xc0(%rsp)
    6.22 :   755dc:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   755e1:  nopl   0x0(%rax)
    0.00 :   755e8:  endbr64
    0.00 :   755ec:  mov    0x20(%rsp),%rsi
    0.00 :   755f1:  lea    0x110(%rsp),%rdx
    0.00 :   755f9:  movq   $0x0,0x110(%rsp)
    0.00 :   75605:  mov    (%rsi),%eax
    0.00 :   75607:  cmp    $0x2f,%eax
    0.00 :   7560a:  ja     769e0 <__vfprintf_internal+0x19b0>
    0.00 :   75610:  mov    %eax,%ecx
    0.00 :   75612:  add    $0x8,%eax
    0.00 :   75615:  add    0x10(%rsi),%rcx
    0.00 :   75619:  mov    %eax,(%rsi)
    0.00 :   7561b:  mov    (%rcx),%esi
    0.00 :   7561d:  lea    0x130(%rsp),%r15
    0.00 :   75625:  mov    %r15,%rdi
    0.00 :   75628:  call   c61e0 <wcrtomb>
    0.00 :   7562d:  mov    %rax,%r14
    0.00 :   75630:  cmp    $0xffffffffffffffff,%rax
    0.00 :   75634:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   7563a:  mov    0x10(%rsp),%r13d
    0.00 :   7563f:  mov    0x28(%rsp),%r10d
    0.00 :   75644:  sub    %eax,%r13d
    0.00 :   75647:  test   %r10d,%r10d
    0.00 :   7564a:  jne    75655 <__vfprintf_internal+0x625>
    0.00 :   7564c:  test   %r13d,%r13d
    0.00 :   7564f:  jg     76d39 <__vfprintf_internal+0x1d09>
    0.00 :   75655:  mov    0xd8(%rbp),%rax
    0.00 :   7565c:  lea    0x1a139d(%rip),%rcx        # 216a00 <_IO_helper_jumps>
    0.00 :   75663:  mov    %rax,%rdx
    0.00 :   75666:  sub    %rcx,%rdx
    0.00 :   75669:  cmp    %rdx,0x30(%rsp)
    0.00 :   7566e:  jbe    77251 <__vfprintf_internal+0x2221>
    0.00 :   75674:  mov    %r14,%rdx
    0.00 :   75677:  mov    %r15,%rsi
    0.00 :   7567a:  mov    %rbp,%rdi
    0.00 :   7567d:  call   *0x38(%rax)
    0.00 :   75680:  cmp    %rax,%r14
    0.00 :   75683:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   75689:  movslq %r12d,%rax
    0.00 :   7568c:  xor    %edx,%edx
    0.00 :   7568e:  add    %r14,%rax
    0.00 :   75691:  js     7757c <__vfprintf_internal+0x254c>
    0.00 :   75697:  cmp    %r14,%rax
    0.00 :   7569a:  jb     7757c <__vfprintf_internal+0x254c>
    0.00 :   756a0:  movslq %eax,%rcx
    0.00 :   756a3:  mov    %eax,%r12d
    0.00 :   756a6:  cmp    %rcx,%rax
    0.00 :   756a9:  mov    $0x1,%ecx
    0.00 :   756ae:  cmovne %ecx,%edx
    0.00 :   756b1:  test   %edx,%edx
    0.00 :   756b3:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   756b9:  test   %eax,%eax
    0.00 :   756bb:  js     7533d <__vfprintf_internal+0x30d>
    0.00 :   756c1:  mov    0x28(%rsp),%r9d
    0.00 :   756c6:  test   %r9d,%r9d
    0.00 :   756c9:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   756cf:  nop
    0.00 :   756d0:  test   %r13d,%r13d
    0.00 :   756d3:  jle    75f80 <__vfprintf_internal+0xf50>
    0.00 :   756d9:  movslq %r13d,%r13
    0.00 :   756dc:  mov    $0x20,%esi
    0.00 :   756e1:  mov    %rbp,%rdi
    0.00 :   756e4:  mov    %r13,%rdx
    0.00 :   756e7:  call   806a0 <_IO_padn>
    0.00 :   756ec:  cmp    %rax,%r13
    0.00 :   756ef:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   756f5:  add    %r12d,%r13d
    0.00 :   756f8:  mov    %r13d,%r12d
    0.00 :   756fb:  jo     75860 <__vfprintf_internal+0x830>
    0.00 :   75701:  test   %r12d,%r12d
    0.00 :   75704:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   7570a:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7570f:  nop
    0.00 :   75710:  endbr64
    0.00 :   75714:  mov    0x20(%rsp),%rdi
    0.00 :   75719:  mov    (%rdi),%eax
    0.00 :   7571b:  cmp    $0x2f,%eax
    0.00 :   7571e:  ja     76c18 <__vfprintf_internal+0x1be8>
    0.00 :   75724:  mov    %eax,%edx
    0.00 :   75726:  add    $0x8,%eax
    0.00 :   75729:  add    0x10(%rdi),%rdx
    0.00 :   7572d:  mov    %eax,(%rdi)
    0.00 :   7572f:  mov    (%rdx),%r15
    0.00 :   75732:  mov    %r10d,%eax
    0.00 :   75735:  xor    $0x1,%eax
    0.00 :   75738:  test   %r15,%r15
    0.00 :   7573b:  jne    758af <__vfprintf_internal+0x87f>
    0.00 :   75741:  cmp    $0xffffffff,%r14d
    0.00 :   75745:  je     76f38 <__vfprintf_internal+0x1f08>
    0.00 :   7574b:  cmp    $0x5,%r14d
    0.00 :   7574f:  jg     76f38 <__vfprintf_internal+0x1f08>
    0.00 :   75755:  xor    %eax,%eax
    0.00 :   75757:  xor    %r14d,%r14d
    0.00 :   7575a:  lea    0x162cee(%rip),%r15        # 1d844f <dir_suffix+0x16e>
    0.00 :   75761:  jmp    758d9 <__vfprintf_internal+0x8a9>
    0.00 :   75766:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   75770:  endbr64
    0.00 :   75774:  test   %r13b,%r13b
    0.00 :   75777:  jne    76a88 <__vfprintf_internal+0x1a58>
    0.00 :   7577d:  mov    0x1a468c(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   75784:  mov    $0xffffffff,%r12d
    0.00 :   7578a:  movl   $0x16,%fs:(%rax)
    0.00 :   75791:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75796:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   757a0:  endbr64
    0.00 :   757a4:  test   %r10d,%r10d
    0.00 :   757a7:  jne    755e8 <__vfprintf_internal+0x5b8>
    0.00 :   757ad:  mov    0x10(%rsp),%r13d
    0.00 :   757b2:  mov    0x28(%rsp),%r14d
    0.00 :   757b7:  sub    $0x1,%r13d
    0.00 :   757bb:  test   %r14d,%r14d
    0.00 :   757be:  je     76e97 <__vfprintf_internal+0x1e67>
    0.00 :   757c4:  mov    0x20(%rsp),%rdi
    0.00 :   757c9:  mov    (%rdi),%eax
    0.00 :   757cb:  cmp    $0x2f,%eax
    0.00 :   757ce:  ja     76d18 <__vfprintf_internal+0x1ce8>
    0.00 :   757d4:  mov    %eax,%edx
    0.00 :   757d6:  add    $0x8,%eax
    0.00 :   757d9:  add    0x10(%rdi),%rdx
    0.00 :   757dd:  mov    %eax,(%rdi)
    0.00 :   757df:  mov    (%rdx),%edx
    0.00 :   757e1:  mov    0x28(%rbp),%rax
    0.00 :   757e5:  cmp    0x30(%rbp),%rax
    0.00 :   757e9:  jae    773d1 <__vfprintf_internal+0x23a1>
    0.00 :   757ef:  lea    0x1(%rax),%rcx
    0.00 :   757f3:  mov    %rcx,0x28(%rbp)
    0.00 :   757f7:  mov    %dl,(%rax)
    0.00 :   757f9:  cmp    $0x7fffffff,%r12d
    0.00 :   75800:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   75806:  mov    0x28(%rsp),%r11d
    0.00 :   7580b:  add    $0x1,%r12d
    0.00 :   7580f:  test   %r11d,%r11d
    0.00 :   75812:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   75818:  test   %r13d,%r13d
    0.00 :   7581b:  jle    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75821:  movslq %r13d,%r14
    0.00 :   75824:  mov    $0x20,%esi
    0.00 :   75829:  mov    %rbp,%rdi
    0.00 :   7582c:  mov    %r14,%rdx
    0.00 :   7582f:  call   806a0 <_IO_padn>
    0.00 :   75834:  cmp    %rax,%r14
    0.00 :   75837:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7583d:  xor    %eax,%eax
    0.00 :   7583f:  add    %r13d,%r12d
    0.00 :   75842:  js     77572 <__vfprintf_internal+0x2542>
    0.00 :   75848:  cmp    %r13d,%r12d
    0.00 :   7584b:  jb     77572 <__vfprintf_internal+0x2542>
    0.00 :   75851:  test   %eax,%eax
    0.00 :   75853:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   75859:  nopl   0x0(%rax)
    0.00 :   75860:  mov    0x1a45a9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   75867:  mov    $0xffffffff,%r12d
    0.00 :   7586d:  movl   $0x4b,%fs:(%rax)
    0.00 :   75874:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75879:  nopl   0x0(%rax)
    0.00 :   75880:  endbr64
    0.00 :   75884:  mov    0x4c(%rsp),%r15d
    0.00 :   75889:  test   %r15d,%r15d
    0.00 :   7588c:  je     76bf0 <__vfprintf_internal+0x1bc0>
    0.00 :   75892:  mov    0x90(%rsp),%edi
    0.00 :   75899:  call   7d2c0 <__get_errname>
    0.00 :   7589e:  mov    %rax,%r15
    0.00 :   758a1:  mov    $0x1,%eax
    0.00 :   758a6:  test   %r15,%r15
    0.00 :   758a9:  je     77150 <__vfprintf_internal+0x2120>
    0.00 :   758af:  cmp    $0x53,%r13b
    0.00 :   758b3:  je     76ca0 <__vfprintf_internal+0x1c70>
    0.00 :   758b9:  test   %al,%al
    0.00 :   758bb:  je     76ca0 <__vfprintf_internal+0x1c70>
    0.00 :   758c1:  cmp    $0xffffffff,%r14d
    0.00 :   758c5:  je     76d29 <__vfprintf_internal+0x1cf9>
    0.00 :   758cb:  movslq %r14d,%rsi
    0.00 :   758ce:  mov    %r15,%rdi
    0.00 :   758d1:  call   28390 <*ABS*+0xa8720@plt>
    0.00 :   758d6:  mov    %rax,%r14
    0.00 :   758d9:  mov    0x10(%rsp),%r13d
    0.00 :   758de:  sub    %eax,%r13d
    0.00 :   758e1:  js     76fe0 <__vfprintf_internal+0x1fb0>
    0.00 :   758e7:  mov    0x28(%rsp),%r8d
    0.00 :   758ec:  test   %r8d,%r8d
    0.00 :   758ef:  jne    758fa <__vfprintf_internal+0x8ca>
    0.00 :   758f1:  test   %r13d,%r13d
    0.00 :   758f4:  jne    76dfd <__vfprintf_internal+0x1dcd>
    0.00 :   758fa:  mov    0xd8(%rbp),%rax
    0.00 :   75901:  lea    0x1a10f8(%rip),%rcx        # 216a00 <_IO_helper_jumps>
    0.00 :   75908:  mov    %rax,%rdx
    0.00 :   7590b:  sub    %rcx,%rdx
    0.00 :   7590e:  cmp    %rdx,0x30(%rsp)
    0.00 :   75913:  jbe    7729c <__vfprintf_internal+0x226c>
    0.00 :   75919:  mov    %r14,%rdx
    0.00 :   7591c:  mov    %r15,%rsi
    0.00 :   7591f:  mov    %rbp,%rdi
    0.00 :   75922:  call   *0x38(%rax)
    0.00 :   75925:  cmp    %r14,%rax
    0.00 :   75928:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7592e:  movslq %r12d,%rax
    0.00 :   75931:  xor    %edx,%edx
    0.00 :   75933:  add    %r14,%rax
    0.00 :   75936:  js     77537 <__vfprintf_internal+0x2507>
    0.00 :   7593c:  cmp    %r14,%rax
    0.00 :   7593f:  jb     77537 <__vfprintf_internal+0x2507>
    0.00 :   75945:  movslq %eax,%rcx
    0.00 :   75948:  mov    %eax,%r12d
    0.00 :   7594b:  cmp    %rcx,%rax
    0.00 :   7594e:  mov    $0x1,%ecx
    0.00 :   75953:  cmovne %ecx,%edx
    0.00 :   75956:  test   %edx,%edx
    0.00 :   75958:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   7595e:  test   %eax,%eax
    0.00 :   75960:  js     7533d <__vfprintf_internal+0x30d>
    0.00 :   75966:  mov    0x28(%rsp),%edi
    0.00 :   7596a:  test   %edi,%edi
    0.00 :   7596c:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   75972:  test   %r13d,%r13d
    0.00 :   75975:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   7597b:  jmp    756d9 <__vfprintf_internal+0x6a9>
    0.00 :   75980:  endbr64
    0.00 :   75984:  movzbl 0x1(%rbx),%r13d
    0.00 :   75989:  lea    0x1(%rbx),%rdx
    0.00 :   7598d:  lea    -0x224(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75994:  lea    -0x20(%r13),%ecx
    0.00 :   75998:  cmp    $0x5a,%cl
    0.00 :   7599b:  ja     76b60 <__vfprintf_internal+0x1b30>
    0.00 :   759a1:  movsbl %r13b,%ecx
    0.00 :   759a5:  lea    -0x23c(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   759ac:  mov    $0x1,%r10d
    0.00 :   759b2:  sub    $0x20,%ecx
    0.00 :   759b5:  movslq %ecx,%rcx
    0.00 :   759b8:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   759bc:  movslq (%r8,%rcx,4),%rsi
    0.00 :   759c0:  add    %rbx,%rsi
    0.00 :   759c3:  mov    %rdx,%rbx
    0.00 :   759c6:  mov    $0x1,%edx
    0.00 :   759cb:  jmp    *%rsi
    0.00 :   759cd:  nopl   (%rax)
    0.00 :   759d0:  endbr64
    0.00 :   759d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   759d9:  lea    0x1(%rbx),%rcx
    0.00 :   759dd:  lea    -0x274(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   759e4:  lea    -0x20(%r13),%edi
    0.00 :   759e8:  cmp    $0x5a,%dil
    0.00 :   759ec:  ja     76ba8 <__vfprintf_internal+0x1b78>
    0.00 :   759f2:  movsbl %r13b,%esi
    0.00 :   759f6:  lea    0x15b9e3(%rip),%rbx        # 1d13e0 <step3b_jumps.4>
    0.00 :   759fd:  mov    $0x1,%r10d
    0.00 :   75a03:  sub    $0x20,%esi
    0.00 :   75a06:  movslq %esi,%rsi
    0.00 :   75a09:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75a0d:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75a11:  lea    -0x2a8(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75a18:  add    %rbx,%rsi
    0.00 :   75a1b:  mov    %rcx,%rbx
    0.00 :   75a1e:  jmp    *%rsi
    0.00 :   75a20:  endbr64
    0.00 :   75a24:  movl   $0x2,0x60(%rsp)
    0.00 :   75a2c:  mov    0x20(%rsp),%rdi
    0.00 :   75a31:  mov    (%rdi),%eax
    0.00 :   75a33:  test   %r10d,%r10d
    0.00 :   75a36:  je     7604c <__vfprintf_internal+0x101c>
    0.00 :   75a3c:  cmp    $0x2f,%eax
    0.00 :   75a3f:  ja     76850 <__vfprintf_internal+0x1820>
    0.00 :   75a45:  mov    %eax,%edx
    0.00 :   75a47:  add    $0x8,%eax
    0.00 :   75a4a:  add    0x10(%rdi),%rdx
    0.00 :   75a4e:  mov    %eax,(%rdi)
    0.00 :   75a50:  movl   $0x0,0x40(%rsp)
    0.00 :   75a58:  mov    (%rdx),%r11
    0.00 :   75a5b:  xor    %r10d,%r10d
    0.00 :   75a5e:  movl   $0x0,0x58(%rsp)
    0.00 :   75a66:  cmp    $0xffffffff,%r14d
    0.00 :   75a6a:  je     76090 <__vfprintf_internal+0x1060>
    0.00 :   75a70:  test   %r14d,%r14d
    0.00 :   75a73:  je     76560 <__vfprintf_internal+0x1530>
    0.00 :   75a79:  movslq %r14d,%rax
    0.00 :   75a7c:  movb   $0x20,0x38(%rsp)
    0.00 :   75a81:  mov    %rax,0x70(%rsp)
    0.00 :   75a86:  xor    %ecx,%ecx
    0.00 :   75a88:  mov    0x60(%rsp),%edx
    0.00 :   75a8c:  cmp    $0x58,%r13b
    0.00 :   75a90:  mov    %r11,%rdi
    0.00 :   75a93:  lea    0x528(%rsp),%r14
    0.00 :   75a9b:  sete   %cl
    0.00 :   75a9e:  mov    %r10d,0x94(%rsp)
    0.00 :   75aa6:  lea    0x140(%rsp),%r15
    0.00 :   75aae:  mov    %r14,%rsi
    0.00 :   75ab1:  mov    %r11,0x88(%rsp)
    0.00 :   75ab9:  call   5a230 <_itoa_word>
    0.00 :   75abe:  mov    0x80(%rsp),%rcx
    0.00 :   75ac6:  mov    0x88(%rsp),%r11
    0.00 :   75ace:  mov    0x94(%rsp),%r10d
    0.00 :   75ad6:  mov    %rax,%r9
    0.00 :   75ad9:  test   %rcx,%rcx
    0.00 :   75adc:  je     75b19 <__vfprintf_internal+0xae9>
    0.00 :   75ade:  mov    0x50(%rsp),%eax
    0.00 :   75ae2:  test   %eax,%eax
    0.00 :   75ae4:  je     75b19 <__vfprintf_internal+0xae9>
    0.00 :   75ae6:  mov    %r9,%rsi
    0.00 :   75ae9:  mov    %r14,%rdx
    0.00 :   75aec:  mov    %r15,%rdi
    0.00 :   75aef:  mov    %r11,0x50(%rsp)
    0.00 :   75af4:  mov    0x98(%rsp),%r8
    0.00 :   75afc:  mov    %r10d,0x88(%rsp)
    0.00 :   75b04:  call   72140 <group_number>
    0.00 :   75b09:  mov    0x88(%rsp),%r10d
    0.00 :   75b11:  mov    0x50(%rsp),%r11
    0.00 :   75b16:  mov    %rax,%r9
    0.00 :   75b19:  cmpl   $0xa,0x60(%rsp)
    0.00 :   75b1e:  jne    75b4d <__vfprintf_internal+0xb1d>
    0.00 :   75b20:  mov    0x5c(%rsp),%eax
    0.00 :   75b24:  test   %eax,%eax
    0.00 :   75b26:  je     75b4d <__vfprintf_internal+0xb1d>
    0.00 :   75b28:  mov    %r9,%rdi
    0.00 :   75b2b:  mov    %r14,%rdx
    0.00 :   75b2e:  mov    %r14,%rsi
    0.00 :   75b31:  mov    %r10d,0x5c(%rsp)
    0.00 :   75b36:  mov    %r11,0x50(%rsp)
    0.00 :   75b3b:  call   72340 <_i18n_number_rewrite>
    0.00 :   75b40:  mov    0x5c(%rsp),%r10d
    0.00 :   75b45:  mov    0x50(%rsp),%r11
    0.00 :   75b4a:  mov    %rax,%r9
    0.00 :   75b4d:  mov    %r14,%r15
    0.00 :   75b50:  sub    %r9,%r15
    0.00 :   75b53:  cmp    0x70(%rsp),%r15
    0.00 :   75b58:  jge    765c0 <__vfprintf_internal+0x1590>
    0.00 :   75b5e:  mov    0x70(%rsp),%rdx
    0.00 :   75b63:  mov    $0x0,%eax
    0.00 :   75b68:  mov    0x28(%rsp),%r8d
    0.00 :   75b6d:  sub    %r15,%rdx
    0.00 :   75b70:  cmovs  %rax,%rdx
    0.00 :   75b74:  mov    %edx,%r14d
    0.00 :   75b77:  test   %r8d,%r8d
    0.00 :   75b7a:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   75b80:  mov    0x10(%rsp),%r8d
    0.00 :   75b85:  sub    %r15d,%r8d
    0.00 :   75b88:  sub    %edx,%r8d
    0.00 :   75b8b:  test   %r11,%r11
    0.00 :   75b8e:  je     75baf <__vfprintf_internal+0xb7f>
    0.00 :   75b90:  mov    0x4c(%rsp),%edi
    0.00 :   75b94:  test   %edi,%edi
    0.00 :   75b96:  je     75baf <__vfprintf_internal+0xb7f>
    0.00 :   75b98:  movzbl 0x60(%rsp),%ecx
    0.00 :   75b9d:  mov    $0x10004,%eax
    0.00 :   75ba2:  lea    -0x2(%r8),%edx
    0.00 :   75ba6:  shr    %cl,%rax
    0.00 :   75ba9:  test   $0x1,%al
    0.00 :   75bab:  cmovne %edx,%r8d
    0.00 :   75baf:  mov    0x58(%rsp),%eax
    0.00 :   75bb3:  or     %r10d,%eax
    0.00 :   75bb6:  or     0x40(%rsp),%eax
    0.00 :   75bba:  je     76660 <__vfprintf_internal+0x1630>
    0.00 :   75bc0:  sub    $0x1,%r8d
    0.00 :   75bc4:  cmpb   $0x20,0x38(%rsp)
    0.00 :   75bc9:  je     77561 <__vfprintf_internal+0x2531>
    0.00 :   75bcf:  test   %r10d,%r10d
    0.00 :   75bd2:  je     767d0 <__vfprintf_internal+0x17a0>
    0.00 :   75bd8:  mov    0x28(%rbp),%rax
    0.00 :   75bdc:  cmp    0x30(%rbp),%rax
    0.00 :   75be0:  jae    771fe <__vfprintf_internal+0x21ce>
    0.00 :   75be6:  lea    0x1(%rax),%rdx
    0.00 :   75bea:  mov    %rdx,0x28(%rbp)
    0.00 :   75bee:  movb   $0x2d,(%rax)
    0.00 :   75bf1:  cmp    $0x7fffffff,%r12d
    0.00 :   75bf8:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   75bfe:  add    $0x1,%r12d
    0.00 :   75c02:  test   %r11,%r11
    0.00 :   75c05:  je     75c70 <__vfprintf_internal+0xc40>
    0.00 :   75c07:  mov    0x4c(%rsp),%edx
    0.00 :   75c0b:  test   %edx,%edx
    0.00 :   75c0d:  je     75c70 <__vfprintf_internal+0xc40>
    0.00 :   75c0f:  mov    0x60(%rsp),%edx
    0.00 :   75c13:  mov    $0x10004,%eax
    0.00 :   75c18:  bt     %rdx,%rax
    0.00 :   75c1c:  jae    75c70 <__vfprintf_internal+0xc40>
    0.00 :   75c1e:  mov    0x28(%rbp),%rax
    0.00 :   75c22:  cmp    0x30(%rbp),%rax
    0.00 :   75c26:  jae    76f4f <__vfprintf_internal+0x1f1f>
    0.00 :   75c2c:  lea    0x1(%rax),%rdx
    0.00 :   75c30:  mov    %rdx,0x28(%rbp)
    0.00 :   75c34:  movb   $0x30,(%rax)
    0.00 :   75c37:  cmp    $0x7fffffff,%r12d
    0.00 :   75c3e:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   75c44:  mov    0x28(%rbp),%rax
    0.00 :   75c48:  cmp    0x30(%rbp),%rax
    0.00 :   75c4c:  jae    77412 <__vfprintf_internal+0x23e2>
    0.00 :   75c52:  lea    0x1(%rax),%rdx
    0.00 :   75c56:  mov    %rdx,0x28(%rbp)
    0.00 :   75c5a:  mov    %r13b,(%rax)
    0.00 :   75c5d:  cmp    $0x7ffffffe,%r12d
    0.00 :   75c64:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   75c6a:  add    $0x2,%r12d
    0.00 :   75c6e:  xchg   %ax,%ax
    0.00 :   75c70:  lea    (%r8,%r14,1),%r13d
    0.00 :   75c74:  test   %r13d,%r13d
    0.00 :   75c77:  jg     76780 <__vfprintf_internal+0x1750>
    0.00 :   75c7d:  mov    0xd8(%rbp),%r13
    0.00 :   75c84:  lea    0x1a0d75(%rip),%rsi        # 216a00 <_IO_helper_jumps>
    0.00 :   75c8b:  mov    %r13,%rax
    0.00 :   75c8e:  sub    %rsi,%rax
    0.00 :   75c91:  cmp    %rax,0x30(%rsp)
    0.00 :   75c96:  jbe    771d1 <__vfprintf_internal+0x21a1>
    0.00 :   75c9c:  mov    %r15,%rdx
    0.00 :   75c9f:  mov    %r9,%rsi
    0.00 :   75ca2:  mov    %rbp,%rdi
    0.00 :   75ca5:  call   *0x38(%r13)
    0.00 :   75ca9:  cmp    %rax,%r15
    0.00 :   75cac:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   75cb2:  movslq %r12d,%rax
    0.00 :   75cb5:  xor    %edx,%edx
    0.00 :   75cb7:  add    %r15,%rax
    0.00 :   75cba:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc0:  cmp    %r15,%rax
    0.00 :   75cc3:  jb     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc9:  movslq %eax,%rcx
    0.00 :   75ccc:  mov    %eax,%r12d
    0.00 :   75ccf:  cmp    %rcx,%rax
    0.00 :   75cd2:  mov    $0x1,%ecx
    0.00 :   75cd7:  cmovne %ecx,%edx
    0.00 :   75cda:  test   %edx,%edx
    0.00 :   75cdc:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   75ce2:  test   %eax,%eax
    0.00 :   75ce4:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75cea:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75cef:  nop
    0.00 :   75cf0:  endbr64
    0.00 :   75cf4:  cmpq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   75cfd:  je     7717a <__vfprintf_internal+0x214a>
    0.00 :   75d03:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d08:  lea    0x1(%rbx),%rcx
    0.00 :   75d0c:  lea    -0x5a3(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d13:  lea    -0x20(%r13),%edi
    0.00 :   75d17:  cmp    $0x5a,%dil
    0.00 :   75d1b:  ja     76b88 <__vfprintf_internal+0x1b58>
    0.00 :   75d21:  movsbl %r13b,%esi
    0.00 :   75d25:  lea    0x15b934(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   75d2c:  movl   $0x1,0x50(%rsp)
    0.00 :   75d34:  sub    $0x20,%esi
    0.00 :   75d37:  movslq %esi,%rsi
    0.00 :   75d3a:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75d3e:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d42:  lea    -0x5d9(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d49:  add    %rbx,%rsi
    0.00 :   75d4c:  mov    %rcx,%rbx
    0.00 :   75d4f:  jmp    *%rsi
    0.00 :   75d51:  nopl   0x0(%rax)
    0.00 :   75d58:  endbr64
    0.00 :   75d5c:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d61:  lea    0x1(%rbx),%rcx
    0.00 :   75d65:  lea    -0x5fc(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d6c:  lea    -0x20(%r13),%edi
    0.00 :   75d70:  cmp    $0x5a,%dil
    0.00 :   75d74:  ja     76b98 <__vfprintf_internal+0x1b68>
    0.00 :   75d7a:  movsbl %r13b,%esi
    0.00 :   75d7e:  lea    0x15b8db(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   75d85:  movl   $0x1,0x4c(%rsp)
    0.00 :   75d8d:  sub    $0x20,%esi
    0.00 :   75d90:  movslq %esi,%rsi
    0.00 :   75d93:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75d97:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d9b:  lea    -0x632(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75da2:  add    %rbx,%rsi
    0.00 :   75da5:  mov    %rcx,%rbx
    0.00 :   75da8:  jmp    *%rsi
    0.00 :   75daa:  nopw   0x0(%rax,%rax,1)
    0.00 :   75db0:  endbr64
    0.00 :   75db4:  movzbl 0x1(%rbx),%r13d
    0.00 :   75db9:  lea    0x1(%rbx),%rcx
    0.00 :   75dbd:  lea    -0x654(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dc4:  lea    -0x20(%r13),%edi
    0.00 :   75dc8:  cmp    $0x5a,%dil
    0.00 :   75dcc:  ja     75df1 <__vfprintf_internal+0xdc1>
    0.00 :   75dce:  movsbl %r13b,%esi
    0.00 :   75dd2:  lea    0x15b887(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   75dd9:  sub    $0x20,%esi
    0.00 :   75ddc:  movslq %esi,%rsi
    0.00 :   75ddf:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75de3:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75de7:  lea    -0x67e(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dee:  add    %rbx,%rsi
    0.00 :   75df1:  movb   $0x20,0x38(%rsp)
    0.00 :   75df6:  mov    %rcx,%rbx
    0.00 :   75df9:  movl   $0x1,0x28(%rsp)
    0.00 :   75e01:  jmp    *%rsi
    0.00 :   75e03:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e08:  endbr64
    0.00 :   75e0c:  mov    0xa8(%rsp),%eax
    0.00 :   75e13:  test   %eax,%eax
    0.00 :   75e15:  je     75e26 <__vfprintf_internal+0xdf6>
    0.00 :   75e17:  mov    0xa0(%rsp),%eax
    0.00 :   75e1e:  test   %eax,%eax
    0.00 :   75e20:  je     76eea <__vfprintf_internal+0x1eba>
    0.00 :   75e26:  mov    0x20(%rsp),%rsi
    0.00 :   75e2b:  mov    (%rsi),%eax
    0.00 :   75e2d:  cmp    $0x2f,%eax
    0.00 :   75e30:  ja     76c50 <__vfprintf_internal+0x1c20>
    0.00 :   75e36:  mov    %eax,%edx
    0.00 :   75e38:  add    $0x8,%eax
    0.00 :   75e3b:  add    0x10(%rsi),%rdx
    0.00 :   75e3f:  mov    %eax,(%rsi)
    0.00 :   75e41:  mov    (%rdx),%rax
    0.00 :   75e44:  test   %r10d,%r10d
    0.00 :   75e47:  je     76c30 <__vfprintf_internal+0x1c00>
    0.00 :   75e4d:  movslq %r12d,%rdx
    0.00 :   75e50:  mov    %rdx,(%rax)
    0.00 :   75e53:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75e58:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e60:  endbr64
    0.00 :   75e64:  mov    0x20(%rsp),%rdi
    0.00 :   75e69:  mov    (%rdi),%eax
    0.00 :   75e6b:  cmp    $0x2f,%eax
    0.00 :   75e6e:  ja     76bc8 <__vfprintf_internal+0x1b98>
    0.00 :   75e74:  mov    %eax,%edx
    0.00 :   75e76:  add    $0x8,%eax
    0.00 :   75e79:  add    0x10(%rdi),%rdx
    0.00 :   75e7d:  mov    %eax,(%rdi)
    0.00 :   75e7f:  mov    (%rdx),%r10
    0.00 :   75e82:  test   %r10,%r10
    0.00 :   75e85:  je     76c83 <__vfprintf_internal+0x1c53>
    0.00 :   75e8b:  mov    %r10,%r11
    0.00 :   75e8e:  movl   $0x0,0x50(%rsp)
    0.00 :   75e96:  xor    %r10d,%r10d
    0.00 :   75e99:  mov    $0x78,%r13d
    0.00 :   75e9f:  movl   $0x1,0x4c(%rsp)
    0.00 :   75ea7:  movl   $0x10,0x60(%rsp)
    0.00 :   75eaf:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   75eb4:  nopl   0x0(%rax)
    0.00 :   75eb8:  endbr64
    0.00 :   75ebc:  movzbl 0x1(%rbx),%esi
    0.00 :   75ec0:  lea    0x1(%rbx),%rcx
    0.00 :   75ec4:  cmp    $0x2a,%sil
    1.42 :   75ec8:  je     77088 <__vfprintf_internal+0x2058>
    0.00 :   75ece:  lea    -0x30(%rsi),%r14d
    0.00 :   75ed2:  cmp    $0x9,%r14d
    0.00 :   75ed6:  jbe    76e40 <__vfprintf_internal+0x1e10>
    0.00 :   75edc:  movzbl (%rcx),%r13d
    0.00 :   75ee0:  mov    %rcx,%rbx
    0.00 :   75ee3:  xor    %r14d,%r14d
    0.00 :   75ee6:  lea    -0x20(%r13),%ecx
    0.00 :   75eea:  cmp    $0x5a,%cl
    0.00 :   75eed:  ja     75770 <__vfprintf_internal+0x740>
    0.00 :   75ef3:  movsbl %r13b,%ecx
    0.00 :   75ef7:  lea    0x15b662(%rip),%rsi        # 1d1560 <step2_jumps.7>
    0.00 :   75efe:  sub    $0x20,%ecx
    1.34 :   75f01:  movslq %ecx,%rcx
    0.00 :   75f04:  movzbl (%rax,%rcx,1),%ecx
    1.61 :   75f08:  movslq (%rsi,%rcx,4),%rsi
    7.05 :   75f0c:  lea    -0x7a3(%rip),%rcx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75f13:  add    %rcx,%rsi
    0.00 :   75f16:  jmp    *%rsi
    0.00 :   75f18:  nopl   0x0(%rax,%rax,1)
    0.00 :   75f20:  endbr64
    0.00 :   75f24:  test   %r10d,%r10d
    0.00 :   75f27:  je     76aa8 <__vfprintf_internal+0x1a78>
    0.00 :   75f2d:  mov    0x20(%rsp),%rdi
    0.00 :   75f32:  mov    (%rdi),%eax
    0.00 :   75f34:  cmp    $0x2f,%eax
    0.00 :   75f37:  ja     76da6 <__vfprintf_internal+0x1d76>
    0.00 :   75f3d:  mov    %eax,%edx
    0.00 :   75f3f:  add    $0x8,%eax
    0.00 :   75f42:  add    0x10(%rdi),%rdx
    0.00 :   75f46:  mov    %eax,(%rdi)
    0.00 :   75f48:  mov    (%rdx),%r10
    0.00 :   75f4b:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   75f50:  endbr64
    0.00 :   75f54:  mov    0x28(%rbp),%rax
    0.00 :   75f58:  cmp    0x30(%rbp),%rax
    0.00 :   75f5c:  jae    77360 <__vfprintf_internal+0x2330>
    0.00 :   75f62:  lea    0x1(%rax),%rdx
    0.00 :   75f66:  mov    %rdx,0x28(%rbp)
    0.00 :   75f6a:  movb   $0x25,(%rax)
    0.00 :   75f6d:  cmp    $0x7fffffff,%r12d
    0.00 :   75f74:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   75f7a:  add    $0x1,%r12d
    0.00 :   75f7e:  xchg   %ax,%ax
    0.00 :   75f80:  lea    0x1(%rbx),%r15
    4.20 :   75f84:  mov    $0x25,%esi
    0.00 :   75f89:  addl   $0x1,0x78(%rsp)
    0.00 :   75f8e:  mov    %r15,%rdi
    0.00 :   75f91:  call   284d0 <*ABS*+0xab010@plt>
    0.00 :   75f96:  mov    0xd8(%rbp),%rbx
    0.00 :   75f9d:  lea    0x1a0a5c(%rip),%rdi        # 216a00 <_IO_helper_jumps>
    0.00 :   75fa4:  mov    %rax,%r14
    0.00 :   75fa7:  mov    %rax,%r13
    0.00 :   75faa:  mov    %rbx,%rax
    0.00 :   75fad:  sub    %r15,%r14
    0.00 :   75fb0:  sub    %rdi,%rax
    0.00 :   75fb3:  cmp    %rax,0x30(%rsp)
    0.00 :   75fb8:  jbe    76770 <__vfprintf_internal+0x1740>
    0.00 :   75fbe:  mov    %r14,%rdx
    0.00 :   75fc1:  mov    %r15,%rsi
    0.00 :   75fc4:  mov    %rbp,%rdi
    0.00 :   75fc7:  call   *0x38(%rbx)
    0.00 :   75fca:  cmp    %r14,%rax
    0.00 :   75fcd:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   75fd3:  movslq %r12d,%rax
    0.00 :   75fd6:  xor    %edx,%edx
    0.00 :   75fd8:  add    %r14,%rax
    2.96 :   75fdb:  js     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fe1:  cmp    %r14,%rax
    0.00 :   75fe4:  jb     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fea:  movslq %eax,%rcx
    0.00 :   75fed:  mov    %eax,%r12d
    0.00 :   75ff0:  cmp    %rcx,%rax
    0.00 :   75ff3:  mov    $0x1,%ecx
    0.00 :   75ff8:  cmovne %ecx,%edx
    0.00 :   75ffb:  test   %edx,%edx
    0.00 :   75ffd:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   76003:  test   %eax,%eax
    1.49 :   76005:  js     7533d <__vfprintf_internal+0x30d>
    0.00 :   7600b:  cmpb   $0x0,0x0(%r13)
    1.48 :   76010:  jne    75210 <__vfprintf_internal+0x1e0>
    1.47 :   76016:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7601b:  nopl   0x0(%rax,%rax,1)
    0.00 :   76020:  endbr64
    0.00 :   76024:  jmp    753b4 <__vfprintf_internal+0x384>
    0.00 :   76029:  nopl   0x0(%rax)
    0.00 :   76030:  endbr64
    0.00 :   76034:  mov    0x20(%rsp),%rdi
    0.00 :   76039:  movl   $0x8,0x60(%rsp)
    0.00 :   76041:  mov    (%rdi),%eax
    0.00 :   76043:  test   %r10d,%r10d
    0.00 :   76046:  jne    75a3c <__vfprintf_internal+0xa0c>
    0.00 :   7604c:  test   %r11d,%r11d
    0.00 :   7604f:  je     76818 <__vfprintf_internal+0x17e8>
    0.00 :   76055:  cmp    $0x2f,%eax
    0.00 :   76058:  ja     76b70 <__vfprintf_internal+0x1b40>
    0.00 :   7605e:  mov    %eax,%edx
    0.00 :   76060:  add    $0x8,%eax
    0.00 :   76063:  add    0x10(%rdi),%rdx
    0.00 :   76067:  mov    %eax,(%rdi)
    0.00 :   76069:  movl   $0x0,0x40(%rsp)
    0.00 :   76071:  movzbl (%rdx),%r11d
    0.00 :   76075:  movl   $0x0,0x58(%rsp)
    0.00 :   7607d:  cmp    $0xffffffff,%r14d
    0.00 :   76081:  jne    75a70 <__vfprintf_internal+0xa40>
    0.00 :   76087:  nopw   0x0(%rax,%rax,1)
    0.00 :   76090:  movq   $0x1,0x70(%rsp)
    0.00 :   76099:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   7609e:  xchg   %ax,%ax
    0.00 :   760a0:  endbr64
    0.00 :   760a4:  movl   $0xa,0x60(%rsp)
    0.00 :   760ac:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760b1:  nopl   0x0(%rax)
    0.00 :   760b8:  endbr64
    0.00 :   760bc:  movl   $0x10,0x60(%rsp)
    0.00 :   760c4:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760c9:  nopl   0x0(%rax)
    0.00 :   760d0:  endbr64
    0.00 :   760d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   760d9:  lea    0x1(%rbx),%rcx
    0.00 :   760dd:  lea    -0x974(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   760e4:  lea    -0x20(%r13),%edi
    0.00 :   760e8:  cmp    $0x5a,%dil
    0.00 :   760ec:  ja     76bb8 <__vfprintf_internal+0x1b88>
    0.00 :   760f2:  movsbl %r13b,%esi
    0.00 :   760f6:  lea    0x15b563(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   760fd:  movl   $0x1,0x40(%rsp)
    0.00 :   76105:  sub    $0x20,%esi
    0.00 :   76108:  movslq %esi,%rsi
    0.00 :   7610b:  movzbl (%rax,%rsi,1),%esi
    0.00 :   7610f:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76113:  lea    -0x9aa(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7611a:  add    %rbx,%rsi
    0.00 :   7611d:  mov    %rcx,%rbx
    0.00 :   76120:  jmp    *%rsi
    0.00 :   76122:  nopw   0x0(%rax,%rax,1)
    0.00 :   76128:  endbr64
    0.00 :   7612c:  movzbl 0x1(%rbx),%r13d
    0.00 :   76131:  lea    0x1(%rbx),%rcx
    0.00 :   76135:  lea    -0x20(%r13),%esi
    0.00 :   76139:  cmp    $0x5a,%sil
    0.00 :   7613d:  jbe    76b28 <__vfprintf_internal+0x1af8>
    0.00 :   76143:  lea    -0x9da(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7614a:  movl   $0x1,0x58(%rsp)
    0.00 :   76152:  mov    %rcx,%rbx
    0.00 :   76155:  jmp    *%rsi
    0.00 :   76157:  nopw   0x0(%rax,%rax,1)
    0.00 :   76160:  endbr64
    0.00 :   76164:  movzbl 0x1(%rbx),%r13d
    0.00 :   76169:  lea    0x1(%rbx),%rcx
    0.00 :   7616d:  lea    -0xa04(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76174:  lea    -0x20(%r13),%edi
    0.00 :   76178:  cmp    $0x5a,%dil
    0.00 :   7617c:  ja     7619a <__vfprintf_internal+0x116a>
    0.00 :   7617e:  movsbl %r13b,%esi
    0.00 :   76182:  lea    -0xa19(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76189:  sub    $0x20,%esi
    0.00 :   7618c:  movslq %esi,%rsi
    0.00 :   7618f:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76193:  movslq (%r8,%rsi,4),%rsi
    0.00 :   76197:  add    %rbx,%rsi
    0.00 :   7619a:  mov    %rcx,%rbx
    0.00 :   7619d:  xor    %r15d,%r15d
    0.00 :   761a0:  mov    $0x1,%r11d
    0.00 :   761a6:  jmp    *%rsi
    0.00 :   761a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   761b0:  endbr64
    0.00 :   761b4:  mov    0x28(%rsp),%ecx
    0.00 :   761b8:  movzbl 0x38(%rsp),%esi
    0.00 :   761bd:  movzbl 0x1(%rbx),%r13d
    0.00 :   761c2:  test   %ecx,%ecx
    0.00 :   761c4:  mov    $0x30,%ecx
    0.00 :   761c9:  cmove  %ecx,%esi
    0.00 :   761cc:  lea    -0x20(%r13),%edi
    0.00 :   761d0:  lea    0x1(%rbx),%rcx
    0.00 :   761d4:  mov    %sil,0x38(%rsp)
    0.00 :   761d9:  lea    -0xa70(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   761e0:  cmp    $0x5a,%dil
    0.00 :   761e4:  ja     76891 <__vfprintf_internal+0x1861>
    0.00 :   761ea:  movsbl %r13b,%esi
    0.00 :   761ee:  lea    0x15b46b(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   761f5:  sub    $0x20,%esi
    0.00 :   761f8:  movslq %esi,%rsi
    0.00 :   761fb:  movzbl (%rax,%rsi,1),%esi
    0.00 :   761ff:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76203:  lea    -0xa9a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7620a:  add    %rbx,%rsi
    0.00 :   7620d:  mov    %rcx,%rbx
    0.00 :   76210:  jmp    *%rsi
    0.00 :   76212:  nopw   0x0(%rax,%rax,1)
    0.00 :   76218:  endbr64
    0.00 :   7621c:  movzbl 0x1(%rbx),%esi
    0.00 :   76220:  lea    0x1(%rbx),%rdi
    0.00 :   76224:  mov    %rdi,0x70(%rsp)
    0.00 :   76229:  sub    $0x30,%esi
    0.00 :   7622c:  cmp    $0x9,%esi
    0.00 :   7622f:  jbe    76a10 <__vfprintf_internal+0x19e0>
    0.00 :   76235:  mov    0x20(%rsp),%rsi
    0.00 :   7623a:  mov    (%rsi),%ecx
    0.00 :   7623c:  cmp    $0x2f,%ecx
    0.00 :   7623f:  jbe    76c70 <__vfprintf_internal+0x1c40>
    0.00 :   76245:  mov    %rsi,%rdi
    0.00 :   76248:  mov    0x8(%rsi),%rsi
    0.00 :   7624c:  lea    0x8(%rsi),%rcx
    0.00 :   76250:  mov    %rcx,0x8(%rdi)
    0.00 :   76254:  mov    (%rsi),%edi
    0.00 :   76256:  mov    %edi,0x10(%rsp)
    0.00 :   7625a:  test   %edi,%edi
    0.00 :   7625c:  jns    76271 <__vfprintf_internal+0x1241>
    0.00 :   7625e:  neg    %edi
    0.00 :   76260:  movb   $0x20,0x38(%rsp)
    0.00 :   76265:  mov    %edi,0x10(%rsp)
    0.00 :   76269:  movl   $0x1,0x28(%rsp)
    0.00 :   76271:  movzbl 0x1(%rbx),%r13d
    0.00 :   76276:  lea    -0xb0d(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7627d:  lea    -0x20(%r13),%ecx
    0.00 :   76281:  cmp    $0x5a,%cl
    0.00 :   76284:  ja     76c68 <__vfprintf_internal+0x1c38>
    0.00 :   7628a:  movsbl %r13b,%ecx
    0.00 :   7628e:  lea    0x15b34b(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76295:  sub    $0x20,%ecx
    0.00 :   76298:  movslq %ecx,%rcx
    0.00 :   7629b:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   7629f:  movslq (%rbx,%rcx,4),%rsi
    0.00 :   762a3:  lea    -0xb3a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762aa:  add    %rbx,%rsi
    0.00 :   762ad:  mov    0x70(%rsp),%rbx
    0.00 :   762b2:  jmp    *%rsi
    0.00 :   762b4:  nopl   0x0(%rax)
    0.00 :   762b8:  endbr64
    0.00 :   762bc:  movzbl 0x1(%rbx),%r13d
    0.00 :   762c1:  lea    0x1(%rbx),%rcx
    0.00 :   762c5:  lea    -0xb5c(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762cc:  lea    -0x20(%r13),%edi
    0.00 :   762d0:  cmp    $0x5a,%dil
    0.00 :   762d4:  ja     76be0 <__vfprintf_internal+0x1bb0>
    0.00 :   762da:  movsbl %r13b,%esi
    0.00 :   762de:  lea    0x15b1fb(%rip),%rbx        # 1d14e0 <step3a_jumps.6>
    0.00 :   762e5:  mov    $0x1,%r15d
    0.00 :   762eb:  sub    $0x20,%esi
    0.00 :   762ee:  movslq %esi,%rsi
    0.00 :   762f1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   762f5:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   762f9:  lea    -0xb90(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76300:  add    %rbx,%rsi
    0.00 :   76303:  mov    %rcx,%rbx
    0.00 :   76306:  jmp    *%rsi
    0.00 :   76308:  nopl   0x0(%rax,%rax,1)
    0.00 :   76310:  endbr64
    0.00 :   76314:  movzbl (%rbx),%ecx
    0.00 :   76317:  movzbl 0x1(%rbx),%esi
    0.00 :   7631b:  sub    $0x30,%ecx
    0.00 :   7631e:  mov    %esi,%r13d
    0.00 :   76321:  mov    %ecx,0x10(%rsp)
    0.00 :   76325:  lea    0x1(%rbx),%rcx
    0.00 :   76329:  lea    -0x30(%rsi),%ebx
    0.00 :   7632c:  mov    0x10(%rsp),%esi
    0.00 :   76330:  cmp    $0x9,%ebx
    0.00 :   76333:  ja     7642d <__vfprintf_internal+0x13fd>
    0.00 :   76339:  movzbl 0x1(%rcx),%edi
    0.00 :   7633d:  add    $0x1,%rcx
    0.00 :   76341:  mov    %dil,0x70(%rsp)
    0.00 :   76346:  sub    $0x30,%edi
    0.00 :   76349:  test   %esi,%esi
    0.00 :   7634b:  js     77549 <__vfprintf_internal+0x2519>
    0.00 :   76351:  cmp    $0xccccccc,%esi
    0.00 :   76357:  jg     763d8 <__vfprintf_internal+0x13a8>
    0.00 :   76359:  lea    (%rsi,%rsi,4),%esi
    0.00 :   7635c:  mov    %r9d,%r13d
    0.00 :   7635f:  add    %esi,%esi
    0.00 :   76361:  sub    %ebx,%r13d
    0.00 :   76364:  cmp    %r13d,%esi
    0.00 :   76367:  jg     763d8 <__vfprintf_internal+0x13a8>
    0.00 :   76369:  add    %ebx,%esi
    0.00 :   7636b:  cmp    $0x9,%edi
    0.00 :   7636e:  ja     76868 <__vfprintf_internal+0x1838>
    0.00 :   76374:  mov    %edi,%ebx
    0.00 :   76376:  jmp    76339 <__vfprintf_internal+0x1309>
    0.00 :   76378:  nopl   0x0(%rax,%rax,1)
    0.00 :   76380:  endbr64
    0.00 :   76384:  movzbl 0x1(%rbx),%r13d
    0.00 :   76389:  lea    0x1(%rbx),%rcx
    0.00 :   7638d:  lea    -0xc24(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76394:  lea    -0x20(%r13),%edi
    0.00 :   76398:  cmp    $0x5a,%dil
    0.00 :   7639c:  ja     76a98 <__vfprintf_internal+0x1a68>
    0.00 :   763a2:  movsbl %r13b,%esi
    0.00 :   763a6:  lea    0x15b2b3(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   763ad:  movl   $0x1,0x5c(%rsp)
    0.00 :   763b5:  sub    $0x20,%esi
    0.00 :   763b8:  movslq %esi,%rsi
    0.00 :   763bb:  movzbl (%rax,%rsi,1),%esi
    0.00 :   763bf:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   763c3:  lea    -0xc5a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   763ca:  add    %rbx,%rsi
    0.00 :   763cd:  mov    %rcx,%rbx
    0.00 :   763d0:  jmp    *%rsi
    0.00 :   763d2:  nopw   0x0(%rax,%rax,1)
    0.00 :   763d8:  cmp    $0x9,%edi
    0.00 :   763db:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763e1:  movzbl 0x1(%rcx),%esi
    0.00 :   763e5:  sub    $0x30,%esi
    0.00 :   763e8:  cmp    $0x9,%esi
    0.00 :   763eb:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763f1:  movzbl 0x2(%rcx),%esi
    0.00 :   763f5:  add    $0x2,%rcx
    0.00 :   763f9:  sub    $0x30,%esi
    0.00 :   763fc:  cmp    $0x9,%esi
    0.00 :   763ff:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76405:  movl   $0xffffffff,0x10(%rsp)
    0.00 :   7640d:  lea    0x1(%rcx),%rsi
    0.00 :   76411:  nopl   0x0(%rax)
    0.00 :   76418:  movzbl (%rsi),%edi
    0.00 :   7641b:  mov    %rsi,%rcx
    0.00 :   7641e:  add    $0x1,%rsi
    0.00 :   76422:  mov    %edi,%r13d
    0.00 :   76425:  sub    $0x30,%edi
    0.00 :   76428:  cmp    $0x9,%edi
    0.00 :   7642b:  jbe    76418 <__vfprintf_internal+0x13e8>
    0.00 :   7642d:  cmpl   $0xffffffff,0x10(%rsp)
    0.00 :   76432:  jne    76872 <__vfprintf_internal+0x1842>
    0.00 :   76438:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   7643d:  nopl   (%rax)
    0.00 :   76440:  test   %r10d,%r10d
    0.00 :   76443:  je     76740 <__vfprintf_internal+0x1710>
    0.00 :   76449:  mov    0x28(%rbp),%rax
    0.00 :   7644d:  cmp    0x30(%rbp),%rax
    0.00 :   76451:  jae    766f0 <__vfprintf_internal+0x16c0>
    0.00 :   76457:  lea    0x1(%rax),%rcx
    0.00 :   7645b:  mov    %rcx,0x28(%rbp)
    0.00 :   7645f:  movb   $0x2d,(%rax)
    0.00 :   76462:  cmp    $0x7fffffff,%r12d
    0.00 :   76469:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   7646f:  subl   $0x1,0x10(%rsp)
    0.00 :   76474:  add    $0x1,%r12d
    0.00 :   76478:  test   %r11,%r11
    0.00 :   7647b:  je     76489 <__vfprintf_internal+0x1459>
    0.00 :   7647d:  mov    0x4c(%rsp),%eax
    0.00 :   76481:  test   %eax,%eax
    0.00 :   76483:  jne    76960 <__vfprintf_internal+0x1930>
    0.00 :   76489:  mov    0x10(%rsp),%r13d
    0.00 :   7648e:  add    %r15d,%edx
    0.00 :   76491:  sub    %edx,%r13d
    0.00 :   76494:  test   %r14d,%r14d
    0.00 :   76497:  jle    764eb <__vfprintf_internal+0x14bb>
    0.00 :   76499:  movslq %r14d,%rdx
    0.00 :   7649c:  mov    $0x30,%esi
    0.00 :   764a1:  mov    %rbp,%rdi
    0.00 :   764a4:  mov    %r9,0x28(%rsp)
    0.00 :   764a9:  mov    %rdx,0x10(%rsp)
    0.00 :   764ae:  call   806a0 <_IO_padn>
    0.00 :   764b3:  mov    0x10(%rsp),%rdx
    0.00 :   764b8:  cmp    %rax,%rdx
    0.00 :   764bb:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   764c1:  xor    %eax,%eax
    0.00 :   764c3:  add    %r14d,%r12d
    0.00 :   764c6:  mov    0x28(%rsp),%r9
    0.00 :   764cb:  js     77586 <__vfprintf_internal+0x2556>
    0.00 :   764d1:  cmp    %edx,%r12d
    0.00 :   764d4:  jb     77586 <__vfprintf_internal+0x2556>
    0.00 :   764da:  test   %eax,%eax
    0.00 :   764dc:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   764e2:  test   %r12d,%r12d
    0.00 :   764e5:  js     7533d <__vfprintf_internal+0x30d>
    0.00 :   764eb:  mov    0xd8(%rbp),%r14
    0.00 :   764f2:  lea    0x1a0507(%rip),%rsi        # 216a00 <_IO_helper_jumps>
    0.00 :   764f9:  mov    %r14,%rax
    0.00 :   764fc:  sub    %rsi,%rax
    0.00 :   764ff:  cmp    %rax,0x30(%rsp)
    0.00 :   76504:  jbe    771bd <__vfprintf_internal+0x218d>
    0.00 :   7650a:  mov    %r15,%rdx
    0.00 :   7650d:  mov    %r9,%rsi
    0.00 :   76510:  mov    %rbp,%rdi
    0.00 :   76513:  call   *0x38(%r14)
    0.00 :   76517:  cmp    %r15,%rax
    0.00 :   7651a:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76520:  movslq %r12d,%rax
    0.00 :   76523:  xor    %edx,%edx
    0.00 :   76525:  add    %r15,%rax
    0.00 :   76528:  js     77519 <__vfprintf_internal+0x24e9>
    0.00 :   7652e:  cmp    %r15,%rax
    0.00 :   76531:  jb     77519 <__vfprintf_internal+0x24e9>
    0.00 :   76537:  movslq %eax,%rcx
    0.00 :   7653a:  mov    %eax,%r12d
    0.00 :   7653d:  cmp    %rcx,%rax
    0.00 :   76540:  mov    $0x1,%ecx
    0.00 :   76545:  cmovne %ecx,%edx
    0.00 :   76548:  test   %edx,%edx
    0.00 :   7654a:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   76550:  test   %eax,%eax
    0.00 :   76552:  jns    756d0 <__vfprintf_internal+0x6a0>
    0.00 :   76558:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7655d:  nopl   (%rax)
    0.00 :   76560:  test   %r11,%r11
    0.00 :   76563:  jne    76800 <__vfprintf_internal+0x17d0>
    0.00 :   76569:  cmpl   $0x8,0x60(%rsp)
    0.00 :   7656e:  jne    769f8 <__vfprintf_internal+0x19c8>
    0.00 :   76574:  mov    0x4c(%rsp),%eax
    0.00 :   76578:  test   %eax,%eax
    0.00 :   7657a:  je     769f8 <__vfprintf_internal+0x19c8>
    0.00 :   76580:  movb   $0x30,0x527(%rsp)
    0.00 :   76588:  mov    $0x1,%r15d
    0.00 :   7658e:  lea    0x527(%rsp),%r9
    0.00 :   76596:  movb   $0x20,0x38(%rsp)
    0.00 :   7659b:  xor    %edx,%edx
    0.00 :   7659d:  mov    0x28(%rsp),%eax
    0.00 :   765a1:  test   %eax,%eax
    0.00 :   765a3:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   765a9:  mov    0x10(%rsp),%r8d
    0.00 :   765ae:  add    %r15d,%edx
    0.00 :   765b1:  sub    %edx,%r8d
    0.00 :   765b4:  jmp    75baf <__vfprintf_internal+0xb7f>
    0.00 :   765b9:  nopl   0x0(%rax)
    0.00 :   765c0:  test   %r11,%r11
    0.00 :   765c3:  je     77038 <__vfprintf_internal+0x2008>
    0.00 :   765c9:  cmpl   $0x8,0x60(%rsp)
    0.00 :   765ce:  jne    765ea <__vfprintf_internal+0x15ba>
    0.00 :   765d0:  mov    0x4c(%rsp),%eax
    0.00 :   765d4:  test   %eax,%eax
    0.00 :   765d6:  je     765ea <__vfprintf_internal+0x15ba>
    0.00 :   765d8:  lea    -0x1(%r9),%rax
    0.00 :   765dc:  mov    %r14,%r15
    0.00 :   765df:  movb   $0x30,-0x1(%r9)
    0.00 :   765e4:  sub    %rax,%r15
    0.00 :   765e7:  mov    %rax,%r9
    0.00 :   765ea:  mov    0x70(%rsp),%rdx
    0.00 :   765ef:  mov    $0x0,%eax
    0.00 :   765f4:  mov    0x28(%rsp),%ecx
    0.00 :   765f8:  sub    %r15,%rdx
    0.00 :   765fb:  cmovs  %rax,%rdx
    0.00 :   765ff:  mov    %edx,%r14d
    0.00 :   76602:  test   %ecx,%ecx
    0.00 :   76604:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   7660a:  mov    0x10(%rsp),%r8d
    0.00 :   7660f:  sub    %r15d,%r8d
    0.00 :   76612:  sub    %edx,%r8d
    0.00 :   76615:  jmp    75b90 <__vfprintf_internal+0xb60>
    0.00 :   7661a:  nopw   0x0(%rax,%rax,1)
    0.00 :   76620:  mov    0x528(%rsp),%rax
    0.00 :   76628:  sub    %fs:0x28,%rax
    0.00 :   76631:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   76637:  mov    0x7c(%rsp),%ecx
    0.00 :   7663b:  mov    0x20(%rsp),%rdx
    0.00 :   76640:  mov    %rbp,%rdi
    0.00 :   76643:  mov    0x8(%rsp),%rsi
    0.00 :   76648:  add    $0x538,%rsp
    0.00 :   7664f:  pop    %rbx
    0.00 :   76650:  pop    %rbp
    0.00 :   76651:  pop    %r12
    0.00 :   76653:  pop    %r13
    0.00 :   76655:  pop    %r14
    0.00 :   76657:  pop    %r15
    0.00 :   76659:  jmp    775a0 <buffered_vfprintf>
    0.00 :   7665e:  xchg   %ax,%ax
    0.00 :   76660:  cmpb   $0x20,0x38(%rsp)
    0.00 :   76665:  jne    75c02 <__vfprintf_internal+0xbd2>
    0.00 :   7666b:  test   %r8d,%r8d
    0.00 :   7666e:  jle    77541 <__vfprintf_internal+0x2511>
    0.00 :   76674:  movslq %r8d,%rdx
    0.00 :   76677:  mov    $0x20,%esi
    0.00 :   7667c:  mov    %rbp,%rdi
    0.00 :   7667f:  mov    %r10d,0x5c(%rsp)
    0.00 :   76684:  mov    %rdx,0x10(%rsp)
    0.00 :   76689:  mov    %r9,0x50(%rsp)
    0.00 :   7668e:  mov    %r11,0x38(%rsp)
    0.00 :   76693:  mov    %r8d,0x28(%rsp)
    0.00 :   76698:  call   806a0 <_IO_padn>
    0.00 :   7669d:  mov    0x10(%rsp),%rdx
    0.00 :   766a2:  cmp    %rax,%rdx
    0.00 :   766a5:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   766ab:  mov    0x28(%rsp),%r8d
    0.00 :   766b0:  xor    %eax,%eax
    0.00 :   766b2:  mov    0x38(%rsp),%r11
    0.00 :   766b7:  mov    0x50(%rsp),%r9
    0.00 :   766bc:  mov    0x5c(%rsp),%r10d
    0.00 :   766c1:  add    %r8d,%r12d
    0.00 :   766c4:  js     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766ca:  cmp    %edx,%r12d
    0.00 :   766cd:  jb     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766d3:  mov    %eax,%r8d
    0.00 :   766d6:  test   %eax,%eax
    0.00 :   766d8:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   766de:  test   %r12d,%r12d
    0.00 :   766e1:  jns    75bcf <__vfprintf_internal+0xb9f>
    0.00 :   766e7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   766ec:  nopl   0x0(%rax)
    0.00 :   766f0:  mov    %r9,0x40(%rsp)
    0.00 :   766f5:  mov    $0x2d,%esi
    0.00 :   766fa:  mov    %rdx,0x38(%rsp)
    0.00 :   766ff:  mov    %r11,0x28(%rsp)
    0.00 :   76704:  mov    %rbp,%rdi
    0.00 :   76707:  call   8d800 <__overflow>
    0.00 :   7670c:  mov    0x28(%rsp),%r11
    0.00 :   76711:  mov    0x38(%rsp),%rdx
    0.00 :   76716:  cmp    $0xffffffff,%eax
    0.00 :   76719:  mov    0x40(%rsp),%r9
    0.00 :   7671e:  jne    76462 <__vfprintf_internal+0x1432>
    0.00 :   76724:  nopl   0x0(%rax)
    0.00 :   76728:  mov    $0xffffffff,%r12d
    0.00 :   7672e:  testl  $0x8000,0x0(%rbp)
    0.00 :   76735:  jne    75346 <__vfprintf_internal+0x316>
    0.00 :   7673b:  jmp    75380 <__vfprintf_internal+0x350>
    0.00 :   76740:  mov    0x40(%rsp),%eax
    0.00 :   76744:  test   %eax,%eax
    0.00 :   76746:  je     76930 <__vfprintf_internal+0x1900>
    0.00 :   7674c:  mov    0x28(%rbp),%rax
    0.00 :   76750:  cmp    0x30(%rbp),%rax
    0.00 :   76754:  jae    773b8 <__vfprintf_internal+0x2388>
    0.00 :   7675a:  lea    0x1(%rax),%rcx
    0.00 :   7675e:  mov    %rcx,0x28(%rbp)
    0.00 :   76762:  movb   $0x2b,(%rax)
    0.00 :   76765:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7676a:  nopw   0x0(%rax,%rax,1)
    0.00 :   76770:  call   89ef0 <_IO_vtable_check>
    0.00 :   76775:  jmp    75fbe <__vfprintf_internal+0xf8e>
    0.00 :   7677a:  nopw   0x0(%rax,%rax,1)
    0.00 :   76780:  movslq %r13d,%r14
    0.00 :   76783:  mov    $0x30,%esi
    0.00 :   76788:  mov    %rbp,%rdi
    0.00 :   7678b:  mov    %r9,0x10(%rsp)
    0.00 :   76790:  mov    %r14,%rdx
    0.00 :   76793:  call   806a0 <_IO_padn>
    0.00 :   76798:  cmp    %rax,%r14
    0.00 :   7679b:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7679d:  xor    %eax,%eax
    0.00 :   7679f:  add    %r13d,%r12d
    0.00 :   767a2:  mov    0x10(%rsp),%r9
    0.00 :   767a7:  js     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767ad:  cmp    %r13d,%r12d
    0.00 :   767b0:  jb     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767b6:  test   %eax,%eax
    0.00 :   767b8:  jne    75860 <__vfprintf_internal+0x830>
    0.00 :   767be:  test   %r12d,%r12d
    0.00 :   767c1:  jns    75c7d <__vfprintf_internal+0xc4d>
    0.00 :   767c7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   767cc:  nopl   0x0(%rax)
    0.00 :   767d0:  mov    0x40(%rsp),%esi
    0.00 :   767d4:  test   %esi,%esi
    0.00 :   767d6:  je     77058 <__vfprintf_internal+0x2028>
    0.00 :   767dc:  mov    0x28(%rbp),%rax
    0.00 :   767e0:  cmp    0x30(%rbp),%rax
    0.00 :   767e4:  jae    7739f <__vfprintf_internal+0x236f>
    0.00 :   767ea:  lea    0x1(%rax),%rdx
    0.00 :   767ee:  mov    %rdx,0x28(%rbp)
    0.00 :   767f2:  movb   $0x2b,(%rax)
    0.00 :   767f5:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   767fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   76800:  movq   $0x0,0x70(%rsp)
    0.00 :   76809:  movb   $0x20,0x38(%rsp)
    0.00 :   7680e:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   76813:  nopl   0x0(%rax,%rax,1)
    0.00 :   76818:  test   %r15d,%r15d
    0.00 :   7681b:  jne    76af0 <__vfprintf_internal+0x1ac0>
    0.00 :   76821:  cmp    $0x2f,%eax
    0.00 :   76824:  ja     76dec <__vfprintf_internal+0x1dbc>
    0.00 :   7682a:  mov    %eax,%edx
    0.00 :   7682c:  add    $0x8,%eax
    0.00 :   7682f:  add    0x10(%rdi),%rdx
    0.00 :   76833:  mov    %eax,(%rdi)
    0.00 :   76835:  movl   $0x0,0x40(%rsp)
    0.00 :   7683d:  mov    (%rdx),%r11d
    0.00 :   76840:  xor    %r10d,%r10d
    0.00 :   76843:  movl   $0x0,0x58(%rsp)
    0.00 :   7684b:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76850:  mov    0x8(%rdi),%rdx
    0.00 :   76854:  lea    0x8(%rdx),%rax
    0.00 :   76858:  mov    %rax,0x8(%rdi)
    0.00 :   7685c:  jmp    75a50 <__vfprintf_internal+0xa20>
    0.00 :   76861:  nopl   0x0(%rax)
    0.00 :   76868:  mov    %esi,0x10(%rsp)
    0.00 :   7686c:  movzbl 0x70(%rsp),%r13d
    0.00 :   76872:  cmp    $0x24,%r13b
    0.00 :   76876:  je     76a88 <__vfprintf_internal+0x1a58>
    0.00 :   7687c:  lea    -0x20(%r13),%edi
    0.00 :   76880:  lea    -0x1117(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76887:  cmp    $0x5a,%dil
    0.00 :   7688b:  jbe    76cd0 <__vfprintf_internal+0x1ca0>
    0.00 :   76891:  mov    %rcx,%rbx
    0.00 :   76894:  jmp    *%rsi
    0.00 :   76896:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   768a0:  mov    0x20(%rsp),%rcx
    0.00 :   768a5:  mov    0x8(%rcx),%rax
    0.00 :   768a9:  mov    %rax,0x10(%rsp)
    0.00 :   768ae:  add    $0xf,%rax
    0.00 :   768b2:  and    $0xfffffffffffffff0,%rax
    0.00 :   768b6:  lea    0x10(%rax),%rdx
    0.00 :   768ba:  mov    %rdx,0x8(%rcx)
    0.00 :   768be:  fldt   (%rax)
    0.00 :   768c0:  fstpt  0xc0(%rsp)
    0.00 :   768c7:  lea    0xc0(%rsp),%rax
    0.00 :   768cf:  and    $0xffffffdf,%r13d
    0.00 :   768d3:  mov    %rbp,%rdi
    0.00 :   768d6:  mov    %rax,0xb8(%rsp)
    0.00 :   768de:  lea    0xb8(%rsp),%rdx
    0.00 :   768e6:  lea    0xd0(%rsp),%rsi
    0.00 :   768ee:  cmp    $0x41,%r13d
    0.00 :   768f2:  jne    76928 <__vfprintf_internal+0x18f8>
    0.00 :   768f4:  call   5d8b0 <__printf_fphex>
    0.00 :   768f9:  test   %eax,%eax
    0.00 :   768fb:  js     76728 <__vfprintf_internal+0x16f8>
    0.00 :   76901:  xor    %edx,%edx
    0.00 :   76903:  add    %eax,%r12d
    0.00 :   76906:  js     7750f <__vfprintf_internal+0x24df>
    0.00 :   7690c:  cmp    %eax,%r12d
    0.00 :   7690f:  jb     7750f <__vfprintf_internal+0x24df>
    0.00 :   76915:  test   %edx,%edx
    0.00 :   76917:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   7691d:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76922:  nopw   0x0(%rax,%rax,1)
    0.00 :   76928:  call   5d520 <__printf_fp>
    2.82 :   7692d:  jmp    768f9 <__vfprintf_internal+0x18c9>
    0.00 :   7692f:  nop
    0.00 :   76930:  mov    0x58(%rsp),%eax
    0.00 :   76934:  test   %eax,%eax
    0.00 :   76936:  je     76478 <__vfprintf_internal+0x1448>
    0.00 :   7693c:  mov    0x28(%rbp),%rax
    0.00 :   76940:  cmp    0x30(%rbp),%rax
    0.00 :   76944:  jae    77463 <__vfprintf_internal+0x2433>
    0.00 :   7694a:  lea    0x1(%rax),%rcx
    0.00 :   7694e:  mov    %rcx,0x28(%rbp)
    0.00 :   76952:  movb   $0x20,(%rax)
    0.00 :   76955:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7695a:  nopw   0x0(%rax,%rax,1)
    0.00 :   76960:  mov    0x60(%rsp),%ecx
    0.00 :   76964:  mov    $0x10004,%eax
    0.00 :   76969:  bt     %rcx,%rax
    0.00 :   7696d:  jae    76489 <__vfprintf_internal+0x1459>
    0.00 :   76973:  mov    0x28(%rbp),%rax
    0.00 :   76977:  cmp    0x30(%rbp),%rax
    0.00 :   7697b:  jae    774c8 <__vfprintf_internal+0x2498>
    0.00 :   76981:  lea    0x1(%rax),%rcx
    0.00 :   76985:  mov    %rcx,0x28(%rbp)
    0.00 :   76989:  movb   $0x30,(%rax)
    0.00 :   7698c:  cmp    $0x7fffffff,%r12d
    0.00 :   76993:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   76999:  mov    0x28(%rbp),%rax
    0.00 :   7699d:  cmp    0x30(%rbp),%rax
    0.00 :   769a1:  jae    77495 <__vfprintf_internal+0x2465>
    0.00 :   769a7:  lea    0x1(%rax),%rcx
    0.00 :   769ab:  mov    %rcx,0x28(%rbp)
    0.00 :   769af:  mov    %r13b,(%rax)
    0.00 :   769b2:  cmp    $0x7ffffffe,%r12d
    0.00 :   769b9:  je     76728 <__vfprintf_internal+0x16f8>
    0.00 :   769bf:  subl   $0x2,0x10(%rsp)
    0.00 :   769c4:  add    $0x2,%r12d
    0.00 :   769c8:  jmp    76489 <__vfprintf_internal+0x1459>
    0.00 :   769cd:  nopl   (%rax)
    0.00 :   769d0:  call   89ef0 <_IO_vtable_check>
    0.00 :   769d5:  jmp    7513d <__vfprintf_internal+0x10d>
    0.00 :   769da:  nopw   0x0(%rax,%rax,1)
    0.00 :   769e0:  mov    0x8(%rsi),%rcx
    0.00 :   769e4:  lea    0x8(%rcx),%rax
    0.00 :   769e8:  mov    %rax,0x8(%rsi)
    0.00 :   769ec:  jmp    7561b <__vfprintf_internal+0x5eb>
    0.00 :   769f1:  nopl   0x0(%rax)
    0.00 :   769f8:  xor    %r15d,%r15d
    0.00 :   769fb:  lea    0x528(%rsp),%r9
    0.00 :   76a03:  jmp    76596 <__vfprintf_internal+0x1566>
    0.00 :   76a08:  nopl   0x0(%rax,%rax,1)
    0.00 :   76a10:  movzbl 0x1(%rdi),%edi
    0.00 :   76a14:  lea    0x2(%rbx),%rcx
    0.00 :   76a18:  mov    %edi,%r13d
    0.00 :   76a1b:  sub    $0x30,%edi
    0.00 :   76a1e:  cmp    $0x9,%edi
    0.00 :   76a21:  ja     76a71 <__vfprintf_internal+0x1a41>
    0.00 :   76a23:  mov    %rbx,0x10(%rsp)
    0.00 :   76a28:  mov    %edx,0x88(%rsp)
    0.00 :   76a2f:  mov    %edi,%ebx
    0.00 :   76a31:  movzbl 0x1(%rcx),%edi
    0.00 :   76a35:  add    $0x1,%rcx
    0.00 :   76a39:  mov    %edi,%r13d
    0.00 :   76a3c:  sub    $0x30,%edi
    0.00 :   76a3f:  cmp    $0xccccccc,%esi
    0.00 :   76a45:  jg     770e0 <__vfprintf_internal+0x20b0>
    0.00 :   76a4b:  lea    (%rsi,%rsi,4),%edx
    0.00 :   76a4e:  mov    %r9d,%esi
    0.00 :   76a51:  add    %edx,%edx
    0.00 :   76a53:  sub    %ebx,%esi
    0.00 :   76a55:  cmp    %esi,%edx
    0.00 :   76a57:  jg     770e0 <__vfprintf_internal+0x20b0>
    0.00 :   76a5d:  lea    (%rdx,%rbx,1),%esi
    0.00 :   76a60:  cmp    $0x9,%edi
    0.00 :   76a63:  jbe    76a2f <__vfprintf_internal+0x19ff>
    0.00 :   76a65:  mov    0x10(%rsp),%rbx
    0.00 :   76a6a:  mov    0x88(%rsp),%edx
    0.00 :   76a71:  cmp    $0x24,%r13b
    0.00 :   76a75:  jne    76235 <__vfprintf_internal+0x1205>
    0.00 :   76a7b:  test   %esi,%esi
    0.00 :   76a7d:  je     76235 <__vfprintf_internal+0x1205>
    0.00 :   76a83:  nopl   0x0(%rax,%rax,1)
    0.00 :   76a88:  mov    0x78(%rsp),%eax
    0.00 :   76a8c:  jmp    752df <__vfprintf_internal+0x2af>
    0.00 :   76a91:  nopl   0x0(%rax)
    0.00 :   76a98:  movl   $0x1,0x5c(%rsp)
    0.00 :   76aa0:  mov    %rcx,%rbx
    0.00 :   76aa3:  jmp    *%rsi
    0.00 :   76aa5:  nopl   (%rax)
    0.00 :   76aa8:  mov    0x20(%rsp),%rsi
    0.00 :   76aad:  mov    (%rsi),%eax
    0.00 :   76aaf:  test   %r11d,%r11d
    0.00 :   76ab2:  je     76db7 <__vfprintf_internal+0x1d87>
    0.00 :   76ab8:  cmp    $0x2f,%eax
    0.00 :   76abb:  ja     77265 <__vfprintf_internal+0x2235>
    0.00 :   76ac1:  mov    %eax,%edx
    0.00 :   76ac3:  add    $0x8,%eax
    0.00 :   76ac6:  add    0x10(%rsi),%rdx
    0.00 :   76aca:  mov    %eax,(%rsi)
    0.00 :   76acc:  movsbq (%rdx),%r10
    0.00 :   76ad0:  mov    %r10,%r11
    0.00 :   76ad3:  test   %r10,%r10
    0.00 :   76ad6:  js     76fc8 <__vfprintf_internal+0x1f98>
    0.00 :   76adc:  movl   $0xa,0x60(%rsp)
    0.00 :   76ae4:  xor    %r10d,%r10d
    0.00 :   76ae7:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76aec:  nopl   0x0(%rax)
    0.00 :   76af0:  cmp    $0x2f,%eax
    0.00 :   76af3:  jbe    76ddc <__vfprintf_internal+0x1dac>
    0.00 :   76af9:  mov    0x8(%rdi),%rdx
    0.00 :   76afd:  lea    0x8(%rdx),%rax
    0.00 :   76b01:  mov    %rax,0x8(%rdi)
    0.00 :   76b05:  movl   $0x0,0x40(%rsp)
    0.00 :   76b0d:  movzwl (%rdx),%r11d
    0.00 :   76b11:  xor    %r10d,%r10d
    0.00 :   76b14:  movl   $0x0,0x58(%rsp)
    0.00 :   76b1c:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76b21:  nopl   0x0(%rax)
    0.00 :   76b28:  movsbl %r13b,%esi
    0.00 :   76b2c:  lea    0x15ab2d(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   76b33:  movl   $0x1,0x58(%rsp)
    0.00 :   76b3b:  sub    $0x20,%esi
    0.00 :   76b3e:  movslq %esi,%rsi
    0.00 :   76b41:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76b45:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76b49:  lea    -0x13e0(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76b50:  add    %rbx,%rsi
    0.00 :   76b53:  mov    %rcx,%rbx
    0.00 :   76b56:  jmp    *%rsi
    0.00 :   76b58:  nopl   0x0(%rax,%rax,1)
    0.00 :   76b60:  mov    %rdx,%rbx
    0.00 :   76b63:  mov    $0x1,%r10d
    0.00 :   76b69:  mov    $0x1,%edx
    0.00 :   76b6e:  jmp    *%rsi
    0.00 :   76b70:  mov    0x8(%rdi),%rdx
    0.00 :   76b74:  lea    0x8(%rdx),%rax
    0.00 :   76b78:  mov    %rax,0x8(%rdi)
    0.00 :   76b7c:  jmp    76069 <__vfprintf_internal+0x1039>
    0.00 :   76b81:  nopl   0x0(%rax)
    0.00 :   76b88:  movl   $0x1,0x50(%rsp)
    0.00 :   76b90:  mov    %rcx,%rbx
    0.00 :   76b93:  jmp    *%rsi
    0.00 :   76b95:  nopl   (%rax)
    0.00 :   76b98:  movl   $0x1,0x4c(%rsp)
    0.00 :   76ba0:  mov    %rcx,%rbx
    0.00 :   76ba3:  jmp    *%rsi
    0.00 :   76ba5:  nopl   (%rax)
    0.00 :   76ba8:  mov    %rcx,%rbx
    0.00 :   76bab:  mov    $0x1,%r10d
    0.00 :   76bb1:  jmp    *%rsi
    0.00 :   76bb3:  nopl   0x0(%rax,%rax,1)
    0.00 :   76bb8:  movl   $0x1,0x40(%rsp)
    0.00 :   76bc0:  mov    %rcx,%rbx
    0.00 :   76bc3:  jmp    *%rsi
    0.00 :   76bc5:  nopl   (%rax)
    0.00 :   76bc8:  mov    0x8(%rdi),%rdx
    0.00 :   76bcc:  lea    0x8(%rdx),%rax
    0.00 :   76bd0:  mov    %rax,0x8(%rdi)
    0.00 :   76bd4:  jmp    75e7f <__vfprintf_internal+0xe4f>
    0.00 :   76bd9:  nopl   0x0(%rax)
    0.00 :   76be0:  mov    %rcx,%rbx
    0.00 :   76be3:  mov    $0x1,%r15d
    0.00 :   76be9:  jmp    *%rsi
    0.00 :   76beb:  nopl   0x0(%rax,%rax,1)
    0.00 :   76bf0:  mov    0x90(%rsp),%edi
    0.00 :   76bf7:  lea    0x140(%rsp),%rsi
    0.00 :   76bff:  mov    $0x3e8,%edx
    0.00 :   76c04:  call   a8620 <__strerror_r>
    0.00 :   76c09:  mov    %rax,%r15
    0.00 :   76c0c:  jmp    758a1 <__vfprintf_internal+0x871>
    0.00 :   76c11:  nopl   0x0(%rax)
    0.00 :   76c18:  mov    0x8(%rdi),%rdx
    0.00 :   76c1c:  lea    0x8(%rdx),%rax
    0.00 :   76c20:  mov    %rax,0x8(%rdi)
    0.00 :   76c24:  jmp    7572f <__vfprintf_internal+0x6ff>
    0.00 :   76c29:  nopl   0x0(%rax)
    0.00 :   76c30:  test   %r11d,%r11d
    0.00 :   76c33:  jne    76d9e <__vfprintf_internal+0x1d6e>
    0.00 :   76c39:  test   %r15d,%r15d
    0.00 :   76c3c:  jne    77276 <__vfprintf_internal+0x2246>
    0.00 :   76c42:  mov    %r12d,(%rax)
    0.00 :   76c45:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76c4a:  nopw   0x0(%rax,%rax,1)
    0.00 :   76c50:  mov    0x8(%rsi),%rdx
    0.00 :   76c54:  lea    0x8(%rdx),%rax
    0.00 :   76c58:  mov    %rax,0x8(%rsi)
    0.00 :   76c5c:  jmp    75e41 <__vfprintf_internal+0xe11>
    0.00 :   76c61:  nopl   0x0(%rax)
    0.00 :   76c68:  mov    0x70(%rsp),%rbx
    0.00 :   76c6d:  jmp    *%rsi
    0.00 :   76c6f:  nop
    0.00 :   76c70:  mov    %rsi,%rdi
    0.00 :   76c73:  mov    %ecx,%esi
    0.00 :   76c75:  add    $0x8,%ecx
    0.00 :   76c78:  mov    %ecx,(%rdi)
    0.00 :   76c7a:  add    0x10(%rdi),%rsi
    0.00 :   76c7e:  jmp    76254 <__vfprintf_internal+0x1224>
    0.00 :   76c83:  mov    $0x5,%eax
    0.00 :   76c88:  lea    0x161be6(%rip),%r15        # 1d8875 <not_available+0x317>
    0.00 :   76c8f:  cmp    %eax,%r14d
    0.00 :   76c92:  cmovl  %eax,%r14d
    0.00 :   76c96:  cmp    $0x53,%r13b
    0.00 :   76c9a:  jne    758cb <__vfprintf_internal+0x89b>
    0.00 :   76ca0:  mov    0x28(%rsp),%r8d
    0.00 :   76ca5:  mov    0x10(%rsp),%ecx
    0.00 :   76ca9:  mov    %r12d,%r9d
    0.00 :   76cac:  mov    %r14d,%edx
    0.00 :   76caf:  mov    %r15,%rsi
    0.00 :   76cb2:  mov    %rbp,%rdi
    0.00 :   76cb5:  call   72680 <outstring_converted_wide_string>
    0.00 :   76cba:  mov    %eax,%r12d
    0.00 :   76cbd:  test   %eax,%eax
    0.00 :   76cbf:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76cc5:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76cca:  nopw   0x0(%rax,%rax,1)
    0.00 :   76cd0:  movsbl %r13b,%esi
    0.00 :   76cd4:  lea    0x15a905(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76cdb:  sub    $0x20,%esi
    0.00 :   76cde:  movslq %esi,%rsi
    0.00 :   76ce1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76ce5:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76ce9:  lea    -0x1580(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76cf0:  add    %rbx,%rsi
    0.00 :   76cf3:  mov    %rcx,%rbx
    0.00 :   76cf6:  jmp    *%rsi
    0.00 :   76cf8:  nopl   0x0(%rax,%rax,1)
    0.00 :   76d00:  mov    0x8(%rsi),%rdx
    0.00 :   76d04:  lea    0x8(%rdx),%rax
    0.00 :   76d08:  mov    %rax,0x8(%rsi)
    0.00 :   76d0c:  jmp    755cf <__vfprintf_internal+0x59f>
    0.00 :   76d11:  nopl   0x0(%rax)
    0.00 :   76d18:  mov    0x8(%rdi),%rdx
    0.00 :   76d1c:  lea    0x8(%rdx),%rax
    0.00 :   76d20:  mov    %rax,0x8(%rdi)
    0.00 :   76d24:  jmp    757df <__vfprintf_internal+0x7af>
    0.00 :   76d29:  mov    %r15,%rdi
    0.00 :   76d2c:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76d31:  mov    %rax,%r14
    0.00 :   76d34:  jmp    758d9 <__vfprintf_internal+0x8a9>
    0.00 :   76d39:  movslq %r13d,%rdx
    0.00 :   76d3c:  mov    $0x20,%esi
    0.00 :   76d41:  mov    %rbp,%rdi
    0.00 :   76d44:  mov    %rdx,0x10(%rsp)
    0.00 :   76d49:  call   806a0 <_IO_padn>
    0.00 :   76d4e:  mov    0x10(%rsp),%rdx
    0.00 :   76d53:  cmp    %rax,%rdx
    0.00 :   76d56:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76d5c:  add    %r13d,%r12d
    0.00 :   76d5f:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76d65:  cmp    %r13d,%r12d
    0.00 :   76d68:  jb     75860 <__vfprintf_internal+0x830>
    0.00 :   76d6e:  test   %r12d,%r12d
    0.00 :   76d71:  jns    75655 <__vfprintf_internal+0x625>
    0.00 :   76d77:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76d7c:  nopl   0x0(%rax)
    0.00 :   76d80:  mov    0x8(%rcx),%rax
    0.00 :   76d84:  mov    %rax,0x10(%rsp)
    0.00 :   76d89:  add    $0xf,%rax
    0.00 :   76d8d:  and    $0xfffffffffffffff0,%rax
    0.00 :   76d91:  lea    0x10(%rax),%rdx
    0.00 :   76d95:  mov    %rdx,0x8(%rcx)
    0.00 :   76d99:  jmp    754e7 <__vfprintf_internal+0x4b7>
    0.00 :   76d9e:  mov    %r12b,(%rax)
    0.00 :   76da1:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76da6:  mov    0x8(%rdi),%rdx
    0.00 :   76daa:  lea    0x8(%rdx),%rax
    0.00 :   76dae:  mov    %rax,0x8(%rdi)
    0.00 :   76db2:  jmp    75f48 <__vfprintf_internal+0xf18>
    0.00 :   76db7:  test   %r15d,%r15d
    0.00 :   76dba:  jne    7727f <__vfprintf_internal+0x224f>
    0.00 :   76dc0:  cmp    $0x2f,%eax
    0.00 :   76dc3:  ja     77401 <__vfprintf_internal+0x23d1>
    0.00 :   76dc9:  mov    %eax,%edx
    0.00 :   76dcb:  add    $0x8,%eax
    0.00 :   76dce:  add    0x10(%rsi),%rdx
    0.00 :   76dd2:  mov    %eax,(%rsi)
    0.00 :   76dd4:  movslq (%rdx),%r10
    0.00 :   76dd7:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   76ddc:  mov    %eax,%edx
    0.00 :   76dde:  add    $0x8,%eax
    0.00 :   76de1:  add    0x10(%rdi),%rdx
    0.00 :   76de5:  mov    %eax,(%rdi)
    0.00 :   76de7:  jmp    76b05 <__vfprintf_internal+0x1ad5>
    0.00 :   76dec:  mov    0x8(%rdi),%rdx
    0.00 :   76df0:  lea    0x8(%rdx),%rax
    0.00 :   76df4:  mov    %rax,0x8(%rdi)
    0.00 :   76df8:  jmp    76835 <__vfprintf_internal+0x1805>
    0.00 :   76dfd:  movslq %r13d,%rdx
    0.00 :   76e00:  mov    $0x20,%esi
    0.00 :   76e05:  mov    %rbp,%rdi
    0.00 :   76e08:  mov    %rdx,0x10(%rsp)
    0.00 :   76e0d:  call   806a0 <_IO_padn>
    0.00 :   76e12:  mov    0x10(%rsp),%rdx
    0.00 :   76e17:  cmp    %rax,%rdx
    0.00 :   76e1a:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76e20:  add    %r13d,%r12d
    0.00 :   76e23:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76e29:  cmp    %r13d,%r12d
    0.00 :   76e2c:  jb     75860 <__vfprintf_internal+0x830>
    0.00 :   76e32:  test   %r12d,%r12d
    0.00 :   76e35:  jns    758fa <__vfprintf_internal+0x8ca>
    0.00 :   76e3b:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76e40:  movzbl 0x1(%rcx),%edi
    0.00 :   76e44:  add    $0x2,%rbx
    0.00 :   76e48:  mov    %edi,%r13d
    0.00 :   76e4b:  sub    $0x30,%edi
    0.00 :   76e4e:  cmp    $0x9,%edi
    0.00 :   76e51:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e57:  movzbl 0x1(%rbx),%ecx
    0.00 :   76e5b:  add    $0x1,%rbx
    0.00 :   76e5f:  mov    %ecx,%r13d
    0.00 :   76e62:  sub    $0x30,%ecx
    0.00 :   76e65:  cmp    $0xccccccc,%r14d
    0.00 :   76e6c:  jg     76f80 <__vfprintf_internal+0x1f50>
    0.00 :   76e72:  lea    (%r14,%r14,4),%r14d
    0.00 :   76e76:  mov    %r9d,%esi
    0.00 :   76e79:  add    %r14d,%r14d
    0.00 :   76e7c:  sub    %edi,%esi
    0.00 :   76e7e:  cmp    %esi,%r14d
    0.00 :   76e81:  jg     76f80 <__vfprintf_internal+0x1f50>
    0.00 :   76e87:  add    %edi,%r14d
    0.00 :   76e8a:  cmp    $0x9,%ecx
    0.00 :   76e8d:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e93:  mov    %ecx,%edi
    0.00 :   76e95:  jmp    76e57 <__vfprintf_internal+0x1e27>
    0.00 :   76e97:  test   %r13d,%r13d
    0.00 :   76e9a:  jle    757c4 <__vfprintf_internal+0x794>
    0.00 :   76ea0:  movslq %r13d,%r14
    0.00 :   76ea3:  mov    $0x20,%esi
    0.00 :   76ea8:  mov    %rbp,%rdi
    0.00 :   76eab:  mov    %r14,%rdx
    0.00 :   76eae:  call   806a0 <_IO_padn>
    0.00 :   76eb3:  cmp    %rax,%r14
    0.00 :   76eb6:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76ebc:  add    %r13d,%r12d
    0.00 :   76ebf:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76ec5:  cmp    %r13d,%r12d
    0.00 :   76ec8:  jb     75860 <__vfprintf_internal+0x830>
    0.00 :   76ece:  test   %r12d,%r12d
    0.00 :   76ed1:  jns    757c4 <__vfprintf_internal+0x794>
    0.00 :   76ed7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76edc:  nopl   0x0(%rax)
    0.00 :   76ee0:  call   91230 <__lll_lock_wait_private>
    0.00 :   76ee5:  jmp    75567 <__vfprintf_internal+0x537>
    0.00 :   76eea:  mov    0x8(%rsp),%r14
    0.00 :   76eef:  mov    %r10d,0x28(%rsp)
    0.00 :   76ef4:  mov    %r11d,0x10(%rsp)
    0.00 :   76ef9:  mov    %r14,%rdi
    0.00 :   76efc:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76f01:  mov    %r14,%rdi
    0.00 :   76f04:  lea    0x1(%rax),%rsi
    0.00 :   76f08:  call   134f20 <__readonly_area>
    0.00 :   76f0d:  mov    0x10(%rsp),%r11d
    0.00 :   76f12:  mov    0x28(%rsp),%r10d
    0.00 :   76f17:  test   %eax,%eax
    0.00 :   76f19:  mov    %eax,0xa0(%rsp)
    0.00 :   76f20:  jns    75e26 <__vfprintf_internal+0xdf6>
    0.00 :   76f26:  lea    0x1668cb(%rip),%rdi        # 1dd7f8 <__PRETTY_FUNCTION__.0+0x1d0>
    0.00 :   76f2d:  call   896d0 <__libc_fatal>
    0.00 :   76f32:  nopw   0x0(%rax,%rax,1)
    0.00 :   76f38:  mov    $0x6,%eax
    0.00 :   76f3d:  mov    $0x6,%r14d
    0.00 :   76f43:  lea    0x161931(%rip),%r15        # 1d887b <null>
    0.00 :   76f4a:  jmp    758d9 <__vfprintf_internal+0x8a9>
    0.00 :   76f4f:  mov    $0x30,%esi
    0.00 :   76f54:  mov    %rbp,%rdi
    0.00 :   76f57:  mov    %r8d,0x28(%rsp)
    0.00 :   76f5c:  mov    %r9,0x10(%rsp)
    0.00 :   76f61:  call   8d800 <__overflow>
    0.00 :   76f66:  mov    0x10(%rsp),%r9
    0.00 :   76f6b:  mov    0x28(%rsp),%r8d
    0.00 :   76f70:  cmp    $0xffffffff,%eax
    0.00 :   76f73:  jne    75c37 <__vfprintf_internal+0xc07>
    0.00 :   76f79:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76f7e:  xchg   %ax,%ax
    0.00 :   76f80:  cmp    $0x9,%ecx
    0.00 :   76f83:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f89:  movzbl 0x1(%rbx),%eax
    0.00 :   76f8d:  sub    $0x30,%eax
    0.00 :   76f90:  cmp    $0x9,%eax
    0.00 :   76f93:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f99:  movzbl 0x2(%rbx),%eax
    0.00 :   76f9d:  sub    $0x30,%eax
    0.00 :   76fa0:  cmp    $0x9,%eax
    0.00 :   76fa3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76fa9:  add    $0x3,%rbx
    0.00 :   76fad:  nopl   (%rax)
    0.00 :   76fb0:  movzbl (%rbx),%eax
    0.00 :   76fb3:  add    $0x1,%rbx
    0.00 :   76fb7:  sub    $0x30,%eax
    0.00 :   76fba:  cmp    $0x9,%eax
    0.00 :   76fbd:  jbe    76fb0 <__vfprintf_internal+0x1f80>
    0.00 :   76fbf:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76fc4:  nopl   0x0(%rax)
    0.00 :   76fc8:  movl   $0xa,0x60(%rsp)
    0.00 :   76fd0:  neg    %r11
    0.00 :   76fd3:  mov    $0x1,%r10d
    0.00 :   76fd9:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76fde:  xchg   %ax,%ax
    0.00 :   76fe0:  mov    0xd8(%rbp),%r13
    0.00 :   76fe7:  lea    0x19fa12(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   76fee:  mov    %r13,%rax
    0.00 :   76ff1:  sub    %rdx,%rax
    0.00 :   76ff4:  cmp    %rax,0x30(%rsp)
    0.00 :   76ff9:  jbe    77459 <__vfprintf_internal+0x2429>
    0.00 :   76fff:  mov    %r14,%rdx
    0.00 :   77002:  mov    %r15,%rsi
    0.00 :   77005:  mov    %rbp,%rdi
    0.00 :   77008:  call   *0x38(%r13)
    0.00 :   7700c:  cmp    %r14,%rax
    0.00 :   7700f:  jne    76728 <__vfprintf_internal+0x16f8>
    0.00 :   77015:  movslq %r12d,%rax
    0.00 :   77018:  xor    %edx,%edx
    0.00 :   7701a:  add    %r14,%rax
    0.00 :   7701d:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   7701f:  cmp    %r14,%rax
    0.00 :   77022:  jae    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77028:  mov    $0x1,%edx
    0.00 :   7702d:  jmp    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77032:  nopw   0x0(%rax,%rax,1)
    0.00 :   77038:  mov    0x70(%rsp),%rdx
    0.00 :   7703d:  mov    $0x0,%eax
    0.00 :   77042:  sub    %r15,%rdx
    0.00 :   77045:  cmovs  %rax,%rdx
    0.00 :   77049:  mov    %edx,%r14d
    0.00 :   7704c:  jmp    7659d <__vfprintf_internal+0x156d>
    0.00 :   77051:  nopl   0x0(%rax)
    0.00 :   77058:  mov    0x58(%rsp),%ecx
    0.00 :   7705c:  test   %ecx,%ecx
    0.00 :   7705e:  je     75c02 <__vfprintf_internal+0xbd2>
    0.00 :   77064:  mov    0x28(%rbp),%rax
    0.00 :   77068:  cmp    0x30(%rbp),%rax
    0.00 :   7706c:  jae    7747c <__vfprintf_internal+0x244c>
    0.00 :   77072:  lea    0x1(%rax),%rdx
    0.00 :   77076:  mov    %rdx,0x28(%rbp)
    0.00 :   7707a:  movb   $0x20,(%rax)
    0.00 :   7707d:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77082:  nopw   0x0(%rax,%rax,1)
    0.00 :   77088:  movzbl 0x2(%rbx),%ecx
    0.00 :   7708c:  lea    0x2(%rbx),%rsi
    0.00 :   77090:  mov    %rsi,0x70(%rsp)
    0.00 :   77095:  sub    $0x30,%ecx
    1.26 :   77098:  cmp    $0x9,%ecx
    0.00 :   7709b:  jbe    772b0 <__vfprintf_internal+0x2280>
    0.00 :   770a1:  mov    0x20(%rsp),%rbx
    0.00 :   770a6:  mov    (%rbx),%ecx
    0.00 :   770a8:  cmp    $0x2f,%ecx
    3.01 :   770ab:  jbe    771ee <__vfprintf_internal+0x21be>
    0.00 :   770b1:  mov    0x8(%rbx),%rsi
    0.00 :   770b5:  lea    0x8(%rsi),%rcx
    0.00 :   770b9:  mov    %rcx,0x8(%rbx)
    0.00 :   770bd:  mov    (%rsi),%ecx
    2.51 :   770bf:  mov    $0xffffffff,%esi
    0.00 :   770c4:  mov    0x70(%rsp),%rbx
    0.00 :   770c9:  test   %ecx,%ecx
    1.49 :   770cb:  movzbl (%rbx),%r13d
    0.00 :   770cf:  cmovns %ecx,%esi
    0.00 :   770d2:  mov    %esi,%r14d
    0.00 :   770d5:  jmp    75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   770da:  nopw   0x0(%rax,%rax,1)
    0.00 :   770e0:  cmp    $0x9,%edi
    0.00 :   770e3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770e9:  movzbl 0x1(%rcx),%eax
    0.00 :   770ed:  sub    $0x30,%eax
    0.00 :   770f0:  cmp    $0x9,%eax
    0.00 :   770f3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770f9:  movzbl 0x2(%rcx),%eax
    0.00 :   770fd:  sub    $0x30,%eax
    0.00 :   77100:  cmp    $0x9,%eax
    0.00 :   77103:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77109:  add    $0x3,%rcx
    0.00 :   7710d:  nopl   (%rax)
    0.00 :   77110:  movzbl (%rcx),%eax
    0.00 :   77113:  add    $0x1,%rcx
    0.00 :   77117:  sub    $0x30,%eax
    0.00 :   7711a:  cmp    $0x9,%eax
    0.00 :   7711d:  jbe    77110 <__vfprintf_internal+0x20e0>
    0.00 :   7711f:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   77124:  nopl   0x0(%rax)
    0.00 :   77128:  movl   $0x0,0xa0(%rsp)
    0.00 :   77133:  movq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   7713f:  movq   $0x0,0x98(%rsp)
    0.00 :   7714b:  jmp    752df <__vfprintf_internal+0x2af>
    0.00 :   77150:  movslq 0x90(%rsp),%r11
    0.00 :   77158:  movl   $0xa,0x60(%rsp)
    0.00 :   77160:  xor    %r10d,%r10d
    0.00 :   77163:  test   %r11d,%r11d
    0.00 :   77166:  jns    75a66 <__vfprintf_internal+0xa36>
    0.00 :   7716c:  neg    %r11
    0.00 :   7716f:  mov    $0x1,%r10d
    0.00 :   77175:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   7717a:  mov    0x60(%rsp),%rcx
    0.00 :   7717f:  mov    0x8(%rcx),%rcx
    0.00 :   77183:  mov    0x50(%rcx),%rdi
    0.00 :   77187:  mov    0x48(%rcx),%rsi
    0.00 :   7718b:  movzbl (%rdi),%ecx
    0.00 :   7718e:  mov    %rsi,0x98(%rsp)
    0.00 :   77196:  test   %cl,%cl
    0.00 :   77198:  je     77240 <__vfprintf_internal+0x2210>
    0.00 :   7719e:  cmp    $0x7f,%cl
    0.00 :   771a1:  je     77240 <__vfprintf_internal+0x2210>
    0.00 :   771a7:  xor    %ecx,%ecx
    0.00 :   771a9:  cmpb   $0x0,(%rsi)
    0.00 :   771ac:  cmovne %rdi,%rcx
    0.00 :   771b0:  mov    %rcx,0x80(%rsp)
    0.00 :   771b8:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   771bd:  mov    %r9,0x10(%rsp)
    0.00 :   771c2:  call   89ef0 <_IO_vtable_check>
    0.00 :   771c7:  mov    0x10(%rsp),%r9
    0.00 :   771cc:  jmp    7650a <__vfprintf_internal+0x14da>
    0.00 :   771d1:  mov    %r9,0x10(%rsp)
    0.00 :   771d6:  call   89ef0 <_IO_vtable_check>
    0.00 :   771db:  mov    0x10(%rsp),%r9
    0.00 :   771e0:  jmp    75c9c <__vfprintf_internal+0xc6c>
    0.00 :   771e5:  xor    %edx,%edx
    0.00 :   771e7:  xor    %ecx,%ecx
    0.00 :   771e9:  jmp    7541b <__vfprintf_internal+0x3eb>
    0.00 :   771ee:  mov    %ecx,%esi
    0.00 :   771f0:  add    $0x8,%ecx
    0.00 :   771f3:  add    0x10(%rbx),%rsi
    0.00 :   771f7:  mov    %ecx,(%rbx)
    0.00 :   771f9:  jmp    770bd <__vfprintf_internal+0x208d>
    0.00 :   771fe:  mov    %r8d,0x38(%rsp)
    0.00 :   77203:  mov    $0x2d,%esi
    0.00 :   77208:  mov    %r9,0x28(%rsp)
    0.00 :   7720d:  mov    %r11,0x10(%rsp)
    0.00 :   77212:  mov    %rbp,%rdi
    0.00 :   77215:  call   8d800 <__overflow>
    0.00 :   7721a:  mov    0x10(%rsp),%r11
    0.00 :   7721f:  mov    0x28(%rsp),%r9
    0.00 :   77224:  cmp    $0xffffffff,%eax
    0.00 :   77227:  mov    0x38(%rsp),%r8d
    0.00 :   7722c:  jne    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77232:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   77237:  nopw   0x0(%rax,%rax,1)
    0.00 :   77240:  movq   $0x0,0x80(%rsp)
    0.00 :   7724c:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   77251:  mov    %rax,0x10(%rsp)
    0.00 :   77256:  call   89ef0 <_IO_vtable_check>
    0.00 :   7725b:  mov    0x10(%rsp),%rax
    0.00 :   77260:  jmp    75674 <__vfprintf_internal+0x644>
    0.00 :   77265:  mov    0x8(%rsi),%rdx
    0.00 :   77269:  lea    0x8(%rdx),%rax
    0.00 :   7726d:  mov    %rax,0x8(%rsi)
    0.00 :   77271:  jmp    76acc <__vfprintf_internal+0x1a9c>
    0.00 :   77276:  mov    %r12w,(%rax)
    0.00 :   7727a:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   7727f:  cmp    $0x2f,%eax
    0.00 :   77282:  ja     773f0 <__vfprintf_internal+0x23c0>
    0.00 :   77288:  mov    %eax,%edx
    0.00 :   7728a:  add    $0x8,%eax
    0.00 :   7728d:  add    0x10(%rsi),%rdx
    0.00 :   77291:  mov    %eax,(%rsi)
    0.00 :   77293:  movswq (%rdx),%r10
    0.00 :   77297:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   7729c:  mov    %rax,0x10(%rsp)
    0.00 :   772a1:  call   89ef0 <_IO_vtable_check>
    0.00 :   772a6:  mov    0x10(%rsp),%rax
    0.00 :   772ab:  jmp    75919 <__vfprintf_internal+0x8e9>
    0.00 :   772b0:  movzbl 0x1(%rsi),%esi
    0.00 :   772b4:  add    $0x3,%rbx
    0.00 :   772b8:  lea    -0x30(%rsi),%r13d
    0.00 :   772bc:  mov    %esi,%edi
    0.00 :   772be:  cmp    $0x9,%r13d
    0.00 :   772c2:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772c8:  movzbl 0x1(%rbx),%esi
    0.00 :   772cc:  add    $0x1,%rbx
    0.00 :   772d0:  mov    %esi,%edi
    0.00 :   772d2:  sub    $0x30,%esi
    0.00 :   772d5:  cmp    $0xccccccc,%ecx
    0.00 :   772db:  jg     77300 <__vfprintf_internal+0x22d0>
    0.00 :   772dd:  lea    (%rcx,%rcx,4),%ecx
    0.00 :   772e0:  mov    %r9d,%r14d
    0.00 :   772e3:  add    %ecx,%ecx
    0.00 :   772e5:  sub    %r13d,%r14d
    0.00 :   772e8:  cmp    %r14d,%ecx
    0.00 :   772eb:  jg     77300 <__vfprintf_internal+0x22d0>
    0.00 :   772ed:  add    %r13d,%ecx
    0.00 :   772f0:  cmp    $0x9,%esi
    0.00 :   772f3:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772f5:  mov    %esi,%r13d
    0.00 :   772f8:  jmp    772c8 <__vfprintf_internal+0x2298>
    0.00 :   772fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   77300:  cmp    $0x9,%esi
    0.00 :   77303:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77309:  movzbl 0x1(%rbx),%eax
    0.00 :   7730d:  sub    $0x30,%eax
    0.00 :   77310:  cmp    $0x9,%eax
    0.00 :   77313:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77319:  movzbl 0x2(%rbx),%eax
    0.00 :   7731d:  sub    $0x30,%eax
    0.00 :   77320:  cmp    $0x9,%eax
    0.00 :   77323:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77329:  add    $0x3,%rbx
    0.00 :   7732d:  nopl   (%rax)
    0.00 :   77330:  movzbl (%rbx),%eax
    0.00 :   77333:  add    $0x1,%rbx
    0.00 :   77337:  sub    $0x30,%eax
    0.00 :   7733a:  cmp    $0x9,%eax
    0.00 :   7733d:  jbe    77330 <__vfprintf_internal+0x2300>
    0.00 :   7733f:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   77344:  test   %ecx,%ecx
    0.00 :   77346:  je     770a1 <__vfprintf_internal+0x2071>
    0.00 :   7734c:  cmp    $0x24,%dil
    0.00 :   77350:  jne    770a1 <__vfprintf_internal+0x2071>
    0.00 :   77356:  jmp    76a88 <__vfprintf_internal+0x1a58>
    0.00 :   7735b:  nopl   0x0(%rax,%rax,1)
    0.00 :   77360:  mov    $0x25,%esi
    0.00 :   77365:  mov    %rbp,%rdi
    0.00 :   77368:  call   8d800 <__overflow>
    0.00 :   7736d:  cmp    $0xffffffff,%eax
    0.00 :   77370:  jne    75f6d <__vfprintf_internal+0xf3d>
    0.00 :   77376:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7737b:  nopl   0x0(%rax,%rax,1)
    0.00 :   77380:  mov    0x1a2a89(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   77387:  or     $0x20,%ebx
    0.00 :   7738a:  mov    $0xffffffff,%r12d
    0.00 :   77390:  mov    %ebx,0x0(%rbp)
    0.00 :   77393:  movl   $0x9,%fs:(%rax)
    0.00 :   7739a:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7739f:  mov    %r8d,0x38(%rsp)
    0.00 :   773a4:  mov    $0x2b,%esi
    0.00 :   773a9:  mov    %r9,0x28(%rsp)
    0.00 :   773ae:  mov    %r11,0x10(%rsp)
    0.00 :   773b3:  jmp    77212 <__vfprintf_internal+0x21e2>
    0.00 :   773b8:  mov    %r9,0x40(%rsp)
    0.00 :   773bd:  mov    $0x2b,%esi
    0.00 :   773c2:  mov    %rdx,0x38(%rsp)
    0.00 :   773c7:  mov    %r11,0x28(%rsp)
    0.00 :   773cc:  jmp    76704 <__vfprintf_internal+0x16d4>
    0.00 :   773d1:  movzbl %dl,%esi
    0.00 :   773d4:  mov    %rbp,%rdi
    0.00 :   773d7:  call   8d800 <__overflow>
    0.00 :   773dc:  cmp    $0xffffffff,%eax
    0.00 :   773df:  jne    757f9 <__vfprintf_internal+0x7c9>
    0.00 :   773e5:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   773ea:  nopw   0x0(%rax,%rax,1)
    0.00 :   773f0:  mov    0x8(%rsi),%rdx
    0.00 :   773f4:  lea    0x8(%rdx),%rax
    0.00 :   773f8:  mov    %rax,0x8(%rsi)
    0.00 :   773fc:  jmp    77293 <__vfprintf_internal+0x2263>
    0.00 :   77401:  mov    0x8(%rsi),%rdx
    0.00 :   77405:  lea    0x8(%rdx),%rax
    0.00 :   77409:  mov    %rax,0x8(%rsi)
    0.00 :   7740d:  jmp    76dd4 <__vfprintf_internal+0x1da4>
    0.00 :   77412:  movzbl %r13b,%esi
    0.00 :   77416:  mov    %rbp,%rdi
    0.00 :   77419:  mov    %r8d,0x28(%rsp)
    0.00 :   7741e:  mov    %r9,0x10(%rsp)
    0.00 :   77423:  call   8d800 <__overflow>
    0.00 :   77428:  mov    0x10(%rsp),%r9
    0.00 :   7742d:  mov    0x28(%rsp),%r8d
    0.00 :   77432:  cmp    $0xffffffff,%eax
    0.00 :   77435:  jne    75c5d <__vfprintf_internal+0xc2d>
    0.00 :   7743b:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   77440:  mov    0x1a29c9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   77447:  mov    $0xffffffff,%r12d
    0.00 :   7744d:  movl   $0x16,%fs:(%rax)
    0.00 :   77454:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   77459:  call   89ef0 <_IO_vtable_check>
    0.00 :   7745e:  jmp    76fff <__vfprintf_internal+0x1fcf>
    0.00 :   77463:  mov    %r9,0x40(%rsp)
    0.00 :   77468:  mov    $0x20,%esi
    0.00 :   7746d:  mov    %rdx,0x38(%rsp)
    0.00 :   77472:  mov    %r11,0x28(%rsp)
    0.00 :   77477:  jmp    76704 <__vfprintf_internal+0x16d4>
    0.00 :   7747c:  mov    %r8d,0x38(%rsp)
    0.00 :   77481:  mov    $0x20,%esi
    0.00 :   77486:  mov    %r9,0x28(%rsp)
    0.00 :   7748b:  mov    %r11,0x10(%rsp)
    0.00 :   77490:  jmp    77212 <__vfprintf_internal+0x21e2>
    0.00 :   77495:  movzbl %r13b,%esi
    0.00 :   77499:  mov    %rbp,%rdi
    0.00 :   7749c:  mov    %r9,0x38(%rsp)
    0.00 :   774a1:  mov    %rdx,0x28(%rsp)
    0.00 :   774a6:  call   8d800 <__overflow>
    0.00 :   774ab:  mov    0x28(%rsp),%rdx
    0.00 :   774b0:  mov    0x38(%rsp),%r9
    0.00 :   774b5:  cmp    $0xffffffff,%eax
    0.00 :   774b8:  jne    769b2 <__vfprintf_internal+0x1982>
    0.00 :   774be:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774c3:  nopl   0x0(%rax,%rax,1)
    0.00 :   774c8:  mov    $0x30,%esi
    0.00 :   774cd:  mov    %rbp,%rdi
    0.00 :   774d0:  mov    %r9,0x38(%rsp)
    0.00 :   774d5:  mov    %rdx,0x28(%rsp)
    0.00 :   774da:  call   8d800 <__overflow>
    0.00 :   774df:  mov    0x28(%rsp),%rdx
    0.00 :   774e4:  mov    0x38(%rsp),%r9
    0.00 :   774e9:  cmp    $0xffffffff,%eax
    0.00 :   774ec:  jne    7698c <__vfprintf_internal+0x195c>
    0.00 :   774f2:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   77500:  mov    $0x1,%edx
    0.00 :   77505:  jmp    75fea <__vfprintf_internal+0xfba>
    0.00 :   7750a:  call   136550 <__stack_chk_fail>
    0.00 :   7750f:  mov    $0x1,%edx
    0.00 :   77514:  jmp    76915 <__vfprintf_internal+0x18e5>
    0.00 :   77519:  mov    $0x1,%edx
    0.00 :   7751e:  jmp    76537 <__vfprintf_internal+0x1507>
    0.00 :   77523:  mov    $0x1,%eax
    0.00 :   77528:  jmp    766d3 <__vfprintf_internal+0x16a3>
    0.00 :   7752d:  mov    $0x1,%eax
    0.00 :   77532:  jmp    767b6 <__vfprintf_internal+0x1786>
    0.00 :   77537:  mov    $0x1,%edx
    0.00 :   7753c:  jmp    75945 <__vfprintf_internal+0x915>
    0.00 :   77541:  xor    %r8d,%r8d
    0.00 :   77544:  jmp    75c02 <__vfprintf_internal+0xbd2>
    0.00 :   77549:  mov    %esi,0x10(%rsp)
    0.00 :   7754d:  movzbl 0x70(%rsp),%r13d
    0.00 :   77553:  cmp    $0x9,%edi
    0.00 :   77556:  jbe    7640d <__vfprintf_internal+0x13dd>
    0.00 :   7755c:  jmp    7642d <__vfprintf_internal+0x13fd>
    0.00 :   77561:  test   %r8d,%r8d
    0.00 :   77564:  jg     76674 <__vfprintf_internal+0x1644>
    0.00 :   7756a:  xor    %r8d,%r8d
    0.00 :   7756d:  jmp    75bcf <__vfprintf_internal+0xb9f>
    0.00 :   77572:  mov    $0x1,%eax
    0.00 :   77577:  jmp    75851 <__vfprintf_internal+0x821>
    0.00 :   7757c:  mov    $0x1,%edx
    0.00 :   77581:  jmp    756a0 <__vfprintf_internal+0x670>
    0.00 :   77586:  mov    $0x1,%eax
    0.00 :   7758b:  jmp    764da <__vfprintf_internal+0x14aa>
    0.00 :   77590:  movb   $0x1,0xa6(%rsp)
    0.00 :   77598:  jmp    75100 <__vfprintf_internal+0xd0>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (89 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000935e <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator++()>:
    3.39 :   935e:   endbr64
    1.13 :   9362:   push   %rbp
    2.26 :   9363:   mov    %rsp,%rbp
    2.26 :   9366:   mov    %rdi,-0x8(%rbp)
    2.26 :   936a:   mov    -0x8(%rbp),%rax
   22.29 :   936e:   mov    (%rax),%rax
   40.66 :   9371:   lea    0x8(%rax),%rdx
    3.39 :   9375:   mov    -0x8(%rbp),%rax
    0.00 :   9379:   mov    %rdx,(%rax)
   20.11 :   937c:   mov    -0x8(%rbp),%rax
    1.13 :   9380:   pop    %rbp
    1.13 :   9381:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (89 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a26a0 <_int_free>:
    0.00 :   a26a0:  push   %r15
    2.26 :   a26a2:  push   %r14
    0.00 :   a26a4:  push   %r13
    1.13 :   a26a6:  mov    %edx,%r13d
    0.00 :   a26a9:  push   %r12
    1.13 :   a26ab:  push   %rbp
    1.13 :   a26ac:  push   %rbx
    1.13 :   a26ad:  sub    $0x38,%rsp
    1.13 :   a26b1:  mov    0x8(%rsi),%rdx
    2.20 :   a26b5:  mov    %fs:0x28,%rax
    1.08 :   a26be:  mov    %rax,0x28(%rsp)
    0.00 :   a26c3:  xor    %eax,%eax
    0.00 :   a26c5:  mov    %rdx,%rbx
    0.00 :   a26c8:  and    $0xfffffffffffffff8,%rbx
    1.13 :   a26cc:  mov    %rbx,%rcx
    0.00 :   a26cf:  neg    %rcx
    0.00 :   a26d2:  cmp    %rcx,%rsi
    1.10 :   a26d5:  ja     a2a38 <_int_free+0x398>
    0.00 :   a26db:  mov    %rsi,%rbp
    0.00 :   a26de:  test   $0xf,%sil
    0.00 :   a26e2:  jne    a2a38 <_int_free+0x398>
    0.00 :   a26e8:  cmp    $0x1f,%rbx
    0.00 :   a26ec:  jbe    a2a48 <_int_free+0x3a8>
    0.00 :   a26f2:  and    $0x8,%edx
    0.00 :   a26f5:  jne    a2a48 <_int_free+0x3a8>
    0.00 :   a26fb:  mov    0x1776a6(%rip),%rax        # 219da8 <_DYNAMIC+0x1e8>
    1.13 :   a2702:  mov    %rdi,%r12
    0.00 :   a2705:  mov    %fs:(%rax),%rsi
    3.33 :   a2709:  test   %rsi,%rsi
    4.53 :   a270c:  je     a274b <_int_free+0xab>
    0.00 :   a270e:  lea    -0x11(%rbx),%rcx
    0.00 :   a2712:  shr    $0x4,%rcx
    2.26 :   a2716:  cmp    %rcx,0x177cab(%rip)        # 21a3c8 <mp_+0x68>
    2.26 :   a271d:  jbe    a274b <_int_free+0xab>
    0.00 :   a271f:  mov    0x177cb2(%rip),%rdi        # 21a3d8 <mp_+0x78>
    0.00 :   a2726:  mov    0x17edab(%rip),%r11        # 2214d8 <tcache_key>
    0.00 :   a272d:  lea    0x10(%rbp),%r8
    0.00 :   a2731:  cmp    %r11,0x18(%rbp)
    2.16 :   a2735:  je     a2de0 <_int_free+0x740>
    0.00 :   a273b:  movzwl (%rsi,%rcx,2),%edx
    5.59 :   a273f:  mov    %rdx,%rax
    0.00 :   a2742:  cmp    %rdi,%rdx
    3.27 :   a2745:  jb     a2a00 <_int_free+0x360>
    0.00 :   a274b:  cmp    0x17edae(%rip),%rbx        # 221500 <global_max_fast>
    0.00 :   a2752:  ja     a2810 <_int_free+0x170>
    0.00 :   a2758:  lea    0x0(%rbp,%rbx,1),%r14
    0.00 :   a275d:  mov    0x8(%r14),%rax
    2.27 :   a2761:  cmp    $0x10,%rax
    3.39 :   a2765:  jbe    a2a58 <_int_free+0x3b8>
    0.00 :   a276b:  and    $0xfffffffffffffff8,%rax
    0.00 :   a276f:  cmp    0x888(%r12),%rax
    4.52 :   a2777:  jae    a2a58 <_int_free+0x3b8>
    0.00 :   a277d:  mov    0x17ed79(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a2783:  test   %eax,%eax
    0.00 :   a2785:  jne    a2ce0 <_int_free+0x640>
    0.00 :   a278b:  movl   $0x1,0x8(%r12)
    4.52 :   a2794:  shr    $0x4,%ebx
    0.00 :   a2797:  lea    -0x2(%rbx),%eax
    0.00 :   a279a:  add    $0x2,%rax
    0.00 :   a279e:  mov    (%r12,%rax,8),%rdx
    2.26 :   a27a2:  mov    %fs:0x18,%ecx
    0.00 :   a27aa:  test   %ecx,%ecx
    1.13 :   a27ac:  jne    a2978 <_int_free+0x2d8>
    0.00 :   a27b2:  cmp    %rdx,%rbp
    0.00 :   a27b5:  je     a29be <_int_free+0x31e>
    0.00 :   a27bb:  lea    0x10(%rbp),%rcx
    0.00 :   a27bf:  shr    $0xc,%rcx
    0.00 :   a27c3:  xor    %rdx,%rcx
    0.00 :   a27c6:  mov    %rcx,0x10(%rbp)
    0.00 :   a27ca:  mov    %rbp,(%r12,%rax,8)
    0.00 :   a27ce:  test   %rdx,%rdx
    0.00 :   a27d1:  je     a27e8 <_int_free+0x148>
    0.00 :   a27d3:  and    $0x1,%r13d
    0.00 :   a27d7:  je     a27e8 <_int_free+0x148>
    0.00 :   a27d9:  mov    0x8(%rdx),%rax
    0.00 :   a27dd:  shr    $0x4,%eax
    0.00 :   a27e0:  cmp    %eax,%ebx
    0.00 :   a27e2:  jne    a2efe <_int_free+0x85e>
    0.00 :   a27e8:  mov    0x28(%rsp),%rax
    1.13 :   a27ed:  sub    %fs:0x28,%rax
    0.00 :   a27f6:  jne    a2fc8 <_int_free+0x928>
    0.00 :   a27fc:  add    $0x38,%rsp
    0.00 :   a2800:  pop    %rbx
    0.00 :   a2801:  pop    %rbp
    1.13 :   a2802:  pop    %r12
    1.12 :   a2804:  pop    %r13
    4.50 :   a2806:  pop    %r14
    2.26 :   a2808:  pop    %r15
    2.26 :   a280a:  ret
    0.00 :   a280b:  nopl   0x0(%rax,%rax,1)
    0.00 :   a2810:  testb  $0x2,0x8(%rbp)
    0.00 :   a2814:  jne    a29d0 <_int_free+0x330>
    0.00 :   a281a:  mov    %fs:0x18,%eax
    0.00 :   a2822:  test   %eax,%eax
    0.00 :   a2824:  je     a2830 <_int_free+0x190>
    0.00 :   a2826:  and    $0x1,%r13d
    0.00 :   a282a:  je     a2ca0 <_int_free+0x600>
    0.00 :   a2830:  movl   $0x1,0x14(%rsp)
    0.00 :   a2838:  mov    0x60(%r12),%rax
    0.00 :   a283d:  lea    0x0(%rbp,%rbx,1),%r14
    0.00 :   a2842:  cmp    %rbp,%rax
    0.00 :   a2845:  je     a2e40 <_int_free+0x7a0>
    0.00 :   a284b:  testb  $0x2,0x4(%r12)
    0.00 :   a2851:  je     a2e50 <_int_free+0x7b0>
    0.00 :   a2857:  mov    0x8(%r14),%rax
    0.00 :   a285b:  test   $0x1,%al
    0.00 :   a285d:  je     a2e70 <_int_free+0x7d0>
    0.00 :   a2863:  mov    %rax,%r15
    0.00 :   a2866:  and    $0xfffffffffffffff8,%r15
    0.00 :   a286a:  cmp    $0x10,%rax
    0.00 :   a286e:  jbe    a2cd0 <_int_free+0x630>
    0.00 :   a2874:  cmp    %r15,0x888(%r12)
    0.00 :   a287c:  jbe    a2cd0 <_int_free+0x630>
    0.00 :   a2882:  mov    0x17ec74(%rip),%esi        # 2214fc <perturb_byte>
    0.00 :   a2888:  test   %esi,%esi
    0.00 :   a288a:  jne    a2e80 <_int_free+0x7e0>
    0.00 :   a2890:  testb  $0x1,0x8(%rbp)
    0.00 :   a2894:  jne    a28b9 <_int_free+0x219>
    0.00 :   a2896:  mov    0x0(%rbp),%rax
    0.00 :   a289a:  sub    %rax,%rbp
    0.00 :   a289d:  add    %rax,%rbx
    0.00 :   a28a0:  mov    0x8(%rbp),%rdx
    0.00 :   a28a4:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a28a8:  cmp    %rax,%rdx
    0.00 :   a28ab:  jne    a2f16 <_int_free+0x876>
    0.00 :   a28b1:  mov    %rbp,%rdi
    0.00 :   a28b4:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a28b9:  cmp    %r14,0x60(%r12)
    0.00 :   a28be:  je     a2c80 <_int_free+0x5e0>
    0.00 :   a28c4:  testb  $0x1,0x8(%r14,%r15,1)
    0.00 :   a28ca:  je     a2d20 <_int_free+0x680>
    0.00 :   a28d0:  andq   $0xfffffffffffffffe,0x8(%r14)
    0.00 :   a28d5:  mov    0x70(%r12),%rax
    0.00 :   a28da:  lea    0x60(%r12),%rdx
    0.00 :   a28df:  movq   %rdx,%xmm1
    0.00 :   a28e4:  movq   %rax,%xmm0
    0.00 :   a28e9:  punpcklqdq %xmm1,%xmm0
    0.00 :   a28ed:  cmp    %rdx,0x18(%rax)
    0.00 :   a28f1:  jne    a2f0a <_int_free+0x86a>
    0.00 :   a28f7:  movups %xmm0,0x10(%rbp)
    0.00 :   a28fb:  cmp    $0x3ff,%rbx
    0.00 :   a2902:  ja     a2aa0 <_int_free+0x400>
    0.00 :   a2908:  mov    %rbp,0x70(%r12)
    0.00 :   a290d:  mov    %rbp,0x18(%rax)
    1.14 :   a2911:  mov    %rbx,%rax
    0.00 :   a2914:  or     $0x1,%rax
    0.00 :   a2918:  mov    %rax,0x8(%rbp)
    0.00 :   a291c:  mov    %rbx,0x0(%rbp,%rbx,1)
    0.00 :   a2921:  cmp    $0xffff,%rbx
    0.00 :   a2928:  ja     a2ae0 <_int_free+0x440>
    0.00 :   a292e:  mov    0x14(%rsp),%eax
    0.00 :   a2932:  test   %eax,%eax
    0.00 :   a2934:  jne    a27e8 <_int_free+0x148>
    0.00 :   a293a:  mov    %eax,%r13d
    0.00 :   a293d:  xchg   %r13d,(%r12)
    0.00 :   a2941:  cmp    $0x1,%r13d
    0.00 :   a2945:  jle    a27e8 <_int_free+0x148>
    0.00 :   a294b:  mov    0x28(%rsp),%rax
    0.00 :   a2950:  sub    %fs:0x28,%rax
    0.00 :   a2959:  jne    a2fc8 <_int_free+0x928>
    0.00 :   a295f:  add    $0x38,%rsp
    0.00 :   a2963:  mov    %r12,%rdi
    0.00 :   a2966:  pop    %rbx
    0.00 :   a2967:  pop    %rbp
    0.00 :   a2968:  pop    %r12
    0.00 :   a296a:  pop    %r13
    0.00 :   a296c:  pop    %r14
    0.00 :   a296e:  pop    %r15
    0.00 :   a2970:  jmp    91300 <__lll_lock_wake_private>
    0.00 :   a2975:  nopl   (%rax)
    0.00 :   a2978:  mov    %ebx,%eax
    1.13 :   a297a:  lea    0x10(%rbp),%rsi
    0.00 :   a297e:  lea    (%r12,%rax,8),%rcx
    0.00 :   a2982:  shr    $0xc,%rsi
    0.00 :   a2986:  jmp    a29b9 <_int_free+0x319>
    0.00 :   a2988:  nopl   0x0(%rax,%rax,1)
    0.00 :   a2990:  mov    %rdx,%rax
    0.00 :   a2993:  xor    %rsi,%rax
    2.27 :   a2996:  mov    %rax,0x10(%rbp)
    5.66 :   a299a:  mov    %rdx,%rax
    0.00 :   a299d:  cmpl   $0x0,%fs:0x18
    4.52 :   a29a6:  je     a29a9 <_int_free+0x309>
    2.26 :   a29a8:  lock cmpxchg %rbp,(%rcx)
   12.36 :   a29ad:  cmp    %rax,%rdx
    0.00 :   a29b0:  je     a27ce <_int_free+0x12e>
    0.00 :   a29b6:  mov    %rax,%rdx
    1.13 :   a29b9:  cmp    %rbp,%rdx
    0.00 :   a29bc:  jne    a2990 <_int_free+0x2f0>
    0.00 :   a29be:  lea    0x13bd83(%rip),%rdi        # 1de748 <__PRETTY_FUNCTION__.1+0x608>
    0.00 :   a29c5:  call   a0ce0 <malloc_printerr>
    0.00 :   a29ca:  nopw   0x0(%rax,%rax,1)
    0.00 :   a29d0:  mov    0x28(%rsp),%rax
    0.00 :   a29d5:  sub    %fs:0x28,%rax
    0.00 :   a29de:  jne    a2fc8 <_int_free+0x928>
    0.00 :   a29e4:  add    $0x38,%rsp
    0.00 :   a29e8:  mov    %rbp,%rdi
    0.00 :   a29eb:  pop    %rbx
    0.00 :   a29ec:  pop    %rbp
    0.00 :   a29ed:  pop    %r12
    0.00 :   a29ef:  pop    %r13
    0.00 :   a29f1:  pop    %r14
    0.00 :   a29f3:  pop    %r15
    0.00 :   a29f5:  jmp    a0f60 <munmap_chunk>
    0.00 :   a29fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2a00:  mov    0x17ead1(%rip),%rdx        # 2214d8 <tcache_key>
    0.00 :   a2a07:  add    $0x1,%eax
    0.00 :   a2a0a:  mov    %rdx,0x18(%rbp)
    0.00 :   a2a0e:  mov    %r8,%rdx
    0.00 :   a2a11:  shr    $0xc,%rdx
    0.00 :   a2a15:  xor    0x80(%rsi,%rcx,8),%rdx
    0.00 :   a2a1d:  mov    %rdx,0x10(%rbp)
    0.00 :   a2a21:  mov    %r8,0x80(%rsi,%rcx,8)
    1.08 :   a2a29:  mov    %ax,(%rsi,%rcx,2)
    0.00 :   a2a2d:  jmp    a27e8 <_int_free+0x148>
    0.00 :   a2a32:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2a38:  lea    0x136d05(%rip),%rdi        # 1d9744 <null+0xec9>
    0.00 :   a2a3f:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a44:  nopl   0x0(%rax)
    0.00 :   a2a48:  lea    0x136d0d(%rip),%rdi        # 1d975c <null+0xee1>
    0.00 :   a2a4f:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a54:  nopl   0x0(%rax)
    0.00 :   a2a58:  test   %r13d,%r13d
    0.00 :   a2a5b:  jne    a2a91 <_int_free+0x3f1>
    0.00 :   a2a5d:  mov    $0x1,%edx
    0.00 :   a2a62:  mov    %r13d,%eax
    0.00 :   a2a65:  lock cmpxchg %edx,(%r12)
    0.00 :   a2a6b:  jne    a2acf <_int_free+0x42f>
    0.00 :   a2a6d:  mov    0x8(%r14),%rax
    0.00 :   a2a71:  mov    $0x1,%r14d
    0.00 :   a2a77:  cmp    $0x10,%rax
    0.00 :   a2a7b:  ja     a2ab0 <_int_free+0x410>
    0.00 :   a2a7d:  xor    %eax,%eax
    0.00 :   a2a7f:  xchg   %eax,(%r12)
    0.00 :   a2a83:  cmp    $0x1,%eax
    0.00 :   a2a86:  jg     a2ac5 <_int_free+0x425>
    0.00 :   a2a88:  test   %r14d,%r14d
    0.00 :   a2a8b:  je     a277d <_int_free+0xdd>
    0.00 :   a2a91:  lea    0x13bc88(%rip),%rdi        # 1de720 <__PRETTY_FUNCTION__.1+0x5e0>
    0.00 :   a2a98:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a9d:  nopl   (%rax)
    0.00 :   a2aa0:  pxor   %xmm0,%xmm0
    0.00 :   a2aa4:  movups %xmm0,0x20(%rbp)
    0.00 :   a2aa8:  jmp    a2908 <_int_free+0x268>
    0.00 :   a2aad:  nopl   (%rax)
    0.00 :   a2ab0:  xor    %r14d,%r14d
    0.00 :   a2ab3:  and    $0xfffffffffffffff8,%rax
    0.00 :   a2ab7:  cmp    0x888(%r12),%rax
    0.00 :   a2abf:  setae  %r14b
    0.00 :   a2ac3:  jmp    a2a7d <_int_free+0x3dd>
    0.00 :   a2ac5:  mov    %r12,%rdi
    0.00 :   a2ac8:  call   91300 <__lll_lock_wake_private>
    0.00 :   a2acd:  jmp    a2a88 <_int_free+0x3e8>
    0.00 :   a2acf:  mov    %r12,%rdi
    0.00 :   a2ad2:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2ad7:  jmp    a2a6d <_int_free+0x3cd>
    0.00 :   a2ad9:  nopl   0x0(%rax)
    0.00 :   a2ae0:  mov    0x8(%r12),%eax
    0.00 :   a2ae5:  test   %eax,%eax
    0.00 :   a2ae7:  jne    a2e98 <_int_free+0x7f8>
    0.00 :   a2aed:  lea    0x17818c(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a2af4:  cmp    %rax,%r12
    0.00 :   a2af7:  mov    0x60(%r12),%rax
    0.00 :   a2afc:  je     a2ea8 <_int_free+0x808>
    0.00 :   a2b02:  mov    0x177887(%rip),%rcx        # 21a390 <mp_+0x30>
    0.00 :   a2b09:  test   %rcx,%rcx
    0.00 :   a2b0c:  je     a2ece <_int_free+0x82e>
    0.00 :   a2b12:  lea    0x0(,%rcx,4),%r13
    0.00 :   a2b1a:  mov    %r13,%rbx
    0.00 :   a2b1d:  neg    %rbx
    0.00 :   a2b20:  and    %rax,%rbx
    0.00 :   a2b23:  mov    (%rbx),%r15
    0.00 :   a2b26:  cmp    %r15,%r12
    0.00 :   a2b29:  jne    a30ab <_int_free+0xa0b>
    0.00 :   a2b2f:  mov    0x177832(%rip),%rdi        # 21a368 <mp_+0x8>
    0.00 :   a2b36:  mov    %rax,%r10
    0.00 :   a2b39:  mov    %rdi,0x18(%rsp)
    0.00 :   a2b3e:  lea    0x30(%rbx),%rdx
    0.00 :   a2b42:  cmp    %rdx,%rax
    0.00 :   a2b45:  jne    a2f22 <_int_free+0x882>
    0.00 :   a2b4b:  mov    0x18(%rsp),%rax
    0.00 :   a2b50:  add    $0x20,%rax
    0.00 :   a2b54:  mov    %rax,(%rsp)
    0.00 :   a2b58:  jmp    a2ba1 <_int_free+0x501>
    0.00 :   a2b5a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2b60:  mov    0x20(%rbx),%rax
    0.00 :   a2b64:  lea    (%r10,%r14,1),%rsi
    0.00 :   a2b68:  sub    $0x1,%rax
    0.00 :   a2b6c:  test   %rax,%rsi
    0.00 :   a2b6f:  jne    a300b <_int_free+0x96b>
    0.00 :   a2b75:  mov    0x10(%rbx),%rax
    0.00 :   a2b79:  add    %rbx,%rax
    0.00 :   a2b7c:  cmp    %rax,%rsi
    0.00 :   a2b7f:  jne    a2fec <_int_free+0x94c>
    0.00 :   a2b85:  mov    %r14,%rdx
    0.00 :   a2b88:  lea    0x30(%rbx),%rax
    0.00 :   a2b8c:  mov    %r10,0x60(%r15)
    0.00 :   a2b90:  or     $0x1,%rdx
    0.00 :   a2b94:  mov    %rdx,0x8(%r10)
    0.00 :   a2b98:  cmp    %rax,%r10
    0.00 :   a2b9b:  jne    a2d37 <_int_free+0x697>
    0.00 :   a2ba1:  mov    %rbx,%rdi
    0.00 :   a2ba4:  mov    0x8(%rbx),%rbx
    0.00 :   a2ba8:  mov    0x10(%rbx),%rax
    0.00 :   a2bac:  lea    -0x10(%rax),%rbp
    0.00 :   a2bb0:  lea    (%rbx,%rbp,1),%rdx
    0.00 :   a2bb4:  and    $0xf,%edx
    0.00 :   a2bb7:  sub    %rdx,%rbp
    0.00 :   a2bba:  add    %rbx,%rbp
    0.00 :   a2bbd:  cmpq   $0x1,0x8(%rbp)
    0.00 :   a2bc2:  jne    a302a <_int_free+0x98a>
    0.00 :   a2bc8:  sub    0x0(%rbp),%rbp
    0.00 :   a2bcc:  mov    0x8(%rbp),%r8
    0.00 :   a2bd0:  mov    %r8,%rsi
    0.00 :   a2bd3:  and    $0xfffffffffffffff8,%rsi
    0.00 :   a2bd7:  add    %rdx,%rsi
    0.00 :   a2bda:  lea    0x10(%rsi),%r14
    0.00 :   a2bde:  add    $0xf,%rsi
    0.00 :   a2be2:  cmp    $0x3e,%rsi
    0.00 :   a2be6:  ja     a2fa9 <_int_free+0x909>
    0.00 :   a2bec:  and    $0x1,%r8d
    0.00 :   a2bf0:  jne    a2bf6 <_int_free+0x556>
    0.00 :   a2bf2:  add    0x0(%rbp),%r14
    0.00 :   a2bf6:  test   %r14,%r14
    0.00 :   a2bf9:  jle    a2fcd <_int_free+0x92d>
    0.00 :   a2bff:  cmp    %r13,%r14
    0.00 :   a2c02:  jae    a2fcd <_int_free+0x92d>
    0.00 :   a2c08:  mov    %r13,%rsi
    0.00 :   a2c0b:  sub    %rax,%rsi
    0.00 :   a2c0e:  lea    (%rsi,%r14,1),%rax
    0.00 :   a2c12:  mov    (%rsp),%rsi
    0.00 :   a2c16:  add    0x20(%rdi),%rsi
    0.00 :   a2c1a:  cmp    %rsi,%rax
    0.00 :   a2c1d:  jb     a2d30 <_int_free+0x690>
    0.00 :   a2c23:  mov    0x10(%rdi),%rax
    0.00 :   a2c27:  sub    %rax,0x888(%r15)
    0.00 :   a2c2e:  nop
    0.00 :   a2c2f:  lea    (%rdi,%r13,1),%rax
    0.00 :   a2c33:  cmp    %rax,0x17e8a6(%rip)        # 2214e0 <aligned_heap_area>
    0.00 :   a2c3a:  je     a2c70 <_int_free+0x5d0>
    0.00 :   a2c3c:  mov    %r13,%rsi
    0.00 :   a2c3f:  call   11ea70 <__munmap>
    0.00 :   a2c44:  mov    %rbp,%r10
    0.00 :   a2c47:  testb  $0x1,0x8(%rbp)
    0.00 :   a2c4b:  jne    a2b60 <_int_free+0x4c0>
    0.00 :   a2c51:  sub    0x0(%rbp),%r10
    0.00 :   a2c55:  mov    %r10,%rdi
    0.00 :   a2c58:  mov    %r10,0x8(%rsp)
    0.00 :   a2c5d:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a2c62:  mov    0x8(%rsp),%r10
    0.00 :   a2c67:  jmp    a2b60 <_int_free+0x4c0>
    0.00 :   a2c6c:  nopl   0x0(%rax)
    0.00 :   a2c70:  movq   $0x0,0x17e865(%rip)        # 2214e0 <aligned_heap_area>
    0.00 :   a2c7b:  jmp    a2c3c <_int_free+0x59c>
    0.00 :   a2c7d:  nopl   (%rax)
    0.00 :   a2c80:  add    %r15,%rbx
    0.00 :   a2c83:  mov    %rbx,%rax
    0.00 :   a2c86:  or     $0x1,%rax
    0.00 :   a2c8a:  mov    %rax,0x8(%rbp)
    0.00 :   a2c8e:  mov    %rbp,0x60(%r12)
    0.00 :   a2c93:  jmp    a2921 <_int_free+0x281>
    0.00 :   a2c98:  nopl   0x0(%rax,%rax,1)
    0.00 :   a2ca0:  xor    %eax,%eax
    0.00 :   a2ca2:  mov    $0x1,%edx
    0.00 :   a2ca7:  lock cmpxchg %edx,(%r12)
    0.00 :   a2cad:  movl   $0x0,0x14(%rsp)
    0.00 :   a2cb5:  je     a2838 <_int_free+0x198>
    0.00 :   a2cbb:  mov    %r12,%rdi
    0.00 :   a2cbe:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2cc3:  jmp    a2838 <_int_free+0x198>
    0.00 :   a2cc8:  nopl   0x0(%rax,%rax,1)
    0.00 :   a2cd0:  lea    0x13bb01(%rip),%rdi        # 1de7d8 <__PRETTY_FUNCTION__.1+0x698>
    0.00 :   a2cd7:  call   a0ce0 <malloc_printerr>
    0.00 :   a2cdc:  nopl   0x0(%rax)
    0.00 :   a2ce0:  lea    0x18(%rbp),%rdi
    0.00 :   a2ce4:  lea    0x10(%rbp),%rcx
    0.00 :   a2ce8:  movzbl %al,%eax
    0.00 :   a2ceb:  movabs $0x101010101010101,%rsi
    0.00 :   a2cf5:  and    $0xfffffffffffffff8,%rdi
    0.00 :   a2cf9:  imul   %rsi,%rax
    0.00 :   a2cfd:  lea    -0x10(%rbx),%rdx
    0.00 :   a2d01:  sub    %rdi,%rcx
    0.00 :   a2d04:  mov    %edx,%esi
    0.00 :   a2d06:  add    %edx,%ecx
    0.00 :   a2d08:  shr    $0x3,%ecx
    0.00 :   a2d0b:  mov    %rax,0x10(%rbp)
    0.00 :   a2d0f:  mov    %rax,0x8(%rbp,%rsi,1)
    0.00 :   a2d14:  rep stos %rax,%es:(%rdi)
    0.00 :   a2d17:  jmp    a278b <_int_free+0xeb>
    0.00 :   a2d1c:  nopl   0x0(%rax)
    0.00 :   a2d20:  mov    %r14,%rdi
    0.00 :   a2d23:  add    %r15,%rbx
    0.00 :   a2d26:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a2d2b:  jmp    a28d5 <_int_free+0x235>
    0.00 :   a2d30:  mov    0x8(%r10),%rdx
    0.00 :   a2d34:  mov    %rdi,%rbx
    0.00 :   a2d37:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a2d3b:  cmp    %rdx,0x17761e(%rip)        # 21a360 <mp_>
    0.00 :   a2d42:  mov    %rdx,%rbp
    0.00 :   a2d45:  ja     a292e <_int_free+0x28e>
    0.00 :   a2d4b:  mov    %rdx,%rax
    0.00 :   a2d4e:  sub    $0x21,%rax
    0.00 :   a2d52:  js     a292e <_int_free+0x28e>
    0.00 :   a2d58:  mov    0x18(%rsp),%rdi
    0.00 :   a2d5d:  cmp    %rdi,%rax
    0.00 :   a2d60:  jbe    a292e <_int_free+0x28e>
    0.00 :   a2d66:  mov    0x20(%rbx),%r14
    0.00 :   a2d6a:  sub    %rdi,%rax
    0.00 :   a2d6d:  neg    %r14
    0.00 :   a2d70:  and    %rax,%r14
    0.00 :   a2d73:  je     a292e <_int_free+0x28e>
    0.00 :   a2d79:  mov    0x10(%rbx),%r13
    0.00 :   a2d7d:  sub    %r14,%r13
    0.00 :   a2d80:  cmp    $0x2f,%r13
    0.00 :   a2d84:  jle    a292e <_int_free+0x28e>
    0.00 :   a2d8a:  mov    0x1775b0(%rip),%eax        # 21a340 <may_shrink_heap.12>
    0.00 :   a2d90:  test   %eax,%eax
    0.00 :   a2d92:  js     a2f2b <_int_free+0x88b>
    0.00 :   a2d98:  jne    a2f74 <_int_free+0x8d4>
    0.00 :   a2d9e:  lea    (%rbx,%r13,1),%rdi
    0.00 :   a2da2:  mov    $0x4,%edx
    0.00 :   a2da7:  mov    %r14,%rsi
    0.00 :   a2daa:  mov    %r10,(%rsp)
    0.00 :   a2dae:  call   11eb70 <__madvise>
    0.00 :   a2db3:  mov    (%rsp),%r10
    0.00 :   a2db7:  mov    %r13,0x10(%rbx)
    0.00 :   a2dbb:  nop
    0.00 :   a2dbc:  mov    %rbp,%rdx
    0.00 :   a2dbf:  sub    %r14,0x888(%r15)
    0.00 :   a2dc6:  sub    %r14,%rdx
    0.00 :   a2dc9:  or     $0x1,%rdx
    0.00 :   a2dcd:  mov    %rdx,0x8(%r10)
    0.00 :   a2dd1:  jmp    a292e <_int_free+0x28e>
    0.00 :   a2dd6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   a2de0:  nop
    0.00 :   a2de1:  mov    %fs:(%rax),%rsi
    0.00 :   a2de5:  mov    0x1775ec(%rip),%rdi        # 21a3d8 <mp_+0x78>
    0.00 :   a2dec:  mov    0x80(%rsi,%rcx,8),%rax
    0.00 :   a2df4:  test   %rax,%rax
    0.00 :   a2df7:  jne    a2e26 <_int_free+0x786>
    0.00 :   a2df9:  jmp    a273b <_int_free+0x9b>
    0.00 :   a2dfe:  xchg   %ax,%ax
    0.00 :   a2e00:  cmp    %r8,%rax
    0.00 :   a2e03:  je     a309f <_int_free+0x9ff>
    0.00 :   a2e09:  mov    (%rax),%r10
    0.00 :   a2e0c:  shr    $0xc,%rax
    0.00 :   a2e10:  add    $0x1,%rdx
    0.00 :   a2e14:  mov    %rax,%r9
    0.00 :   a2e17:  mov    %r10,%rax
    0.00 :   a2e1a:  xor    %r9,%rax
    0.00 :   a2e1d:  cmp    %r9,%r10
    0.00 :   a2e20:  je     a273b <_int_free+0x9b>
    0.00 :   a2e26:  cmp    %rdx,%rdi
    0.00 :   a2e29:  je     a3093 <_int_free+0x9f3>
    0.00 :   a2e2f:  test   $0xf,%al
    0.00 :   a2e31:  je     a2e00 <_int_free+0x760>
    0.00 :   a2e33:  lea    0x13b886(%rip),%rdi        # 1de6c0 <__PRETTY_FUNCTION__.1+0x580>
    0.00 :   a2e3a:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e3f:  nop
    0.00 :   a2e40:  lea    0x13b929(%rip),%rdi        # 1de770 <__PRETTY_FUNCTION__.1+0x630>
    0.00 :   a2e47:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e4c:  nopl   0x0(%rax)
    0.00 :   a2e50:  mov    0x8(%rax),%rdx
    0.00 :   a2e54:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a2e58:  add    %rdx,%rax
    0.00 :   a2e5b:  cmp    %rax,%r14
    0.00 :   a2e5e:  jb     a2857 <_int_free+0x1b7>
    0.00 :   a2e64:  lea    0x13b925(%rip),%rdi        # 1de790 <__PRETTY_FUNCTION__.1+0x650>
    0.00 :   a2e6b:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e70:  lea    0x13b939(%rip),%rdi        # 1de7b0 <__PRETTY_FUNCTION__.1+0x670>
    0.00 :   a2e77:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e7c:  nopl   0x0(%rax)
    0.00 :   a2e80:  lea    -0x10(%rbx),%rdx
    0.00 :   a2e84:  lea    0x10(%rbp),%rdi
    0.00 :   a2e88:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a2e8d:  jmp    a2890 <_int_free+0x1f0>
    0.00 :   a2e92:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2e98:  mov    %r12,%rdi
    0.00 :   a2e9b:  call   a17f0 <malloc_consolidate>
    0.00 :   a2ea0:  jmp    a2aed <_int_free+0x44d>
    0.00 :   a2ea5:  nopl   (%rax)
    0.00 :   a2ea8:  mov    0x8(%rax),%rax
    0.00 :   a2eac:  and    $0xfffffffffffffff8,%rax
    0.00 :   a2eb0:  cmp    0x1774a9(%rip),%rax        # 21a360 <mp_>
    0.00 :   a2eb7:  jb     a292e <_int_free+0x28e>
    0.00 :   a2ebd:  mov    0x1774a4(%rip),%rdi        # 21a368 <mp_+0x8>
    0.00 :   a2ec4:  call   a25f0 <systrim.constprop.0>
    0.00 :   a2ec9:  jmp    a292e <_int_free+0x28e>
    0.00 :   a2ece:  mov    %rax,%rbx
    0.00 :   a2ed1:  and    $0xfffffffffc000000,%rbx
    0.00 :   a2ed8:  mov    (%rbx),%r15
    0.00 :   a2edb:  cmp    %r15,%r12
    0.00 :   a2ede:  jne    a30ab <_int_free+0xa0b>
    0.00 :   a2ee4:  mov    0x17747d(%rip),%rcx        # 21a368 <mp_+0x8>
    0.00 :   a2eeb:  mov    %rax,%r10
    0.00 :   a2eee:  mov    $0x4000000,%r13d
    0.00 :   a2ef4:  mov    %rcx,0x18(%rsp)
    0.00 :   a2ef9:  jmp    a2b3e <_int_free+0x49e>
    0.00 :   a2efe:  lea    0x13686c(%rip),%rdi        # 1d9771 <null+0xef6>
    0.00 :   a2f05:  call   a0ce0 <malloc_printerr>
    0.00 :   a2f0a:  lea    0x13b927(%rip),%rdi        # 1de838 <__PRETTY_FUNCTION__.1+0x6f8>
    0.00 :   a2f11:  call   a0ce0 <malloc_printerr>
    0.00 :   a2f16:  lea    0x13b8e3(%rip),%rdi        # 1de800 <__PRETTY_FUNCTION__.1+0x6c0>
    0.00 :   a2f1d:  call   a0ce0 <malloc_printerr>
    0.00 :   a2f22:  mov    0x8(%rax),%rdx
    0.00 :   a2f26:  jmp    a2d37 <_int_free+0x697>
    0.00 :   a2f2b:  mov    0x176f4e(%rip),%rax        # 219e80 <__libc_enable_secure@GLIBC_PRIVATE>
    0.00 :   a2f32:  mov    (%rax),%ecx
    0.00 :   a2f34:  test   %ecx,%ecx
    0.00 :   a2f36:  mov    %ecx,0x177404(%rip)        # 21a340 <may_shrink_heap.12>
    0.00 :   a2f3c:  mov    %ecx,0x18(%rsp)
    0.00 :   a2f40:  jne    a2f74 <_int_free+0x8d4>
    0.00 :   a2f42:  lea    0x13ba1f(%rip),%rdi        # 1de968 <__PRETTY_FUNCTION__.1+0x828>
    0.00 :   a2f49:  xor    %eax,%eax
    0.00 :   a2f4b:  mov    $0x80000,%esi
    0.00 :   a2f50:  mov    %r10,(%rsp)
    0.00 :   a2f54:  call   1199d0 <__open64_nocancel>
    0.00 :   a2f59:  mov    (%rsp),%r10
    0.00 :   a2f5d:  test   %eax,%eax
    0.00 :   a2f5f:  mov    %eax,%edi
    0.00 :   a2f61:  jns    a3049 <_int_free+0x9a9>
    0.00 :   a2f67:  cmpl   $0x0,0x1773d2(%rip)        # 21a340 <may_shrink_heap.12>
    0.00 :   a2f6e:  je     a2d9e <_int_free+0x6fe>
    0.00 :   a2f74:  xor    %r9d,%r9d
    0.00 :   a2f77:  or     $0xffffffff,%r8d
    0.00 :   a2f7b:  xor    %edx,%edx
    0.00 :   a2f7d:  mov    $0x32,%ecx
    0.00 :   a2f82:  lea    (%rbx,%r13,1),%rdi
    0.00 :   a2f86:  mov    %r14,%rsi
    0.00 :   a2f89:  mov    %r10,(%rsp)
    0.00 :   a2f8d:  call   11ea10 <__mmap>
    0.00 :   a2f92:  mov    (%rsp),%r10
    0.00 :   a2f96:  add    $0x1,%rax
    0.00 :   a2f9a:  je     a292e <_int_free+0x28e>
    0.00 :   a2fa0:  mov    %r13,0x18(%rbx)
    0.00 :   a2fa4:  jmp    a2db7 <_int_free+0x717>
    0.00 :   a2fa9:  lea    0x13c218(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2fb0:  mov    $0x296,%edx
    0.00 :   a2fb5:  lea    0x1366ee(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fbc:  lea    0x13b8cd(%rip),%rdi        # 1de890 <__PRETTY_FUNCTION__.1+0x750>
    0.00 :   a2fc3:  call   a0e70 <__malloc_assert>
    0.00 :   a2fc8:  call   136550 <__stack_chk_fail>
    0.00 :   a2fcd:  lea    0x13c1f4(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2fd4:  mov    $0x299,%edx
    0.00 :   a2fd9:  lea    0x1366ca(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fe0:  lea    0x13b8d9(%rip),%rdi        # 1de8c0 <__PRETTY_FUNCTION__.1+0x780>
    0.00 :   a2fe7:  call   a0e70 <__malloc_assert>
    0.00 :   a2fec:  lea    0x13c1d5(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2ff3:  mov    $0x2aa,%edx
    0.00 :   a2ff8:  lea    0x1366ab(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fff:  lea    0x13b92a(%rip),%rdi        # 1de930 <__PRETTY_FUNCTION__.1+0x7f0>
    0.00 :   a3006:  call   a0e70 <__malloc_assert>
    0.00 :   a300b:  lea    0x13c1b6(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a3012:  mov    $0x2a8,%edx
    0.00 :   a3017:  lea    0x13668c(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a301e:  lea    0x13b8c3(%rip),%rdi        # 1de8e8 <__PRETTY_FUNCTION__.1+0x7a8>
    0.00 :   a3025:  call   a0e70 <__malloc_assert>
    0.00 :   a302a:  lea    0x13c197(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a3031:  mov    $0x293,%edx
    0.00 :   a3036:  lea    0x13666d(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a303d:  lea    0x13b81c(%rip),%rdi        # 1de860 <__PRETTY_FUNCTION__.1+0x720>
    0.00 :   a3044:  call   a0e70 <__malloc_assert>
    0.00 :   a3049:  lea    0x27(%rsp),%rsi
    0.00 :   a304e:  mov    $0x1,%edx
    0.00 :   a3053:  mov    %r10,0x8(%rsp)
    0.00 :   a3058:  mov    %eax,(%rsp)
    0.00 :   a305b:  call   119b20 <__read_nocancel>
    0.00 :   a3060:  mov    (%rsp),%edi
    0.00 :   a3063:  mov    0x8(%rsp),%r10
    0.00 :   a3068:  test   %rax,%rax
    0.00 :   a306b:  mov    0x18(%rsp),%ecx
    0.00 :   a306f:  jle    a307b <_int_free+0x9db>
    0.00 :   a3071:  xor    %ecx,%ecx
    0.00 :   a3073:  cmpb   $0x32,0x27(%rsp)
    0.00 :   a3078:  sete   %cl
    0.00 :   a307b:  mov    %r10,(%rsp)
    0.00 :   a307f:  mov    %ecx,0x1772bb(%rip)        # 21a340 <may_shrink_heap.12>
    0.00 :   a3085:  call   119860 <__close_nocancel>
    0.00 :   a308a:  mov    (%rsp),%r10
    0.00 :   a308e:  jmp    a2f67 <_int_free+0x8c7>
    0.00 :   a3093:  lea    0x13b5f6(%rip),%rdi        # 1de690 <__PRETTY_FUNCTION__.1+0x550>
    0.00 :   a309a:  call   a0ce0 <malloc_printerr>
    0.00 :   a309f:  lea    0x13b64a(%rip),%rdi        # 1de6f0 <__PRETTY_FUNCTION__.1+0x5b0>
    0.00 :   a30a6:  call   a0ce0 <malloc_printerr>
    0.00 :   a30ab:  lea    0x13c126(%rip),%rcx        # 1df1d8 <__PRETTY_FUNCTION__.10>
    0.00 :   a30b2:  mov    $0x124f,%edx
    0.00 :   a30b7:  lea    0x1365ce(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a30be:  lea    0x1366c9(%rip),%rdi        # 1d978e <null+0xf13>
    0.00 :   a30c5:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (87 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003f32 <std::hash<int>::operator()(int) const>:
    0.00 :   3f32:   endbr64
    0.00 :   3f36:   push   %rbp
   48.44 :   3f37:   mov    %rsp,%rbp
    0.00 :   3f3a:   mov    %rdi,-0x8(%rbp)
   27.60 :   3f3e:   mov    %esi,-0xc(%rbp)
    2.31 :   3f41:   mov    -0xc(%rbp),%eax
   20.58 :   3f44:   cltq
    0.00 :   3f46:   pop    %rbp
    1.07 :   3f47:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (87 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012fbd0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4>:
    0.00 :   12fbd0: endbr64
    0.00 :   12fbd4: push   %r15
    0.00 :   12fbd6: lea    0xd0(%r9),%rdi
    0.00 :   12fbdd: push   %r14
    0.00 :   12fbdf: push   %r13
    0.00 :   12fbe1: push   %r12
    0.00 :   12fbe3: push   %rbp
    0.00 :   12fbe4: push   %rbx
    0.00 :   12fbe5: sub    $0x88,%rsp
    0.00 :   12fbec: mov    0xc0(%rsp),%rax
    0.00 :   12fbf4: mov    %rsi,0x50(%rsp)
    0.00 :   12fbf9: mov    %rdx,0x58(%rsp)
    0.00 :   12fbfe: mov    0xc8(%rsp),%rbp
    0.00 :   12fc06: mov    %rcx,0x40(%rsp)
    0.00 :   12fc0b: mov    %r8,0x48(%rsp)
    0.00 :   12fc10: mov    %rax,0x38(%rsp)
    0.00 :   12fc15: mov    %fs:0x28,%rax
    1.16 :   12fc1e: mov    %rax,0x78(%rsp)
    0.00 :   12fc23: xor    %eax,%eax
    0.00 :   12fc25: call   12b240 <std::__numpunct_cache<char>::_M_cache(std::locale const&)@@GLIBCXX_3.4+0x4f0>
    0.00 :   12fc2a: lea    0x40(%rsp),%rsi
    0.00 :   12fc2f: mov    %rax,%r12
    0.00 :   12fc32: lea    0x50(%rsp),%rax
    0.00 :   12fc37: mov    %rsi,0x30(%rsp)
    0.00 :   12fc3c: mov    %rax,%rdi
    0.00 :   12fc3f: mov    %rax,0x28(%rsp)
    0.00 :   12fc44: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   12fc49: mov    %eax,%r13d
    0.00 :   12fc4c: test   %al,%al
    0.00 :   12fc4e: je     130430 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x860>
    0.00 :   12fc54: mov    0xf58ed(%rip),%rax        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   12fc5b: movl   $0x0,0x18(%rsp)
    0.00 :   12fc63: xor    %ebx,%ebx
    0.00 :   12fc65: xor    %r15d,%r15d
    0.00 :   12fc68: movzbl 0x20(%r12),%edx
    0.00 :   12fc6e: mov    %rax,(%rsp)
    0.00 :   12fc72: nopw   0x0(%rax,%rax,1)
    0.00 :   12fc78: mov    (%rsp),%rax
    1.17 :   12fc7c: add    $0x18,%rax
    0.00 :   12fc80: mov    %rax,0x70(%rsp)
    0.00 :   12fc85: test   %dl,%dl
    0.00 :   12fc87: jne    130411 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x841>
    0.00 :   12fc8d: movzbl 0x88(%r12),%eax
    0.00 :   12fc96: mov    %al,0x10(%rsp)
    0.00 :   12fc9a: test   %al,%al
    0.00 :   12fc9c: jne    12fe60 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x290>
    0.00 :   12fca2: test   %r13b,%r13b
    0.00 :   12fca5: jne    130781 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbb1>
    0.00 :   12fcab: movb   $0x0,0x1e(%rsp)
    0.00 :   12fcb0: movb   $0x0,0x1f(%rsp)
    0.00 :   12fcb5: lea    -0x30(%rbx),%eax
    0.00 :   12fcb8: cmp    $0x9,%al
    0.00 :   12fcba: ja     12fda3 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1d3>
    0.00 :   12fcc0: mov    0x0(%rbp),%rax
    0.00 :   12fcc4: mov    -0x18(%rax),%rcx
    0.00 :   12fcc8: mov    %rcx,0x10(%rsp)
    0.00 :   12fccd: lea    0x1(%rcx),%r13
    0.00 :   12fcd1: cmp    %r13,-0x10(%rax)
    0.00 :   12fcd5: jb     12fcee <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x11e>
    0.00 :   12fcd7: mov    0xf5602(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   12fcde: cmpb   $0x0,(%rdx)
    3.42 :   12fce1: je     130160 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x590>
    0.00 :   12fce7: mov    -0x8(%rax),%ecx
    0.00 :   12fcea: test   %ecx,%ecx
    0.00 :   12fcec: jle    12fd02 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x132>
    0.00 :   12fcee: mov    %r13,%rsi
    0.00 :   12fcf1: mov    %rbp,%rdi
    0.00 :   12fcf4: lea    0x70(%rsp),%r14
    0.00 :   12fcf9: call   9eb00 <std::string::reserve(unsigned long)@plt>
    0.00 :   12fcfe: mov    0x0(%rbp),%rax
    0.00 :   12fd02: mov    -0x18(%rax),%rdx
    0.00 :   12fd06: mov    (%rsp),%rsi
    0.00 :   12fd0a: mov    $0x1,%r15d
    0.00 :   12fd10: mov    %bl,(%rax,%rdx,1)
    3.31 :   12fd13: mov    0x0(%rbp),%rax
    3.41 :   12fd17: lea    -0x18(%rax),%rdx
    0.00 :   12fd1b: cmp    %rsi,%rdx
    0.00 :   12fd1e: jne    1302a0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x6d0>
    3.39 :   12fd24: mov    0x50(%rsp),%rbx
    0.00 :   12fd29: mov    0x10(%rbx),%rax
    2.32 :   12fd2d: mov    0x18(%rbx),%rdx
    0.00 :   12fd31: cmp    %rdx,%rax
    0.00 :   12fd34: jae    1301e8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x618>
    0.00 :   12fd3a: add    $0x1,%rax
    0.00 :   12fd3e: movl   $0xffffffff,0x58(%rsp)
    0.00 :   12fd46: xor    %r13d,%r13d
    0.00 :   12fd49: mov    %rax,0x10(%rbx)
    2.35 :   12fd4d: cmp    %rdx,%rax
    2.25 :   12fd50: jae    130218 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x648>
    0.00 :   12fd56: mov    0x40(%rsp),%rdi
    0.00 :   12fd5b: cmpl   $0xffffffff,0x48(%rsp)
    0.00 :   12fd60: sete   %al
    1.16 :   12fd63: test   %rdi,%rdi
    1.16 :   12fd66: je     12fd70 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   12fd68: test   %al,%al
    0.00 :   12fd6a: jne    130170 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x5a0>
    0.00 :   12fd70: cmp    %r13b,%al
    0.00 :   12fd73: je     12ff37 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x367>
    0.00 :   12fd79: mov    0x50(%rsp),%rdi
    0.00 :   12fd7e: test   %rdi,%rdi
    2.28 :   12fd81: je     130260 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x690>
    0.00 :   12fd87: mov    0x10(%rdi),%rax
   15.76 :   12fd8b: cmp    0x18(%rdi),%rax
    4.61 :   12fd8f: jae    13023b <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x66b>
    0.00 :   12fd95: movzbl (%rax),%ebx
   15.17 :   12fd98: lea    -0x30(%rbx),%eax
    3.45 :   12fd9b: cmp    $0x9,%al
    2.25 :   12fd9d: jbe    12fcc0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xf0>
    0.00 :   12fda3: cmp    %bl,0x48(%r12)
    0.00 :   12fda8: je     130270 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x6a0>
    0.00 :   12fdae: xchg   %ax,%ax
    0.00 :   12fdb0: cmp    %bl,0x80(%r12)
    0.00 :   12fdb8: je     12fdc8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1f8>
    0.00 :   12fdba: cmp    %bl,0x86(%r12)
    1.16 :   12fdc2: jne    12ff37 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x367>
    0.00 :   12fdc8: movzbl 0x1e(%rsp),%eax
    0.00 :   12fdcd: xor    $0x1,%eax
    0.00 :   12fdd0: and    %al,%r15b
    0.00 :   12fdd3: je     12ff37 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x367>
    0.00 :   12fdd9: mov    $0x65,%esi
    0.00 :   12fdde: mov    %rbp,%rdi
    0.00 :   12fde1: lea    0x70(%rsp),%r14
    0.00 :   12fde6: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   12fdeb: mov    0x50(%rsp),%rdi
    0.00 :   12fdf0: call   1271b0 <std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()@@GLIBCXX_3.4+0x70>
    0.00 :   12fdf5: mov    0x30(%rsp),%rsi
    0.00 :   12fdfa: mov    0x28(%rsp),%rdi
    0.00 :   12fdff: movl   $0xffffffff,0x58(%rsp)
    0.00 :   12fe07: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   12fe0c: test   %al,%al
    0.00 :   12fe0e: jne    1307aa <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbda>
    0.00 :   12fe14: mov    0x28(%rsp),%rdi
    0.00 :   12fe19: lea    0x70(%rsp),%r14
    0.00 :   12fe1e: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   12fe23: mov    %eax,%ebx
    0.00 :   12fe25: cmp    %al,0x6f(%r12)
    0.00 :   12fe2a: je     1307a0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbd0>
    0.00 :   12fe30: mov    $0x2d,%esi
    0.00 :   12fe35: cmp    0x6e(%r12),%al
    0.00 :   12fe3a: jne    130690 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xac0>
    0.00 :   12fe40: mov    %rbp,%rdi
    0.00 :   12fe43: lea    0x70(%rsp),%r14
    0.00 :   12fe48: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   12fe4d: mov    %r15b,0x1e(%rsp)
    0.00 :   12fe52: jmp    12fd24 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x154>
    0.00 :   12fe57: nopw   0x0(%rax,%rax,1)
    0.00 :   12fe60: test   %r13b,%r13b
    0.00 :   12fe63: jne    130781 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbb1>
    0.00 :   12fe69: lea    0x72(%r12),%rax
    0.00 :   12fe6e: movb   $0x0,0x1e(%rsp)
    0.00 :   12fe73: movb   $0x0,0x1f(%rsp)
    0.00 :   12fe78: mov    %rax,0x20(%rsp)
    0.00 :   12fe7d: movzbl 0x20(%r12),%eax
    0.00 :   12fe83: nopl   0x0(%rax,%rax,1)
    0.00 :   12fe88: test   %al,%al
    0.00 :   12fe8a: je     12fe97 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x2c7>
    0.00 :   12fe8c: cmp    %bl,0x49(%r12)
    0.00 :   12fe91: je     1301a8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x5d8>
    0.00 :   12fe97: cmp    %bl,0x48(%r12)
    0.00 :   12fe9c: je     12ffe0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x410>
    0.00 :   12fea2: mov    0x20(%rsp),%r14
    0.00 :   12fea7: movsbl %bl,%esi
    0.00 :   12feaa: mov    $0xa,%edx
    0.00 :   12feaf: mov    %r14,%rdi
    0.00 :   12feb2: call   9eab0 <memchr@plt>
    0.00 :   12feb7: test   %rax,%rax
    0.00 :   12feba: je     130060 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x490>
    0.00 :   12fec0: sub    %r14,%rax
    0.00 :   12fec3: mov    %rbp,%rdi
    0.00 :   12fec6: lea    0x70(%rsp),%r14
    0.00 :   12fecb: lea    0x30(%rax),%esi
    0.00 :   12fece: movsbl %sil,%esi
    0.00 :   12fed2: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   12fed7: addl   $0x1,0x18(%rsp)
    0.00 :   12fedc: movzbl 0x10(%rsp),%r15d
    0.00 :   12fee2: mov    0x50(%rsp),%rbx
    0.00 :   12fee7: mov    0x10(%rbx),%rax
    0.00 :   12feeb: mov    0x18(%rbx),%rdx
    0.00 :   12feef: cmp    %rdx,%rax
    0.00 :   12fef2: jae    130308 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x738>
    0.00 :   12fef8: add    $0x1,%rax
    0.00 :   12fefc: movl   $0xffffffff,0x58(%rsp)
    0.00 :   12ff04: xor    %r13d,%r13d
    0.00 :   12ff07: mov    %rax,0x10(%rbx)
    0.00 :   12ff0b: cmp    %rdx,%rax
    0.00 :   12ff0e: jae    130338 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x768>
    0.00 :   12ff14: mov    0x40(%rsp),%rdi
    0.00 :   12ff19: cmpl   $0xffffffff,0x48(%rsp)
    0.00 :   12ff1e: sete   %al
    0.00 :   12ff21: test   %rdi,%rdi
    0.00 :   12ff24: je     12ff2e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x35e>
    0.00 :   12ff26: test   %al,%al
    0.00 :   12ff28: jne    1302c0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x6f0>
    0.00 :   12ff2e: cmp    %r13b,%al
    0.00 :   12ff31: jne    130030 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x460>
    0.00 :   12ff37: mov    0x70(%rsp),%rax
    0.00 :   12ff3c: cmpq   $0x0,-0x18(%rax)
    0.00 :   12ff41: mov    %rax,%rbx
    0.00 :   12ff44: je     12ff94 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3c4>
    0.00 :   12ff46: cmpb   $0x0,0x1f(%rsp)
    0.00 :   12ff4b: jne    12ffd8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x408>
    0.00 :   12ff51: cmpb   $0x0,0x1e(%rsp)
    0.00 :   12ff56: jne    12ffd8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x408>
    0.00 :   12ff5c: lea    0x70(%rsp),%r14
    0.00 :   12ff61: movsbl 0x18(%rsp),%esi
    0.00 :   12ff66: mov    %r14,%rdi
    0.00 :   12ff69: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   12ff6e: mov    0x70(%rsp),%rbx
    0.00 :   12ff73: mov    0x18(%r12),%rsi
    0.00 :   12ff78: mov    0x10(%r12),%rdi
    0.00 :   12ff7d: mov    %r14,%rdx
    0.00 :   12ff80: call   a20a0 <std::__verify_grouping(char const*, unsigned long, std::string const&)@plt>
    0.00 :   12ff85: test   %al,%al
    0.00 :   12ff87: jne    12ff94 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3c4>
    0.00 :   12ff89: mov    0x38(%rsp),%rax
    0.00 :   12ff8e: movl   $0x4,(%rax)
    0.00 :   12ff94: mov    (%rsp),%rcx
    0.00 :   12ff98: lea    -0x18(%rbx),%rdi
    0.00 :   12ff9c: mov    0x50(%rsp),%rax
    0.00 :   12ffa1: mov    0x58(%rsp),%rdx
    8.13 :   12ffa6: cmp    %rcx,%rdi
    0.00 :   12ffa9: jne    1307e4 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xc14>
    0.00 :   12ffaf: mov    0x78(%rsp),%rcx
    0.00 :   12ffb4: sub    %fs:0x28,%rcx
    0.00 :   12ffbd: jne    13091f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd4f>
    0.00 :   12ffc3: add    $0x88,%rsp
    0.00 :   12ffca: pop    %rbx
    0.00 :   12ffcb: pop    %rbp
    0.00 :   12ffcc: pop    %r12
    0.00 :   12ffce: pop    %r13
    0.00 :   12ffd0: pop    %r14
    0.00 :   12ffd2: pop    %r15
    0.00 :   12ffd4: ret
    0.00 :   12ffd5: nopl   (%rax)
    0.00 :   12ffd8: lea    0x70(%rsp),%r14
    0.00 :   12ffdd: jmp    12ff73 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3a3>
    0.00 :   12ffdf: nop
    0.00 :   12ffe0: movzbl 0x1f(%rsp),%esi
    0.00 :   12ffe5: or     %sil,0x1e(%rsp)
    0.00 :   12ffea: mov    0x70(%rsp),%rax
    0.00 :   12ffef: mov    -0x18(%rax),%rdx
    0.00 :   12fff3: jne    1307af <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbdf>
    0.00 :   12fff9: test   %rdx,%rdx
    0.00 :   12fffc: je     130010 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x440>
    0.00 :   12fffe: lea    0x70(%rsp),%r14
    0.00 :   130003: movsbl 0x18(%rsp),%esi
    0.00 :   130008: mov    %r14,%rdi
    0.00 :   13000b: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   130010: mov    $0x2e,%esi
    0.00 :   130015: mov    %rbp,%rdi
    0.00 :   130018: lea    0x70(%rsp),%r14
    0.00 :   13001d: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   130022: movzbl 0x10(%rsp),%eax
    0.00 :   130027: mov    %al,0x1f(%rsp)
    0.00 :   13002b: jmp    12fee2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x312>
    0.00 :   130030: mov    0x50(%rsp),%rdi
    0.00 :   130035: test   %rdi,%rdi
    0.00 :   130038: je     130360 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x790>
    0.00 :   13003e: mov    0x10(%rdi),%rax
    0.00 :   130042: cmp    0x18(%rdi),%rax
    0.00 :   130046: jae    13083b <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xc6b>
    0.00 :   13004c: movzbl (%rax),%ebx
    0.00 :   13004f: movzbl 0x20(%r12),%eax
    0.00 :   130055: jmp    12fe88 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x2b8>
    0.00 :   13005a: nopw   0x0(%rax,%rax,1)
    0.00 :   130060: cmp    %bl,0x80(%r12)
    0.00 :   130068: je     130078 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x4a8>
    0.00 :   13006a: cmp    %bl,0x86(%r12)
    0.00 :   130072: jne    12ff37 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x367>
    0.00 :   130078: movzbl 0x1e(%rsp),%edx
    0.00 :   13007d: mov    0x70(%rsp),%rax
    0.00 :   130082: xor    $0x1,%edx
    0.00 :   130085: mov    -0x18(%rax),%rcx
    0.00 :   130089: and    %dl,%r15b
    0.00 :   13008c: je     12ff3c <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x36c>
    0.00 :   130092: test   %rcx,%rcx
    0.00 :   130095: je     1300a2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x4d2>
    0.00 :   130097: cmpb   $0x0,0x1f(%rsp)
    0.00 :   13009c: je     1303c0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x7f0>
    0.00 :   1300a2: mov    $0x65,%esi
    0.00 :   1300a7: mov    %rbp,%rdi
    0.00 :   1300aa: lea    0x70(%rsp),%r14
    0.00 :   1300af: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   1300b4: mov    0x50(%rsp),%rdi
    0.00 :   1300b9: mov    0x10(%rdi),%rax
    0.00 :   1300bd: cmp    0x18(%rdi),%rax
    0.00 :   1300c1: jae    130678 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xaa8>
    0.00 :   1300c7: add    $0x1,%rax
    0.00 :   1300cb: mov    %rax,0x10(%rdi)
    0.00 :   1300cf: mov    0x30(%rsp),%rsi
    0.00 :   1300d4: mov    0x28(%rsp),%rdi
    0.00 :   1300d9: lea    0x70(%rsp),%r14
    0.00 :   1300de: movl   $0xffffffff,0x58(%rsp)
    0.00 :   1300e6: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   1300eb: test   %al,%al
    0.00 :   1300ed: jne    1307aa <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbda>
    0.00 :   1300f3: mov    0x50(%rsp),%rdi
    0.00 :   1300f8: mov    0x58(%rsp),%ebx
    0.00 :   1300fc: test   %rdi,%rdi
    0.00 :   1300ff: je     13010a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x53a>
    0.00 :   130101: cmp    $0xffffffff,%ebx
    0.00 :   130104: je     1303e0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x810>
    0.00 :   13010a: movzbl 0x6f(%r12),%edx
    0.00 :   130110: movzbl 0x20(%r12),%eax
    0.00 :   130116: cmp    %bl,%dl
    0.00 :   130118: je     130370 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x7a0>
    0.00 :   13011e: cmp    %bl,0x6e(%r12)
    0.00 :   130123: jne    1302fb <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x72b>
    0.00 :   130129: test   %al,%al
    0.00 :   13012b: jne    130390 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x7c0>
    0.00 :   130131: mov    $0x2d,%esi
    0.00 :   130136: cmp    0x48(%r12),%bl
    0.00 :   13013b: je     130384 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x7b4>
    0.00 :   130141: mov    %rbp,%rdi
    0.00 :   130144: lea    0x70(%rsp),%r14
    0.00 :   130149: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   13014e: mov    %r15b,0x1e(%rsp)
    0.00 :   130153: jmp    12fee2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x312>
    0.00 :   130158: nopl   0x0(%rax,%rax,1)
    0.00 :   130160: mov    -0x8(%rax),%eax
    0.00 :   130163: test   %eax,%eax
    0.00 :   130165: jg     12fcee <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x11e>
    0.00 :   13016b: jmp    12fcfe <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x12e>
    0.00 :   130170: mov    0x18(%rdi),%rcx
    0.00 :   130174: xor    %eax,%eax
    0.00 :   130176: cmp    %rcx,0x10(%rdi)
    0.00 :   13017a: jb     12fd70 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   130180: mov    (%rdi),%rax
    0.00 :   130183: lea    0x70(%rsp),%r14
    0.00 :   130188: call   *0x48(%rax)
    0.00 :   13018b: cmp    $0xffffffff,%eax
    0.00 :   13018e: sete   %al
    0.00 :   130191: jne    12fd70 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   130197: movq   $0x0,0x40(%rsp)
    0.00 :   1301a0: jmp    12fd70 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   1301a5: nopl   (%rax)
    0.00 :   1301a8: movzbl 0x1e(%rsp),%ecx
    0.00 :   1301ad: or     %cl,0x1f(%rsp)
    0.00 :   1301b1: jne    1307aa <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbda>
    0.00 :   1301b7: mov    0x18(%rsp),%eax
    0.00 :   1301bb: test   %eax,%eax
    0.00 :   1301bd: je     130740 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb70>
    0.00 :   1301c3: lea    0x70(%rsp),%r14
    0.00 :   1301c8: movsbl %al,%esi
    0.00 :   1301cb: mov    %r14,%rdi
    0.00 :   1301ce: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   1301d3: movb   $0x0,0x1e(%rsp)
    0.00 :   1301d8: movl   $0x0,0x18(%rsp)
    0.00 :   1301e0: jmp    12fee2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x312>
    0.00 :   1301e5: nopl   (%rax)
    0.00 :   1301e8: mov    (%rbx),%rax
    0.00 :   1301eb: lea    0x70(%rsp),%r14
    0.00 :   1301f0: mov    %rbx,%rdi
    0.00 :   1301f3: call   *0x50(%rax)
    0.00 :   1301f6: mov    0x10(%rbx),%rax
    0.00 :   1301fa: mov    0x18(%rbx),%rdx
    0.00 :   1301fe: movl   $0xffffffff,0x58(%rsp)
    0.00 :   130206: xor    %r13d,%r13d
    0.00 :   130209: cmp    %rdx,%rax
    0.00 :   13020c: jb     12fd56 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x186>
    0.00 :   130212: nopw   0x0(%rax,%rax,1)
    0.00 :   130218: mov    (%rbx),%rax
    0.00 :   13021b: lea    0x70(%rsp),%r14
    0.00 :   130220: mov    %rbx,%rdi
    0.00 :   130223: call   *0x48(%rax)
    0.00 :   130226: cmp    $0xffffffff,%eax
    0.00 :   130229: je     1308a9 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xcd9>
    0.00 :   13022f: cmp    $0xffffffff,%eax
    0.00 :   130232: sete   %r13b
    0.00 :   130236: jmp    12fd56 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x186>
    0.00 :   13023b: mov    (%rdi),%rax
    0.00 :   13023e: lea    0x70(%rsp),%r14
    0.00 :   130243: call   *0x48(%rax)
    0.00 :   130246: mov    %eax,%ebx
    0.00 :   130248: cmp    $0xffffffff,%eax
    0.00 :   13024b: jne    12fcb5 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xe5>
    0.00 :   130251: movq   $0x0,0x50(%rsp)
    0.00 :   13025a: nopw   0x0(%rax,%rax,1)
    0.00 :   130260: mov    $0xffffffff,%ebx
    0.00 :   130265: cmp    %bl,0x48(%r12)
    0.00 :   13026a: jne    12fdb0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1e0>
    0.00 :   130270: movzbl 0x1f(%rsp),%eax
    0.00 :   130275: or     0x1e(%rsp),%al
    1.18 :   130279: jne    12fdb0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x1e0>
    0.00 :   13027f: mov    $0x2e,%esi
    1.17 :   130284: mov    %rbp,%rdi
    0.00 :   130287: movb   $0x1,0x1f(%rsp)
    0.00 :   13028c: lea    0x70(%rsp),%r14
    0.00 :   130291: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   130296: movb   $0x0,0x1e(%rsp)
    0.00 :   13029b: jmp    12fd24 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x154>
    0.00 :   1302a0: movl   $0x0,-0x8(%rax)
    1.14 :   1302a7: mov    %r13,-0x18(%rax)
    3.50 :   1302ab: mov    0x10(%rsp),%rax
    0.00 :   1302b0: movb   $0x0,0x19(%rdx,%rax,1)
    3.51 :   1302b5: jmp    12fd24 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x154>
    0.00 :   1302ba: nopw   0x0(%rax,%rax,1)
    0.00 :   1302c0: mov    0x18(%rdi),%rcx
    0.00 :   1302c4: xor    %eax,%eax
    0.00 :   1302c6: cmp    %rcx,0x10(%rdi)
    0.00 :   1302ca: jb     12ff2e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x35e>
    0.00 :   1302d0: mov    (%rdi),%rax
    0.00 :   1302d3: lea    0x70(%rsp),%r14
    0.00 :   1302d8: call   *0x48(%rax)
    0.00 :   1302db: cmp    $0xffffffff,%eax
    0.00 :   1302de: sete   %al
    0.00 :   1302e1: jne    12ff2e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x35e>
    0.00 :   1302e7: movq   $0x0,0x40(%rsp)
    0.00 :   1302f0: jmp    12ff2e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x35e>
    0.00 :   1302f5: nopl   (%rax)
    0.00 :   1302f8: mov    %r15d,%eax
    0.00 :   1302fb: mov    %r15b,0x1e(%rsp)
    0.00 :   130300: jmp    12fe88 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x2b8>
    0.00 :   130305: nopl   (%rax)
    0.00 :   130308: mov    (%rbx),%rax
    0.00 :   13030b: lea    0x70(%rsp),%r14
    0.00 :   130310: mov    %rbx,%rdi
    0.00 :   130313: call   *0x50(%rax)
    0.00 :   130316: mov    0x10(%rbx),%rax
    0.00 :   13031a: mov    0x18(%rbx),%rdx
    0.00 :   13031e: movl   $0xffffffff,0x58(%rsp)
    0.00 :   130326: xor    %r13d,%r13d
    0.00 :   130329: cmp    %rdx,%rax
    0.00 :   13032c: jb     12ff14 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x344>
    0.00 :   130332: nopw   0x0(%rax,%rax,1)
    0.00 :   130338: mov    (%rbx),%rax
    0.00 :   13033b: lea    0x70(%rsp),%r14
    0.00 :   130340: mov    %rbx,%rdi
    0.00 :   130343: call   *0x48(%rax)
    0.00 :   130346: cmp    $0xffffffff,%eax
    0.00 :   130349: je     1308db <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd0b>
    0.00 :   13034f: cmp    $0xffffffff,%eax
    0.00 :   130352: sete   %r13b
    0.00 :   130356: jmp    12ff14 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x344>
    0.00 :   13035b: nopl   0x0(%rax,%rax,1)
    0.00 :   130360: mov    $0xffffffff,%ebx
    0.00 :   130365: jmp    13004f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x47f>
    0.00 :   13036a: nopw   0x0(%rax,%rax,1)
    0.00 :   130370: test   %al,%al
    0.00 :   130372: jne    130390 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x7c0>
    0.00 :   130374: mov    $0x2b,%esi
    0.00 :   130379: cmp    0x48(%r12),%bl
    0.00 :   13037e: jne    130141 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x571>
    0.00 :   130384: mov    %r15b,0x1e(%rsp)
    0.00 :   130389: jmp    12fe97 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x2c7>
    0.00 :   13038e: xchg   %ax,%ax
    0.00 :   130390: cmp    %bl,0x49(%r12)
    0.00 :   130395: je     1302f8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x728>
    0.00 :   13039b: cmp    %bl,0x48(%r12)
    0.00 :   1303a0: je     1302f8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x728>
    0.00 :   1303a6: xor    %esi,%esi
    0.00 :   1303a8: cmp    %bl,%dl
    0.00 :   1303aa: setne  %sil
    0.00 :   1303ae: lea    0x2b(%rsi,%rsi,1),%esi
    0.00 :   1303b2: jmp    130141 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x571>
    0.00 :   1303b7: nopw   0x0(%rax,%rax,1)
    0.00 :   1303c0: lea    0x70(%rsp),%r14
    0.00 :   1303c5: movsbl 0x18(%rsp),%esi
    0.00 :   1303ca: mov    %r14,%rdi
    0.00 :   1303cd: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   1303d2: jmp    1300a2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x4d2>
    0.00 :   1303d7: nopw   0x0(%rax,%rax,1)
    0.00 :   1303e0: mov    0x10(%rdi),%rax
    0.00 :   1303e4: cmp    0x18(%rdi),%rax
    0.00 :   1303e8: jae    13085f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xc8f>
    0.00 :   1303ee: movzbl (%rax),%ebx
    0.00 :   1303f1: jmp    13010a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x53a>
    0.00 :   1303f6: mov    (%rsp),%rax
    0.00 :   1303fa: mov    %r14d,0x18(%rsp)
    0.00 :   1303ff: mov    %r13,%r12
    0.00 :   130402: movzbl 0x10(%rsp),%r13d
    0.00 :   130408: add    $0x18,%rax
    0.00 :   13040c: mov    %rax,0x70(%rsp)
    0.00 :   130411: lea    0x70(%rsp),%r14
    0.00 :   130416: mov    $0x20,%esi
    0.00 :   13041b: mov    %r14,%rdi
    0.00 :   13041e: call   9eb00 <std::string::reserve(unsigned long)@plt>
    0.00 :   130423: jmp    12fc8d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbd>
    0.00 :   130428: nopl   0x0(%rax,%rax,1)
    0.00 :   130430: mov    0x28(%rsp),%rdi
    0.00 :   130435: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   13043a: movzbl 0x20(%r12),%edx
    0.00 :   130440: movzbl 0x6f(%r12),%ecx
    0.00 :   130446: mov    %eax,%ebx
    0.00 :   130448: mov    %edx,%esi
    0.00 :   13044a: cmp    %al,%cl
    0.00 :   13044c: je     1307c7 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbf7>
    0.00 :   130452: cmp    %al,0x6e(%r12)
    1.17 :   130457: je     1306c2 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xaf2>
    0.00 :   13045d: mov    0xf50e4(%rip),%rax        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   130464: mov    %r13b,0x10(%rsp)
    0.00 :   130469: xor    %r15d,%r15d
    0.00 :   13046c: xor    %r14d,%r14d
    0.00 :   13046f: mov    %r12,%r13
    0.00 :   130472: mov    %rax,(%rsp)
    0.00 :   130476: test   %dl,%dl
    1.16 :   130478: je     130484 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x8b4>
    0.00 :   13047a: cmp    %bl,0x49(%r13)
    0.00 :   13047e: je     1303f6 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x826>
    0.00 :   130484: cmp    %bl,0x48(%r13)
    0.00 :   130488: je     130650 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa80>
    0.00 :   13048e: cmp    %bl,0x72(%r13)
    0.00 :   130492: jne    130650 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa80>
    0.00 :   130498: test   %r15b,%r15b
    0.00 :   13049b: je     130518 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x948>
    0.00 :   13049d: mov    0x50(%rsp),%r15
    2.32 :   1304a2: add    $0x1,%r14d
    0.00 :   1304a6: mov    0x10(%r15),%rax
    0.00 :   1304aa: mov    0x18(%r15),%rdx
    0.00 :   1304ae: cmp    %rdx,%rax
    0.00 :   1304b1: jae    1305d8 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa08>
    0.00 :   1304b7: add    $0x1,%rax
    0.00 :   1304bb: movl   $0xffffffff,0x58(%rsp)
    0.00 :   1304c3: mov    %rax,0x10(%r15)
    0.00 :   1304c7: cmp    %rdx,%rax
    0.00 :   1304ca: jae    130600 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa30>
    0.00 :   1304d0: xor    %r12d,%r12d
    0.00 :   1304d3: mov    0x40(%rsp),%rdi
    0.00 :   1304d8: cmpl   $0xffffffff,0x48(%rsp)
    0.00 :   1304dd: sete   %al
    0.00 :   1304e0: test   %rdi,%rdi
    0.00 :   1304e3: setne  %dl
    0.00 :   1304e6: and    %al,%dl
    0.00 :   1304e8: jne    1305c0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9f0>
    0.00 :   1304ee: cmp    %r12b,%al
    0.00 :   1304f1: jne    130590 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9c0>
    0.00 :   1304f7: movzbl 0x20(%r13),%edx
    0.00 :   1304fc: mov    %r13,%r12
    0.00 :   1304ff: mov    %r14d,0x18(%rsp)
    0.00 :   130504: mov    $0x1,%r15d
    0.00 :   13050a: mov    $0x1,%r13d
    0.00 :   130510: jmp    12fc78 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa8>
    0.00 :   130515: nopl   (%rax)
    0.00 :   130518: mov    0x0(%rbp),%rax
    0.00 :   13051c: mov    -0x18(%rax),%r12
    0.00 :   130520: lea    0x1(%r12),%r15
    0.00 :   130525: cmp    %r15,-0x10(%rax)
    0.00 :   130529: jb     13057e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9ae>
    0.00 :   13052b: mov    0xf4dae(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   130532: cmpb   $0x0,(%rdx)
    1.15 :   130535: je     130668 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa98>
    0.00 :   13053b: mov    -0x8(%rax),%esi
    0.00 :   13053e: test   %esi,%esi
    0.00 :   130540: setg   %al
    0.00 :   130543: test   %al,%al
    0.00 :   130545: jne    13057e <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9ae>
    0.00 :   130547: mov    0x0(%rbp),%rax
    0.00 :   13054b: mov    (%rsp),%rcx
    0.00 :   13054f: mov    -0x18(%rax),%rdx
    0.00 :   130553: movb   $0x30,(%rax,%rdx,1)
    2.29 :   130557: mov    0x0(%rbp),%rax
    0.00 :   13055b: lea    -0x18(%rax),%rdx
    1.14 :   13055f: cmp    %rcx,%rdx
    0.00 :   130562: je     13049d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x8cd>
    0.00 :   130568: movl   $0x0,-0x8(%rax)
    0.00 :   13056f: mov    %r15,-0x18(%rax)
    0.00 :   130573: movb   $0x0,0x1(%rax,%r12,1)
    0.00 :   130579: jmp    13049d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x8cd>
    0.00 :   13057e: mov    %r15,%rsi
    0.00 :   130581: mov    %rbp,%rdi
    0.00 :   130584: call   9eb00 <std::string::reserve(unsigned long)@plt>
    0.00 :   130589: jmp    130547 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x977>
    0.00 :   13058b: nopl   0x0(%rax,%rax,1)
    0.00 :   130590: mov    0x50(%rsp),%rdi
    0.00 :   130595: test   %rdi,%rdi
    0.00 :   130598: je     130640 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa70>
    0.00 :   13059e: mov    0x10(%rdi),%rax
    1.18 :   1305a2: cmp    0x18(%rdi),%rax
    1.18 :   1305a6: jae    130626 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa56>
    0.00 :   1305a8: movzbl (%rax),%ebx
    0.00 :   1305ab: movzbl 0x20(%r13),%edx
    0.00 :   1305b0: mov    $0x1,%r15d
    0.00 :   1305b6: jmp    130476 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x8a6>
    0.00 :   1305bb: nopl   0x0(%rax,%rax,1)
    0.00 :   1305c0: mov    0x18(%rdi),%rax
    0.00 :   1305c4: cmp    %rax,0x10(%rdi)
    0.00 :   1305c8: jae    13069a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xaca>
    0.00 :   1305ce: xor    %eax,%eax
    0.00 :   1305d0: jmp    1304ee <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x91e>
    0.00 :   1305d5: nopl   (%rax)
    0.00 :   1305d8: mov    (%r15),%rax
    0.00 :   1305db: mov    %r15,%rdi
    0.00 :   1305de: call   *0x50(%rax)
    0.00 :   1305e1: mov    0x10(%r15),%rax
    0.00 :   1305e5: mov    0x18(%r15),%rdx
    0.00 :   1305e9: movl   $0xffffffff,0x58(%rsp)
    0.00 :   1305f1: cmp    %rdx,%rax
    0.00 :   1305f4: jb     1304d0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x900>
    0.00 :   1305fa: nopw   0x0(%rax,%rax,1)
    0.00 :   130600: mov    (%r15),%rax
    0.00 :   130603: mov    %r15,%rdi
    0.00 :   130606: call   *0x48(%rax)
    0.00 :   130609: cmp    $0xffffffff,%eax
    0.00 :   13060c: jne    1304d0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x900>
    0.00 :   130612: movq   $0x0,0x50(%rsp)
    0.00 :   13061b: mov    $0x1,%r12d
    0.00 :   130621: jmp    1304d3 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x903>
    0.00 :   130626: mov    (%rdi),%rax
    0.00 :   130629: call   *0x48(%rax)
    0.00 :   13062c: mov    %eax,%ebx
    0.00 :   13062e: cmp    $0xffffffff,%eax
    0.00 :   130631: jne    1305ab <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9db>
    0.00 :   130637: movq   $0x0,0x50(%rsp)
    0.00 :   130640: mov    $0xffffffff,%ebx
    0.00 :   130645: jmp    1305ab <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9db>
    0.00 :   13064a: nopw   0x0(%rax,%rax,1)
    0.00 :   130650: mov    %r13,%r12
    0.00 :   130653: mov    %r14d,0x18(%rsp)
    0.00 :   130658: movzbl 0x10(%rsp),%r13d
    0.00 :   13065e: jmp    12fc78 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa8>
    0.00 :   130663: nopl   0x0(%rax,%rax,1)
    0.00 :   130668: mov    -0x8(%rax),%eax
    0.00 :   13066b: test   %eax,%eax
    0.00 :   13066d: setg   %al
    0.00 :   130670: jmp    130543 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x973>
    0.00 :   130675: nopl   (%rax)
    0.00 :   130678: mov    (%rdi),%rax
    0.00 :   13067b: lea    0x70(%rsp),%r14
    0.00 :   130680: call   *0x50(%rax)
    0.00 :   130683: jmp    1300cf <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x4ff>
    0.00 :   130688: nopl   0x0(%rax,%rax,1)
    0.00 :   130690: mov    %r15b,0x1e(%rsp)
    0.00 :   130695: jmp    12fcb5 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xe5>
    0.00 :   13069a: mov    (%rdi),%rax
    0.00 :   13069d: mov    %dl,0x18(%rsp)
    0.00 :   1306a1: call   *0x48(%rax)
    0.00 :   1306a4: movzbl 0x18(%rsp),%edx
    0.00 :   1306a9: cmp    $0xffffffff,%eax
    0.00 :   1306ac: jne    1305ce <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x9fe>
    0.00 :   1306b2: movq   $0x0,0x40(%rsp)
    0.00 :   1306bb: mov    %edx,%eax
    0.00 :   1306bd: jmp    1304ee <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x91e>
    0.00 :   1306c2: test   %dl,%dl
    0.00 :   1306c4: je     130826 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xc56>
    0.00 :   1306ca: cmp    %al,0x49(%r12)
    0.00 :   1306cf: je     130739 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb69>
    0.00 :   1306d1: cmp    %al,0x48(%r12)
    0.00 :   1306d6: je     130739 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb69>
    0.00 :   1306d8: xor    %esi,%esi
    0.00 :   1306da: cmp    %al,%cl
    0.00 :   1306dc: setne  %sil
    0.00 :   1306e0: lea    0x2b(%rsi,%rsi,1),%esi
    0.00 :   1306e4: mov    %rbp,%rdi
    0.00 :   1306e7: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   1306ec: mov    0x50(%rsp),%rdi
    0.00 :   1306f1: call   1271b0 <std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()@@GLIBCXX_3.4+0x70>
    0.00 :   1306f6: mov    0x30(%rsp),%rsi
    0.00 :   1306fb: mov    0x28(%rsp),%rdi
    0.00 :   130700: movl   $0xffffffff,0x58(%rsp)
    0.00 :   130708: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   13070d: test   %al,%al
    0.00 :   13070f: je     130892 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xcc2>
    0.00 :   130715: mov    %eax,%r13d
    0.00 :   130718: mov    0xf4e29(%rip),%rax        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   13071f: movzbl 0x20(%r12),%edx
    0.00 :   130725: xor    %r15d,%r15d
    0.00 :   130728: movl   $0x0,0x18(%rsp)
    0.00 :   130730: mov    %rax,(%rsp)
    0.00 :   130734: jmp    12fc78 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xa8>
    0.00 :   130739: mov    %esi,%edx
    0.00 :   13073b: jmp    13045d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x88d>
    0.00 :   130740: mov    0xf4b99(%rip),%rcx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   130747: mov    0x0(%rbp),%rax
    0.00 :   13074b: cmpb   $0x0,(%rcx)
    0.00 :   13074e: je     1308e9 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd19>
    0.00 :   130754: mov    -0x8(%rax),%edx
    0.00 :   130757: test   %edx,%edx
    0.00 :   130759: setg   %dl
    0.00 :   13075c: lea    -0x18(%rax),%rdi
    0.00 :   130760: test   %dl,%dl
    0.00 :   130762: je     1308b7 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xce7>
    0.00 :   130768: mov    (%rsp),%rsi
    0.00 :   13076c: cmp    %rsi,%rdi
    0.00 :   13076f: jne    1308fa <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd2a>
    0.00 :   130775: mov    (%rsp),%rax
    0.00 :   130779: add    $0x18,%rax
    0.00 :   13077d: mov    %rax,0x0(%rbp)
    0.00 :   130781: mov    0x70(%rsp),%rbx
    0.00 :   130786: cmpq   $0x0,-0x18(%rbx)
    0.00 :   13078b: jne    12ff5c <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x38c>
    0.00 :   130791: jmp    12ff94 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3c4>
    0.00 :   130796: cs nopw 0x0(%rax,%rax,1)
    0.00 :   1307a0: mov    $0x2b,%esi
    0.00 :   1307a5: jmp    12fe40 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x270>
    0.00 :   1307aa: mov    0x70(%rsp),%rax
    0.00 :   1307af: cmpq   $0x0,-0x18(%rax)
    0.00 :   1307b4: mov    %rax,%rbx
    0.00 :   1307b7: lea    0x70(%rsp),%r14
    0.00 :   1307bc: jne    12ff73 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3a3>
    0.00 :   1307c2: jmp    12ff94 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3c4>
    0.00 :   1307c7: test   %dl,%dl
    0.00 :   1307c9: jne    1306ca <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xafa>
    0.00 :   1307cf: mov    $0x2b,%esi
    0.00 :   1307d4: cmp    %al,0x48(%r12)
    0.00 :   1307d9: jne    1306e4 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb14>
    0.00 :   1307df: jmp    13045d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x88d>
    0.00 :   1307e4: mov    0xf4af5(%rip),%rcx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   1307eb: cmpb   $0x0,(%rcx)
    0.00 :   1307ee: je     130883 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xcb3>
    0.00 :   1307f4: mov    -0x8(%rbx),%ecx
    0.00 :   1307f7: lea    -0x1(%rcx),%esi
    0.00 :   1307fa: mov    %esi,-0x8(%rbx)
    0.00 :   1307fd: test   %ecx,%ecx
    0.00 :   1307ff: jg     12ffaf <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3df>
    0.00 :   130805: lea    0x6f(%rsp),%rsi
    0.00 :   13080a: mov    %rax,(%rsp)
    0.00 :   13080e: mov    %rdx,0x8(%rsp)
    0.00 :   130813: call   9e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
    0.00 :   130818: mov    (%rsp),%rax
    0.00 :   13081c: mov    0x8(%rsp),%rdx
    0.00 :   130821: jmp    12ffaf <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x3df>
    0.00 :   130826: mov    $0x2d,%esi
    0.00 :   13082b: cmp    %al,0x48(%r12)
    0.00 :   130830: jne    1306e4 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb14>
    0.00 :   130836: jmp    13045d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x88d>
    0.00 :   13083b: mov    (%rdi),%rax
    0.00 :   13083e: lea    0x70(%rsp),%r14
    0.00 :   130843: call   *0x48(%rax)
    0.00 :   130846: mov    %eax,%ebx
    0.00 :   130848: cmp    $0xffffffff,%eax
    0.00 :   13084b: jne    13004f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x47f>
    0.00 :   130851: movq   $0x0,0x50(%rsp)
    0.00 :   13085a: jmp    13004f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x47f>
    0.00 :   13085f: mov    (%rdi),%rax
    0.00 :   130862: lea    0x70(%rsp),%r14
    0.00 :   130867: call   *0x48(%rax)
    0.00 :   13086a: mov    %eax,%ebx
    0.00 :   13086c: cmp    $0xffffffff,%eax
    0.00 :   13086f: jne    13010a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x53a>
    0.00 :   130875: movq   $0x0,0x50(%rsp)
    0.00 :   13087e: jmp    13010a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x53a>
    0.00 :   130883: mov    $0xffffffff,%ecx
    0.00 :   130888: lock xadd %ecx,-0x8(%rbx)
    0.00 :   13088d: jmp    1307fd <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xc2d>
    0.00 :   130892: mov    0x28(%rsp),%rdi
    0.00 :   130897: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   13089c: movzbl 0x20(%r12),%edx
    0.00 :   1308a2: mov    %eax,%ebx
    0.00 :   1308a4: jmp    13045d <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x88d>
    0.00 :   1308a9: movq   $0x0,0x50(%rsp)
    0.00 :   1308b2: jmp    13022f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x65f>
    0.00 :   1308b7: mov    (%rsp),%rcx
    0.00 :   1308bb: cmp    %rcx,%rdi
    0.00 :   1308be: je     130781 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbb1>
    0.00 :   1308c4: movl   $0x0,-0x8(%rax)
    0.00 :   1308cb: movq   $0x0,-0x18(%rax)
    0.00 :   1308d3: movb   $0x0,(%rax)
    0.00 :   1308d6: jmp    130781 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xbb1>
    0.00 :   1308db: movq   $0x0,0x50(%rsp)
    0.00 :   1308e4: jmp    13034f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0x77f>
    0.00 :   1308e9: mov    -0x8(%rax),%eax
    0.00 :   1308ec: test   %eax,%eax
    0.00 :   1308ee: setg   %dl
    0.00 :   1308f1: mov    0x0(%rbp),%rax
    0.00 :   1308f5: jmp    13075c <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xb8c>
    0.00 :   1308fa: cmpb   $0x0,(%rcx)
    0.00 :   1308fd: je     130924 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd54>
    0.00 :   1308ff: mov    -0x8(%rax),%edx
    0.00 :   130902: lea    -0x1(%rdx),%ecx
    0.00 :   130905: mov    %ecx,-0x8(%rax)
    0.00 :   130908: test   %edx,%edx
    0.00 :   13090a: jg     130775 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xba5>
    0.00 :   130910: lea    0x6f(%rsp),%rsi
    0.00 :   130915: call   9e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
    0.00 :   13091a: jmp    130775 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xba5>
    0.00 :   13091f: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   130924: or     $0xffffffff,%edx
    0.00 :   130927: lock xadd %edx,-0x8(%rax)
    0.00 :   13092c: jmp    130908 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@@GLIBCXX_3.4+0xd38>
    0.00 :   13092e: endbr64
    0.00 :   130932: mov    %rax,%rbx
    0.00 :   130935: mov    %r14,%rdi
    0.00 :   130938: call   9f920 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    0.00 :   13093d: mov    %rbx,%rdi
    0.00 :   130940: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (75 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000487c0 <__GI_____strtof_l_internal>:
    0.00 :   487c0:  endbr64
    0.00 :   487c4:  push   %r15
    0.00 :   487c6:  mov    %rcx,%r9
    0.00 :   487c9:  mov    %rdi,%r15
    0.00 :   487cc:  push   %r14
    0.00 :   487ce:  push   %r13
    0.00 :   487d0:  push   %r12
    0.00 :   487d2:  xor    %r12d,%r12d
    0.00 :   487d5:  push   %rbp
    0.00 :   487d6:  push   %rbx
    0.00 :   487d7:  sub    $0x148,%rsp
    0.00 :   487de:  mov    %rsi,(%rsp)
    0.00 :   487e2:  mov    %fs:0x28,%rax
    0.00 :   487eb:  mov    %rax,0x138(%rsp)
    0.00 :   487f3:  mov    0x8(%rcx),%rax
    0.00 :   487f7:  xor    %ecx,%ecx
    0.00 :   487f9:  test   %edx,%edx
    0.00 :   487fb:  jne    49878 <__GI_____strtof_l_internal+0x10b8>
    0.00 :   48801:  mov    0x40(%rax),%r8
    0.00 :   48805:  mov    %r9,0x18(%rsp)
    0.00 :   4880a:  mov    %rcx,0x10(%rsp)
    1.33 :   4880f:  mov    %r8,%rdi
    0.00 :   48812:  mov    %r8,0x8(%rsp)
    0.00 :   48817:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   4881c:  mov    0x8(%rsp),%r8
    0.00 :   48821:  mov    0x10(%rsp),%rcx
    0.00 :   48826:  test   %rax,%rax
    1.36 :   48829:  mov    %rax,0x20(%rsp)
    0.00 :   4882e:  mov    0x18(%rsp),%r9
    0.00 :   48833:  je     4ad77 <__GI_____strtof_l_internal+0x25b7>
    0.00 :   48839:  movq   $0x0,0x78(%rsp)
    0.00 :   48842:  mov    0x68(%r9),%rdx
    0.00 :   48846:  lea    -0x1(%r15),%r13
    0.00 :   4884a:  nopw   0x0(%rax,%rax,1)
    0.00 :   48850:  mov    %r13,%rsi
    0.00 :   48853:  movsbq 0x1(%r13),%rax
    0.00 :   48858:  add    $0x1,%r13
    0.00 :   4885c:  mov    %rax,%rbx
    0.00 :   4885f:  testb  $0x20,0x1(%rdx,%rax,2)
    0.00 :   48864:  jne    48850 <__GI_____strtof_l_internal+0x90>
    0.00 :   48866:  cmp    $0x2d,%al
    0.00 :   48868:  je     48b80 <__GI_____strtof_l_internal+0x3c0>
    0.00 :   4886e:  movl   $0x0,0x8(%rsp)
    0.00 :   48876:  cmp    $0x2b,%al
    0.00 :   48878:  je     48aa0 <__GI_____strtof_l_internal+0x2e0>
    0.00 :   4887e:  movzbl (%r8),%eax
    0.00 :   48882:  test   %al,%al
    0.00 :   48884:  je     499e4 <__GI_____strtof_l_internal+0x1224>
    0.00 :   4888a:  mov    %eax,%esi
    0.00 :   4888c:  xor    %edx,%edx
    0.00 :   4888e:  jmp    4889e <__GI_____strtof_l_internal+0xde>
    0.00 :   48890:  add    $0x1,%rdx
    0.00 :   48894:  movzbl (%r8,%rdx,1),%esi
    0.00 :   48899:  test   %sil,%sil
    0.00 :   4889c:  je     48910 <__GI_____strtof_l_internal+0x150>
    0.00 :   4889e:  cmp    %sil,0x0(%r13,%rdx,1)
    0.00 :   488a3:  je     48890 <__GI_____strtof_l_internal+0xd0>
    0.00 :   488a5:  lea    -0x30(%rbx),%edx
    0.00 :   488a8:  cmp    $0x9,%dl
    0.00 :   488ab:  jbe    4891e <__GI_____strtof_l_internal+0x15e>
    0.00 :   488ad:  mov    0x1d115c(%rip),%rax        # 219a10 <_nl_C_locobj+0x70>
    0.00 :   488b4:  lea    0x1d10e5(%rip),%r12        # 2199a0 <_nl_C_locobj>
    0.00 :   488bb:  mov    (%rax,%rbx,4),%eax
    0.00 :   488be:  cmp    $0x69,%al
    0.00 :   488c0:  je     498a4 <__GI_____strtof_l_internal+0x10e4>
    0.00 :   488c6:  cmp    $0x6e,%al
    0.00 :   488c8:  je     49808 <__GI_____strtof_l_internal+0x1048>
    0.00 :   488ce:  cmpq   $0x0,(%rsp)
    0.00 :   488d3:  je     488dc <__GI_____strtof_l_internal+0x11c>
    0.00 :   488d5:  mov    (%rsp),%rax
    0.00 :   488d9:  mov    %r15,(%rax)
    0.00 :   488dc:  pxor   %xmm0,%xmm0
    0.00 :   488e0:  mov    0x138(%rsp),%rax
    0.00 :   488e8:  sub    %fs:0x28,%rax
    0.00 :   488f1:  jne    4acd6 <__GI_____strtof_l_internal+0x2516>
    0.00 :   488f7:  add    $0x148,%rsp
    0.00 :   488fe:  pop    %rbx
    0.00 :   488ff:  pop    %rbp
    0.00 :   48900:  pop    %r12
    0.00 :   48902:  pop    %r13
    0.00 :   48904:  pop    %r14
    0.00 :   48906:  pop    %r15
    0.00 :   48908:  ret
    0.00 :   48909:  nopl   0x0(%rax)
    0.00 :   48910:  movzbl 0x0(%r13,%rdx,1),%edx
    0.00 :   48916:  sub    $0x30,%edx
    0.00 :   48919:  cmp    $0x9,%dl
    0.00 :   4891c:  ja     488a5 <__GI_____strtof_l_internal+0xe5>
    0.00 :   4891e:  mov    0x70(%r9),%rsi
    0.00 :   48922:  cmp    $0x30,%bl
    0.00 :   48925:  je     49420 <__GI_____strtof_l_internal+0xc60>
    0.00 :   4892b:  test   %r12,%r12
    0.00 :   4892e:  je     48aae <__GI_____strtof_l_internal+0x2ee>
    0.00 :   48934:  mov    $0xa,%r10d
    0.00 :   4893a:  movzbl (%r12),%r14d
    0.00 :   4893f:  mov    %r13,%rbp
    0.00 :   48942:  cmp    $0x30,%bl
    0.00 :   48945:  je     48b75 <__GI_____strtof_l_internal+0x3b5>
    0.00 :   4894b:  nopl   0x0(%rax,%rax,1)
    0.00 :   48950:  test   %r14b,%r14b
    0.00 :   48953:  je     48b55 <__GI_____strtof_l_internal+0x395>
    0.00 :   48959:  mov    %r14d,%edi
    0.00 :   4895c:  xor    %edx,%edx
    0.00 :   4895e:  jmp    48976 <__GI_____strtof_l_internal+0x1b6>
    0.00 :   48960:  movzbl 0x1(%r12,%rdx,1),%edi
    0.00 :   48966:  lea    0x1(%rdx),%r11
    0.00 :   4896a:  test   %dil,%dil
    0.00 :   4896d:  je     48b60 <__GI_____strtof_l_internal+0x3a0>
    0.00 :   48973:  mov    %r11,%rdx
    0.00 :   48976:  cmp    %dil,0x0(%rbp,%rdx,1)
    0.00 :   4897b:  je     48960 <__GI_____strtof_l_internal+0x1a0>
    0.00 :   4897d:  mov    %r13,0x10(%rsp)
    0.00 :   48982:  movsbq %bl,%rdx
    1.34 :   48986:  mov    (%rsi,%rdx,4),%r11d
    0.00 :   4898a:  lea    -0x30(%rbx),%edx
    0.00 :   4898d:  cmp    $0x9,%dl
    0.00 :   48990:  jbe    489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   48992:  cmp    $0x10,%r10d
    0.00 :   48996:  lea    -0x61(%r11),%edi
    0.00 :   4899a:  setne  %dl
    0.00 :   4899d:  mov    %edx,%r13d
    0.00 :   489a0:  cmp    $0x5,%dil
    0.00 :   489a4:  ja     48ae0 <__GI_____strtof_l_internal+0x320>
    0.00 :   489aa:  test   %dl,%dl
    0.00 :   489ac:  jne    48ae0 <__GI_____strtof_l_internal+0x320>
    0.00 :   489b2:  mov    $0x10,%r10d
    0.00 :   489b8:  mov    %rbp,%r14
    1.36 :   489bb:  xor    %r11d,%r11d
    0.00 :   489be:  lea    -0x30(%rbx),%edx
    0.38 :   489c1:  cmp    $0x9,%dl
    0.00 :   489c4:  jbe    48b40 <__GI_____strtof_l_internal+0x380>
    0.00 :   489ca:  cmp    $0x10,%r10d
    0.00 :   489ce:  je     48b28 <__GI_____strtof_l_internal+0x368>
    0.00 :   489d4:  test   %r12,%r12
    0.00 :   489d7:  jne    499ab <__GI_____strtof_l_internal+0x11eb>
    0.00 :   489dd:  test   %rcx,%rcx
    0.00 :   489e0:  je     489ed <__GI_____strtof_l_internal+0x22d>
    0.00 :   489e2:  cmp    0x10(%rsp),%r14
    0.00 :   489e7:  ja     4a32b <__GI_____strtof_l_internal+0x1b6b>
    0.00 :   489ed:  cmp    $0x1,%r11
    0.00 :   489f1:  sbb    %rcx,%rcx
    0.00 :   489f4:  test   %al,%al
    0.00 :   489f6:  je     48ba0 <__GI_____strtof_l_internal+0x3e0>
    0.00 :   489fc:  xor    %edx,%edx
    0.00 :   489fe:  jmp    48a11 <__GI_____strtof_l_internal+0x251>
    0.00 :   48a00:  add    $0x1,%rdx
    0.00 :   48a04:  movzbl (%r8,%rdx,1),%eax
    0.00 :   48a09:  test   %al,%al
    1.37 :   48a0b:  je     48ba0 <__GI_____strtof_l_internal+0x3e0>
    0.00 :   48a11:  cmp    %al,(%r14,%rdx,1)
    0.00 :   48a15:  je     48a00 <__GI_____strtof_l_internal+0x240>
    0.00 :   48a17:  mov    %r11,%r13
    0.00 :   48a1a:  test   %r13,%r13
    0.00 :   48a1d:  js     4ad58 <__GI_____strtof_l_internal+0x2598>
    0.00 :   48a23:  mov    0x70(%r9),%rax
    0.00 :   48a27:  mov    (%rax,%rbx,4),%eax
    0.00 :   48a2a:  mov    %eax,%edx
    0.00 :   48a2c:  cmp    $0x10,%r10d
    0.00 :   48a30:  jne    48c6b <__GI_____strtof_l_internal+0x4ab>
    0.00 :   48a36:  cmp    $0x70,%al
    0.00 :   48a38:  jne    48c65 <__GI_____strtof_l_internal+0x4a5>
    0.00 :   48a3e:  movzbl 0x1(%r14),%edi
    0.00 :   48a43:  cmp    $0x2d,%dil
    0.00 :   48a47:  je     49700 <__GI_____strtof_l_internal+0xf40>
    0.00 :   48a4d:  cmp    $0x2b,%dil
    0.00 :   48a51:  je     49463 <__GI_____strtof_l_internal+0xca3>
    0.00 :   48a57:  lea    -0x30(%rdi),%eax
    0.00 :   48a5a:  cmp    $0x9,%al
    0.00 :   48a5c:  ja     48c78 <__GI_____strtof_l_internal+0x4b8>
    0.00 :   48a62:  lea    0x1(%r14),%rsi
    0.00 :   48a66:  cmp    $0x10,%r10d
    0.00 :   48a6a:  je     49481 <__GI_____strtof_l_internal+0xcc1>
    0.00 :   48a70:  test   %r11,%r11
    0.00 :   48a73:  je     49a3f <__GI_____strtof_l_internal+0x127f>
    0.00 :   48a79:  test   %rcx,%rcx
    0.00 :   48a7c:  jne    4ac64 <__GI_____strtof_l_internal+0x24a4>
    0.00 :   48a82:  test   %r11,%r11
    0.00 :   48a85:  js     4ac64 <__GI_____strtof_l_internal+0x24a4>
    0.00 :   48a8b:  mov    $0x27,%ebx
    0.00 :   48a90:  xor    %r15d,%r15d
    0.00 :   48a93:  sub    %r11,%rbx
    0.00 :   48a96:  jmp    4973b <__GI_____strtof_l_internal+0xf7b>
    0.00 :   48a9b:  nopl   0x0(%rax,%rax,1)
    0.00 :   48aa0:  movsbq 0x1(%r13),%rbx
    0.00 :   48aa5:  lea    0x2(%rsi),%r13
    0.00 :   48aa9:  jmp    4887e <__GI_____strtof_l_internal+0xbe>
    0.00 :   48aae:  movsbq %bl,%rdx
    0.00 :   48ab2:  mov    %r13,0x10(%rsp)
    0.00 :   48ab7:  mov    %r13,%rbp
    0.00 :   48aba:  mov    $0xa,%r10d
    0.00 :   48ac0:  mov    (%rsi,%rdx,4),%r11d
    0.00 :   48ac4:  lea    -0x30(%rbx),%edx
    0.00 :   48ac7:  mov    $0x1,%r13d
    0.00 :   48acd:  cmp    $0x9,%dl
    0.00 :   48ad0:  jbe    489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   48ad6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   48ae0:  test   %al,%al
    0.00 :   48ae2:  je     49668 <__GI_____strtof_l_internal+0xea8>
    0.00 :   48ae8:  mov    %eax,%edi
    0.00 :   48aea:  xor    %edx,%edx
    0.00 :   48aec:  jmp    48b02 <__GI_____strtof_l_internal+0x342>
    0.00 :   48aee:  xchg   %ax,%ax
    0.00 :   48af0:  add    $0x1,%rdx
    0.00 :   48af4:  movzbl (%r8,%rdx,1),%edi
    0.00 :   48af9:  test   %dil,%dil
    0.00 :   48afc:  je     49668 <__GI_____strtof_l_internal+0xea8>
    0.00 :   48b02:  cmp    %dil,0x0(%rbp,%rdx,1)
    0.00 :   48b07:  je     48af0 <__GI_____strtof_l_internal+0x330>
    0.00 :   48b09:  mov    %r11d,%edx
    0.00 :   48b0c:  test   %r13b,%r13b
    0.00 :   48b0f:  je     4a28b <__GI_____strtof_l_internal+0x1acb>
    0.00 :   48b15:  cmp    $0x65,%r11b
    0.00 :   48b19:  je     489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   48b1f:  jmp    496a4 <__GI_____strtof_l_internal+0xee4>
    0.00 :   48b24:  nopl   0x0(%rax)
    0.00 :   48b28:  movsbq %bl,%rdx
    0.00 :   48b2c:  mov    (%rsi,%rdx,4),%edx
    0.00 :   48b2f:  sub    $0x61,%edx
    0.00 :   48b32:  cmp    $0x5,%dl
    0.00 :   48b35:  ja     489d4 <__GI_____strtof_l_internal+0x214>
    0.00 :   48b3b:  nopl   0x0(%rax,%rax,1)
    0.00 :   48b40:  add    $0x1,%r11
    0.00 :   48b44:  mov    %r14,%rdx
    0.00 :   48b47:  movsbq 0x1(%rdx),%rbx
    0.00 :   48b4c:  lea    0x1(%rdx),%r14
    0.00 :   48b50:  jmp    489be <__GI_____strtof_l_internal+0x1fe>
    0.00 :   48b55:  mov    $0xffffffffffffffff,%rdx
    0.00 :   48b5c:  nopl   0x0(%rax)
    0.00 :   48b60:  add    %rbp,%rdx
    0.00 :   48b63:  movsbq 0x1(%rdx),%rbx
    0.00 :   48b68:  lea    0x1(%rdx),%rbp
    0.00 :   48b6c:  cmp    $0x30,%bl
    0.00 :   48b6f:  jne    48950 <__GI_____strtof_l_internal+0x190>
    0.00 :   48b75:  mov    %rbp,%rdx
    0.00 :   48b78:  jmp    48b63 <__GI_____strtof_l_internal+0x3a3>
    0.00 :   48b7a:  nopw   0x0(%rax,%rax,1)
    0.00 :   48b80:  movsbq 0x1(%r13),%rbx
    0.00 :   48b85:  movl   $0x1,0x8(%rsp)
    0.00 :   48b8d:  lea    0x2(%rsi),%r13
    0.00 :   48b91:  jmp    4887e <__GI_____strtof_l_internal+0xbe>
    0.00 :   48b96:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   48ba0:  mov    0x20(%rsp),%rax
    4.09 :   48ba5:  lea    (%r14,%rax,1),%rdx
    0.00 :   48ba9:  movsbq (%rdx),%rbx
    0.00 :   48bad:  cmp    $0x10,%r10d
    0.00 :   48bb1:  jne    48c02 <__GI_____strtof_l_internal+0x442>
    0.00 :   48bb3:  mov    %r11,%rdi
    0.00 :   48bb6:  mov    0x70(%r9),%rsi
    0.00 :   48bba:  mov    %rdx,%r14
    0.00 :   48bbd:  xor    %eax,%eax
    0.00 :   48bbf:  sub    %rdx,%rdi
    0.00 :   48bc2:  jmp    48be2 <__GI_____strtof_l_internal+0x422>
    0.00 :   48bc4:  nopl   0x0(%rax)
    0.00 :   48bc8:  cmp    $0x30,%bl
    0.00 :   48bcb:  je     48bd5 <__GI_____strtof_l_internal+0x415>
    0.00 :   48bcd:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   48bd1:  cmove  %rax,%rcx
    0.00 :   48bd5:  movsbq 0x1(%r14),%rbx
    0.00 :   48bda:  add    $0x1,%r14
    0.00 :   48bde:  add    $0x1,%rax
    0.00 :   48be2:  lea    -0x30(%rbx),%edx
    0.00 :   48be5:  lea    (%r14,%rdi,1),%r13
    0.00 :   48be9:  cmp    $0x9,%dl
    0.00 :   48bec:  jbe    48bc8 <__GI_____strtof_l_internal+0x408>
    0.00 :   48bee:  movsbq %bl,%rdx
    0.00 :   48bf2:  mov    (%rsi,%rdx,4),%edx
    0.00 :   48bf5:  sub    $0x61,%edx
    0.00 :   48bf8:  cmp    $0x5,%dl
    0.00 :   48bfb:  jbe    48bc8 <__GI_____strtof_l_internal+0x408>
    0.00 :   48bfd:  jmp    48a1a <__GI_____strtof_l_internal+0x25a>
    0.00 :   48c02:  lea    -0x30(%rbx),%eax
    0.00 :   48c05:  cmp    $0x9,%al
    0.00 :   48c07:  ja     4a92f <__GI_____strtof_l_internal+0x216f>
    0.00 :   48c0d:  mov    %r11,%rdi
    0.00 :   48c10:  lea    0x1(%rdx),%rax
    0.00 :   48c14:  sub    %rdx,%rdi
    0.00 :   48c17:  nopw   0x0(%rax,%rax,1)
    0.00 :   48c20:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   48c24:  jne    48c3c <__GI_____strtof_l_internal+0x47c>
    0.00 :   48c26:  cmp    $0x30,%bl
    1.34 :   48c29:  mov    %rax,%rsi
    0.00 :   48c2c:  setne  %bl
    0.00 :   48c2f:  sub    %rdx,%rsi
    0.00 :   48c32:  sub    $0x1,%rsi
    0.00 :   48c36:  test   %bl,%bl
    0.00 :   48c38:  cmovne %rsi,%rcx
    0.00 :   48c3c:  movsbq (%rax),%rbx
    2.73 :   48c40:  lea    (%rdi,%rax,1),%r13
    1.34 :   48c44:  mov    %rax,%r14
    1.37 :   48c47:  add    $0x1,%rax
    0.00 :   48c4b:  lea    -0x30(%rbx),%esi
    4.05 :   48c4e:  cmp    $0x9,%sil
    5.38 :   48c52:  jbe    48c20 <__GI_____strtof_l_internal+0x460>
    0.00 :   48c54:  test   %r13,%r13
    0.00 :   48c57:  js     4ad58 <__GI_____strtof_l_internal+0x2598>
    0.00 :   48c5d:  mov    0x70(%r9),%rax
    0.00 :   48c61:  movzbl (%rax,%rbx,4),%edx
    1.35 :   48c65:  cmp    $0x10,%r10d
    0.00 :   48c69:  je     48c78 <__GI_____strtof_l_internal+0x4b8>
    0.00 :   48c6b:  cmp    $0x65,%dl
    2.60 :   48c6e:  je     48a3e <__GI_____strtof_l_internal+0x27e>
    0.00 :   48c74:  nopl   0x0(%rax)
    0.00 :   48c78:  mov    %r14,%rsi
    0.00 :   48c7b:  cmp    %r13,%r11
    0.00 :   48c7e:  jae    48cb0 <__GI_____strtof_l_internal+0x4f0>
    0.00 :   48c80:  cmpb   $0x30,-0x1(%r14)
    0.00 :   48c85:  jne    48cd0 <__GI_____strtof_l_internal+0x510>
    0.00 :   48c87:  mov    %r14,%rax
    0.00 :   48c8a:  nopw   0x0(%rax,%rax,1)
    0.00 :   48c90:  sub    $0x1,%rax
    0.00 :   48c94:  lea    (%rax,%r13,1),%rdx
    1.36 :   48c98:  sub    %r14,%rdx
    0.00 :   48c9b:  cmpb   $0x30,-0x1(%rax)
    1.35 :   48c9f:  je     48c90 <__GI_____strtof_l_internal+0x4d0>
    0.00 :   48ca1:  cmp    %rdx,%r11
    0.00 :   48ca4:  ja     4aead <__GI_____strtof_l_internal+0x26ed>
    0.00 :   48caa:  mov    %rdx,%r13
    0.00 :   48cad:  mov    %rax,%r14
    0.00 :   48cb0:  cmp    %r11,%r13
    0.00 :   48cb3:  jne    49408 <__GI_____strtof_l_internal+0xc48>
    0.00 :   48cb9:  test   %r13,%r13
    0.00 :   48cbc:  je     49408 <__GI_____strtof_l_internal+0xc48>
    0.00 :   48cc2:  mov    0x78(%rsp),%rdi
    0.00 :   48cc7:  test   %rdi,%rdi
    0.00 :   48cca:  js     49917 <__GI_____strtof_l_internal+0x1157>
    0.00 :   48cd0:  cmpq   $0x0,(%rsp)
    0.00 :   48cd5:  je     48ce7 <__GI_____strtof_l_internal+0x527>
    0.00 :   48cd7:  mov    (%rsp),%rax
    0.00 :   48cdb:  mov    %rsi,(%rax)
    0.00 :   48cde:  test   %r13,%r13
    0.00 :   48ce1:  je     496e0 <__GI_____strtof_l_internal+0xf20>
    0.00 :   48ce7:  test   %rcx,%rcx
    0.00 :   48cea:  je     48d7a <__GI_____strtof_l_internal+0x5ba>
    0.00 :   48cf0:  movzbl (%r8),%esi
    0.00 :   48cf4:  movzbl 0x1(%r8),%edi
    0.00 :   48cf9:  jmp    48d04 <__GI_____strtof_l_internal+0x544>
    0.00 :   48cfb:  nopl   0x0(%rax,%rax,1)
    0.00 :   48d00:  add    $0x1,%rbp
    0.00 :   48d04:  cmp    %sil,0x0(%rbp)
    0.00 :   48d08:  jne    48d00 <__GI_____strtof_l_internal+0x540>
    0.00 :   48d0a:  test   %dil,%dil
    0.00 :   48d0d:  je     48d33 <__GI_____strtof_l_internal+0x573>
    0.00 :   48d0f:  mov    %edi,%edx
    0.00 :   48d11:  mov    $0x1,%eax
    0.00 :   48d16:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   48d20:  cmp    0x0(%rbp,%rax,1),%dl
    0.00 :   48d24:  jne    48d00 <__GI_____strtof_l_internal+0x540>
    0.00 :   48d26:  add    $0x1,%rax
    0.00 :   48d2a:  movzbl (%r8,%rax,1),%edx
    0.00 :   48d2f:  test   %dl,%dl
    0.00 :   48d31:  jne    48d20 <__GI_____strtof_l_internal+0x560>
    0.00 :   48d33:  mov    0x20(%rsp),%rax
    0.00 :   48d38:  add    %rcx,%rax
    0.00 :   48d3b:  add    %rax,%rbp
    0.00 :   48d3e:  cmp    $0x10,%r10d
    0.00 :   48d42:  je     49e6e <__GI_____strtof_l_internal+0x16ae>
    0.00 :   48d48:  mov    %rcx,%rsi
    0.00 :   48d4b:  test   %rcx,%rcx
    0.00 :   48d4e:  js     4ae8e <__GI_____strtof_l_internal+0x26ce>
    0.00 :   48d54:  movabs $0x8000000000000000,%rdx
    0.00 :   48d5e:  mov    0x78(%rsp),%rax
    0.00 :   48d63:  add    %rax,%rdx
    0.00 :   48d66:  cmp    %rcx,%rdx
    0.00 :   48d69:  jb     4ae50 <__GI_____strtof_l_internal+0x2690>
    0.00 :   48d6f:  sub    %rsi,%rax
    0.00 :   48d72:  sub    %rcx,%r13
    0.00 :   48d75:  mov    %rax,0x78(%rsp)
    0.00 :   48d7a:  cmp    $0x10,%r10d
    0.00 :   48d7e:  je     494b8 <__GI_____strtof_l_internal+0xcf8>
    0.00 :   48d84:  mov    0x78(%rsp),%rcx
    1.34 :   48d89:  mov    %r11,%rdx
    0.00 :   48d8c:  mov    %r13,%rax
    0.00 :   48d8f:  neg    %rdx
    1.35 :   48d92:  sub    %r11,%rax
    0.00 :   48d95:  cmp    %rcx,%rdx
    0.00 :   48d98:  cmovl  %rcx,%rdx
    0.00 :   48d9c:  cmp    %rcx,%rax
    0.00 :   48d9f:  cmovg  %rcx,%rax
    0.00 :   48da3:  test   %rcx,%rcx
    0.00 :   48da6:  cmovs  %rdx,%rax
    0.00 :   48daa:  add    %rax,%r11
    0.00 :   48dad:  sub    %rax,%rcx
    0.00 :   48db0:  mov    $0x27,%eax
    0.00 :   48db5:  sub    %r11,%rax
    0.00 :   48db8:  mov    %rcx,0x78(%rsp)
    0.00 :   48dbd:  cmp    %rax,%rcx
    0.00 :   48dc0:  jg     4a2fd <__GI_____strtof_l_internal+0x1b3d>
    0.00 :   48dc6:  cmp    $0xffffffffffffffd3,%rcx
    0.00 :   48dca:  jl     4a724 <__GI_____strtof_l_internal+0x1f64>
    0.00 :   48dd0:  test   %r11,%r11
    0.00 :   48dd3:  jne    49be9 <__GI_____strtof_l_internal+0x1429>
    0.00 :   48dd9:  test   %r13,%r13
    0.00 :   48ddc:  je     4ae6f <__GI_____strtof_l_internal+0x26af>
    0.00 :   48de2:  lea    0x2d(%rcx),%rax
    0.00 :   48de6:  cmp    $0x2d,%rax
    0.00 :   48dea:  ja     4ae6f <__GI_____strtof_l_internal+0x26af>
    0.00 :   48df0:  cmpb   $0x30,0x0(%rbp)
    0.00 :   48df4:  je     4aba3 <__GI_____strtof_l_internal+0x23e3>
    0.00 :   48dfa:  mov    $0x1,%eax
    0.00 :   48dff:  mov    %ecx,%esi
    0.00 :   48e01:  movabs $0xaaaaaaaaaaaaaaab,%rdi
    0.00 :   48e0b:  sub    %rcx,%rax
    0.00 :   48e0e:  lea    (%rax,%rax,4),%rdx
    0.00 :   48e12:  add    %rdx,%rdx
    0.00 :   48e15:  mov    %rdx,%rax
    0.00 :   48e18:  mul    %rdi
    1.37 :   48e1b:  shr    %rdx
    0.00 :   48e1e:  lea    0x19(%rdx),%eax
    0.00 :   48e21:  mov    $0x97,%edx
    0.00 :   48e26:  cmp    %edx,%eax
    0.00 :   48e28:  cmovg  %edx,%eax
    0.00 :   48e2b:  add    %ecx,%eax
    0.00 :   48e2d:  test   %eax,%eax
    0.00 :   48e2f:  jle    4ad39 <__GI_____strtof_l_internal+0x2579>
    0.00 :   48e35:  lea    0x80(%rsp),%rcx
    0.00 :   48e3d:  xor    %ebx,%ebx
    0.00 :   48e3f:  movq   $0x0,0x10(%rsp)
    0.00 :   48e48:  lea    0x90(%rsp),%r14
    0.00 :   48e50:  mov    %rcx,0x58(%rsp)
    0.00 :   48e55:  lea    0x78(%rsp),%rcx
    0.00 :   48e5a:  mov    %rcx,0x48(%rsp)
    0.00 :   48e5f:  movslq %eax,%rdx
    1.35 :   48e62:  mov    %r13,%rcx
    0.00 :   48e65:  mov    %r13d,%eax
    0.00 :   48e68:  movb   $0x0,0x57(%rsp)
    0.00 :   48e6d:  sub    %r11d,%eax
    0.00 :   48e70:  sub    %r11,%rcx
    0.00 :   48e73:  cmp    %rcx,%rdx
    0.00 :   48e76:  cltq
    0.00 :   48e78:  cmovg  %rax,%rdx
    0.00 :   48e7c:  add    %r11,%rdx
    0.00 :   48e7f:  cmp    %rdx,%r13
    0.00 :   48e82:  jle    48e8c <__GI_____strtof_l_internal+0x6cc>
    0.00 :   48e84:  movb   $0x1,0x57(%rsp)
    0.00 :   48e89:  mov    %rdx,%r13
    0.00 :   48e8c:  mov    %r13d,%eax
    0.00 :   48e8f:  lea    0x183eaa(%rip),%r10        # 1ccd40 <_fpioconst_pow10>
    0.00 :   48e96:  xor    %r13d,%r13d
    0.00 :   48e99:  mov    $0x1,%r9d
    0.00 :   48e9f:  sub    %r11d,%eax
    0.00 :   48ea2:  mov    %r12,0x28(%rsp)
    0.00 :   48ea7:  mov    %r10,%r15
    0.00 :   48eaa:  mov    %r13,%r12
    1.37 :   48ead:  mov    %eax,%r11d
    0.00 :   48eb0:  mov    %eax,0x18(%rsp)
    0.00 :   48eb4:  lea    0xe0(%rsp),%rax
    0.00 :   48ebc:  sub    %esi,%r11d
    0.00 :   48ebf:  mov    %ebx,0x30(%rsp)
    0.00 :   48ec3:  mov    %r9d,%ebx
    0.00 :   48ec6:  mov    %rbp,0x38(%rsp)
    0.00 :   48ecb:  mov    %r11d,%r13d
    2.72 :   48ece:  mov    %r14,%rbp
    0.00 :   48ed1:  mov    %r14,0x40(%rsp)
    0.00 :   48ed6:  mov    %rax,%r14
    0.00 :   48ed9:  mov    %rax,(%rsp)
    0.00 :   48edd:  jmp    48f0b <__GI_____strtof_l_internal+0x74b>
    0.00 :   48edf:  nop
    0.00 :   48ee0:  lea    -0x1(%rdx),%r12
    0.00 :   48ee4:  lea    0x183fd5(%rip),%rcx        # 1ccec0 <__tens>
    4.06 :   48eeb:  mov    %r14,%rdi
    0.00 :   48eee:  lea    0x0(,%r12,8),%rdx
    0.00 :   48ef6:  lea    0x8(%rcx,%rax,8),%rsi
    0.00 :   48efb:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   48f00:  add    %ebx,%ebx
    0.00 :   48f02:  add    $0x18,%r15
    0.00 :   48f06:  test   %r13d,%r13d
    0.00 :   48f09:  je     48f70 <__GI_____strtof_l_internal+0x7b0>
    0.00 :   48f0b:  test   %r13d,%ebx
    0.00 :   48f0e:  je     48f00 <__GI_____strtof_l_internal+0x740>
    0.00 :   48f10:  mov    0x8(%r15),%rdx
    0.00 :   48f14:  mov    (%r15),%rax
    0.00 :   48f17:  xor    %ebx,%r13d
    0.00 :   48f1a:  test   %r12,%r12
    0.00 :   48f1d:  je     48ee0 <__GI_____strtof_l_internal+0x720>
    0.00 :   48f1f:  lea    0x183f9a(%rip),%rcx        # 1ccec0 <__tens>
    0.00 :   48f26:  sub    $0x1,%rdx
    2.70 :   48f2a:  mov    %r12,%r8
    0.00 :   48f2d:  mov    %rbp,%rdi
    0.00 :   48f30:  lea    0x8(%rcx,%rax,8),%rsi
    1.37 :   48f35:  mov    %r14,%rcx
    0.00 :   48f38:  call   54f90 <__mpn_mul>
    3.81 :   48f3d:  mov    0x8(%r15),%rdx
    2.70 :   48f41:  lea    -0x1(%r12,%rdx,1),%r12
    0.00 :   48f46:  test   %rax,%rax
    0.00 :   48f49:  jne    49ab8 <__GI_____strtof_l_internal+0x12f8>
    0.00 :   48f4f:  mov    %r14,%rax
    0.00 :   48f52:  sub    $0x1,%r12
    0.00 :   48f56:  mov    %rbp,%r14
    0.00 :   48f59:  add    %ebx,%ebx
    0.00 :   48f5b:  mov    %rax,%rbp
    0.00 :   48f5e:  add    $0x18,%r15
    0.00 :   48f62:  test   %r13d,%r13d
    0.00 :   48f65:  jne    48f0b <__GI_____strtof_l_internal+0x74b>
    0.00 :   48f67:  nopw   0x0(%rax,%rax,1)
    0.00 :   48f70:  mov    %r14,%r15
    0.00 :   48f73:  mov    0x40(%rsp),%r14
    0.00 :   48f78:  mov    %r12,%r13
    0.00 :   48f7b:  mov    0x30(%rsp),%ebx
    0.00 :   48f7f:  mov    0x28(%rsp),%r12
    0.00 :   48f84:  mov    0x38(%rsp),%rbp
    0.00 :   48f89:  cmp    %r14,%r15
    0.00 :   48f8c:  je     4a627 <__GI_____strtof_l_internal+0x1e67>
    0.00 :   48f92:  sub    $0x8,%rsp
    0.00 :   48f96:  mov    %r14,%rdx
    0.00 :   48f99:  mov    %rbp,%rdi
    0.00 :   48f9c:  push   %r12
    2.70 :   48f9e:  mov    0x30(%rsp),%r9
    0.00 :   48fa3:  mov    0x58(%rsp),%r8
    0.00 :   48fa8:  mov    0x68(%rsp),%rcx
    0.00 :   48fad:  mov    0x28(%rsp),%esi
    0.00 :   48fb1:  call   48000 <str_to_mpn.constprop.0>
    0.00 :   48fb6:  lea    -0x1(%r13),%rax
    0.00 :   48fba:  mov    %rax,0x28(%rsp)
    0.00 :   48fbf:  bsr    0xf0(%rsp,%rax,8),%rax
    4.06 :   48fc8:  pop    %rdx
    0.00 :   48fc9:  pop    %rcx
    0.00 :   48fca:  xor    $0x3f,%rax
    0.00 :   48fce:  mov    %eax,%r15d
    0.00 :   48fd1:  test   %eax,%eax
    0.00 :   48fd3:  jne    4a1be <__GI_____strtof_l_internal+0x19fe>
    0.00 :   48fd9:  mov    0x80(%rsp),%rdx
    0.00 :   48fe1:  mov    0x10(%rsp),%rax
    0.00 :   48fe6:  mov    %rax,0x78(%rsp)
    0.00 :   48feb:  cmp    $0x1,%r13
    0.00 :   48fef:  je     4a094 <__GI_____strtof_l_internal+0x18d4>
    0.00 :   48ff5:  cmp    $0x2,%r13
    0.00 :   48ff9:  je     49ebd <__GI_____strtof_l_internal+0x16fd>
    0.00 :   48fff:  mov    0x18(%rsp),%rax
    0.00 :   49004:  mov    (%rsp),%rdi
    0.00 :   49008:  mov    0xe0(%rsp,%rax,8),%rbp
    0.00 :   49010:  lea    -0x2(%r13),%rax
    0.00 :   49014:  mov    0xe0(%rsp,%rax,8),%r9
    0.00 :   4901c:  mov    %rax,0x48(%rsp)
    0.00 :   49021:  mov    %r13,%rax
    0.00 :   49024:  sub    %rdx,%rax
    0.00 :   49027:  lea    (%rdi,%rax,8),%rsi
    0.00 :   4902b:  mov    %r14,%rdi
    0.00 :   4902e:  mov    %r9,0x10(%rsp)
    0.00 :   49033:  call   54620 <__mpn_cmp>
    0.00 :   49038:  mov    0x80(%rsp),%r10
    0.00 :   49040:  mov    0x10(%rsp),%r9
    0.00 :   49045:  test   %eax,%eax
    0.00 :   49047:  js     49069 <__GI_____strtof_l_internal+0x8a9>
    0.00 :   49049:  mov    0x80(%rsp),%rax
    0.00 :   49051:  movq   $0x0,0x90(%rsp,%rax,8)
    0.00 :   4905d:  lea    0x1(%rax),%r10
    0.00 :   49061:  mov    %r10,0x80(%rsp)
    0.00 :   49069:  cmp    %r10,%r13
    0.00 :   4906c:  jle    4a640 <__GI_____strtof_l_internal+0x1e80>
    0.00 :   49072:  mov    %r13,%r11
    0.00 :   49075:  sub    %r10,%r11
    0.00 :   49078:  mov    %r11,%rax
    0.00 :   4907b:  shl    $0x6,%rax
    0.00 :   4907f:  test   %ebx,%ebx
    0.00 :   49081:  je     4a93a <__GI_____strtof_l_internal+0x217a>
    0.00 :   49087:  mov    $0x18,%ecx
    0.00 :   4908c:  mov    %r10,%rdx
    0.00 :   4908f:  sub    %ebx,%ecx
    0.00 :   49091:  mov    %ecx,%r12d
    0.00 :   49094:  jne    4ab60 <__GI_____strtof_l_internal+0x23a0>
    0.00 :   4909a:  mov    %r11d,%eax
    0.00 :   4909d:  shl    $0x6,%eax
    0.00 :   490a0:  add    %eax,%ebx
    0.00 :   490a2:  mov    %edx,%eax
    0.00 :   490a4:  test   %edx,%edx
    0.00 :   490a6:  jle    4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   490ac:  mov    %r13,%rdi
    0.00 :   490af:  lea    -0x1(%rdx),%esi
    0.00 :   490b2:  sub    %r10,%rdi
    0.00 :   490b5:  lea    0x10(,%rdi,8),%r10
    0.00 :   490bd:  test   %r10,%r10
    0.00 :   490c0:  je     4a9d5 <__GI_____strtof_l_internal+0x2215>
    0.00 :   490c6:  cmp    $0x2,%esi
    0.00 :   490c9:  jbe    4a9d5 <__GI_____strtof_l_internal+0x2215>
    0.00 :   490cf:  movslq %edx,%r10
    0.00 :   490d2:  mov    %edx,%esi
    0.00 :   490d4:  mov    %edx,%r15d
    0.00 :   490d7:  lea    -0x10(%r14,%r10,8),%rdx
    0.00 :   490dc:  add    %rdi,%r10
    0.00 :   490df:  shr    %esi
    0.00 :   490e1:  movdqu (%rdx),%xmm6
    0.00 :   490e5:  lea    -0x8(%r14,%r10,8),%rdi
    0.00 :   490ea:  movups %xmm6,(%rdi)
    0.00 :   490ed:  cmp    $0x1,%esi
    0.00 :   490f0:  je     49125 <__GI_____strtof_l_internal+0x965>
    0.00 :   490f2:  movdqu -0x10(%rdx),%xmm7
    0.00 :   490f7:  movups %xmm7,-0x10(%rdi)
    0.00 :   490fb:  cmp    $0x2,%esi
    0.00 :   490fe:  je     49125 <__GI_____strtof_l_internal+0x965>
    0.00 :   49100:  movdqu -0x20(%rdx),%xmm6
    0.00 :   49105:  movups %xmm6,-0x20(%rdi)
    0.00 :   49109:  cmp    $0x3,%esi
    0.00 :   4910c:  je     49125 <__GI_____strtof_l_internal+0x965>
    0.00 :   4910e:  movdqu -0x30(%rdx),%xmm7
    0.00 :   49113:  movups %xmm7,-0x30(%rdi)
    0.00 :   49117:  cmp    $0x4,%esi
    0.00 :   4911a:  je     49125 <__GI_____strtof_l_internal+0x965>
    0.00 :   4911c:  movdqu -0x40(%rdx),%xmm5
    0.00 :   49121:  movups %xmm5,-0x40(%rdi)
    0.00 :   49125:  mov    %r15d,%edx
    0.00 :   49128:  and    $0xfffffffe,%edx
    0.00 :   4912b:  sub    %edx,%eax
    0.00 :   4912d:  cmp    %r15d,%edx
    0.00 :   49130:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   49132:  lea    -0x1(%rax),%edx
    0.00 :   49135:  cltq
    0.00 :   49137:  movslq %edx,%rdx
    0.00 :   4913a:  add    %r11,%rax
    0.00 :   4913d:  mov    0x90(%rsp,%rdx,8),%rdx
    0.00 :   49145:  mov    %rdx,0x90(%rsp,%rax,8)
    0.00 :   4914d:  lea    0x8(,%r11,8),%rdx
    0.00 :   49155:  xor    %esi,%esi
    0.00 :   49157:  mov    %r14,%rdi
    0.00 :   4915a:  mov    %r9,0x10(%rsp)
    0.00 :   4915f:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   49164:  lea    -0x1(%r13),%eax
    0.00 :   49168:  cmp    $0x18,%ebx
    0.00 :   4916b:  movq   $0x0,0xe0(%rsp,%r13,8)
    0.00 :   49177:  mov    %eax,0x20(%rsp)
    0.00 :   4917b:  mov    0x90(%rsp,%r13,8),%r11
    0.00 :   49183:  mov    0x10(%rsp),%r9
    0.00 :   49188:  jg     4abc2 <__GI_____strtof_l_internal+0x2402>
    0.00 :   4918e:  lea    -0x2(%r13),%eax
    0.00 :   49192:  movslq 0x20(%rsp),%rdx
    0.00 :   49197:  lea    0x1(%r13),%r15
    0.00 :   4919b:  lea    0x8(,%rax,8),%rcx
    0.00 :   491a3:  neg    %rax
    0.00 :   491a6:  mov    %r15,0x28(%rsp)
    0.00 :   491ab:  mov    %r9,%r15
    0.00 :   491ae:  shl    $0x3,%rax
    0.00 :   491b2:  mov    %rcx,0x40(%rsp)
    0.00 :   491b7:  lea    (%rax,%rdx,8),%rcx
    0.00 :   491bb:  lea    -0x8(%rax,%rdx,8),%rax
    0.00 :   491c0:  add    %r14,%rcx
    0.00 :   491c3:  add    %r14,%rax
    0.00 :   491c6:  mov    %rcx,0x38(%rsp)
    0.00 :   491cb:  mov    %rax,0x30(%rsp)
    0.00 :   491d0:  mov    $0xffffffffffffffff,%r12
    0.00 :   491d7:  cmp    %rbp,%r11
    0.00 :   491da:  jne    49af4 <__GI_____strtof_l_internal+0x1334>
    0.00 :   491e0:  mov    0x28(%rsp),%rdx
    0.00 :   491e5:  mov    (%rsp),%rsi
    0.00 :   491e9:  mov    %r12,%rcx
    0.00 :   491ec:  mov    %r14,%rdi
    0.00 :   491ef:  call   563d0 <__mpn_submul_1>
    0.00 :   491f4:  cmp    %rax,0x90(%rsp,%r13,8)
    0.00 :   491fc:  je     4921d <__GI_____strtof_l_internal+0xa5d>
    0.00 :   491fe:  mov    (%rsp),%rdx
    0.00 :   49202:  mov    %r13,%rcx
    0.00 :   49205:  mov    %r14,%rsi
    0.00 :   49208:  mov    %r14,%rdi
    0.00 :   4920b:  call   54480 <__mpn_add_n>
    0.00 :   49210:  test   %rax,%rax
    0.00 :   49213:  je     4ae12 <__GI_____strtof_l_internal+0x2652>
    0.00 :   49219:  sub    $0x1,%r12
    0.00 :   4921d:  mov    0x18(%rsp),%rax
    0.00 :   49222:  mov    0x90(%rsp,%rax,8),%r11
    0.00 :   4922a:  mov    0x20(%rsp),%eax
    0.00 :   4922e:  mov    %r11,0x90(%rsp,%r13,8)
    0.00 :   49236:  test   %eax,%eax
    0.00 :   49238:  jle    49258 <__GI_____strtof_l_internal+0xa98>
    0.00 :   4923a:  mov    0x40(%rsp),%rdx
    0.00 :   4923f:  mov    0x30(%rsp),%rsi
    0.00 :   49244:  mov    %r11,0x10(%rsp)
    0.00 :   49249:  mov    0x38(%rsp),%rdi
    0.00 :   4924e:  call   28430 <*ABS*+0xa95a0@plt>
    0.00 :   49253:  mov    0x10(%rsp),%r11
    0.00 :   49258:  movq   $0x0,0x90(%rsp)
    0.00 :   49264:  test   %ebx,%ebx
    0.00 :   49266:  jne    49ad0 <__GI_____strtof_l_internal+0x1310>
    0.00 :   4926c:  mov    0x78(%rsp),%rax
    0.00 :   49271:  test   %r12,%r12
    0.00 :   49274:  je     49bb8 <__GI_____strtof_l_internal+0x13f8>
    0.00 :   4927a:  bsr    %r12,%rdx
    0.00 :   4927e:  mov    $0x40,%ebx
    0.00 :   49283:  xor    $0x3f,%rdx
    0.00 :   49287:  movslq %edx,%rsi
    0.00 :   4928a:  sub    %edx,%ebx
    0.00 :   4928c:  sub    %rsi,%rax
    0.00 :   4928f:  mov    %rax,0x78(%rsp)
    0.00 :   49294:  cmp    $0x18,%ebx
    0.00 :   49297:  jle    4ac83 <__GI_____strtof_l_internal+0x24c3>
    0.00 :   4929d:  lea    0x18(%rdx),%edx
    0.00 :   492a0:  mov    $0x40,%ecx
    0.00 :   492a5:  mov    %r12,%rdi
    0.00 :   492a8:  mov    $0x3f,%r8d
    0.00 :   492ae:  sub    %edx,%ecx
    0.00 :   492b0:  sub    %edx,%r8d
    0.00 :   492b3:  lea    0x88(%rsp),%r15
    0.00 :   492bb:  shr    %cl,%rdi
    0.00 :   492be:  movslq %r8d,%r8
    0.00 :   492c1:  mov    %rdi,0x88(%rsp)
    0.00 :   492c9:  mov    %r13d,%edx
    0.00 :   492cc:  test   %r13d,%r13d
    0.00 :   492cf:  js     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   492d5:  movslq %r13d,%rcx
    0.00 :   492d8:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   492e1:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   492e7:  lea    -0x1(%r13),%r13d
    0.00 :   492eb:  test   %edx,%edx
    0.00 :   492ed:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   492f3:  movslq %r13d,%rcx
    0.00 :   492f6:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   492ff:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49305:  lea    -0x2(%rdx),%r13d
    0.00 :   49309:  cmp    $0x1,%edx
    0.00 :   4930c:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49312:  movslq %r13d,%rcx
    0.00 :   49315:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   4931e:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49324:  lea    -0x3(%rdx),%r13d
    0.00 :   49328:  cmp    $0x2,%edx
    0.00 :   4932b:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49331:  movslq %r13d,%rcx
    0.00 :   49334:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   4933d:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49343:  lea    -0x4(%rdx),%r13d
    0.00 :   49347:  cmp    $0x3,%edx
    0.00 :   4934a:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49350:  movslq %r13d,%rcx
    0.00 :   49353:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   4935c:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   4935e:  lea    -0x5(%rdx),%r13d
    0.00 :   49362:  cmp    $0x4,%edx
    0.00 :   49365:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49367:  movslq %r13d,%rcx
    0.00 :   4936a:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   49373:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49375:  lea    -0x6(%rdx),%r13d
    0.00 :   49379:  cmp    $0x5,%edx
    0.00 :   4937c:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   4937e:  movslq %r13d,%rcx
    0.00 :   49381:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   4938a:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   4938c:  lea    -0x7(%rdx),%r13d
    0.00 :   49390:  cmp    $0x6,%edx
    0.00 :   49393:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   49395:  movslq %r13d,%rcx
    0.00 :   49398:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   493a1:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   493a3:  lea    -0x8(%rdx),%r13d
    0.00 :   493a7:  cmp    $0x7,%edx
    0.00 :   493aa:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   493ac:  movslq %r13d,%rcx
    0.00 :   493af:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   493b8:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   493ba:  lea    -0x9(%rdx),%r13d
    0.00 :   493be:  cmp    $0x8,%edx
    0.00 :   493c1:  je     493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   493c3:  movslq %r13d,%rcx
    0.00 :   493c6:  cmpq   $0x0,0x90(%rsp,%rcx,8)
    0.00 :   493cf:  jne    493d5 <__GI_____strtof_l_internal+0xc15>
    0.00 :   493d1:  lea    -0xa(%rdx),%r13d
    0.00 :   493d5:  not    %r13d
    0.00 :   493d8:  mov    0x8(%rsp),%edx
    0.00 :   493dc:  lea    -0x1(%rax),%rsi
    0.00 :   493e0:  mov    %r12,%rcx
    0.00 :   493e3:  mov    %r13d,%r9d
    0.00 :   493e6:  mov    %r15,%rdi
    0.00 :   493e9:  shr    $0x1f,%r9d
    0.00 :   493ed:  or     0x57(%rsp),%r9b
    0.00 :   493f2:  and    $0x1,%r9d
    0.00 :   493f6:  call   482a0 <round_and_return>
    0.00 :   493fb:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49400:  mov    %rdi,0x78(%rsp)
    0.00 :   49405:  nopl   (%rax)
    0.00 :   49408:  cmpq   $0x0,(%rsp)
    0.00 :   4940d:  jne    48cd7 <__GI_____strtof_l_internal+0x517>
    0.00 :   49413:  jmp    48cde <__GI_____strtof_l_internal+0x51e>
    0.00 :   49418:  nopl   0x0(%rax,%rax,1)
    0.00 :   49420:  movsbq 0x1(%r13),%rdx
    0.00 :   49425:  cmpl   $0x78,(%rsi,%rdx,4)
    0.00 :   49429:  je     4997e <__GI_____strtof_l_internal+0x11be>
    0.00 :   4942f:  mov    %r13,0x10(%rsp)
    0.00 :   49434:  mov    $0xa,%r10d
    0.00 :   4943a:  test   %r12,%r12
    0.00 :   4943d:  jne    4893a <__GI_____strtof_l_internal+0x17a>
    0.00 :   49443:  mov    0x10(%rsp),%rbp
    0.00 :   49448:  nopl   0x0(%rax,%rax,1)
    0.00 :   49450:  movsbq 0x1(%rbp),%rbx
    0.00 :   49455:  add    $0x1,%rbp
    0.00 :   49459:  cmp    $0x30,%bl
    0.00 :   4945c:  je     49450 <__GI_____strtof_l_internal+0xc90>
    0.00 :   4945e:  jmp    48982 <__GI_____strtof_l_internal+0x1c2>
    0.00 :   49463:  movzbl 0x2(%r14),%edi
    0.00 :   49468:  lea    -0x30(%rdi),%eax
    0.00 :   4946b:  cmp    $0x9,%al
    0.00 :   4946d:  ja     48c78 <__GI_____strtof_l_internal+0x4b8>
    0.00 :   49473:  lea    0x2(%r14),%rsi
    0.00 :   49477:  cmp    $0x10,%r10d
    0.00 :   4947b:  jne    48a70 <__GI_____strtof_l_internal+0x2b0>
    0.00 :   49481:  test   %r11,%r11
    0.00 :   49484:  je     4a6b1 <__GI_____strtof_l_internal+0x1ef1>
    0.00 :   4948a:  test   %rcx,%rcx
    0.00 :   4948d:  jne    4ac90 <__GI_____strtof_l_internal+0x24d0>
    0.00 :   49493:  mov    %r11,%rax
    0.00 :   49496:  shr    $0x3d,%rax
    0.00 :   4949a:  jne    4ac90 <__GI_____strtof_l_internal+0x24d0>
    0.00 :   494a0:  mov    $0x20,%eax
    0.00 :   494a5:  xor    %r15d,%r15d
    0.00 :   494a8:  sub    %r11,%rax
    0.00 :   494ab:  lea    0x3(,%rax,4),%rbx
    0.00 :   494b3:  jmp    4973b <__GI_____strtof_l_internal+0xf7b>
    0.00 :   494b8:  movsbq 0x0(%rbp),%rdx
    0.00 :   494bd:  mov    0x68(%r9),%r8
    0.00 :   494c1:  mov    %rdx,%rax
    0.00 :   494c4:  testb  $0x10,0x1(%r8,%rdx,2)
    0.00 :   494ca:  jne    494f5 <__GI_____strtof_l_internal+0xd35>
    0.00 :   494cc:  nopl   0x0(%rax)
    0.00 :   494d0:  movsbq 0x1(%rbp),%rdx
    0.00 :   494d5:  add    $0x1,%rbp
    0.00 :   494d9:  mov    %rdx,%rax
    0.00 :   494dc:  testb  $0x10,0x1(%r8,%rdx,2)
    0.00 :   494e2:  je     494d0 <__GI_____strtof_l_internal+0xd10>
    0.00 :   494e4:  jmp    494f5 <__GI_____strtof_l_internal+0xd35>
    0.00 :   494e6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   494f0:  movsbq 0x0(%rbp),%rax
    0.00 :   494f5:  add    $0x1,%rbp
    0.00 :   494f9:  cmp    $0x30,%al
    0.00 :   494fb:  je     494f0 <__GI_____strtof_l_internal+0xd30>
    0.00 :   494fd:  movsbl %al,%r10d
    0.00 :   49501:  sub    $0x30,%r10d
    0.00 :   49505:  cmp    $0x9,%r10d
    0.00 :   49509:  ja     49a2e <__GI_____strtof_l_internal+0x126e>
    0.00 :   4950f:  movslq %r10d,%r10
    0.00 :   49512:  lea    0x183527(%rip),%rax        # 1cca40 <nbits.1>
    0.00 :   49519:  mov    (%rax,%r10,4),%eax
    0.00 :   4951d:  test   %eax,%eax
    0.00 :   4951f:  je     4ad1a <__GI_____strtof_l_internal+0x255a>
    0.00 :   49525:  mov    $0x18,%ecx
    0.00 :   4952a:  mov    $0x17,%edi
    0.00 :   4952f:  movslq %eax,%rbx
    0.00 :   49532:  sub    %eax,%ecx
    0.00 :   49534:  sub    %eax,%edi
    0.00 :   49536:  shl    %cl,%r10
    0.00 :   49539:  mov    0x78(%rsp),%rcx
    0.00 :   4953e:  mov    %r10,0x88(%rsp)
    0.00 :   49546:  test   %rcx,%rcx
    0.00 :   49549:  js     49ea7 <__GI_____strtof_l_internal+0x16e7>
    0.00 :   4954f:  movabs $0x7fffffffffffffff,%rsi
    0.00 :   49559:  sub    %rcx,%rsi
    0.00 :   4955c:  sub    %rbx,%rsi
    0.00 :   4955f:  lea    0x4(%rsi),%rdx
    0.00 :   49563:  add    $0x1,%rsi
    0.00 :   49567:  cmovns %rsi,%rdx
    0.00 :   4956b:  sar    $0x2,%rdx
    0.00 :   4956f:  cmp    %r11,%rdx
    0.00 :   49572:  jb     4acaf <__GI_____strtof_l_internal+0x24ef>
    0.00 :   49578:  sub    $0x1,%eax
    0.00 :   4957b:  cltq
    0.00 :   4957d:  lea    -0x4(%rax,%r11,4),%rsi
    0.00 :   49582:  add    %rcx,%rsi
    0.00 :   49585:  mov    %rsi,0x78(%rsp)
    0.00 :   4958a:  sub    $0x1,%r13
    0.00 :   4958e:  je     49e50 <__GI_____strtof_l_internal+0x1690>
    0.00 :   49594:  mov    0x20(%rsp),%rdx
    0.00 :   49599:  mov    %r10,%r11
    0.00 :   4959c:  xor    %ebx,%ebx
    0.00 :   4959e:  jmp    495ba <__GI_____strtof_l_internal+0xdfa>
    0.00 :   495a0:  lea    -0x3(%rdi),%ecx
    0.00 :   495a3:  mov    $0x1,%ebx
    0.00 :   495a8:  sub    $0x4,%edi
    0.00 :   495ab:  shl    %cl,%rax
    0.00 :   495ae:  or     %rax,%r11
    0.00 :   495b1:  test   %r13,%r13
    0.00 :   495b4:  je     49e48 <__GI_____strtof_l_internal+0x1688>
    0.00 :   495ba:  movsbq 0x0(%rbp),%rax
    0.00 :   495bf:  mov    %rax,%rcx
    0.00 :   495c2:  testb  $0x10,0x1(%r8,%rax,2)
    0.00 :   495c8:  jne    495d2 <__GI_____strtof_l_internal+0xe12>
    0.00 :   495ca:  add    %rdx,%rbp
    0.00 :   495cd:  movsbq 0x0(%rbp),%rcx
    0.00 :   495d2:  movsbl %cl,%eax
    0.00 :   495d5:  add    $0x1,%rbp
    0.00 :   495d9:  sub    $0x30,%eax
    0.00 :   495dc:  cmp    $0x9,%eax
    0.00 :   495df:  jbe    495eb <__GI_____strtof_l_internal+0xe2b>
    0.00 :   495e1:  mov    0x70(%r9),%rax
    0.00 :   495e5:  mov    (%rax,%rcx,4),%eax
    0.00 :   495e8:  sub    $0x57,%eax
    0.00 :   495eb:  cltq
    0.00 :   495ed:  sub    $0x1,%r13
    0.00 :   495f1:  cmp    $0x2,%edi
    0.00 :   495f4:  jg     495a0 <__GI_____strtof_l_internal+0xde0>
    0.00 :   495f6:  test   %bl,%bl
    0.00 :   495f8:  mov    $0x3,%ecx
    0.00 :   495fd:  mov    %rax,%rdx
    0.00 :   49600:  cmove  %r10,%r11
    0.00 :   49604:  sub    %edi,%ecx
    0.00 :   49606:  shr    %cl,%rax
    0.00 :   49609:  lea    0x3d(%rdi),%ecx
    0.00 :   4960c:  or     %r11,%rax
    0.00 :   4960f:  shl    %cl,%rdx
    0.00 :   49612:  mov    %rax,0x88(%rsp)
    0.00 :   4961a:  mov    %rdx,%rcx
    0.00 :   4961d:  test   %r13,%r13
    0.00 :   49620:  je     4a2f5 <__GI_____strtof_l_internal+0x1b35>
    0.00 :   49626:  add    %rbp,%r13
    0.00 :   49629:  jmp    4963d <__GI_____strtof_l_internal+0xe7d>
    0.00 :   4962b:  nopl   0x0(%rax,%rax,1)
    0.00 :   49630:  add    $0x1,%rbp
    0.00 :   49634:  cmp    %r13,%rbp
    0.00 :   49637:  je     4a2f5 <__GI_____strtof_l_internal+0x1b35>
    0.00 :   4963d:  cmpb   $0x30,0x0(%rbp)
    0.00 :   49641:  je     49630 <__GI_____strtof_l_internal+0xe70>
    0.00 :   49643:  mov    $0x1,%r9d
    0.00 :   49649:  mov    0x8(%rsp),%edx
    0.00 :   4964d:  lea    0x88(%rsp),%rdi
    0.00 :   49655:  mov    $0x3f,%r8d
    0.00 :   4965b:  call   482a0 <round_and_return>
    0.00 :   49660:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49665:  nopl   (%rax)
    0.00 :   49668:  cmp    $0x10,%r10d
    0.00 :   4966c:  jne    489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   49672:  cmp    0x10(%rsp),%rbp
    0.00 :   49677:  jne    489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   4967d:  mov    0x20(%rsp),%rdi
    0.00 :   49682:  movsbq 0x0(%rbp,%rdi,1),%rdx
    0.00 :   49688:  lea    -0x30(%rdx),%edi
    0.00 :   4968b:  cmp    $0x9,%dil
    0.00 :   4968f:  jbe    489b2 <__GI_____strtof_l_internal+0x1f2>
    0.00 :   49695:  mov    (%rsi,%rdx,4),%edx
    0.00 :   49698:  sub    $0x61,%edx
    0.00 :   4969b:  cmp    $0x5,%dl
    0.00 :   4969e:  jbe    489b2 <__GI_____strtof_l_internal+0x1f2>
    0.00 :   496a4:  mov    0x10(%rsp),%rbx
    0.00 :   496a9:  mov    %r12,%rdx
    0.00 :   496ac:  mov    %rbp,%rsi
    0.00 :   496af:  mov    %r10d,0x18(%rsp)
    0.00 :   496b4:  mov    %rbx,%rdi
    0.00 :   496b7:  call   59bc0 <__correctly_grouped_prefixmb>
    0.00 :   496bc:  cmpq   $0x0,(%rsp)
    0.00 :   496c1:  je     496e0 <__GI_____strtof_l_internal+0xf20>
    0.00 :   496c3:  cmp    %rbx,%rax
    0.00 :   496c6:  mov    0x18(%rsp),%r10d
    0.00 :   496cb:  je     4a99c <__GI_____strtof_l_internal+0x21dc>
    0.00 :   496d1:  mov    (%rsp),%rcx
    0.00 :   496d5:  mov    %rax,(%rcx)
    0.00 :   496d8:  nopl   0x0(%rax,%rax,1)
    0.00 :   496e0:  mov    0x8(%rsp),%ebp
    0.00 :   496e4:  movss  0x1989d4(%rip),%xmm0        # 1e20c0 <othermask+0x30>
    0.00 :   496ec:  test   %ebp,%ebp
    0.00 :   496ee:  jne    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   496f4:  jmp    488dc <__GI_____strtof_l_internal+0x11c>
    0.00 :   496f9:  nopl   0x0(%rax)
    0.00 :   49700:  movzbl 0x2(%r14),%edi
    0.00 :   49705:  lea    0x2(%r14),%rsi
    0.00 :   49709:  lea    -0x30(%rdi),%eax
    0.00 :   4970c:  cmp    $0x9,%al
    0.00 :   4970e:  ja     48c78 <__GI_____strtof_l_internal+0x4b8>
    0.00 :   49714:  cmp    $0x10,%r10d
    0.00 :   49718:  je     49a8d <__GI_____strtof_l_internal+0x12cd>
    0.00 :   4971e:  movabs $0x7fffffffffffffc2,%rax
    0.00 :   49728:  cmp    %rax,%r11
    0.00 :   4972b:  ja     4add4 <__GI_____strtof_l_internal+0x2614>
    0.00 :   49731:  lea    0x3d(%r11),%rbx
    0.00 :   49735:  mov    $0x1,%r15d
    0.00 :   4973b:  movabs $0xcccccccccccccccd,%rdx
    0.00 :   49745:  xor    %eax,%eax
    0.00 :   49747:  test   %rbx,%rbx
    0.00 :   4974a:  cmovs  %rax,%rbx
    0.00 :   4974e:  mov    %rbx,%rax
    0.00 :   49751:  mul    %rdx
    0.00 :   49754:  shr    $0x3,%rdx
    0.00 :   49758:  lea    (%rdx,%rdx,4),%rax
    0.00 :   4975c:  add    %rax,%rax
    0.00 :   4975f:  sub    %rax,%rbx
    0.00 :   49762:  mov    %rbx,0x10(%rsp)
    0.00 :   49767:  mov    0x78(%rsp),%rax
    0.00 :   4976c:  jmp    4979b <__GI_____strtof_l_internal+0xfdb>
    0.00 :   4976e:  xchg   %ax,%ax
    0.00 :   49770:  sub    $0x30,%edi
    0.00 :   49773:  movsbq %dil,%rdi
    0.00 :   49777:  cmp    %rdx,%rax
    0.00 :   4977a:  je     49868 <__GI_____strtof_l_internal+0x10a8>
    0.00 :   49780:  lea    (%rax,%rax,4),%rax
    0.00 :   49784:  add    $0x1,%rsi
    0.00 :   49788:  lea    (%rdi,%rax,2),%rax
    0.00 :   4978c:  movzbl (%rsi),%edi
    0.00 :   4978f:  lea    -0x30(%rdi),%ebx
    0.00 :   49792:  cmp    $0x9,%bl
    0.00 :   49795:  ja     49bd2 <__GI_____strtof_l_internal+0x1412>
    0.00 :   4979b:  cmp    %rdx,%rax
    0.00 :   4979e:  jle    49770 <__GI_____strtof_l_internal+0xfb0>
    0.00 :   497a0:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   497a4:  je     499eb <__GI_____strtof_l_internal+0x122b>
    0.00 :   497aa:  mov    0x1d065f(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   497b1:  movl   $0x22,%fs:(%rax)
    0.00 :   497b8:  test   %r15d,%r15d
    0.00 :   497bb:  je     49a08 <__GI_____strtof_l_internal+0x1248>
    0.00 :   497c1:  mov    0x8(%rsp),%r11d
    0.00 :   497c6:  test   %r11d,%r11d
    0.00 :   497c9:  jne    49a68 <__GI_____strtof_l_internal+0x12a8>
    0.00 :   497cf:  movss  0x1995fd(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   497d7:  movaps %xmm0,%xmm1
    0.00 :   497da:  mulss  %xmm1,%xmm0
    0.00 :   497de:  xchg   %ax,%ax
    0.00 :   497e0:  movzbl 0x1(%rsi),%eax
    0.00 :   497e4:  add    $0x1,%rsi
    0.00 :   497e8:  sub    $0x30,%eax
    0.00 :   497eb:  cmp    $0x9,%al
    0.00 :   497ed:  jbe    497e0 <__GI_____strtof_l_internal+0x1020>
    0.00 :   497ef:  mov    (%rsp),%rax
    0.00 :   497f3:  test   %rax,%rax
    0.00 :   497f6:  je     488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   497fc:  mov    %rsi,(%rax)
    0.00 :   497ff:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49804:  nopl   0x0(%rax)
    0.00 :   49808:  mov    %r12,%rcx
    0.00 :   4980b:  mov    $0x3,%edx
    0.00 :   49810:  lea    0x18edbd(%rip),%rsi        # 1d85d4 <not_available+0x76>
    0.00 :   49817:  mov    %r13,%rdi
    0.00 :   4981a:  call   28530 <*ABS*+0xa9b60@plt>
    0.00 :   4981f:  test   %eax,%eax
    0.00 :   49821:  jne    488ce <__GI_____strtof_l_internal+0x10e>
    0.00 :   49827:  cmpb   $0x28,0x3(%r13)
    0.00 :   4982c:  movss  0x1995a8(%rip),%xmm0        # 1e2ddc <default_rwlockattr+0x704>
    0.00 :   49834:  lea    0x3(%r13),%rbx
    0.00 :   49838:  je     4a750 <__GI_____strtof_l_internal+0x1f90>
    0.00 :   4983e:  mov    (%rsp),%rax
    0.00 :   49842:  test   %rax,%rax
    0.00 :   49845:  je     4984a <__GI_____strtof_l_internal+0x108a>
    0.00 :   49847:  mov    %rbx,(%rax)
    0.00 :   4984a:  mov    0x8(%rsp),%r12d
    0.00 :   4984f:  test   %r12d,%r12d
    0.00 :   49852:  je     488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49858:  xorps  0x198861(%rip),%xmm0        # 1e20c0 <othermask+0x30>
    0.00 :   4985f:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49864:  nopl   0x0(%rax)
    0.00 :   49868:  cmp    %rdi,0x10(%rsp)
    0.00 :   4986d:  jge    49780 <__GI_____strtof_l_internal+0xfc0>
    0.00 :   49873:  jmp    497a0 <__GI_____strtof_l_internal+0xfe0>
    0.00 :   49878:  mov    0x50(%rax),%rcx
    0.00 :   4987c:  movzbl (%rcx),%edi
    0.00 :   4987f:  lea    -0x1(%rdi),%edx
    0.00 :   49882:  cmp    $0x7d,%dl
    0.00 :   49885:  ja     49a27 <__GI_____strtof_l_internal+0x1267>
    0.00 :   4988b:  mov    0x48(%rax),%r12
    0.00 :   4988f:  cmpb   $0x0,(%r12)
    0.00 :   49894:  jne    48801 <__GI_____strtof_l_internal+0x41>
    0.00 :   4989a:  xor    %ecx,%ecx
    0.00 :   4989c:  xor    %r12d,%r12d
    0.00 :   4989f:  jmp    48801 <__GI_____strtof_l_internal+0x41>
    0.00 :   498a4:  mov    %r12,%rcx
    0.00 :   498a7:  mov    $0x3,%edx
    0.00 :   498ac:  lea    0x18ed17(%rip),%rsi        # 1d85ca <not_available+0x6c>
    0.00 :   498b3:  mov    %r13,%rdi
    0.00 :   498b6:  call   28530 <*ABS*+0xa9b60@plt>
    0.00 :   498bb:  test   %eax,%eax
    0.00 :   498bd:  jne    488ce <__GI_____strtof_l_internal+0x10e>
    0.00 :   498c3:  mov    (%rsp),%r14
    0.00 :   498c7:  test   %r14,%r14
    0.00 :   498ca:  je     498f4 <__GI_____strtof_l_internal+0x1134>
    0.00 :   498cc:  lea    0x3(%r13),%rbx
    0.00 :   498d0:  mov    %r12,%rcx
    0.00 :   498d3:  mov    $0x5,%edx
    0.00 :   498d8:  add    $0x8,%r13
    0.00 :   498dc:  mov    %rbx,%rdi
    0.00 :   498df:  lea    0x18ece8(%rip),%rsi        # 1d85ce <not_available+0x70>
    0.00 :   498e6:  call   28530 <*ABS*+0xa9b60@plt>
    0.00 :   498eb:  test   %eax,%eax
    0.00 :   498ed:  cmove  %r13,%rbx
    0.00 :   498f1:  mov    %rbx,(%r14)
    0.00 :   498f4:  mov    0x8(%rsp),%r13d
    0.00 :   498f9:  movss  0x1994e3(%rip),%xmm0        # 1e2de4 <default_rwlockattr+0x70c>
    0.00 :   49901:  test   %r13d,%r13d
    0.00 :   49904:  jne    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   4990a:  movss  0x1994ce(%rip),%xmm0        # 1e2de0 <default_rwlockattr+0x708>
    0.00 :   49912:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49917:  xor    %eax,%eax
    0.00 :   49919:  sub    $0x1,%r14
    0.00 :   4991d:  xor    %edx,%edx
    0.00 :   4991f:  cmp    $0x10,%r10d
    0.00 :   49923:  sete   %al
    0.00 :   49926:  lea    0x1(%rax,%rax,2),%r15
    0.00 :   4992b:  jne    49959 <__GI_____strtof_l_internal+0x1199>
    0.00 :   4992d:  jmp    4a23d <__GI_____strtof_l_internal+0x1a7d>
    0.00 :   49932:  nopw   0x0(%rax,%rax,1)
    0.00 :   49938:  add    %r15,%rdi
    0.00 :   4993b:  sub    $0x1,%r11
    0.00 :   4993f:  mov    %rdi,%rax
    0.00 :   49942:  shr    $0x3f,%rax
    0.00 :   49946:  sub    $0x1,%r13
    0.00 :   4994a:  setne  %dl
    0.00 :   4994d:  and    %al,%dl
    0.00 :   4994f:  je     49400 <__GI_____strtof_l_internal+0xc40>
    0.00 :   49955:  sub    $0x1,%r14
    0.00 :   49959:  movsbl (%r14),%eax
    0.00 :   4995d:  mov    %eax,%ebx
    0.00 :   4995f:  sub    $0x30,%eax
    0.00 :   49962:  cmp    $0x9,%eax
    0.00 :   49965:  ja     49955 <__GI_____strtof_l_internal+0x1195>
    0.00 :   49967:  cmp    $0x30,%bl
    0.00 :   4996a:  je     49938 <__GI_____strtof_l_internal+0x1178>
    0.00 :   4996c:  test   %dl,%dl
    0.00 :   4996e:  je     48cd0 <__GI_____strtof_l_internal+0x510>
    0.00 :   49974:  mov    %rdi,0x78(%rsp)
    0.00 :   49979:  jmp    48cd0 <__GI_____strtof_l_internal+0x510>
    0.00 :   4997e:  lea    0x2(%r13),%rcx
    0.00 :   49982:  movsbq 0x2(%r13),%rbx
    0.00 :   49987:  mov    %rcx,0x10(%rsp)
    0.00 :   4998c:  test   %r12,%r12
    0.00 :   4998f:  jne    4ad0a <__GI_____strtof_l_internal+0x254a>
    0.00 :   49995:  xor    %ecx,%ecx
    0.00 :   49997:  cmp    $0x30,%bl
    0.00 :   4999a:  jne    4acfa <__GI_____strtof_l_internal+0x253a>
    0.00 :   499a0:  mov    $0x10,%r10d
    0.00 :   499a6:  jmp    49443 <__GI_____strtof_l_internal+0xc83>
    0.00 :   499ab:  movzbl (%r12),%edi
    0.00 :   499b0:  test   %dil,%dil
    0.00 :   499b3:  je     4ab1b <__GI_____strtof_l_internal+0x235b>
    0.00 :   499b9:  xor    %edx,%edx
    0.00 :   499bb:  jmp    499c3 <__GI_____strtof_l_internal+0x1203>
    0.00 :   499bd:  nopl   (%rax)
    0.00 :   499c0:  mov    %r13,%rdx
    0.00 :   499c3:  cmp    %dil,(%r14,%rdx,1)
    0.00 :   499c7:  jne    489dd <__GI_____strtof_l_internal+0x21d>
    0.00 :   499cd:  movzbl 0x1(%r12,%rdx,1),%edi
    0.00 :   499d3:  lea    0x1(%rdx),%r13
    0.00 :   499d7:  test   %dil,%dil
    0.00 :   499da:  jne    499c0 <__GI_____strtof_l_internal+0x1200>
    0.00 :   499dc:  add    %r14,%rdx
    0.00 :   499df:  jmp    48b47 <__GI_____strtof_l_internal+0x387>
    0.00 :   499e4:  mov    %ebx,%edx
    0.00 :   499e6:  jmp    48916 <__GI_____strtof_l_internal+0x156>
    0.00 :   499eb:  mov    0x8(%rsp),%ebx
    0.00 :   499ef:  movss  0x1986c9(%rip),%xmm0        # 1e20c0 <othermask+0x30>
    0.00 :   499f7:  test   %ebx,%ebx
    0.00 :   499f9:  jne    497e0 <__GI_____strtof_l_internal+0x1020>
    0.00 :   499ff:  pxor   %xmm0,%xmm0
    0.00 :   49a03:  jmp    497e0 <__GI_____strtof_l_internal+0x1020>
    0.00 :   49a08:  mov    0x8(%rsp),%r10d
    0.00 :   49a0d:  test   %r10d,%r10d
    0.00 :   49a10:  je     49a7d <__GI_____strtof_l_internal+0x12bd>
    0.00 :   49a12:  movss  0x1993be(%rip),%xmm1        # 1e2dd8 <default_rwlockattr+0x700>
    0.00 :   49a1a:  movss  0x1993aa(%rip),%xmm0        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   49a22:  jmp    497da <__GI_____strtof_l_internal+0x101a>
    0.00 :   49a27:  xor    %ecx,%ecx
    0.00 :   49a29:  jmp    48801 <__GI_____strtof_l_internal+0x41>
    0.00 :   49a2e:  mov    0x70(%r9),%rdx
    0.00 :   49a32:  mov    (%rdx,%rax,4),%r10d
    0.00 :   49a36:  sub    $0x57,%r10d
    0.00 :   49a3a:  jmp    4950f <__GI_____strtof_l_internal+0xd4f>
    0.00 :   49a3f:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   49a43:  je     4a887 <__GI_____strtof_l_internal+0x20c7>
    0.00 :   49a49:  movabs $0x7fffffffffffffd8,%rax
    0.00 :   49a53:  cmp    %rax,%rcx
    0.00 :   49a56:  ja     4adb5 <__GI_____strtof_l_internal+0x25f5>
    0.00 :   49a5c:  lea    0x27(%rcx),%rbx
    0.00 :   49a60:  xor    %r15d,%r15d
    0.00 :   49a63:  jmp    4973b <__GI_____strtof_l_internal+0xf7b>
    0.00 :   49a68:  movss  0x199360(%rip),%xmm1        # 1e2dd0 <default_rwlockattr+0x6f8>
    0.00 :   49a70:  movss  0x19935c(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   49a78:  jmp    497da <__GI_____strtof_l_internal+0x101a>
    0.00 :   49a7d:  movss  0x199347(%rip),%xmm0        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   49a85:  movaps %xmm0,%xmm1
    0.00 :   49a88:  jmp    497da <__GI_____strtof_l_internal+0x101a>
    0.00 :   49a8d:  movabs $0x1fffffffffffffda,%rax
    0.00 :   49a97:  cmp    %rax,%r11
    0.00 :   49a9a:  ja     4aecc <__GI_____strtof_l_internal+0x270c>
    0.00 :   49aa0:  lea    0x95(,%r11,4),%rbx
    0.00 :   49aa8:  mov    $0x1,%r15d
    0.00 :   49aae:  jmp    4973b <__GI_____strtof_l_internal+0xf7b>
    0.00 :   49ab3:  nopl   0x0(%rax,%rax,1)
    0.00 :   49ab8:  mov    %r14,%rax
    0.00 :   49abb:  mov    %rbp,%r14
    0.00 :   49abe:  mov    %rax,%rbp
    0.00 :   49ac1:  jmp    48f00 <__GI_____strtof_l_internal+0x740>
    0.00 :   49ac6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   49ad0:  cmp    $0xffffffd9,%ebx
    0.00 :   49ad3:  jge    49b58 <__GI_____strtof_l_internal+0x1398>
    0.00 :   49ad9:  mov    %r12,0x88(%rsp)
    0.00 :   49ae1:  add    $0x40,%ebx
    0.00 :   49ae4:  mov    $0xffffffffffffffff,%r12
    0.00 :   49aeb:  cmp    %rbp,%r11
    0.00 :   49aee:  je     491e0 <__GI_____strtof_l_internal+0xa20>
    0.00 :   49af4:  mov    0x18(%rsp),%rax
    0.00 :   49af9:  mov    %r11,%rdx
    0.00 :   49afc:  mov    0x48(%rsp),%rcx
    0.00 :   49b01:  mov    0x90(%rsp,%rax,8),%rax
    0.00 :   49b09:  mov    %rax,0x10(%rsp)
    0.00 :   49b0e:  div    %rbp
    0.00 :   49b11:  mov    %rax,%r12
    0.00 :   49b14:  mov    %rdx,%r11
    0.00 :   49b17:  mov    %r15,%rax
    0.00 :   49b1a:  mul    %r12
    0.00 :   49b1d:  jmp    49b2a <__GI_____strtof_l_internal+0x136a>
    0.00 :   49b1f:  nop
    0.00 :   49b20:  cmp    %r15,%rax
    0.00 :   49b23:  sbb    $0x0,%rdx
    0.00 :   49b27:  sub    %r15,%rax
    0.00 :   49b2a:  cmp    %r11,%rdx
    0.00 :   49b2d:  ja     49b43 <__GI_____strtof_l_internal+0x1383>
    0.00 :   49b2f:  jne    491e0 <__GI_____strtof_l_internal+0xa20>
    0.00 :   49b35:  cmp    %rax,0x90(%rsp,%rcx,8)
    0.00 :   49b3d:  jae    491e0 <__GI_____strtof_l_internal+0xa20>
    0.00 :   49b43:  sub    $0x1,%r12
    0.00 :   49b47:  add    %rbp,%r11
    0.00 :   49b4a:  jae    49b20 <__GI_____strtof_l_internal+0x1360>
    0.00 :   49b4c:  jmp    491e0 <__GI_____strtof_l_internal+0xa20>
    0.00 :   49b51:  nopl   0x0(%rax)
    0.00 :   49b58:  mov    $0x18,%ecx
    0.00 :   49b5d:  sub    %ebx,%ecx
    0.00 :   49b5f:  jne    49b79 <__GI_____strtof_l_internal+0x13b9>
    0.00 :   49b61:  mov    0x78(%rsp),%rax
    0.00 :   49b66:  mov    $0x3f,%r8d
    0.00 :   49b6c:  lea    0x88(%rsp),%r15
    0.00 :   49b74:  jmp    492c9 <__GI_____strtof_l_internal+0xb09>
    0.00 :   49b79:  lea    0x88(%rsp),%r15
    0.00 :   49b81:  mov    $0x1,%edx
    0.00 :   49b86:  mov    %r15,%rsi
    0.00 :   49b89:  mov    %r15,%rdi
    0.00 :   49b8c:  call   54d10 <__mpn_lshift>
    0.00 :   49b91:  lea    0x28(%rbx),%ecx
    0.00 :   49b94:  mov    %r12,%rax
    0.00 :   49b97:  add    $0x27,%ebx
    0.00 :   49b9a:  shr    %cl,%rax
    0.00 :   49b9d:  movslq %ebx,%r8
    0.00 :   49ba0:  or     %rax,0x88(%rsp)
    0.00 :   49ba8:  mov    0x78(%rsp),%rax
    0.00 :   49bad:  jmp    492c9 <__GI_____strtof_l_internal+0xb09>
    0.00 :   49bb2:  nopw   0x0(%rax,%rax,1)
    0.00 :   49bb8:  movq   $0x0,0x88(%rsp)
    0.00 :   49bc4:  sub    $0x40,%rax
    0.00 :   49bc8:  mov    %rax,0x78(%rsp)
    0.00 :   49bcd:  jmp    491d0 <__GI_____strtof_l_internal+0xa10>
    0.00 :   49bd2:  mov    %rax,%rdx
    0.00 :   49bd5:  neg    %rdx
    0.00 :   49bd8:  test   %r15d,%r15d
    0.00 :   49bdb:  cmovne %rdx,%rax
    0.00 :   49bdf:  mov    %rax,0x78(%rsp)
    0.00 :   49be4:  jmp    48c7b <__GI_____strtof_l_internal+0x4bb>
    0.00 :   49be9:  lea    0x78(%rsp),%r8
    0.00 :   49bee:  lea    0x80(%rsp),%rax
    0.00 :   49bf6:  mov    %rbp,%rdi
    0.00 :   49bf9:  mov    %r11d,%esi
    0.00 :   49bfc:  mov    %r8,0x48(%rsp)
    0.00 :   49c01:  lea    0x90(%rsp),%r14
    0.00 :   49c09:  sub    $0x8,%rsp
    0.00 :   49c0d:  mov    %rax,%rcx
    0.00 :   49c10:  mov    %rax,0x60(%rsp)
    0.00 :   49c15:  mov    %r14,%rdx
    0.00 :   49c18:  push   %r12
    0.00 :   49c1a:  mov    0x30(%rsp),%r9
    0.00 :   49c1f:  mov    %r11,0x10(%rsp)
    0.00 :   49c24:  call   48000 <str_to_mpn.constprop.0>
    0.00 :   49c29:  mov    0x88(%rsp),%rcx
    0.00 :   49c31:  pop    %rdi
    0.00 :   49c32:  mov    %rax,%rbp
    0.00 :   49c35:  pop    %r8
    0.00 :   49c37:  mov    0x80(%rsp),%r9
    0.00 :   49c3f:  test   %rcx,%rcx
    0.00 :   49c42:  mov    (%rsp),%r11
    0.00 :   49c46:  jle    49d94 <__GI_____strtof_l_internal+0x15d4>
    0.00 :   49c4c:  lea    0xe0(%rsp),%rax
    0.00 :   49c54:  mov    %rbp,0x28(%rsp)
    0.00 :   49c59:  mov    $0x1,%r10d
    0.00 :   49c5f:  mov    %r9,%rdx
    0.00 :   49c62:  mov    %rax,(%rsp)
    0.00 :   49c66:  lea    0x1830d3(%rip),%rbx        # 1ccd40 <_fpioconst_pow10>
    0.00 :   49c6d:  mov    %r10d,%r15d
    0.00 :   49c70:  mov    %r14,0x10(%rsp)
    0.00 :   49c75:  mov    %r14,0x30(%rsp)
    0.00 :   49c7a:  mov    %r13,%r14
    0.00 :   49c7d:  mov    %r12,%r13
    0.00 :   49c80:  mov    %rax,%r12
    0.00 :   49c83:  nopl   0x0(%rax,%rax,1)
    0.00 :   49c88:  movslq %r15d,%rax
    0.00 :   49c8b:  test   %rcx,%rax
    0.00 :   49c8e:  je     49d23 <__GI_____strtof_l_internal+0x1563>
    0.00 :   49c94:  mov    0x8(%rbx),%rdi
    0.00 :   49c98:  xor    %rcx,%rax
    0.00 :   49c9b:  mov    %r11,0x18(%rsp)
    0.00 :   49ca0:  mov    %rax,0x78(%rsp)
    0.00 :   49ca5:  mov    (%rbx),%rax
    0.00 :   49ca8:  lea    -0x1(%rdi),%rbp
    0.00 :   49cac:  lea    0x18320d(%rip),%rdi        # 1ccec0 <__tens>
    0.00 :   49cb3:  lea    0x8(%rdi,%rax,8),%rsi
    0.00 :   49cb8:  cmp    %rdx,%rbp
    0.00 :   49cbb:  jg     49d2f <__GI_____strtof_l_internal+0x156f>
    0.00 :   49cbd:  mov    %rsi,%rcx
    0.00 :   49cc0:  mov    0x10(%rsp),%rsi
    0.00 :   49cc5:  mov    %rbp,%r8
    0.00 :   49cc8:  mov    %r12,%rdi
    0.00 :   49ccb:  call   54f90 <__mpn_mul>
    0.00 :   49cd0:  mov    0x18(%rsp),%r11
    0.00 :   49cd5:  mov    0x80(%rsp),%rdx
    0.00 :   49cdd:  mov    0x78(%rsp),%rcx
    0.00 :   49ce2:  add    %rbp,%rdx
    0.00 :   49ce5:  mov    %rdx,0x80(%rsp)
    0.00 :   49ced:  test   %rax,%rax
    0.00 :   49cf0:  jne    49cfe <__GI_____strtof_l_internal+0x153e>
    0.00 :   49cf2:  sub    $0x1,%rdx
    0.00 :   49cf6:  mov    %rdx,0x80(%rsp)
    0.00 :   49cfe:  add    %r15d,%r15d
    0.00 :   49d01:  add    $0x18,%rbx
    0.00 :   49d05:  test   %rcx,%rcx
    0.00 :   49d08:  je     49d49 <__GI_____strtof_l_internal+0x1589>
    0.00 :   49d0a:  mov    %r12,%rax
    0.00 :   49d0d:  mov    0x10(%rsp),%r12
    0.00 :   49d12:  mov    %rax,0x10(%rsp)
    0.00 :   49d17:  movslq %r15d,%rax
    0.00 :   49d1a:  test   %rcx,%rax
    0.00 :   49d1d:  jne    49c94 <__GI_____strtof_l_internal+0x14d4>
    0.00 :   49d23:  add    %r15d,%r15d
    0.00 :   49d26:  add    $0x18,%rbx
    0.00 :   49d2a:  jmp    49c88 <__GI_____strtof_l_internal+0x14c8>
    0.00 :   49d2f:  mov    0x10(%rsp),%rcx
    0.00 :   49d34:  mov    %rdx,%r8
    0.00 :   49d37:  mov    %r12,%rdi
    0.00 :   49d3a:  mov    %rbp,%rdx
    0.00 :   49d3d:  call   54f90 <__mpn_mul>
    0.00 :   49d42:  mov    0x18(%rsp),%r11
    0.00 :   49d47:  jmp    49cd5 <__GI_____strtof_l_internal+0x1515>
    0.00 :   49d49:  mov    %r12,%rdi
    0.00 :   49d4c:  mov    0x28(%rsp),%rbp
    0.00 :   49d51:  mov    %r13,%r12
    0.00 :   49d54:  mov    %rdx,%r9
    0.00 :   49d57:  mov    %r14,%r13
    0.00 :   49d5a:  mov    0x30(%rsp),%r14
    0.00 :   49d5f:  cmp    (%rsp),%rdi
    0.00 :   49d63:  jne    49d94 <__GI_____strtof_l_internal+0x15d4>
    0.00 :   49d65:  mov    %rdi,%rsi
    0.00 :   49d68:  lea    0x0(,%rdx,8),%rdx
    0.00 :   49d70:  mov    %r14,%rdi
    0.00 :   49d73:  mov    %rcx,0x18(%rsp)
    0.00 :   49d78:  mov    %r11,0x10(%rsp)
    0.00 :   49d7d:  mov    %r9,(%rsp)
    0.00 :   49d81:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   49d86:  mov    0x18(%rsp),%rcx
    0.00 :   49d8b:  mov    0x10(%rsp),%r11
    0.00 :   49d90:  mov    (%rsp),%r9
    0.00 :   49d94:  lea    -0x1(%r9),%rdx
    0.00 :   49d98:  mov    %r9d,%r10d
    0.00 :   49d9b:  bsr    0x90(%rsp,%rdx,8),%rax
    0.00 :   49da4:  shl    $0x6,%r10d
    0.00 :   49da8:  xor    $0x3f,%rax
    0.00 :   49dac:  sub    %eax,%r10d
    0.00 :   49daf:  mov    %r10d,%ebx
    0.00 :   49db2:  cmp    $0x80,%r10d
    0.00 :   49db9:  jg     4a2fd <__GI_____strtof_l_internal+0x1b3d>
    0.00 :   49dbf:  cmp    $0x18,%r10d
    0.00 :   49dc3:  jg     4a77e <__GI_____strtof_l_internal+0x1fbe>
    0.00 :   49dc9:  cmp    %r11,%r13
    0.00 :   49dcc:  je     4a89d <__GI_____strtof_l_internal+0x20dd>
    0.00 :   49dd2:  lea    0x88(%rsp),%r15
    0.00 :   49dda:  lea    0x0(,%r9,8),%rdx
    0.00 :   49de2:  mov    %r14,%rsi
    0.00 :   49de5:  mov    %r11,0x10(%rsp)
    0.00 :   49dea:  mov    %r15,%rdi
    0.00 :   49ded:  mov    %rcx,0x18(%rsp)
    0.00 :   49df2:  mov    %r10d,(%rsp)
    0.00 :   49df6:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   49dfb:  mov    0x10(%rsp),%r11
    0.00 :   49e00:  cmp    %r11,%r13
    0.00 :   49e03:  jbe    4ae6f <__GI_____strtof_l_internal+0x26af>
    0.00 :   49e09:  mov    0x18(%rsp),%rcx
    0.00 :   49e0e:  lea    0x2d(%rcx),%rax
    0.00 :   49e12:  cmp    $0x2d,%rax
    0.00 :   49e16:  ja     4ae6f <__GI_____strtof_l_internal+0x26af>
    0.00 :   49e1c:  mov    (%rsp),%r10d
    0.00 :   49e20:  test   %r10d,%r10d
    0.00 :   49e23:  jle    4aba3 <__GI_____strtof_l_internal+0x23e3>
    0.00 :   49e29:  test   %rcx,%rcx
    0.00 :   49e2c:  jne    4adf3 <__GI_____strtof_l_internal+0x2633>
    0.00 :   49e32:  mov    $0x19,%eax
    0.00 :   49e37:  movslq %ebx,%rcx
    0.00 :   49e3a:  xor    %esi,%esi
    0.00 :   49e3c:  mov    %rcx,0x10(%rsp)
    0.00 :   49e41:  sub    %ebx,%eax
    0.00 :   49e43:  jmp    48e5f <__GI_____strtof_l_internal+0x69f>
    0.00 :   49e48:  mov    %r11,0x88(%rsp)
    0.00 :   49e50:  mov    0x8(%rsp),%edx
    0.00 :   49e54:  xor    %r9d,%r9d
    0.00 :   49e57:  xor    %r8d,%r8d
    0.00 :   49e5a:  xor    %ecx,%ecx
    0.00 :   49e5c:  lea    0x88(%rsp),%rdi
    0.00 :   49e64:  call   482a0 <round_and_return>
    0.00 :   49e69:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49e6e:  mov    %rcx,%rax
    0.00 :   49e71:  shr    $0x3d,%rax
    0.00 :   49e75:  jne    4ae8e <__GI_____strtof_l_internal+0x26ce>
    0.00 :   49e7b:  movabs $0x8000000000000000,%rdx
    0.00 :   49e85:  mov    0x78(%rsp),%rax
    0.00 :   49e8a:  add    %rax,%rdx
    0.00 :   49e8d:  shr    $0x2,%rdx
    0.00 :   49e91:  cmp    %rcx,%rdx
    0.00 :   49e94:  jb     4ae50 <__GI_____strtof_l_internal+0x2690>
    0.00 :   49e9a:  lea    0x0(,%rcx,4),%rsi
    0.00 :   49ea2:  jmp    48d6f <__GI_____strtof_l_internal+0x5af>
    0.00 :   49ea7:  movabs $0x8000000000000000,%rdx
    0.00 :   49eb1:  sub    %rbx,%rdx
    0.00 :   49eb4:  sar    $0x2,%rdx
    0.00 :   49eb8:  jmp    4956f <__GI_____strtof_l_internal+0xdaf>
    0.00 :   49ebd:  mov    0xe0(%rsp),%rcx
    0.00 :   49ec5:  mov    0xe8(%rsp),%rsi
    0.00 :   49ecd:  mov    0x90(%rsp),%r13
    0.00 :   49ed5:  mov    0x98(%rsp),%rbp
    0.00 :   49edd:  cmp    $0x1,%rdx
    0.00 :   49ee1:  jle    4a6e8 <__GI_____strtof_l_internal+0x1f28>
    0.00 :   49ee7:  mov    %rcx,%r11
    0.00 :   49eea:  mov    0x10(%rsp),%rdi
    0.00 :   49eef:  xor    %r8d,%r8d
    0.00 :   49ef2:  xor    %r9d,%r9d
    0.00 :   49ef5:  neg    %r11
    0.00 :   49ef8:  xor    %r10d,%r10d
    0.00 :   49efb:  mov    $0x40,%r14d
    0.00 :   49f01:  mov    %r13,%rax
    0.00 :   49f04:  nopl   0x0(%rax)
    0.00 :   49f08:  cmp    %rsi,%rbp
    0.00 :   49f0b:  jne    49fa0 <__GI_____strtof_l_internal+0x17e0>
    0.00 :   49f11:  add    %rbp,%rax
    0.00 :   49f14:  mov    %rax,%rbp
    0.00 :   49f17:  jae    4a07a <__GI_____strtof_l_internal+0x18ba>
    0.00 :   49f1d:  sub    %rcx,%rbp
    0.00 :   49f20:  xor    %r13d,%r13d
    0.00 :   49f23:  mov    $0xffffffffffffffff,%r12
    0.00 :   49f2a:  add    %rcx,%r13
    0.00 :   49f2d:  adc    $0x0,%rbp
    0.00 :   49f31:  test   %ebx,%ebx
    0.00 :   49f33:  jne    4a013 <__GI_____strtof_l_internal+0x1853>
    0.00 :   49f39:  test   %r8b,%r8b
    0.00 :   49f3c:  je     4a6de <__GI_____strtof_l_internal+0x1f1e>
    0.00 :   49f42:  mov    %rdi,0x78(%rsp)
    0.00 :   49f47:  mov    $0x27,%r14d
    0.00 :   49f4d:  mov    $0xffffff,%eax
    0.00 :   49f52:  mov    $0xffffffffffffffff,%r12
    0.00 :   49f59:  mov    %rax,0x88(%rsp)
    0.00 :   49f61:  lea    0x88(%rsp),%r15
    0.00 :   49f69:  or     %rbp,%r13
    0.00 :   49f6c:  test   %r13,%r13
    0.00 :   49f6f:  mov    0x8(%rsp),%edx
    0.00 :   49f73:  lea    -0x1(%rdi),%rsi
    0.00 :   49f77:  mov    %r14,%r8
    0.00 :   49f7a:  setne  %r9b
    0.00 :   49f7e:  or     0x57(%rsp),%r9b
    0.00 :   49f83:  mov    %r12,%rcx
    0.00 :   49f86:  mov    %r15,%rdi
    0.00 :   49f89:  and    $0x1,%r9d
    0.00 :   49f8d:  call   482a0 <round_and_return>
    0.00 :   49f92:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   49f97:  nopw   0x0(%rax,%rax,1)
    0.00 :   49fa0:  mov    %rbp,%rdx
    0.00 :   49fa3:  div    %rsi
    0.00 :   49fa6:  mov    %rax,%r12
    0.00 :   49fa9:  mov    %rdx,%rbp
    0.00 :   49fac:  mov    %rcx,%rax
    0.00 :   49faf:  mul    %r12
    0.00 :   49fb2:  mov    %rdx,%r15
    0.00 :   49fb5:  mov    %rax,%r13
    0.00 :   49fb8:  nopl   0x0(%rax,%rax,1)
    0.00 :   49fc0:  cmp    %rbp,%r15
    0.00 :   49fc3:  ja     49fcc <__GI_____strtof_l_internal+0x180c>
    0.00 :   49fc5:  jne    49fdc <__GI_____strtof_l_internal+0x181c>
    0.00 :   49fc7:  test   %r13,%r13
    0.00 :   49fca:  je     49fdc <__GI_____strtof_l_internal+0x181c>
    0.00 :   49fcc:  sub    $0x1,%r12
    0.00 :   49fd0:  sub    %rcx,%r13
    0.00 :   49fd3:  sbb    $0x0,%r15
    0.00 :   49fd7:  add    %rsi,%rbp
    0.00 :   49fda:  jae    49fc0 <__GI_____strtof_l_internal+0x1800>
    0.00 :   49fdc:  mov    %r10,%rax
    0.00 :   49fdf:  sub    %r13,%rax
    0.00 :   49fe2:  sbb    %r15,%rbp
    0.00 :   49fe5:  test   %ebx,%ebx
    0.00 :   49fe7:  jne    4a010 <__GI_____strtof_l_internal+0x1850>
    0.00 :   49fe9:  test   %r12,%r12
    0.00 :   49fec:  jne    4a2ae <__GI_____strtof_l_internal+0x1aee>
    0.00 :   49ff2:  movq   $0x0,0x68(%rsp)
    0.00 :   49ffb:  sub    $0x40,%rdi
    0.00 :   49fff:  mov    $0x1,%r8d
    0.00 :   4a005:  mov    $0x1,%r9d
    0.00 :   4a00b:  jmp    49f08 <__GI_____strtof_l_internal+0x1748>
    0.00 :   4a010:  mov    %rax,%r13
    0.00 :   4a013:  test   %r8b,%r8b
    0.00 :   4a016:  je     4a2a4 <__GI_____strtof_l_internal+0x1ae4>
    0.00 :   4a01c:  mov    %rdi,0x78(%rsp)
    0.00 :   4a021:  test   %r9b,%r9b
    0.00 :   4a024:  je     4a033 <__GI_____strtof_l_internal+0x1873>
    0.00 :   4a026:  mov    0x68(%rsp),%rax
    0.00 :   4a02b:  mov    %rax,0x88(%rsp)
    0.00 :   4a033:  lea    0x27(%rbx),%r14d
    0.00 :   4a037:  mov    $0x18,%ecx
    0.00 :   4a03c:  lea    0x88(%rsp),%r15
    0.00 :   4a044:  movslq %r14d,%r14
    0.00 :   4a047:  sub    %ebx,%ecx
    0.00 :   4a049:  je     49f69 <__GI_____strtof_l_internal+0x17a9>
    0.00 :   4a04f:  mov    %r15,%rdi
    0.00 :   4a052:  mov    $0x1,%edx
    0.00 :   4a057:  mov    %r15,%rsi
    0.00 :   4a05a:  call   54d10 <__mpn_lshift>
    0.00 :   4a05f:  lea    0x28(%rbx),%ecx
    0.00 :   4a062:  mov    %r12,%rax
    0.00 :   4a065:  mov    0x78(%rsp),%rdi
    0.00 :   4a06a:  shr    %cl,%rax
    0.00 :   4a06d:  or     %rax,0x88(%rsp)
    0.00 :   4a075:  jmp    49f69 <__GI_____strtof_l_internal+0x17a9>
    0.00 :   4a07a:  cmp    $0x1,%rcx
    0.00 :   4a07e:  mov    %rcx,%r15
    0.00 :   4a081:  mov    %r11,%r13
    0.00 :   4a084:  mov    $0xffffffffffffffff,%r12
    0.00 :   4a08b:  adc    $0xffffffffffffffff,%r15
    0.00 :   4a08f:  jmp    49fc0 <__GI_____strtof_l_internal+0x1800>
    0.00 :   4a094:  mov    0x90(%rsp),%rax
    6.60 :   4a09c:  mov    0xe0(%rsp),%rsi
    0.00 :   4a0a4:  cmp    %rsi,%rax
    1.36 :   4a0a7:  setb   %dil
    1.37 :   4a0ab:  cmp    $0x1,%rdx
    0.00 :   4a0af:  sete   %dl
    0.00 :   4a0b2:  and    %dl,%dil
    1.35 :   4a0b5:  je     4acdb <__GI_____strtof_l_internal+0x251b>
    0.00 :   4a0bb:  mov    0x10(%rsp),%r10
    0.00 :   4a0c0:  mov    0x60(%rsp),%r12
    0.00 :   4a0c5:  xor    %r8d,%r8d
    0.00 :   4a0c8:  xor    %r9d,%r9d
    0.00 :   4a0cb:  xor    %r11d,%r11d
    0.00 :   4a0ce:  mov    $0x40,%ecx
    0.00 :   4a0d3:  mov    %rax,%rbp
    0.00 :   4a0d6:  cs nopw 0x0(%rax,%rax,1)
    1.37 :   4a0e0:  mov    %rbp,%rdx
    0.00 :   4a0e3:  mov    %r11,%rax
    0.00 :   4a0e6:  div    %rsi
   17.57 :   4a0e9:  mov    %rdx,%rbp
    0.00 :   4a0ec:  test   %ebx,%ebx
    0.00 :   4a0ee:  je     4a168 <__GI_____strtof_l_internal+0x19a8>
    0.00 :   4a0f0:  mov    %r12,0x60(%rsp)
    0.00 :   4a0f5:  mov    %rax,%r12
    0.00 :   4a0f8:  test   %r8b,%r8b
    0.00 :   4a0fb:  je     4a281 <__GI_____strtof_l_internal+0x1ac1>
    0.00 :   4a101:  mov    %r10,0x78(%rsp)
    0.00 :   4a106:  test   %r9b,%r9b
    0.00 :   4a109:  je     4a118 <__GI_____strtof_l_internal+0x1958>
    0.00 :   4a10b:  mov    0x60(%rsp),%rax
    0.00 :   4a110:  mov    %rax,0x88(%rsp)
    0.00 :   4a118:  mov    $0x18,%r13d
    0.00 :   4a11e:  lea    0x88(%rsp),%r15
    0.00 :   4a126:  sub    %ebx,%r13d
    0.00 :   4a129:  jne    4a20f <__GI_____strtof_l_internal+0x1a4f>
    0.00 :   4a12f:  test   %rbp,%rbp
    0.00 :   4a132:  mov    $0x3f,%r8d
    0.00 :   4a138:  mov    0x8(%rsp),%edx
    0.00 :   4a13c:  mov    %r12,%rcx
    0.00 :   4a13f:  setne  %r9b
    0.00 :   4a143:  sub    %r13d,%r8d
    0.00 :   4a146:  or     0x57(%rsp),%r9b
    0.00 :   4a14b:  mov    %r15,%rdi
    0.00 :   4a14e:  lea    -0x1(%r10),%rsi
    0.00 :   4a152:  and    $0x1,%r9d
    0.00 :   4a156:  movslq %r8d,%r8
    0.00 :   4a159:  call   482a0 <round_and_return>
    0.00 :   4a15e:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   4a163:  nopl   0x0(%rax,%rax,1)
    0.00 :   4a168:  test   %rax,%rax
    0.00 :   4a16b:  je     4a1ac <__GI_____strtof_l_internal+0x19ec>
    0.00 :   4a16d:  bsr    %rax,%r8
    1.37 :   4a171:  mov    %ecx,%ebx
    0.00 :   4a173:  xor    $0x3f,%r8
    0.00 :   4a177:  movslq %r8d,%r9
    1.35 :   4a17a:  sub    %r8d,%ebx
    0.00 :   4a17d:  mov    %r8d,%r13d
    0.00 :   4a180:  sub    %r9,%r10
    0.00 :   4a183:  cmp    $0x18,%ebx
    0.00 :   4a186:  jle    4a1b0 <__GI_____strtof_l_internal+0x19f0>
    0.00 :   4a188:  add    $0x18,%r13d
    0.00 :   4a18c:  mov    %rax,%r12
    0.00 :   4a18f:  mov    %r10,0x78(%rsp)
    0.00 :   4a194:  lea    0x88(%rsp),%r15
    0.00 :   4a19c:  sub    %r13d,%ecx
    2.64 :   4a19f:  shr    %cl,%rax
    0.00 :   4a1a2:  mov    %rax,0x88(%rsp)
    0.00 :   4a1aa:  jmp    4a12f <__GI_____strtof_l_internal+0x196f>
    0.00 :   4a1ac:  sub    $0x40,%r10
    0.00 :   4a1b0:  mov    %edi,%r8d
    0.00 :   4a1b3:  mov    %edi,%r9d
    0.00 :   4a1b6:  mov    %rax,%r12
    0.00 :   4a1b9:  jmp    4a0e0 <__GI_____strtof_l_internal+0x1920>
    0.00 :   4a1be:  mov    (%rsp),%rdi
    0.00 :   4a1c2:  mov    %eax,%ecx
    0.00 :   4a1c4:  mov    %r13,%rdx
    0.00 :   4a1c7:  mov    %rdi,%rsi
    0.00 :   4a1ca:  call   54d10 <__mpn_lshift>
    0.00 :   4a1cf:  mov    %r15d,%ecx
    0.00 :   4a1d2:  mov    %r14,%rsi
    0.00 :   4a1d5:  mov    %r14,%rdi
    0.00 :   4a1d8:  mov    0x80(%rsp),%rdx
    0.00 :   4a1e0:  call   54d10 <__mpn_lshift>
    0.00 :   4a1e5:  test   %rax,%rax
    0.00 :   4a1e8:  je     48fd9 <__GI_____strtof_l_internal+0x819>
    0.00 :   4a1ee:  mov    0x80(%rsp),%rcx
    0.00 :   4a1f6:  lea    0x1(%rcx),%rdx
    0.00 :   4a1fa:  mov    %rax,0x90(%rsp,%rcx,8)
    0.00 :   4a202:  mov    %rdx,0x80(%rsp)
    0.00 :   4a20a:  jmp    48fe1 <__GI_____strtof_l_internal+0x821>
    0.00 :   4a20f:  mov    %r13d,%ecx
    0.00 :   4a212:  mov    $0x1,%edx
    0.00 :   4a217:  mov    %r15,%rsi
    0.00 :   4a21a:  mov    %r15,%rdi
    0.00 :   4a21d:  call   54d10 <__mpn_lshift>
    0.00 :   4a222:  lea    0x28(%rbx),%ecx
    0.00 :   4a225:  mov    %r12,%rax
    0.00 :   4a228:  mov    0x78(%rsp),%r10
    0.00 :   4a22d:  shr    %cl,%rax
    0.00 :   4a230:  or     %rax,0x88(%rsp)
    0.00 :   4a238:  jmp    4a12f <__GI_____strtof_l_internal+0x196f>
    0.00 :   4a23d:  mov    0x68(%r9),%rbx
    0.00 :   4a241:  jmp    4a26a <__GI_____strtof_l_internal+0x1aaa>
    0.00 :   4a243:  nopl   0x0(%rax,%rax,1)
    0.00 :   4a248:  add    $0x4,%rdi
    0.00 :   4a24c:  sub    $0x1,%r11
    0.00 :   4a250:  sub    $0x1,%r13
    0.00 :   4a254:  mov    %rdi,%rdx
    0.00 :   4a257:  setne  %al
    0.00 :   4a25a:  shr    $0x3f,%rdx
    0.00 :   4a25e:  and    %al,%dl
    0.00 :   4a260:  je     49400 <__GI_____strtof_l_internal+0xc40>
    0.00 :   4a266:  sub    $0x1,%r14
    0.00 :   4a26a:  movsbq (%r14),%r15
    0.00 :   4a26e:  testb  $0x10,0x1(%rbx,%r15,2)
    0.00 :   4a274:  je     4a266 <__GI_____strtof_l_internal+0x1aa6>
    0.00 :   4a276:  cmp    $0x30,%r15b
    0.00 :   4a27a:  je     4a248 <__GI_____strtof_l_internal+0x1a88>
    0.00 :   4a27c:  jmp    4996c <__GI_____strtof_l_internal+0x11ac>
    0.00 :   4a281:  mov    0x10(%rsp),%r10
    0.00 :   4a286:  jmp    4a106 <__GI_____strtof_l_internal+0x1946>
    0.00 :   4a28b:  cmp    0x10(%rsp),%rbp
    0.00 :   4a290:  je     496a4 <__GI_____strtof_l_internal+0xee4>
    0.00 :   4a296:  cmp    $0x70,%dl
    0.00 :   4a299:  je     489b8 <__GI_____strtof_l_internal+0x1f8>
    0.00 :   4a29f:  jmp    496a4 <__GI_____strtof_l_internal+0xee4>
    0.00 :   4a2a4:  mov    0x10(%rsp),%rdi
    0.00 :   4a2a9:  jmp    4a021 <__GI_____strtof_l_internal+0x1861>
    0.00 :   4a2ae:  bsr    %r12,%r8
    0.00 :   4a2b2:  mov    %r14d,%ebx
    0.00 :   4a2b5:  xor    $0x3f,%r8
    0.00 :   4a2b9:  movslq %r8d,%r9
    0.00 :   4a2bc:  sub    %r8d,%ebx
    0.00 :   4a2bf:  mov    %r8d,%edx
    0.00 :   4a2c2:  sub    %r9,%rdi
    0.00 :   4a2c5:  cmp    $0x18,%ebx
    0.00 :   4a2c8:  jle    4aeeb <__GI_____strtof_l_internal+0x272b>
    0.00 :   4a2ce:  add    $0x18,%edx
    0.00 :   4a2d1:  mov    %r14d,%ecx
    0.00 :   4a2d4:  mov    $0x3f,%r14d
    0.00 :   4a2da:  mov    %rax,%r13
    0.00 :   4a2dd:  sub    %edx,%ecx
    0.00 :   4a2df:  mov    %r12,%rax
    0.00 :   4a2e2:  sub    %edx,%r14d
    0.00 :   4a2e5:  mov    %rdi,0x78(%rsp)
    0.00 :   4a2ea:  shr    %cl,%rax
    0.00 :   4a2ed:  movslq %r14d,%r14
    0.00 :   4a2f0:  jmp    49f59 <__GI_____strtof_l_internal+0x1799>
    0.00 :   4a2f5:  xor    %r9d,%r9d
    0.00 :   4a2f8:  jmp    49649 <__GI_____strtof_l_internal+0xe89>
    0.00 :   4a2fd:  mov    0x1cfb0c(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   4a304:  movl   $0x22,%fs:(%rax)
    0.00 :   4a30b:  mov    0x8(%rsp),%esi
    0.00 :   4a30f:  test   %esi,%esi
    0.00 :   4a311:  jne    4a872 <__GI_____strtof_l_internal+0x20b2>
    0.00 :   4a317:  movss  0x198aad(%rip),%xmm0        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   4a31f:  movaps %xmm0,%xmm1
    0.00 :   4a322:  mulss  %xmm1,%xmm0
    0.00 :   4a326:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   4a32b:  mov    0x10(%rsp),%rdi
    0.00 :   4a330:  mov    %r14,%rsi
    0.00 :   4a333:  mov    %r12,%rdx
    0.00 :   4a336:  mov    %r9,0x38(%rsp)
    0.00 :   4a33b:  mov    %r8,0x30(%rsp)
    0.00 :   4a340:  mov    %r11,0x28(%rsp)
    0.00 :   4a345:  mov    %r10d,0x18(%rsp)
    0.00 :   4a34a:  call   59bc0 <__correctly_grouped_prefixmb>
    0.00 :   4a34f:  mov    0x18(%rsp),%r10d
    0.00 :   4a354:  mov    0x28(%rsp),%r11
    0.00 :   4a359:  cmp    %rax,%r14
    0.00 :   4a35c:  mov    0x30(%rsp),%r8
    0.00 :   4a361:  mov    0x38(%rsp),%r9
    0.00 :   4a366:  mov    %rax,%rsi
    0.00 :   4a369:  je     4a993 <__GI_____strtof_l_internal+0x21d3>
    0.00 :   4a36f:  cmp    0x10(%rsp),%rax
    0.00 :   4a374:  je     488ce <__GI_____strtof_l_internal+0x10e>
    0.00 :   4a37a:  cmp    %rbp,%rax
    0.00 :   4a37d:  jb     4a968 <__GI_____strtof_l_internal+0x21a8>
    0.00 :   4a383:  jbe    4a968 <__GI_____strtof_l_internal+0x21a8>
    0.00 :   4a389:  mov    %rsi,%rdx
    0.00 :   4a38c:  mov    %rbp,%rax
    0.00 :   4a38f:  sub    %rbp,%rdx
    0.00 :   4a392:  lea    -0x1(%rdx),%rcx
    0.00 :   4a396:  cmp    $0xe,%rcx
    0.00 :   4a39a:  jbe    4acce <__GI_____strtof_l_internal+0x250e>
    0.00 :   4a3a0:  mov    %rdx,%rcx
    0.00 :   4a3a3:  pxor   %xmm0,%xmm0
    0.00 :   4a3a7:  pxor   %xmm5,%xmm5
    0.00 :   4a3ab:  movdqa 0x197ddc(%rip),%xmm8        # 1e2190 <othermask+0x100>
    0.00 :   4a3b4:  and    $0xfffffffffffffff0,%rcx
    0.00 :   4a3b8:  movdqa 0x197de0(%rip),%xmm7        # 1e21a0 <othermask+0x110>
    0.00 :   4a3c0:  pxor   %xmm4,%xmm4
    0.00 :   4a3c4:  pxor   %xmm3,%xmm3
    0.00 :   4a3c8:  movdqa 0x197de0(%rip),%xmm6        # 1e21b0 <othermask+0x120>
    0.00 :   4a3d0:  add    %rbp,%rcx
    0.00 :   4a3d3:  movdqu (%rax),%xmm1
    0.00 :   4a3d7:  add    $0x10,%rax
    0.00 :   4a3db:  paddb  %xmm8,%xmm1
    0.00 :   4a3e0:  psubusb %xmm7,%xmm1
    0.00 :   4a3e4:  pcmpeqb %xmm5,%xmm1
    0.00 :   4a3e8:  pand   %xmm6,%xmm1
    0.00 :   4a3ec:  movdqa %xmm1,%xmm9
    0.00 :   4a3f1:  punpckhbw %xmm5,%xmm1
    0.00 :   4a3f5:  punpcklbw %xmm5,%xmm9
    0.00 :   4a3fa:  movdqa %xmm1,%xmm10
    0.00 :   4a3ff:  punpckhwd %xmm4,%xmm1
    0.00 :   4a403:  movdqa %xmm9,%xmm2
    0.00 :   4a408:  punpckhwd %xmm4,%xmm9
    0.00 :   4a40d:  punpcklwd %xmm4,%xmm10
    0.00 :   4a412:  punpcklwd %xmm4,%xmm2
    0.00 :   4a416:  movdqa %xmm2,%xmm11
    0.00 :   4a41b:  punpckldq %xmm3,%xmm2
    0.00 :   4a41f:  punpckhdq %xmm3,%xmm11
    0.00 :   4a424:  paddq  %xmm11,%xmm2
    0.00 :   4a429:  movdqa %xmm9,%xmm11
    0.00 :   4a42e:  punpckldq %xmm3,%xmm9
    0.00 :   4a433:  punpckhdq %xmm3,%xmm11
    0.00 :   4a438:  paddq  %xmm11,%xmm9
    0.00 :   4a43d:  movdqa %xmm10,%xmm11
    0.00 :   4a442:  paddq  %xmm9,%xmm2
    0.00 :   4a447:  movdqa %xmm10,%xmm9
    0.00 :   4a44c:  punpckhdq %xmm3,%xmm11
    0.00 :   4a451:  movdqa %xmm1,%xmm10
    0.00 :   4a456:  punpckldq %xmm3,%xmm9
    0.00 :   4a45b:  punpckhdq %xmm3,%xmm1
    0.00 :   4a45f:  paddq  %xmm11,%xmm9
    0.00 :   4a464:  punpckldq %xmm3,%xmm10
    0.00 :   4a469:  paddq  %xmm1,%xmm0
    0.00 :   4a46d:  paddq  %xmm10,%xmm9
    0.00 :   4a472:  paddq  %xmm9,%xmm2
    0.00 :   4a477:  paddq  %xmm2,%xmm0
    0.00 :   4a47b:  cmp    %rax,%rcx
    0.00 :   4a47e:  jne    4a3d3 <__GI_____strtof_l_internal+0x1c13>
    0.00 :   4a484:  movdqa %xmm0,%xmm1
    0.00 :   4a488:  mov    %rdx,%rcx
    0.00 :   4a48b:  psrldq $0x8,%xmm1
    0.00 :   4a490:  and    $0xfffffffffffffff0,%rcx
    0.00 :   4a494:  paddq  %xmm1,%xmm0
    0.00 :   4a498:  lea    0x0(%rbp,%rcx,1),%rax
    0.00 :   4a49d:  movq   %xmm0,%r13
    0.00 :   4a4a2:  cmp    %rdx,%rcx
    0.00 :   4a4a5:  je     4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a4ab:  movzbl (%rax),%edi
    0.00 :   4a4ae:  lea    -0x30(%rdi),%edx
    0.00 :   4a4b1:  cmp    $0xa,%dl
    0.00 :   4a4b4:  lea    0x1(%rax),%rdx
    0.00 :   4a4b8:  adc    $0x0,%r13
    0.00 :   4a4bc:  cmp    %rdx,%rsi
    0.00 :   4a4bf:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a4c5:  movzbl 0x1(%rax),%ecx
    0.00 :   4a4c9:  lea    -0x30(%rcx),%edx
    0.00 :   4a4cc:  cmp    $0xa,%dl
    0.00 :   4a4cf:  lea    0x2(%rax),%rdx
    0.00 :   4a4d3:  adc    $0x0,%r13
    0.00 :   4a4d7:  cmp    %rdx,%rsi
    0.00 :   4a4da:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a4e0:  movzbl 0x2(%rax),%edi
    0.00 :   4a4e4:  lea    -0x30(%rdi),%edx
    0.00 :   4a4e7:  cmp    $0xa,%dl
    0.00 :   4a4ea:  lea    0x3(%rax),%rdx
    0.00 :   4a4ee:  adc    $0x0,%r13
    0.00 :   4a4f2:  cmp    %rdx,%rsi
    0.00 :   4a4f5:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a4fb:  movzbl 0x3(%rax),%ecx
    0.00 :   4a4ff:  lea    -0x30(%rcx),%edx
    0.00 :   4a502:  cmp    $0xa,%dl
    0.00 :   4a505:  lea    0x4(%rax),%rdx
    0.00 :   4a509:  adc    $0x0,%r13
    0.00 :   4a50d:  cmp    %rdx,%rsi
    0.00 :   4a510:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a516:  movzbl 0x4(%rax),%edi
    0.00 :   4a51a:  lea    -0x30(%rdi),%edx
    0.00 :   4a51d:  cmp    $0xa,%dl
    0.00 :   4a520:  lea    0x5(%rax),%rdx
    0.00 :   4a524:  adc    $0x0,%r13
    0.00 :   4a528:  cmp    %rdx,%rsi
    0.00 :   4a52b:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a531:  movzbl 0x5(%rax),%ecx
    0.00 :   4a535:  lea    -0x30(%rcx),%edx
    0.00 :   4a538:  cmp    $0xa,%dl
    0.00 :   4a53b:  lea    0x6(%rax),%rdx
    0.00 :   4a53f:  adc    $0x0,%r13
    0.00 :   4a543:  cmp    %rdx,%rsi
    0.00 :   4a546:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a54c:  movzbl 0x6(%rax),%edi
    0.00 :   4a550:  lea    -0x30(%rdi),%edx
    0.00 :   4a553:  cmp    $0xa,%dl
    0.00 :   4a556:  lea    0x7(%rax),%rdx
    0.00 :   4a55a:  adc    $0x0,%r13
    0.00 :   4a55e:  cmp    %rdx,%rsi
    0.00 :   4a561:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a567:  movzbl 0x7(%rax),%ecx
    0.00 :   4a56b:  lea    -0x30(%rcx),%edx
    0.00 :   4a56e:  cmp    $0xa,%dl
    0.00 :   4a571:  lea    0x8(%rax),%rdx
    0.00 :   4a575:  adc    $0x0,%r13
    0.00 :   4a579:  cmp    %rdx,%rsi
    0.00 :   4a57c:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a582:  movzbl 0x8(%rax),%edi
    0.00 :   4a586:  lea    -0x30(%rdi),%edx
    0.00 :   4a589:  cmp    $0xa,%dl
    0.00 :   4a58c:  lea    0x9(%rax),%rdx
    0.00 :   4a590:  adc    $0x0,%r13
    0.00 :   4a594:  cmp    %rdx,%rsi
    0.00 :   4a597:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a59d:  movzbl 0x9(%rax),%ecx
    0.00 :   4a5a1:  lea    -0x30(%rcx),%edx
    0.00 :   4a5a4:  cmp    $0xa,%dl
    0.00 :   4a5a7:  lea    0xa(%rax),%rdx
    0.00 :   4a5ab:  adc    $0x0,%r13
    0.00 :   4a5af:  cmp    %rdx,%rsi
    0.00 :   4a5b2:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a5b4:  movzbl 0xa(%rax),%edi
    0.00 :   4a5b8:  lea    -0x30(%rdi),%edx
    0.00 :   4a5bb:  cmp    $0xa,%dl
    0.00 :   4a5be:  lea    0xb(%rax),%rdx
    0.00 :   4a5c2:  adc    $0x0,%r13
    0.00 :   4a5c6:  cmp    %rdx,%rsi
    0.00 :   4a5c9:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a5cb:  movzbl 0xb(%rax),%ecx
    0.00 :   4a5cf:  lea    -0x30(%rcx),%edx
    0.00 :   4a5d2:  cmp    $0xa,%dl
    0.00 :   4a5d5:  lea    0xc(%rax),%rdx
    0.00 :   4a5d9:  adc    $0x0,%r13
    0.00 :   4a5dd:  cmp    %rdx,%rsi
    0.00 :   4a5e0:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a5e2:  movzbl 0xc(%rax),%edi
    0.00 :   4a5e6:  lea    -0x30(%rdi),%edx
    0.00 :   4a5e9:  cmp    $0xa,%dl
    0.00 :   4a5ec:  lea    0xd(%rax),%rdx
    0.00 :   4a5f0:  adc    $0x0,%r13
    0.00 :   4a5f4:  cmp    %rdx,%rsi
    0.00 :   4a5f7:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a5f9:  movzbl 0xd(%rax),%ecx
    0.00 :   4a5fd:  lea    -0x30(%rcx),%edx
    0.00 :   4a600:  cmp    $0xa,%dl
    0.00 :   4a603:  lea    0xe(%rax),%rdx
    0.00 :   4a607:  adc    $0x0,%r13
    0.00 :   4a60b:  cmp    %rdx,%rsi
    0.00 :   4a60e:  jbe    4a61d <__GI_____strtof_l_internal+0x1e5d>
    0.00 :   4a610:  movzbl 0xe(%rax),%eax
    0.00 :   4a614:  sub    $0x30,%eax
    0.00 :   4a617:  cmp    $0xa,%al
    0.00 :   4a619:  adc    $0x0,%r13
    0.00 :   4a61d:  mov    %r13,%r11
    0.00 :   4a620:  xor    %ecx,%ecx
    0.00 :   4a622:  jmp    49408 <__GI_____strtof_l_internal+0xc48>
    0.00 :   4a627:  mov    (%rsp),%rdi
    0.00 :   4a62b:  lea    0x0(,%r13,8),%rdx
    0.00 :   4a633:  mov    %r14,%rsi
    0.00 :   4a636:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   4a63b:  jmp    48f92 <__GI_____strtof_l_internal+0x7d2>
    0.00 :   4a640:  jne    4ae31 <__GI_____strtof_l_internal+0x2671>
    0.00 :   4a646:  test   %r13d,%r13d
    0.00 :   4a649:  jle    4abe3 <__GI_____strtof_l_internal+0x2423>
    0.00 :   4a64f:  lea    -0x1(%r13),%eax
    0.00 :   4a653:  movslq %r13d,%rdx
    0.00 :   4a656:  mov    %r9,0x10(%rsp)
    0.00 :   4a65b:  mov    %eax,0x20(%rsp)
    0.00 :   4a65f:  cltq
    0.00 :   4a661:  lea    0x0(,%rdx,8),%r10
    0.00 :   4a669:  neg    %rax
    0.00 :   4a66c:  shl    $0x3,%rax
    0.00 :   4a670:  lea    -0x8(%rax,%rdx,8),%rsi
    0.00 :   4a675:  add    %r10,%rax
    0.00 :   4a678:  mov    %r10,%rdx
    0.00 :   4a67b:  add    %r14,%rsi
    0.00 :   4a67e:  lea    (%r14,%rax,1),%rdi
    0.00 :   4a682:  call   28430 <*ABS*+0xa95a0@plt>
    0.00 :   4a687:  mov    0x10(%rsp),%r9
    0.00 :   4a68c:  movq   $0x0,0x90(%rsp)
    0.00 :   4a698:  mov    0x90(%rsp,%r13,8),%r11
    0.00 :   4a6a0:  movq   $0x0,0xe0(%rsp,%r13,8)
    0.00 :   4a6ac:  jmp    4918e <__GI_____strtof_l_internal+0x9ce>
    0.00 :   4a6b1:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   4a6b5:  je     4a97d <__GI_____strtof_l_internal+0x21bd>
    0.00 :   4a6bb:  movabs $0x1fffffffffffffdf,%rax
    0.00 :   4a6c5:  cmp    %rax,%rcx
    0.00 :   4a6c8:  ja     4ad96 <__GI_____strtof_l_internal+0x25d6>
    0.00 :   4a6ce:  lea    0x83(,%rcx,4),%rbx
    0.00 :   4a6d6:  xor    %r15d,%r15d
    0.00 :   4a6d9:  jmp    4973b <__GI_____strtof_l_internal+0xf7b>
    0.00 :   4a6de:  mov    0x10(%rsp),%rdi
    0.00 :   4a6e3:  jmp    49f47 <__GI_____strtof_l_internal+0x1787>
    0.00 :   4a6e8:  cmp    %r13,%rsi
    0.00 :   4a6eb:  jbe    4a913 <__GI_____strtof_l_internal+0x2153>
    0.00 :   4a6f1:  test   %ebx,%ebx
    0.00 :   4a6f3:  je     4ab45 <__GI_____strtof_l_internal+0x2385>
    0.00 :   4a6f9:  mov    $0x18,%eax
    0.00 :   4a6fe:  lea    0x88(%rsp),%r15
    0.00 :   4a706:  sub    %ebx,%eax
    0.00 :   4a708:  mov    %eax,%ecx
    0.00 :   4a70a:  jne    4abf0 <__GI_____strtof_l_internal+0x2430>
    0.00 :   4a710:  lea    0x27(%rbx),%r14d
    0.00 :   4a714:  mov    0x10(%rsp),%rdi
    0.00 :   4a719:  xor    %r12d,%r12d
    0.00 :   4a71c:  movslq %r14d,%r14
    0.00 :   4a71f:  jmp    49f6c <__GI_____strtof_l_internal+0x17ac>
    0.00 :   4a724:  mov    0x1cf6e5(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   4a72b:  movl   $0x22,%fs:(%rax)
    0.00 :   4a732:  mov    0x8(%rsp),%r9d
    0.00 :   4a737:  test   %r9d,%r9d
    0.00 :   4a73a:  jne    4a91a <__GI_____strtof_l_internal+0x215a>
    0.00 :   4a740:  movss  0x19868c(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   4a748:  movaps %xmm0,%xmm1
    0.00 :   4a74b:  jmp    4a322 <__GI_____strtof_l_internal+0x1b62>
    0.00 :   4a750:  mov    $0x29,%edx
    0.00 :   4a755:  lea    0x80(%rsp),%rsi
    0.00 :   4a75d:  lea    0x4(%r13),%rdi
    0.00 :   4a761:  call   506b0 <__strtof_nan>
    0.00 :   4a766:  mov    0x80(%rsp),%rax
    0.00 :   4a76e:  lea    0x1(%rax),%rdx
    0.00 :   4a772:  cmpb   $0x29,(%rax)
    0.00 :   4a775:  cmove  %rdx,%rbx
    0.00 :   4a779:  jmp    4983e <__GI_____strtof_l_internal+0x107e>
    0.00 :   4a77e:  lea    -0x18(%r10),%eax
    0.00 :   4a782:  mov    %eax,%edi
    0.00 :   4a784:  sar    $0x6,%edi
    0.00 :   4a787:  movslq %edi,%rsi
    0.00 :   4a78a:  mov    0x90(%rsp,%rsi,8),%r9
    0.00 :   4a792:  and    $0x3f,%eax
    0.00 :   4a795:  jne    4a94a <__GI_____strtof_l_internal+0x218a>
    0.00 :   4a79b:  mov    %r9,0x88(%rsp)
    0.00 :   4a7a3:  sub    $0x1,%rsi
    0.00 :   4a7a7:  mov    $0x3f,%r8d
    0.00 :   4a7ad:  cmpq   $0x0,0x90(%rsp)
    0.00 :   4a7b6:  jne    4ac49 <__GI_____strtof_l_internal+0x2489>
    0.00 :   4a7bc:  cmpq   $0x0,0x98(%rsp)
    0.00 :   4a7c5:  jne    4ac5a <__GI_____strtof_l_internal+0x249a>
    0.00 :   4a7cb:  cmpq   $0x0,0xa0(%rsp)
    0.00 :   4a7d4:  jne    4ac50 <__GI_____strtof_l_internal+0x2490>
    0.00 :   4a7da:  cmpq   $0x0,0xa8(%rsp)
    0.00 :   4a7e3:  jne    4ac35 <__GI_____strtof_l_internal+0x2475>
    0.00 :   4a7e9:  cmpq   $0x0,0xb0(%rsp)
    0.00 :   4a7f2:  jne    4ac2b <__GI_____strtof_l_internal+0x246b>
    0.00 :   4a7f8:  cmpq   $0x0,0xb8(%rsp)
    0.00 :   4a801:  jne    4ac21 <__GI_____strtof_l_internal+0x2461>
    0.00 :   4a807:  cmpq   $0x0,0xc0(%rsp)
    0.00 :   4a810:  jne    4ac17 <__GI_____strtof_l_internal+0x2457>
    0.00 :   4a816:  cmpq   $0x0,0xc8(%rsp)
    0.00 :   4a81f:  jne    4ac3f <__GI_____strtof_l_internal+0x247f>
    0.00 :   4a825:  cmpq   $0x1,0xd0(%rsp)
    0.00 :   4a82e:  mov    $0x8,%eax
    0.00 :   4a833:  adc    $0x0,%eax
    0.00 :   4a836:  mov    $0x1,%r9d
    0.00 :   4a83c:  cmp    %r11,%r13
    0.00 :   4a83f:  ja     4a84d <__GI_____strtof_l_internal+0x208d>
    0.00 :   4a841:  cltq
    0.00 :   4a843:  xor    %r9d,%r9d
    0.00 :   4a846:  cmp    %rsi,%rax
    0.00 :   4a849:  setl   %r9b
    0.00 :   4a84d:  mov    0x90(%rsp,%rsi,8),%rcx
    0.00 :   4a855:  mov    0x8(%rsp),%edx
    0.00 :   4a859:  lea    -0x1(%r10),%esi
    0.00 :   4a85d:  lea    0x88(%rsp),%rdi
    0.00 :   4a865:  movslq %esi,%rsi
    0.00 :   4a868:  call   482a0 <round_and_return>
    0.00 :   4a86d:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   4a872:  movss  0x19855e(%rip),%xmm1        # 1e2dd8 <default_rwlockattr+0x700>
    0.00 :   4a87a:  movss  0x19854a(%rip),%xmm0        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   4a882:  jmp    4a322 <__GI_____strtof_l_internal+0x1b62>
    0.00 :   4a887:  movq   $0x9,0x10(%rsp)
    0.00 :   4a890:  mov    $0x3,%edx
    0.00 :   4a895:  xor    %r15d,%r15d
    0.00 :   4a898:  jmp    49767 <__GI_____strtof_l_internal+0xfa7>
    0.00 :   4a89d:  lea    -0x1(%r10),%ebx
    0.00 :   4a8a1:  mov    $0x1,%ebp
    0.00 :   4a8a6:  lea    0x88(%rsp),%r15
    0.00 :   4a8ae:  mov    %ebx,%edx
    0.00 :   4a8b0:  sub    %r9,%rbp
    0.00 :   4a8b3:  sar    $0x1f,%edx
    0.00 :   4a8b6:  lea    (%r15,%rbp,8),%rdi
    0.00 :   4a8ba:  shr    $0x1a,%edx
    0.00 :   4a8bd:  lea    (%rbx,%rdx,1),%eax
    0.00 :   4a8c0:  and    $0x3f,%eax
    0.00 :   4a8c3:  sub    %edx,%eax
    0.00 :   4a8c5:  cmp    $0x17,%eax
    0.00 :   4a8c8:  je     4ab27 <__GI_____strtof_l_internal+0x2367>
    0.00 :   4a8ce:  mov    $0x17,%ecx
    0.00 :   4a8d3:  mov    %r9,%rdx
    0.00 :   4a8d6:  mov    %r14,%rsi
    0.00 :   4a8d9:  sub    %eax,%ecx
    0.00 :   4a8db:  call   54d10 <__mpn_lshift>
    0.00 :   4a8e0:  cmpq   $0x0,0x80(%rsp)
    0.00 :   4a8e9:  jg     4a8f7 <__GI_____strtof_l_internal+0x2137>
    0.00 :   4a8eb:  movq   $0x0,0x88(%rsp)
    0.00 :   4a8f7:  mov    0x8(%rsp),%edx
    0.00 :   4a8fb:  movslq %ebx,%rsi
    0.00 :   4a8fe:  xor    %r9d,%r9d
    0.00 :   4a901:  xor    %r8d,%r8d
    0.00 :   4a904:  xor    %ecx,%ecx
    0.00 :   4a906:  mov    %r15,%rdi
    0.00 :   4a909:  call   482a0 <round_and_return>
    0.00 :   4a90e:  jmp    488e0 <__GI_____strtof_l_internal+0x120>
    0.00 :   4a913:  xor    %ebp,%ebp
    0.00 :   4a915:  jmp    49ee7 <__GI_____strtof_l_internal+0x1727>
    0.00 :   4a91a:  movss  0x1984ae(%rip),%xmm1        # 1e2dd0 <default_rwlockattr+0x6f8>
    0.00 :   4a922:  movss  0x1984aa(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   4a92a:  jmp    4a322 <__GI_____strtof_l_internal+0x1b62>
    0.00 :   4a92f:  mov    %rdx,%r14
    0.00 :   4a932:  mov    %r11,%r13
    0.00 :   4a935:  jmp    48c54 <__GI_____strtof_l_internal+0x494>
    0.00 :   4a93a:  sub    %rax,0x78(%rsp)
    0.00 :   4a93f:  mov    %r10,%rdx
    0.00 :   4a942:  xor    %r12d,%r12d
    0.00 :   4a945:  jmp    490a2 <__GI_____strtof_l_internal+0x8e2>
    0.00 :   4a94a:  lea    -0x1(%rax),%r8d
    0.00 :   4a94e:  mov    %eax,%ecx
    0.00 :   4a950:  movslq %r8d,%r8
    0.00 :   4a953:  shr    %cl,%r9
    0.00 :   4a956:  cmp    %rsi,%rdx
    0.00 :   4a959:  jg     4a9ad <__GI_____strtof_l_internal+0x21ed>
    0.00 :   4a95b:  mov    %r9,0x88(%rsp)
    0.00 :   4a963:  jmp    4a7ad <__GI_____strtof_l_internal+0x1fed>
    0.00 :   4a968:  mov    (%rsp),%rax
    0.00 :   4a96c:  test   %rax,%rax
    0.00 :   4a96f:  je     496e0 <__GI_____strtof_l_internal+0xf20>
    0.00 :   4a975:  mov    %rsi,(%rax)
    0.00 :   4a978:  jmp    496e0 <__GI_____strtof_l_internal+0xf20>
    0.00 :   4a97d:  movq   $0x1,0x10(%rsp)
    0.00 :   4a986:  mov    $0xd,%edx
    0.00 :   4a98b:  xor    %r15d,%r15d
    0.00 :   4a98e:  jmp    49767 <__GI_____strtof_l_internal+0xfa7>
    0.00 :   4a993:  movzbl (%r8),%eax
    0.00 :   4a997:  jmp    489ed <__GI_____strtof_l_internal+0x22d>
    0.00 :   4a99c:  lea    -0x1(%rbp),%rax
    0.00 :   4a9a0:  cmp    $0x10,%r10d
    0.00 :   4a9a4:  cmovne %r15,%rax
    0.00 :   4a9a8:  jmp    496d1 <__GI_____strtof_l_internal+0xf11>
    0.00 :   4a9ad:  lea    0x1(%rdi),%edx
    0.00 :   4a9b0:  mov    $0x40,%ecx
    0.00 :   4a9b5:  movslq %edx,%rdx
    0.00 :   4a9b8:  sub    %eax,%ecx
    0.00 :   4a9ba:  mov    0x90(%rsp,%rdx,8),%rax
    0.00 :   4a9c2:  shl    %cl,%rax
    0.00 :   4a9c5:  or     %r9,%rax
    0.00 :   4a9c8:  mov    %rax,0x88(%rsp)
    0.00 :   4a9d0:  jmp    4a7ad <__GI_____strtof_l_internal+0x1fed>
    0.00 :   4a9d5:  movslq %esi,%rdx
    0.00 :   4a9d8:  movslq %eax,%rdi
    0.00 :   4a9db:  mov    0x90(%rsp,%rdx,8),%r10
    0.00 :   4a9e3:  add    %r11,%rdi
    0.00 :   4a9e6:  mov    %r10,0x90(%rsp,%rdi,8)
    0.00 :   4a9ee:  test   %esi,%esi
    0.00 :   4a9f0:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4a9f6:  lea    -0x2(%rax),%edi
    0.00 :   4a9f9:  add    %r11,%rdx
    0.00 :   4a9fc:  movslq %edi,%rsi
    0.00 :   4a9ff:  mov    0x90(%rsp,%rsi,8),%r10
    0.00 :   4aa07:  mov    %r10,0x90(%rsp,%rdx,8)
    0.00 :   4aa0f:  test   %edi,%edi
    0.00 :   4aa11:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aa17:  lea    -0x3(%rax),%edi
    0.00 :   4aa1a:  add    %r11,%rsi
    0.00 :   4aa1d:  movslq %edi,%rdx
    0.00 :   4aa20:  mov    0x90(%rsp,%rdx,8),%r10
    0.00 :   4aa28:  mov    %r10,0x90(%rsp,%rsi,8)
    0.00 :   4aa30:  test   %edi,%edi
    0.00 :   4aa32:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aa38:  lea    -0x4(%rax),%edi
    0.00 :   4aa3b:  add    %r11,%rdx
    0.00 :   4aa3e:  movslq %edi,%rsi
    0.00 :   4aa41:  mov    0x90(%rsp,%rsi,8),%r10
    0.00 :   4aa49:  mov    %r10,0x90(%rsp,%rdx,8)
    0.00 :   4aa51:  test   %edi,%edi
    0.00 :   4aa53:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aa59:  lea    -0x5(%rax),%edi
    0.00 :   4aa5c:  add    %r11,%rsi
    0.00 :   4aa5f:  movslq %edi,%rdx
    0.00 :   4aa62:  mov    0x90(%rsp,%rdx,8),%r10
    0.00 :   4aa6a:  mov    %r10,0x90(%rsp,%rsi,8)
    0.00 :   4aa72:  test   %edi,%edi
    0.00 :   4aa74:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aa7a:  lea    -0x6(%rax),%edi
    0.00 :   4aa7d:  add    %r11,%rdx
    0.00 :   4aa80:  movslq %edi,%rsi
    0.00 :   4aa83:  mov    0x90(%rsp,%rsi,8),%r10
    0.00 :   4aa8b:  mov    %r10,0x90(%rsp,%rdx,8)
    0.00 :   4aa93:  test   %edi,%edi
    0.00 :   4aa95:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aa9b:  lea    -0x7(%rax),%edi
    0.00 :   4aa9e:  add    %r11,%rsi
    0.00 :   4aaa1:  movslq %edi,%rdx
    0.00 :   4aaa4:  mov    0x90(%rsp,%rdx,8),%r10
    0.00 :   4aaac:  mov    %r10,0x90(%rsp,%rsi,8)
    0.00 :   4aab4:  test   %edi,%edi
    0.00 :   4aab6:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aabc:  lea    -0x8(%rax),%edi
    0.00 :   4aabf:  add    %r11,%rdx
    0.00 :   4aac2:  movslq %edi,%rsi
    0.00 :   4aac5:  mov    0x90(%rsp,%rsi,8),%r10
    0.00 :   4aacd:  mov    %r10,0x90(%rsp,%rdx,8)
    0.00 :   4aad5:  test   %edi,%edi
    0.00 :   4aad7:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aadd:  lea    -0x9(%rax),%edi
    0.00 :   4aae0:  add    %r11,%rsi
    0.00 :   4aae3:  movslq %edi,%rdx
    0.00 :   4aae6:  mov    0x90(%rsp,%rdx,8),%r10
    0.00 :   4aaee:  mov    %r10,0x90(%rsp,%rsi,8)
    0.00 :   4aaf6:  test   %edi,%edi
    0.00 :   4aaf8:  je     4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4aafe:  sub    $0xa,%eax
    0.00 :   4ab01:  add    %r11,%rdx
    0.00 :   4ab04:  cltq
    0.00 :   4ab06:  mov    0x90(%rsp,%rax,8),%rax
    0.00 :   4ab0e:  mov    %rax,0x90(%rsp,%rdx,8)
    0.00 :   4ab16:  jmp    4914d <__GI_____strtof_l_internal+0x98d>
    0.00 :   4ab1b:  mov    $0xffffffffffffffff,%rdx
    0.00 :   4ab22:  jmp    499dc <__GI_____strtof_l_internal+0x121c>
    0.00 :   4ab27:  lea    0x0(,%r9,8),%rdx
    0.00 :   4ab2f:  mov    %r14,%rsi
    0.00 :   4ab32:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   4ab37:  test   %rbp,%rbp
    0.00 :   4ab3a:  jle    4a8f7 <__GI_____strtof_l_internal+0x2137>
    0.00 :   4ab40:  jmp    4a8eb <__GI_____strtof_l_internal+0x212b>
    0.00 :   4ab45:  subq   $0x40,0x10(%rsp)
    0.00 :   4ab4b:  mov    0x10(%rsp),%rax
    0.00 :   4ab50:  mov    %r13,%rbp
    0.00 :   4ab53:  xor    %r13d,%r13d
    0.00 :   4ab56:  mov    %rax,0x78(%rsp)
    0.00 :   4ab5b:  jmp    49ee7 <__GI_____strtof_l_internal+0x1727>
    0.00 :   4ab60:  lea    0x88(%rsp),%r15
    0.00 :   4ab68:  mov    $0x1,%edx
    0.00 :   4ab6d:  mov    %r11,0x28(%rsp)
    0.00 :   4ab72:  mov    %r15,%rsi
    0.00 :   4ab75:  mov    %r15,%rdi
    0.00 :   4ab78:  mov    %r9,0x20(%rsp)
    0.00 :   4ab7d:  mov    %r10,0x10(%rsp)
    0.00 :   4ab82:  call   54d10 <__mpn_lshift>
    0.00 :   4ab87:  mov    0x28(%rsp),%r11
    0.00 :   4ab8c:  mov    0x20(%rsp),%r9
    0.00 :   4ab91:  mov    0x80(%rsp),%rdx
    0.00 :   4ab99:  mov    0x10(%rsp),%r10
    0.00 :   4ab9e:  jmp    4909a <__GI_____strtof_l_internal+0x8da>
    0.00 :   4aba3:  lea    0x196a46(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4abaa:  mov    $0x55f,%edx
    0.00 :   4abaf:  lea    0x18daa9(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4abb6:  lea    0x1929eb(%rip),%rdi        # 1dd5a8 <__PRETTY_FUNCTION__.1+0x370>
    0.00 :   4abbd:  call   39e50 <__assert_fail>
    0.00 :   4abc2:  mov    $0x3f,%r8d
    0.00 :   4abc8:  mov    0x78(%rsp),%rax
    0.00 :   4abcd:  lea    0x88(%rsp),%r15
    0.00 :   4abd5:  sub    %r12d,%r8d
    0.00 :   4abd8:  xor    %r12d,%r12d
    0.00 :   4abdb:  movslq %r8d,%r8
    0.00 :   4abde:  jmp    492c9 <__GI_____strtof_l_internal+0xb09>
    0.00 :   4abe3:  lea    -0x1(%r13),%eax
    0.00 :   4abe7:  mov    %eax,0x20(%rsp)
    0.00 :   4abeb:  jmp    4a68c <__GI_____strtof_l_internal+0x1ecc>
    0.00 :   4abf0:  mov    $0x1,%edx
    0.00 :   4abf5:  mov    %r15,%rsi
    0.00 :   4abf8:  mov    %r15,%rdi
    0.00 :   4abfb:  call   54d10 <__mpn_lshift>
    0.00 :   4ac00:  mov    0x78(%rsp),%rax
    0.00 :   4ac05:  mov    0x90(%rsp),%r13
    0.00 :   4ac0d:  mov    %rax,0x10(%rsp)
    0.00 :   4ac12:  jmp    4a710 <__GI_____strtof_l_internal+0x1f50>
    0.00 :   4ac17:  mov    $0x6,%eax
    0.00 :   4ac1c:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac21:  mov    $0x5,%eax
    0.00 :   4ac26:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac2b:  mov    $0x4,%eax
    0.00 :   4ac30:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac35:  mov    $0x3,%eax
    0.00 :   4ac3a:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac3f:  mov    $0x7,%eax
    0.00 :   4ac44:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac49:  xor    %eax,%eax
    0.00 :   4ac4b:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac50:  mov    $0x2,%eax
    0.00 :   4ac55:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac5a:  mov    $0x1,%eax
    0.00 :   4ac5f:  jmp    4a836 <__GI_____strtof_l_internal+0x2076>
    0.00 :   4ac64:  lea    0x196985(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ac6b:  mov    $0x3b0,%edx
    0.00 :   4ac70:  lea    0x18d9e8(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ac77:  lea    0x19272a(%rip),%rdi        # 1dd3a8 <__PRETTY_FUNCTION__.1+0x170>
    0.00 :   4ac7e:  call   39e50 <__assert_fail>
    0.00 :   4ac83:  mov    %r12,0x88(%rsp)
    0.00 :   4ac8b:  jmp    491d0 <__GI_____strtof_l_internal+0xa10>
    0.00 :   4ac90:  lea    0x196959(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ac97:  mov    $0x390,%edx
    0.00 :   4ac9c:  lea    0x18d9bc(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4aca3:  lea    0x19264e(%rip),%rdi        # 1dd2f8 <__PRETTY_FUNCTION__.1+0xc0>
    0.00 :   4acaa:  call   39e50 <__assert_fail>
    0.00 :   4acaf:  lea    0x19693a(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4acb6:  mov    $0x45e,%edx
    0.00 :   4acbb:  lea    0x18d99d(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4acc2:  lea    0x192827(%rip),%rdi        # 1dd4f0 <__PRETTY_FUNCTION__.1+0x2b8>
    0.00 :   4acc9:  call   39e50 <__assert_fail>
    0.00 :   4acce:  xor    %r13d,%r13d
    0.00 :   4acd1:  jmp    4a4ab <__GI_____strtof_l_internal+0x1ceb>
    0.00 :   4acd6:  call   136550 <__stack_chk_fail>
    0.00 :   4acdb:  lea    0x19690e(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ace2:  mov    $0x5d8,%edx
    0.00 :   4ace7:  lea    0x18d971(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4acee:  lea    0x18d92f(%rip),%rdi        # 1d8624 <not_available+0xc6>
    0.00 :   4acf5:  call   39e50 <__assert_fail>
    0.00 :   4acfa:  mov    0x10(%rsp),%rbp
    0.00 :   4acff:  mov    $0x10,%r10d
    0.00 :   4ad05:  jmp    48982 <__GI_____strtof_l_internal+0x1c2>
    0.00 :   4ad0a:  mov    %rcx,%r13
    0.00 :   4ad0d:  mov    $0x10,%r10d
    0.00 :   4ad13:  xor    %ecx,%ecx
    0.00 :   4ad15:  jmp    4893a <__GI_____strtof_l_internal+0x17a>
    0.00 :   4ad1a:  lea    0x1968cf(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ad21:  mov    $0x44b,%edx
    0.00 :   4ad26:  lea    0x18d932(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ad2d:  lea    0x18d8b5(%rip),%rdi        # 1d85e9 <not_available+0x8b>
    0.00 :   4ad34:  call   39e50 <__assert_fail>
    0.00 :   4ad39:  lea    0x1968b0(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ad40:  mov    $0x574,%edx
    0.00 :   4ad45:  lea    0x18d913(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ad4c:  lea    0x18d8bc(%rip),%rdi        # 1d860f <not_available+0xb1>
    0.00 :   4ad53:  call   39e50 <__assert_fail>
    0.00 :   4ad58:  lea    0x196891(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ad5f:  mov    $0x36a,%edx
    0.00 :   4ad64:  lea    0x18d8f4(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ad6b:  lea    0x19251e(%rip),%rdi        # 1dd290 <__PRETTY_FUNCTION__.1+0x58>
    0.00 :   4ad72:  call   39e50 <__assert_fail>
    0.00 :   4ad77:  lea    0x196872(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ad7e:  mov    $0x255,%edx
    0.00 :   4ad83:  lea    0x18d8d5(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ad8a:  lea    0x18d829(%rip),%rdi        # 1d85ba <not_available+0x5c>
    0.00 :   4ad91:  call   39e50 <__assert_fail>
    0.00 :   4ad96:  lea    0x196853(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ad9d:  mov    $0x39c,%edx
    0.00 :   4ada2:  lea    0x18d8b6(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ada9:  lea    0x192580(%rip),%rdi        # 1dd330 <__PRETTY_FUNCTION__.1+0xf8>
    0.00 :   4adb0:  call   39e50 <__assert_fail>
    0.00 :   4adb5:  lea    0x196834(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4adbc:  mov    $0x3bc,%edx
    0.00 :   4adc1:  lea    0x18d897(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4adc8:  lea    0x192611(%rip),%rdi        # 1dd3e0 <__PRETTY_FUNCTION__.1+0x1a8>
    0.00 :   4adcf:  call   39e50 <__assert_fail>
    0.00 :   4add4:  lea    0x196815(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4addb:  mov    $0x3a8,%edx
    0.00 :   4ade0:  lea    0x18d878(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ade7:  lea    0x19257a(%rip),%rdi        # 1dd368 <__PRETTY_FUNCTION__.1+0x130>
    0.00 :   4adee:  call   39e50 <__assert_fail>
    0.00 :   4adf3:  lea    0x1967f6(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4adfa:  mov    $0x559,%edx
    0.00 :   4adff:  lea    0x18d859(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ae06:  lea    0x18d7e6(%rip),%rdi        # 1d85f3 <not_available+0x95>
    0.00 :   4ae0d:  call   39e50 <__assert_fail>
    0.00 :   4ae12:  lea    0x1967d7(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ae19:  mov    $0x6d5,%edx
    0.00 :   4ae1e:  lea    0x18d83a(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ae25:  lea    0x18d821(%rip),%rdi        # 1d864d <not_available+0xef>
    0.00 :   4ae2c:  call   39e50 <__assert_fail>
    0.00 :   4ae31:  lea    0x1967b8(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ae38:  mov    $0x6ab,%edx
    0.00 :   4ae3d:  lea    0x18d81b(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ae44:  lea    0x18d7ef(%rip),%rdi        # 1d863a <not_available+0xdc>
    0.00 :   4ae4b:  call   39e50 <__assert_fail>
    0.00 :   4ae50:  lea    0x196799(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ae57:  mov    $0x430,%edx
    0.00 :   4ae5c:  lea    0x18d7fc(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ae63:  lea    0x1925fe(%rip),%rdi        # 1dd468 <__PRETTY_FUNCTION__.1+0x230>
    0.00 :   4ae6a:  call   39e50 <__assert_fail>
    0.00 :   4ae6f:  lea    0x19677a(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ae76:  mov    $0x54d,%edx
    0.00 :   4ae7b:  lea    0x18d7dd(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4ae82:  lea    0x1926d7(%rip),%rdi        # 1dd560 <__PRETTY_FUNCTION__.1+0x328>
    0.00 :   4ae89:  call   39e50 <__assert_fail>
    0.00 :   4ae8e:  lea    0x19675b(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4ae95:  mov    $0x42d,%edx
    0.00 :   4ae9a:  lea    0x18d7be(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4aea1:  lea    0x192570(%rip),%rdi        # 1dd418 <__PRETTY_FUNCTION__.1+0x1e0>
    0.00 :   4aea8:  call   39e50 <__assert_fail>
    0.00 :   4aead:  lea    0x19673c(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4aeb4:  mov    $0x3fc,%edx
    0.00 :   4aeb9:  lea    0x18d79f(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4aec0:  lea    0x18d711(%rip),%rdi        # 1d85d8 <not_available+0x7a>
    0.00 :   4aec7:  call   39e50 <__assert_fail>
    0.00 :   4aecc:  lea    0x19671d(%rip),%rcx        # 1e15f0 <__PRETTY_FUNCTION__.0>
    0.00 :   4aed3:  mov    $0x388,%edx
    0.00 :   4aed8:  lea    0x18d780(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   4aedf:  lea    0x1923d2(%rip),%rdi        # 1dd2b8 <__PRETTY_FUNCTION__.1+0x80>
    0.00 :   4aee6:  call   39e50 <__assert_fail>
    0.00 :   4aeeb:  mov    %r12,0x68(%rsp)
    0.00 :   4aef0:  jmp    49fff <__GI_____strtof_l_internal+0x183f>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (54 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000546c0 <__mpn_divrem>:
    5.50 :   546c0:  endbr64
    2.02 :   546c4:  push   %r15
    2.00 :   546c6:  mov    %rsi,%r15
    2.00 :   546c9:  mov    %rdx,%rsi
    0.00 :   546cc:  push   %r14
    0.00 :   546ce:  push   %r13
    4.02 :   546d0:  push   %r12
    0.00 :   546d2:  mov    %rcx,%r12
    0.00 :   546d5:  push   %rbp
    1.98 :   546d6:  push   %rbx
    0.00 :   546d7:  sub    $0x68,%rsp
    0.00 :   546db:  mov    %rdi,0x8(%rsp)
    2.02 :   546e0:  mov    %r8,(%rsp)
    0.00 :   546e4:  cmp    $0x1,%r9
    0.00 :   546e8:  je     54998 <__mpn_divrem+0x2d8>
    0.00 :   546ee:  mov    %r9,%r13
    0.00 :   546f1:  cmp    $0x2,%r9
    0.00 :   546f5:  je     54aa8 <__mpn_divrem+0x3e8>
    0.00 :   546fb:  test   %r9,%r9
    0.00 :   546fe:  je     54aa0 <__mpn_divrem+0x3e0>
    0.00 :   54704:  movq   $0x0,0x38(%rsp)
    0.00 :   5470d:  mov    %rcx,%rax
    0.00 :   54710:  mov    (%rsp),%rsi
    0.00 :   54714:  sub    %r9,%rax
    0.00 :   54717:  lea    (%rdx,%rax,8),%r14
    0.00 :   5471b:  lea    0x0(,%r9,8),%rax
    0.00 :   54723:  lea    -0x8(%rax),%rdi
    0.00 :   54727:  lea    -0x10(%rax),%rdx
    0.00 :   5472b:  mov    %rax,0x48(%rsp)
    0.00 :   54730:  mov    -0x8(%rsi,%rax,1),%rbx
    0.00 :   54735:  mov    -0x10(%rsi,%rax,1),%rbp
    0.00 :   5473a:  lea    (%r14,%rdi,1),%rax
    0.00 :   5473e:  mov    %rdi,0x58(%rsp)
    0.00 :   54743:  mov    (%rax),%rcx
    0.00 :   54746:  mov    %rdx,0x40(%rsp)
    0.00 :   5474b:  mov    %rax,0x10(%rsp)
    0.00 :   54750:  cmp    %rcx,%rbx
    0.00 :   54753:  jbe    54cba <__mpn_divrem+0x5fa>
    0.00 :   54759:  add    %r15,%r12
    0.00 :   5475c:  sub    %r13,%r12
    0.00 :   5475f:  sub    $0x1,%r12
    0.00 :   54763:  js     54a18 <__mpn_divrem+0x358>
    0.00 :   54769:  lea    -0x1(%r13),%rax
    0.00 :   5476d:  mov    %rax,0x20(%rsp)
    0.00 :   54772:  cmp    %r12,%r15
    0.00 :   54775:  jg     54855 <__mpn_divrem+0x195>
    0.00 :   5477b:  xor    %eax,%eax
    0.00 :   5477d:  test   %r15,%r15
    0.00 :   54780:  mov    0x48(%rsp),%rdi
    0.00 :   54785:  cmovns %r15,%rax
    0.00 :   54789:  lea    -0x18(%r14,%rdi,1),%r10
    0.00 :   5478e:  mov    %r13,%r14
    0.00 :   54791:  mov    %rax,0x28(%rsp)
    0.00 :   54796:  mov    $0x10,%eax
    0.00 :   5479b:  mov    %r10,%r13
    0.00 :   5479e:  sub    %rdi,%rax
    0.00 :   547a1:  mov    %rax,0x30(%rsp)
    0.00 :   547a6:  mov    %r12,%rax
    0.00 :   547a9:  mov    %rbp,%r12
    0.00 :   547ac:  mov    %rax,%rbp
    0.00 :   547af:  nop
    0.00 :   547b0:  mov    0x30(%rsp),%rax
    0.00 :   547b5:  mov    $0xffffffffffffffff,%r15
    0.00 :   547bc:  lea    (%rax,%r13,1),%rdi
    0.00 :   547c0:  mov    0x10(%r13),%rax
    0.00 :   547c4:  mov    %rax,0x10(%rsp)
    0.00 :   547c9:  cmp    %rcx,%rbx
    0.00 :   547cc:  jne    54a58 <__mpn_divrem+0x398>
    0.00 :   547d2:  mov    (%rsp),%rsi
    0.00 :   547d6:  mov    %r15,%rcx
    0.00 :   547d9:  mov    %r14,%rdx
    0.00 :   547dc:  mov    %rdi,0x18(%rsp)
    0.00 :   547e1:  call   563d0 <__mpn_submul_1>
    0.00 :   547e6:  cmp    %rax,0x10(%rsp)
    0.00 :   547eb:  mov    0x18(%rsp),%rdi
    0.00 :   547f0:  je     54a30 <__mpn_divrem+0x370>
    0.00 :   547f6:  mov    (%rsp),%rdx
    0.00 :   547fa:  mov    %r14,%rcx
    0.00 :   547fd:  mov    %rdi,%rsi
    0.00 :   54800:  mov    %rdi,0x10(%rsp)
    0.00 :   54805:  sub    $0x1,%r15
    0.00 :   54809:  sub    $0x8,%r13
    0.00 :   5480d:  call   54480 <__mpn_add_n>
    0.00 :   54812:  mov    0x8(%rsp),%rax
    0.00 :   54817:  mov    0x10(%rsp),%rdi
    0.00 :   5481c:  mov    %r15,(%rax,%rbp,8)
    0.00 :   54820:  sub    $0x1,%rbp
    0.00 :   54824:  mov    0x10(%r13),%rcx
    0.00 :   54828:  cmp    %rbp,0x28(%rsp)
    0.00 :   5482d:  jle    547b0 <__mpn_divrem+0xf0>
    0.00 :   5482f:  mov    %rbp,%rax
    0.00 :   54832:  mov    %r12,%rbp
    0.00 :   54835:  mov    %r14,%r13
    0.00 :   54838:  mov    %rdi,%r14
    0.00 :   5483b:  mov    %rax,%r12
    0.00 :   5483e:  mov    0x58(%rsp),%rax
    0.00 :   54843:  add    %rdi,%rax
    0.00 :   54846:  mov    %rax,0x10(%rsp)
    0.00 :   5484b:  cmp    $0xffffffffffffffff,%r12
    0.00 :   5484f:  je     54a18 <__mpn_divrem+0x358>
    0.00 :   54855:  mov    0x48(%rsp),%rdi
    0.00 :   5485a:  lea    -0x2(%r13),%rdx
    0.00 :   5485e:  mov    $0x8,%eax
    0.00 :   54863:  cmp    $0xffffffffffffffff,%rdx
    0.00 :   54867:  cmovge %rdi,%rax
    0.00 :   5486b:  mov    %rax,0x50(%rsp)
    0.00 :   54870:  mov    $0x1,%eax
    0.00 :   54875:  sub    %r13,%rax
    0.00 :   54878:  shl    $0x3,%rax
    0.00 :   5487c:  cmp    $0xffffffffffffffff,%rdx
    0.00 :   54880:  mov    $0x0,%edx
    0.00 :   54885:  cmovl  %rdx,%rax
    0.00 :   54889:  lea    (%rdi,%rax,1),%rdx
    0.00 :   5488d:  add    0x58(%rsp),%rax
    0.00 :   54892:  lea    (%r14,%rdx,1),%rdi
    0.00 :   54896:  add    %r14,%rax
    0.00 :   54899:  mov    %rdi,0x30(%rsp)
    0.00 :   5489e:  mov    %rax,0x48(%rsp)
    0.00 :   548a3:  jmp    548f2 <__mpn_divrem+0x232>
    0.00 :   548a5:  nopl   (%rax)
    0.00 :   548a8:  mov    (%rsp),%rsi
    0.00 :   548ac:  mov    %r15,%rcx
    0.00 :   548af:  mov    %r13,%rdx
    0.00 :   548b2:  mov    %r14,%rdi
    0.00 :   548b5:  call   563d0 <__mpn_submul_1>
    0.00 :   548ba:  cmp    0x18(%rsp),%rax
    0.00 :   548bf:  je     548d7 <__mpn_divrem+0x217>
    0.00 :   548c1:  mov    (%rsp),%rdx
    0.00 :   548c5:  mov    %r13,%rcx
    0.00 :   548c8:  mov    %r14,%rsi
    0.00 :   548cb:  mov    %r14,%rdi
    0.00 :   548ce:  sub    $0x1,%r15
    0.00 :   548d2:  call   54480 <__mpn_add_n>
    0.00 :   548d7:  mov    0x8(%rsp),%rax
    0.00 :   548dc:  mov    %r15,(%rax,%r12,8)
    0.00 :   548e0:  mov    0x10(%rsp),%rax
    0.00 :   548e5:  mov    (%rax),%rcx
    0.00 :   548e8:  sub    $0x1,%r12
    0.00 :   548ec:  jb     54a18 <__mpn_divrem+0x358>
    0.00 :   548f2:  mov    0x10(%rsp),%rax
    0.00 :   548f7:  cmpq   $0x0,0x20(%rsp)
    0.00 :   548fd:  mov    (%rax),%rax
    0.00 :   54900:  mov    %rax,0x18(%rsp)
    0.00 :   54905:  js     54925 <__mpn_divrem+0x265>
    0.00 :   54907:  mov    0x50(%rsp),%rdx
    0.00 :   5490c:  mov    0x48(%rsp),%rsi
    0.00 :   54911:  mov    %rcx,0x28(%rsp)
    0.00 :   54916:  mov    0x30(%rsp),%rdi
    0.00 :   5491b:  call   28430 <*ABS*+0xa95a0@plt>
    0.00 :   54920:  mov    0x28(%rsp),%rcx
    0.00 :   54925:  movq   $0x0,(%r14)
    0.00 :   5492c:  mov    $0xffffffffffffffff,%r15
    0.00 :   54933:  cmp    %rcx,%rbx
    0.00 :   54936:  je     548a8 <__mpn_divrem+0x1e8>
    0.00 :   5493c:  mov    0x10(%rsp),%rax
    0.00 :   54941:  mov    %rcx,%rdx
    0.00 :   54944:  mov    0x40(%rsp),%rsi
    0.00 :   54949:  mov    (%rax),%rax
    0.00 :   5494c:  mov    %rax,0x28(%rsp)
    0.00 :   54951:  div    %rbx
    0.00 :   54954:  mov    %rax,%r15
    0.00 :   54957:  mov    %rdx,%rcx
    0.00 :   5495a:  mov    %rbp,%rax
    0.00 :   5495d:  mul    %r15
    0.00 :   54960:  jmp    54972 <__mpn_divrem+0x2b2>
    0.00 :   54962:  nopw   0x0(%rax,%rax,1)
    0.00 :   54968:  cmp    %rbp,%rax
    0.00 :   5496b:  sbb    $0x0,%rdx
    0.00 :   5496f:  sub    %rbp,%rax
    0.00 :   54972:  cmp    %rdx,%rcx
    0.00 :   54975:  jb     54987 <__mpn_divrem+0x2c7>
    0.00 :   54977:  jne    548a8 <__mpn_divrem+0x1e8>
    0.00 :   5497d:  cmp    %rax,(%r14,%rsi,1)
    0.00 :   54981:  jae    548a8 <__mpn_divrem+0x1e8>
    0.00 :   54987:  sub    $0x1,%r15
    0.00 :   5498b:  add    %rbx,%rcx
    0.00 :   5498e:  jae    54968 <__mpn_divrem+0x2a8>
    0.00 :   54990:  jmp    548a8 <__mpn_divrem+0x1e8>
    0.00 :   54995:  nopl   (%rax)
    0.00 :   54998:  mov    (%r8),%rcx
    0.00 :   5499b:  mov    -0x8(%rdx,%r12,8),%rdx
    3.98 :   549a0:  movq   $0x0,0x38(%rsp)
    0.00 :   549a9:  cmp    %rdx,%rcx
    2.02 :   549ac:  jbe    54c8a <__mpn_divrem+0x5ca>
    0.00 :   549b2:  mov    %r12,%rdi
    3.40 :   549b5:  sub    $0x2,%rdi
    2.03 :   549b9:  js     549e9 <__mpn_divrem+0x329>
    0.00 :   549bb:  mov    0x8(%rsp),%rbx
   10.03 :   549c0:  lea    -0x2(%r15,%r12,1),%rax
    0.00 :   549c5:  lea    (%rbx,%rax,8),%r8
    0.00 :   549c9:  nopl   0x0(%rax)
    0.00 :   549d0:  mov    (%rsi,%rdi,8),%rax
    3.95 :   549d4:  sub    $0x1,%rdi
    0.00 :   549d8:  sub    $0x8,%r8
    0.00 :   549dc:  div    %rcx
   32.26 :   549df:  mov    %rax,0x8(%r8)
    0.00 :   549e3:  cmp    $0xffffffffffffffff,%rdi
    0.00 :   549e7:  jne    549d0 <__mpn_divrem+0x310>
    0.00 :   549e9:  sub    $0x1,%r15
    0.00 :   549ed:  js     54a15 <__mpn_divrem+0x355>
    0.00 :   549ef:  mov    0x8(%rsp),%r9
    0.00 :   549f4:  xor    %r8d,%r8d
    0.00 :   549f7:  lea    (%r9,%r15,8),%rdi
    0.00 :   549fb:  nopl   0x0(%rax,%rax,1)
    0.00 :   54a00:  mov    %r8,%rax
    0.00 :   54a03:  div    %rcx
    0.00 :   54a06:  mov    %rax,(%rdi)
    0.00 :   54a09:  mov    %rdi,%rax
    0.00 :   54a0c:  sub    $0x8,%rdi
    0.00 :   54a10:  cmp    %rax,%r9
    0.00 :   54a13:  jne    54a00 <__mpn_divrem+0x340>
    0.00 :   54a15:  mov    %rdx,(%rsi)
    3.94 :   54a18:  mov    0x38(%rsp),%rax
    5.20 :   54a1d:  add    $0x68,%rsp
    0.00 :   54a21:  pop    %rbx
    0.00 :   54a22:  pop    %rbp
    0.00 :   54a23:  pop    %r12
    0.00 :   54a25:  pop    %r13
    0.00 :   54a27:  pop    %r14
    0.00 :   54a29:  pop    %r15
    7.64 :   54a2b:  ret
    0.00 :   54a2c:  nopl   0x0(%rax)
    0.00 :   54a30:  mov    0x8(%rsp),%rax
    0.00 :   54a35:  sub    $0x8,%r13
    0.00 :   54a39:  mov    %r15,(%rax,%rbp,8)
    0.00 :   54a3d:  sub    $0x1,%rbp
    0.00 :   54a41:  mov    0x10(%r13),%rcx
    0.00 :   54a45:  cmp    0x28(%rsp),%rbp
    0.00 :   54a4a:  jge    547b0 <__mpn_divrem+0xf0>
    0.00 :   54a50:  jmp    5482f <__mpn_divrem+0x16f>
    0.00 :   54a55:  nopl   (%rax)
    0.00 :   54a58:  mov    %rcx,%rdx
    0.00 :   54a5b:  mov    0x8(%r13),%rax
    0.00 :   54a5f:  div    %rbx
    0.00 :   54a62:  mov    %rax,%r15
    0.00 :   54a65:  mov    %rdx,%rcx
    0.00 :   54a68:  mov    %r12,%rax
    0.00 :   54a6b:  mul    %r15
    0.00 :   54a6e:  jmp    54a7a <__mpn_divrem+0x3ba>
    0.00 :   54a70:  cmp    %r12,%rax
    0.00 :   54a73:  sbb    $0x0,%rdx
    0.00 :   54a77:  sub    %r12,%rax
    0.00 :   54a7a:  cmp    %rcx,%rdx
    0.00 :   54a7d:  ja     54a8f <__mpn_divrem+0x3cf>
    0.00 :   54a7f:  jne    547d2 <__mpn_divrem+0x112>
    0.00 :   54a85:  cmp    %rax,0x0(%r13)
    0.00 :   54a89:  jae    547d2 <__mpn_divrem+0x112>
    0.00 :   54a8f:  sub    $0x1,%r15
    0.00 :   54a93:  add    %rbx,%rcx
    0.00 :   54a96:  jae    54a70 <__mpn_divrem+0x3b0>
    0.00 :   54a98:  jmp    547d2 <__mpn_divrem+0x112>
    0.00 :   54a9d:  nopl   (%rax)
    0.00 :   54aa0:  ud2
    0.00 :   54aa2:  nopw   0x0(%rax,%rax,1)
    0.00 :   54aa8:  movq   $0x0,0x38(%rsp)
    0.00 :   54ab1:  mov    %r8,%rax
    0.00 :   54ab4:  lea    -0x10(%rdx,%rcx,8),%r8
    0.00 :   54ab9:  mov    0x8(%rax),%rdi
    0.00 :   54abd:  mov    0x8(%r8),%rcx
    0.00 :   54ac1:  mov    (%rax),%r9
    0.00 :   54ac4:  mov    (%r8),%rax
    0.00 :   54ac7:  cmp    %rcx,%rdi
    0.00 :   54aca:  jbe    54c9b <__mpn_divrem+0x5db>
    0.00 :   54ad0:  lea    -0x3(%r15,%r12,1),%r10
    0.00 :   54ad5:  test   %r10,%r10
    0.00 :   54ad8:  js     54c33 <__mpn_divrem+0x573>
    0.00 :   54ade:  cmp    %r10,%r15
    0.00 :   54ae1:  jg     54b8c <__mpn_divrem+0x4cc>
    0.00 :   54ae7:  xor    %ebx,%ebx
    0.00 :   54ae9:  mov    %r9,%rbp
    0.00 :   54aec:  test   %r15,%r15
    0.00 :   54aef:  mov    0x8(%rsp),%r12
    0.00 :   54af4:  cmovns %r15,%rbx
    0.00 :   54af8:  neg    %rbp
    0.00 :   54afb:  jmp    54b2d <__mpn_divrem+0x46d>
    0.00 :   54afd:  nopl   (%rax)
    0.00 :   54b00:  add    %rdi,%rax
    0.00 :   54b03:  mov    %rax,%rcx
    0.00 :   54b06:  jae    54c50 <__mpn_divrem+0x590>
    0.00 :   54b0c:  mov    $0xffffffffffffffff,%r13
    0.00 :   54b13:  sub    %r9,%rcx
    0.00 :   54b16:  mov    %r11,%rax
    0.00 :   54b19:  mov    %r13,(%r12,%r10,8)
    0.00 :   54b1d:  sub    $0x1,%r10
    0.00 :   54b21:  add    %r9,%rax
    0.00 :   54b24:  adc    $0x0,%rcx
    0.00 :   54b28:  cmp    %rbx,%r10
    0.00 :   54b2b:  jl     54b82 <__mpn_divrem+0x4c2>
    0.00 :   54b2d:  sub    $0x8,%r8
    0.00 :   54b31:  mov    (%r8),%r11
    0.00 :   54b34:  cmp    %rcx,%rdi
    0.00 :   54b37:  je     54b00 <__mpn_divrem+0x440>
    0.00 :   54b39:  mov    %rcx,%rdx
    0.00 :   54b3c:  div    %rdi
    0.00 :   54b3f:  mov    %rax,%r13
    0.00 :   54b42:  mov    %rdx,%rcx
    0.00 :   54b45:  mov    %r9,%rax
    0.00 :   54b48:  mul    %r13
    0.00 :   54b4b:  mov    %rax,%rsi
    0.00 :   54b4e:  xchg   %ax,%ax
    0.00 :   54b50:  cmp    %rcx,%rdx
    0.00 :   54b53:  ja     54b5c <__mpn_divrem+0x49c>
    0.00 :   54b55:  jne    54b6c <__mpn_divrem+0x4ac>
    0.00 :   54b57:  cmp    %r11,%rsi
    0.00 :   54b5a:  jbe    54b6c <__mpn_divrem+0x4ac>
    0.00 :   54b5c:  sub    $0x1,%r13
    0.00 :   54b60:  sub    %r9,%rsi
    0.00 :   54b63:  sbb    $0x0,%rdx
    0.00 :   54b67:  add    %rdi,%rcx
    0.00 :   54b6a:  jae    54b50 <__mpn_divrem+0x490>
    0.00 :   54b6c:  mov    %r13,(%r12,%r10,8)
    0.00 :   54b70:  sub    $0x1,%r10
    0.00 :   54b74:  sub    %rsi,%r11
    0.00 :   54b77:  sbb    %rdx,%rcx
    0.00 :   54b7a:  mov    %r11,%rax
    0.00 :   54b7d:  cmp    %rbx,%r10
    0.00 :   54b80:  jge    54b2d <__mpn_divrem+0x46d>
    0.00 :   54b82:  cmp    $0xffffffffffffffff,%r10
    0.00 :   54b86:  je     54c33 <__mpn_divrem+0x573>
    0.00 :   54b8c:  mov    %r9,%rbp
    0.00 :   54b8f:  mov    0x8(%rsp),%r13
    0.00 :   54b94:  xor    %ebx,%ebx
    0.00 :   54b96:  neg    %rbp
    0.00 :   54b99:  jmp    54bce <__mpn_divrem+0x50e>
    0.00 :   54b9b:  nopl   0x0(%rax,%rax,1)
    0.00 :   54ba0:  add    %rdi,%rax
    0.00 :   54ba3:  mov    %rax,%rcx
    0.00 :   54ba6:  jae    54c70 <__mpn_divrem+0x5b0>
    0.00 :   54bac:  mov    $0xffffffffffffffff,%r12
    0.00 :   54bb3:  sub    %r9,%rcx
    0.00 :   54bb6:  mov    %rbx,%rax
    0.00 :   54bb9:  mov    %r10,%rdx
    0.00 :   54bbc:  mov    %r12,0x0(%r13,%r10,8)
    0.00 :   54bc1:  add    %r9,%rax
    0.00 :   54bc4:  adc    $0x0,%rcx
    0.00 :   54bc8:  sub    $0x1,%r10
    0.00 :   54bcc:  jb     54c23 <__mpn_divrem+0x563>
    0.00 :   54bce:  cmp    %rcx,%rdi
    0.00 :   54bd1:  je     54ba0 <__mpn_divrem+0x4e0>
    0.00 :   54bd3:  mov    %rcx,%rdx
    0.00 :   54bd6:  div    %rdi
    0.00 :   54bd9:  mov    %rax,%r12
    0.00 :   54bdc:  mov    %rdx,%rcx
    0.00 :   54bdf:  mov    %r9,%rax
    0.00 :   54be2:  mul    %r12
    0.00 :   54be5:  mov    %rdx,%r11
    0.00 :   54be8:  mov    %rax,%rsi
    0.00 :   54beb:  nopl   0x0(%rax,%rax,1)
    0.00 :   54bf0:  cmp    %rcx,%r11
    0.00 :   54bf3:  ja     54bfc <__mpn_divrem+0x53c>
    0.00 :   54bf5:  jne    54c0c <__mpn_divrem+0x54c>
    0.00 :   54bf7:  test   %rsi,%rsi
    0.00 :   54bfa:  je     54c0c <__mpn_divrem+0x54c>
    0.00 :   54bfc:  sub    $0x1,%r12
    0.00 :   54c00:  sub    %r9,%rsi
    0.00 :   54c03:  sbb    $0x0,%r11
    0.00 :   54c07:  add    %rdi,%rcx
    0.00 :   54c0a:  jae    54bf0 <__mpn_divrem+0x530>
    0.00 :   54c0c:  mov    %rbx,%rax
    0.00 :   54c0f:  mov    %r12,0x0(%r13,%r10,8)
    0.00 :   54c14:  mov    %r10,%rdx
    0.00 :   54c17:  sub    %rsi,%rax
    0.00 :   54c1a:  sbb    %r11,%rcx
    0.00 :   54c1d:  sub    $0x1,%r10
    0.00 :   54c21:  jae    54bce <__mpn_divrem+0x50e>
    0.00 :   54c23:  mov    0x8(%rsp),%rbx
    0.00 :   54c28:  movq   $0x0,(%r8)
    0.00 :   54c2f:  mov    %r12,(%rbx,%rdx,8)
    0.00 :   54c33:  movq   %rax,%xmm0
    0.00 :   54c38:  movq   %rcx,%xmm1
    0.00 :   54c3d:  punpcklqdq %xmm1,%xmm0
    0.00 :   54c41:  movups %xmm0,(%r8)
    0.00 :   54c45:  jmp    54a18 <__mpn_divrem+0x358>
    0.00 :   54c4a:  nopw   0x0(%rax,%rax,1)
    0.00 :   54c50:  cmp    $0x1,%r9
    0.00 :   54c54:  mov    %r9,%rdx
    0.00 :   54c57:  mov    %rbp,%rsi
    0.00 :   54c5a:  mov    $0xffffffffffffffff,%r13
    0.00 :   54c61:  adc    $0xffffffffffffffff,%rdx
    0.00 :   54c65:  jmp    54b50 <__mpn_divrem+0x490>
    0.00 :   54c6a:  nopw   0x0(%rax,%rax,1)
    0.00 :   54c70:  cmp    $0x1,%r9
    0.00 :   54c74:  mov    %r9,%r11
    0.00 :   54c77:  mov    %rbp,%rsi
    0.00 :   54c7a:  mov    $0xffffffffffffffff,%r12
    0.00 :   54c81:  adc    $0xffffffffffffffff,%r11
    0.00 :   54c85:  jmp    54bf0 <__mpn_divrem+0x530>
    0.00 :   54c8a:  movq   $0x1,0x38(%rsp)
    6.02 :   54c93:  sub    %rcx,%rdx
    0.00 :   54c96:  jmp    549b2 <__mpn_divrem+0x2f2>
    0.00 :   54c9b:  jb     54ca6 <__mpn_divrem+0x5e6>
    0.00 :   54c9d:  cmp    %rax,%r9
    0.00 :   54ca0:  ja     54ad0 <__mpn_divrem+0x410>
    0.00 :   54ca6:  movq   $0x1,0x38(%rsp)
    0.00 :   54caf:  sub    %r9,%rax
    0.00 :   54cb2:  sbb    %rdi,%rcx
    0.00 :   54cb5:  jmp    54ad0 <__mpn_divrem+0x410>
    0.00 :   54cba:  jb     54cda <__mpn_divrem+0x61a>
    0.00 :   54cbc:  lea    -0x1(%r9),%rdx
    0.00 :   54cc0:  mov    %r14,%rdi
    0.00 :   54cc3:  mov    %rcx,0x18(%rsp)
    0.00 :   54cc8:  call   54620 <__mpn_cmp>
    0.00 :   54ccd:  mov    0x18(%rsp),%rcx
    0.00 :   54cd2:  test   %eax,%eax
    0.00 :   54cd4:  js     54759 <__mpn_divrem+0x99>
    0.00 :   54cda:  mov    (%rsp),%rdx
    0.00 :   54cde:  mov    %r13,%rcx
    0.00 :   54ce1:  mov    %r14,%rsi
    0.00 :   54ce4:  mov    %r14,%rdi
    0.00 :   54ce7:  call   56320 <__mpn_sub_n>
    0.00 :   54cec:  mov    0x10(%rsp),%rax
    0.00 :   54cf1:  movq   $0x1,0x38(%rsp)
    0.00 :   54cfa:  mov    (%rax),%rcx
    0.00 :   54cfd:  jmp    54759 <__mpn_divrem+0x99>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (69 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003c18 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]>:
    0.00 :   3c18:   endbr64
    0.00 :   3c1c:   push   %rbp
    0.00 :   3c1d:   mov    %rsp,%rbp
    0.00 :   3c20:   push   %r12
    0.00 :   3c22:   push   %rbx
    0.00 :   3c23:   sub    $0x50,%rsp
    0.00 :   3c27:   mov    %rdi,-0x58(%rbp)
    0.00 :   3c2b:   mov    %fs:0x28,%rax
    0.00 :   3c34:   mov    %rax,-0x18(%rbp)
    0.00 :   3c38:   xor    %eax,%eax
    0.00 :   3c3a:   mov    -0x58(%rbp),%rax
    0.00 :   3c3e:   mov    0x28(%rax),%eax
    0.00 :   3c41:   mov    %eax,-0x44(%rbp)
    0.00 :   3c44:   mov    -0x44(%rbp),%ebx
    0.00 :   3c47:   call   25c0 <omp_get_num_threads@plt>
    0.00 :   3c4c:   mov    %eax,%r12d
    0.00 :   3c4f:   call   2530 <omp_get_thread_num@plt>
    0.00 :   3c54:   mov    %eax,%esi
    0.00 :   3c56:   mov    %ebx,%eax
    0.00 :   3c58:   cltd
    0.00 :   3c59:   idiv   %r12d
    0.00 :   3c5c:   mov    %eax,%ecx
    0.00 :   3c5e:   mov    %ebx,%eax
    0.00 :   3c60:   cltd
    0.00 :   3c61:   idiv   %r12d
    0.00 :   3c64:   mov    %edx,%eax
    0.00 :   3c66:   cmp    %eax,%esi
    0.00 :   3c68:   jl     3e82 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x26a>
    0.00 :   3c6e:   imul   %ecx,%esi
    0.00 :   3c71:   mov    %esi,%edx
    0.00 :   3c73:   add    %edx,%eax
    0.00 :   3c75:   lea    (%rax,%rcx,1),%ebx
    0.00 :   3c78:   cmp    %ebx,%eax
    0.00 :   3c7a:   jge    3e8f <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x277>
    0.00 :   3c80:   mov    %eax,-0x50(%rbp)
    0.00 :   3c83:   mov    -0x50(%rbp),%eax
    0.00 :   3c86:   movslq %eax,%rdx
    0.00 :   3c89:   mov    -0x58(%rbp),%rax
    0.00 :   3c8d:   mov    (%rax),%rax
    0.00 :   3c90:   mov    %rdx,%rsi
    0.00 :   3c93:   mov    %rax,%rdi
    0.00 :   3c96:   call   4790 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :   3c9b:   mov    (%rax),%eax
    0.00 :   3c9d:   mov    %eax,-0x40(%rbp)
    0.00 :   3ca0:   mov    -0x50(%rbp),%eax
    0.00 :   3ca3:   movslq %eax,%rdx
    0.00 :   3ca6:   mov    -0x58(%rbp),%rax
    0.00 :   3caa:   mov    0x8(%rax),%rax
    0.00 :   3cae:   mov    %rdx,%rsi
    0.00 :   3cb1:   mov    %rax,%rdi
    0.00 :   3cb4:   call   4634 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long)>
    0.00 :   3cb9:   mov    %rax,%rdi
    0.00 :   3cbc:   call   4916 <std::vector<int, std::allocator<int> >::size() const>
    0.00 :   3cc1:   mov    %eax,-0x3c(%rbp)
    0.00 :   3cc4:   lea    -0x38(%rbp),%rax
    0.00 :   3cc8:   mov    %rax,%rdi
    0.00 :   3ccb:   call   493e <std::allocator<std::pair<int, float> >::allocator()>
    0.00 :   3cd0:   mov    -0x3c(%rbp),%eax
    0.00 :   3cd3:   movslq %eax,%rcx
    0.00 :   3cd6:   lea    -0x38(%rbp),%rdx
    0.00 :   3cda:   lea    -0x30(%rbp),%rax
    0.00 :   3cde:   mov    %rcx,%rsi
    0.00 :   3ce1:   mov    %rax,%rdi
    0.00 :   3ce4:   call   497e <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::vector(unsigned long, std::allocator<std::pair<int, float> > const&)>
    0.00 :   3ce9:   lea    -0x38(%rbp),%rax
    0.00 :   3ced:   mov    %rax,%rdi
    0.00 :   3cf0:   call   495e <std::allocator<std::pair<int, float> >::~allocator()>
    0.00 :   3cf5:   movl   $0x0,-0x4c(%rbp)
    0.00 :   3cfc:   nop
    0.00 :   3cfd:   mov    -0x4c(%rbp),%eax
    7.36 :   3d00:   cmp    -0x3c(%rbp),%eax
    0.00 :   3d03:   jl     3de5 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x1cd>
    0.00 :   3d09:   lea    -0x30(%rbp),%rax
    0.00 :   3d0d:   mov    %rax,%rdi
    0.00 :   3d10:   call   4b6c <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::end()>
    0.00 :   3d15:   mov    %rax,%r12
    0.00 :   3d18:   lea    -0x30(%rbp),%rax
    0.00 :   3d1c:   mov    %rax,%rdi
    0.00 :   3d1f:   call   4b20 <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::begin()>
    0.00 :   3d24:   mov    %r12,%rsi
    0.00 :   3d27:   mov    %rax,%rdi
    0.00 :   3d2a:   call   4bbc <void std::sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   3d2f:   movl   $0x0,-0x48(%rbp)
    0.00 :   3d36:   nop
    0.00 :   3d37:   mov    -0x48(%rbp),%eax
    0.00 :   3d3a:   cmp    -0x3c(%rbp),%eax
    0.00 :   3d3d:   jl     3d5d <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x145>
    0.00 :   3d3f:   lea    -0x30(%rbp),%rax
    0.00 :   3d43:   mov    %rax,%rdi
    0.00 :   3d46:   call   49fc <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::~vector()>
    0.00 :   3d4b:   addl   $0x1,-0x50(%rbp)
    0.00 :   3d4f:   cmp    %ebx,-0x50(%rbp)
    0.00 :   3d52:   jl     3c83 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x6b>
    0.00 :   3d58:   jmp    3e8f <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x277>
    0.00 :   3d5d:   mov    -0x48(%rbp),%eax
    0.00 :   3d60:   movslq %eax,%rdx
    0.00 :   3d63:   lea    -0x30(%rbp),%rax
    0.00 :   3d67:   mov    %rdx,%rsi
    2.99 :   3d6a:   mov    %rax,%rdi
    0.00 :   3d6d:   call   4a44 <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long)>
    4.43 :   3d72:   mov    (%rax),%r12d
    7.38 :   3d75:   mov    -0x40(%rbp),%edx
    0.00 :   3d78:   mov    -0x48(%rbp),%eax
    0.00 :   3d7b:   add    %edx,%eax
    0.00 :   3d7d:   movslq %eax,%rdx
    0.00 :   3d80:   mov    -0x58(%rbp),%rax
    0.00 :   3d84:   mov    0x18(%rax),%rax
    0.00 :   3d88:   mov    %rdx,%rsi
    0.00 :   3d8b:   mov    %rax,%rdi
    0.00 :   3d8e:   call   4790 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    1.49 :   3d93:   mov    %r12d,(%rax)
    4.49 :   3d96:   mov    -0x48(%rbp),%eax
    0.00 :   3d99:   movslq %eax,%rdx
    0.00 :   3d9c:   lea    -0x30(%rbp),%rax
    0.00 :   3da0:   mov    %rdx,%rsi
    0.00 :   3da3:   mov    %rax,%rdi
    0.00 :   3da6:   call   4a44 <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long)>
    0.00 :   3dab:   movss  0x4(%rax),%xmm0
   11.78 :   3db0:   movss  %xmm0,-0x5c(%rbp)
    1.48 :   3db5:   mov    -0x40(%rbp),%edx
    0.00 :   3db8:   mov    -0x48(%rbp),%eax
    0.00 :   3dbb:   add    %edx,%eax
    0.00 :   3dbd:   movslq %eax,%rdx
    0.00 :   3dc0:   mov    -0x58(%rbp),%rax
    0.00 :   3dc4:   mov    0x20(%rax),%rax
    0.00 :   3dc8:   mov    %rdx,%rsi
    0.00 :   3dcb:   mov    %rax,%rdi
    7.31 :   3dce:   call   4a68 <std::vector<float, std::allocator<float> >::operator[](unsigned long)>
    0.00 :   3dd3:   movss  -0x5c(%rbp),%xmm0
    1.48 :   3dd8:   movss  %xmm0,(%rax)
   20.61 :   3ddc:   addl   $0x1,-0x48(%rbp)
    0.00 :   3de0:   jmp    3d37 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x11f>
    0.00 :   3de5:   mov    -0x50(%rbp),%eax
    0.00 :   3de8:   movslq %eax,%rdx
    0.00 :   3deb:   mov    -0x58(%rbp),%rax
    0.00 :   3def:   mov    0x8(%rax),%rax
    2.71 :   3df3:   mov    %rdx,%rsi
    0.00 :   3df6:   mov    %rax,%rdi
    0.00 :   3df9:   call   4634 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long)>
    2.80 :   3dfe:   mov    %rax,%rdx
    0.00 :   3e01:   mov    -0x4c(%rbp),%eax
    0.00 :   3e04:   cltq
    0.00 :   3e06:   mov    %rax,%rsi
    0.00 :   3e09:   mov    %rdx,%rdi
    0.00 :   3e0c:   call   4790 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    0.00 :   3e11:   mov    %rax,%r12
    0.00 :   3e14:   mov    -0x50(%rbp),%eax
    5.92 :   3e17:   movslq %eax,%rdx
    1.48 :   3e1a:   mov    -0x58(%rbp),%rax
    0.00 :   3e1e:   mov    0x10(%rax),%rax
    1.48 :   3e22:   mov    %rdx,%rsi
    0.00 :   3e25:   mov    %rax,%rdi
    0.00 :   3e28:   call   46e2 <std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >::operator[](unsigned long)>
    0.00 :   3e2d:   mov    %rax,%rdx
    4.45 :   3e30:   mov    -0x4c(%rbp),%eax
    0.00 :   3e33:   cltq
    0.00 :   3e35:   mov    %rax,%rsi
    0.00 :   3e38:   mov    %rdx,%rdi
    0.00 :   3e3b:   call   4a68 <std::vector<float, std::allocator<float> >::operator[](unsigned long)>
    0.00 :   3e40:   mov    %rax,%rdx
    0.00 :   3e43:   lea    -0x38(%rbp),%rax
    2.97 :   3e47:   mov    %r12,%rsi
    0.00 :   3e4a:   mov    %rax,%rdi
    0.00 :   3e4d:   call   4a8c <std::pair<int, float>::pair<int&, float&, true>(int&, float&)>
    0.00 :   3e52:   mov    -0x4c(%rbp),%eax
    0.00 :   3e55:   movslq %eax,%rdx
    0.00 :   3e58:   lea    -0x30(%rbp),%rax
    4.45 :   3e5c:   mov    %rdx,%rsi
    0.00 :   3e5f:   mov    %rax,%rdi
    0.00 :   3e62:   call   4a44 <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long)>
    2.94 :   3e67:   mov    %rax,%rdx
    0.00 :   3e6a:   lea    -0x38(%rbp),%rax
    0.00 :   3e6e:   mov    %rax,%rsi
    0.00 :   3e71:   mov    %rdx,%rdi
    0.00 :   3e74:   call   4ad4 <std::pair<int, float>::operator=(std::pair<int, float>&&)>
    0.00 :   3e79:   addl   $0x1,-0x4c(%rbp)
    0.00 :   3e7d:   jmp    3cfd <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0xe5>
    0.00 :   3e82:   mov    $0x0,%eax
    0.00 :   3e87:   add    $0x1,%ecx
    0.00 :   3e8a:   jmp    3c6e <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x56>
    0.00 :   3e8f:   mov    -0x18(%rbp),%rax
    0.00 :   3e93:   sub    %fs:0x28,%rax
    0.00 :   3e9c:   je     3ea3 <spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1]+0x28b>
    0.00 :   3e9e:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   3ea3:   add    $0x50,%rsp
    0.00 :   3ea7:   pop    %rbx
    0.00 :   3ea8:   pop    %r12
    0.00 :   3eaa:   pop    %rbp
    0.00 :   3eab:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (66 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a80 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>:
    1.38 :   7a80:   endbr64
    0.00 :   7a84:   push   %rbp
    0.00 :   7a85:   mov    %rsp,%rbp
    0.00 :   7a88:   push   %r14
    0.00 :   7a8a:   push   %r13
    0.00 :   7a8c:   push   %r12
    0.00 :   7a8e:   push   %rbx
    4.64 :   7a8f:   sub    $0x30,%rsp
    0.00 :   7a93:   mov    %rdi,-0x38(%rbp)
    1.55 :   7a97:   mov    %rsi,-0x40(%rbp)
    0.00 :   7a9b:   mov    %rdx,-0x48(%rbp)
    0.00 :   7a9f:   mov    %rcx,-0x50(%rbp)
    0.00 :   7aa3:   mov    -0x38(%rbp),%rax
    4.61 :   7aa7:   mov    %rax,%rdi
    0.00 :   7aaa:   call   86f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>
    0.00 :   7aaf:   mov    $0x1,%esi
    1.55 :   7ab4:   mov    %rax,%rdi
    0.00 :   7ab7:   call   892a <std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, unsigned long)>
    1.54 :   7abc:   mov    %rax,-0x30(%rbp)
    6.17 :   7ac0:   mov    -0x30(%rbp),%rax
   19.95 :   7ac4:   mov    %rax,%rdi
    0.00 :   7ac7:   call   8958 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__to_address<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    0.00 :   7acc:   mov    %rax,-0x28(%rbp)
    1.55 :   7ad0:   mov    -0x28(%rbp),%rax
   27.67 :   7ad4:   mov    %rax,%rsi
    0.00 :   7ad7:   mov    $0x10,%edi
    0.00 :   7adc:   call   3f09 <operator new(unsigned long, void*)>
    1.54 :   7ae1:   mov    %rax,%rdi
    0.00 :   7ae4:   call   7a60 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_Hash_node()>
    0.00 :   7ae9:   mov    -0x50(%rbp),%rax
    0.00 :   7aed:   mov    %rax,%rdi
    0.00 :   7af0:   call   7a4e <std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&)>
    1.54 :   7af5:   mov    %rax,%r14
    0.00 :   7af8:   mov    -0x48(%rbp),%rax
    0.00 :   7afc:   mov    %rax,%rdi
    3.09 :   7aff:   call   7a3c <std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&)>
    0.00 :   7b04:   mov    %rax,%r13
    0.00 :   7b07:   mov    -0x40(%rbp),%rax
    0.00 :   7b0b:   mov    %rax,%rdi
    0.00 :   7b0e:   call   7a2a <std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)>
    2.33 :   7b13:   mov    %rax,%r12
    0.93 :   7b16:   mov    -0x28(%rbp),%rax
    0.00 :   7b1a:   add    $0x8,%rax
    0.00 :   7b1e:   mov    %rax,%rdi
    0.00 :   7b21:   call   688e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr()>
    0.00 :   7b26:   mov    %rax,%rbx
    0.00 :   7b29:   mov    -0x38(%rbp),%rax
    1.53 :   7b2d:   mov    %rax,%rdi
    0.00 :   7b30:   call   86f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>
    3.07 :   7b35:   mov    %r14,%r8
    1.54 :   7b38:   mov    %r13,%rcx
    0.00 :   7b3b:   mov    %r12,%rdx
    0.00 :   7b3e:   mov    %rbx,%rsi
    0.00 :   7b41:   mov    %rax,%rdi
    0.00 :   7b44:   call   896a <void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>
    6.15 :   7b49:   mov    -0x28(%rbp),%rax
    3.06 :   7b4d:   jmp    7b9a <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)+0x11a>
    0.00 :   7b4f:   endbr64
    0.00 :   7b53:   mov    %rax,%rdi
    0.00 :   7b56:   call   2360 <__cxa_begin_catch@plt>
    0.00 :   7b5b:   mov    -0x38(%rbp),%rax
    0.00 :   7b5f:   mov    %rax,%rdi
    0.00 :   7b62:   call   86f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>
    0.00 :   7b67:   mov    %rax,%rcx
    0.00 :   7b6a:   mov    -0x30(%rbp),%rax
    0.00 :   7b6e:   mov    $0x1,%edx
    0.00 :   7b73:   mov    %rax,%rsi
    0.00 :   7b76:   mov    %rcx,%rdi
    0.00 :   7b79:   call   89da <std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>
    0.00 :   7b7e:   call   24f0 <__cxa_rethrow@plt>
    0.00 :   7b83:   endbr64
    0.00 :   7b87:   mov    %rax,%rbx
    0.00 :   7b8a:   call   2560 <__cxa_end_catch@plt>
    0.00 :   7b8f:   mov    %rbx,%rax
    0.00 :   7b92:   mov    %rax,%rdi
    0.00 :   7b95:   call   2580 <_Unwind_Resume@plt>
    0.00 :   7b9a:   add    $0x30,%rsp
    1.54 :   7b9e:   pop    %rbx
    0.00 :   7b9f:   pop    %r12
    0.00 :   7ba1:   pop    %r13
    1.55 :   7ba3:   pop    %r14
    1.53 :   7ba5:   pop    %rbp
    0.00 :   7ba6:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (66 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a50a0 <__libc_malloc>:
    1.56 :   a50a0:  endbr64
    0.00 :   a50a4:  push   %r12
    1.58 :   a50a6:  push   %rbp
    0.00 :   a50a7:  mov    %rdi,%rbp
    0.00 :   a50aa:  push   %rbx
    3.17 :   a50ab:  sub    $0x10,%rsp
    0.00 :   a50af:  cmpb   $0x0,0x17c432(%rip)        # 2214e8 <__malloc_initialized>
    1.59 :   a50b6:  je     a52d0 <__libc_malloc+0x230>
    3.15 :   a50bc:  test   %rbp,%rbp
    0.00 :   a50bf:  js     a52de <__libc_malloc+0x23e>
    0.00 :   a50c5:  lea    0x17(%rbp),%rax
    0.00 :   a50c9:  xor    %r12d,%r12d
    0.00 :   a50cc:  cmp    $0x1f,%rax
    3.19 :   a50d0:  ja     a51b0 <__libc_malloc+0x110>
    0.00 :   a50d6:  mov    0x174ccb(%rip),%rbx        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a50dd:  mov    %fs:(%rbx),%rdx
   17.88 :   a50e1:  test   %rdx,%rdx
    0.00 :   a50e4:  je     a51c8 <__libc_malloc+0x128>
    0.00 :   a50ea:  cmp    %r12,0x1752d7(%rip)        # 21a3c8 <mp_+0x68>
    1.60 :   a50f1:  ja     a5200 <__libc_malloc+0x160>
    0.00 :   a50f7:  mov    %fs:0x18,%eax
   14.30 :   a50ff:  test   %eax,%eax
    1.58 :   a5101:  je     a5250 <__libc_malloc+0x1b0>
    0.00 :   a5107:  mov    0x174c92(%rip),%rax        # 219da0 <_DYNAMIC+0x1e0>
    0.00 :   a510e:  mov    %fs:(%rax),%r12
    1.60 :   a5112:  test   %r12,%r12
    0.00 :   a5115:  je     a5310 <__libc_malloc+0x270>
    0.00 :   a511b:  xor    %eax,%eax
    0.00 :   a511d:  mov    $0x1,%edx
    0.00 :   a5122:  lock cmpxchg %edx,(%r12)
    1.51 :   a5128:  jne    a53c0 <__libc_malloc+0x320>
    0.00 :   a512e:  mov    %rbp,%rsi
    0.00 :   a5131:  mov    %r12,%rdi
    0.00 :   a5134:  call   a39b0 <_int_malloc>
    0.00 :   a5139:  test   %rax,%rax
    0.00 :   a513c:  je     a5350 <__libc_malloc+0x2b0>
    0.00 :   a5142:  xor    %edx,%edx
    0.00 :   a5144:  xchg   %edx,(%r12)
    0.00 :   a5148:  cmp    $0x1,%edx
    0.00 :   a514b:  jg     a53a0 <__libc_malloc+0x300>
    0.00 :   a5151:  test   %rax,%rax
    0.00 :   a5154:  je     a5300 <__libc_malloc+0x260>
    0.00 :   a515a:  mov    -0x8(%rax),%rdx
    1.59 :   a515e:  test   $0x2,%dl
    0.00 :   a5161:  jne    a51a2 <__libc_malloc+0x102>
    0.00 :   a5163:  and    $0x4,%edx
    0.00 :   a5166:  lea    0x175b13(%rip),%rcx        # 21ac80 <main_arena>
    0.00 :   a516d:  je     a5199 <__libc_malloc+0xf9>
    0.00 :   a516f:  mov    0x17521a(%rip),%rcx        # 21a390 <mp_+0x30>
    0.00 :   a5176:  lea    0x0(,%rcx,4),%rdx
    0.00 :   a517e:  neg    %rdx
    0.00 :   a5181:  test   %rcx,%rcx
    0.00 :   a5184:  mov    $0xfffffffffc000000,%rcx
    0.00 :   a518b:  cmove  %rcx,%rdx
    0.00 :   a518f:  lea    -0x10(%rax),%rcx
    0.00 :   a5193:  and    %rcx,%rdx
    0.00 :   a5196:  mov    (%rdx),%rcx
    0.00 :   a5199:  cmp    %r12,%rcx
    0.00 :   a519c:  jne    a5378 <__libc_malloc+0x2d8>
    0.00 :   a51a2:  add    $0x10,%rsp
    0.00 :   a51a6:  pop    %rbx
    0.00 :   a51a7:  pop    %rbp
    0.00 :   a51a8:  pop    %r12
    0.00 :   a51aa:  ret
    0.00 :   a51ab:  nopl   0x0(%rax,%rax,1)
    0.00 :   a51b0:  and    $0xfffffffffffffff0,%rax
    0.00 :   a51b4:  lea    -0x11(%rax),%r12
    0.00 :   a51b8:  shr    $0x4,%r12
    3.11 :   a51bc:  jmp    a50d6 <__libc_malloc+0x36>
    0.00 :   a51c1:  nopl   0x0(%rax)
    0.00 :   a51c8:  mov    0x174be1(%rip),%rax        # 219db0 <_DYNAMIC+0x1f0>
    0.00 :   a51cf:  cmpb   $0x0,%fs:(%rax)
    0.00 :   a51d3:  jne    a50f7 <__libc_malloc+0x57>
    0.00 :   a51d9:  call   a4990 <tcache_init.part.0>
    0.00 :   a51de:  cmp    %r12,0x1751e3(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a51e5:  jbe    a50f7 <__libc_malloc+0x57>
    0.00 :   a51eb:  mov    %fs:(%rbx),%rdx
    0.00 :   a51ef:  test   %rdx,%rdx
    0.00 :   a51f2:  je     a50f7 <__libc_malloc+0x57>
    0.00 :   a51f8:  nopl   0x0(%rax,%rax,1)
    0.00 :   a5200:  movzwl (%rdx,%r12,2),%ecx
   10.99 :   a5205:  test   %cx,%cx
    3.11 :   a5208:  je     a50f7 <__libc_malloc+0x57>
    0.00 :   a520e:  lea    0x10(%r12),%rdi
    4.76 :   a5213:  mov    (%rdx,%rdi,8),%rax
    3.16 :   a5217:  test   $0xf,%al
    1.58 :   a5219:  jne    a53d0 <__libc_malloc+0x330>
    0.00 :   a521f:  mov    %rax,%rsi
    0.00 :   a5222:  sub    $0x1,%ecx
    1.59 :   a5225:  shr    $0xc,%rsi
    0.00 :   a5229:  xor    (%rax),%rsi
   14.22 :   a522c:  mov    %rsi,(%rdx,%rdi,8)
    0.00 :   a5230:  mov    %cx,(%rdx,%r12,2)
    0.00 :   a5235:  movq   $0x0,0x8(%rax)
    1.57 :   a523d:  add    $0x10,%rsp
    0.00 :   a5241:  pop    %rbx
    0.00 :   a5242:  pop    %rbp
    1.59 :   a5243:  pop    %r12
    0.00 :   a5245:  ret
    0.00 :   a5246:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   a5250:  lea    0x175a29(%rip),%rbx        # 21ac80 <main_arena>
    0.00 :   a5257:  mov    %rbp,%rsi
    0.00 :   a525a:  mov    %rbx,%rdi
    0.00 :   a525d:  call   a39b0 <_int_malloc>
    0.00 :   a5262:  test   %rax,%rax
    0.00 :   a5265:  je     a5300 <__libc_malloc+0x260>
    0.00 :   a526b:  mov    -0x8(%rax),%rdx
    0.00 :   a526f:  test   $0x2,%dl
    0.00 :   a5272:  jne    a51a2 <__libc_malloc+0x102>
    0.00 :   a5278:  and    $0x4,%edx
    0.00 :   a527b:  je     a51a2 <__libc_malloc+0x102>
    0.00 :   a5281:  mov    0x175108(%rip),%rcx        # 21a390 <mp_+0x30>
    0.00 :   a5288:  lea    0x0(,%rcx,4),%rdx
    0.00 :   a5290:  neg    %rdx
    0.00 :   a5293:  test   %rcx,%rcx
    0.00 :   a5296:  mov    $0xfffffffffc000000,%rcx
    0.00 :   a529d:  cmove  %rcx,%rdx
    0.00 :   a52a1:  lea    -0x10(%rax),%rcx
    0.00 :   a52a5:  and    %rcx,%rdx
    0.00 :   a52a8:  cmp    %rbx,(%rdx)
    0.00 :   a52ab:  je     a51a2 <__libc_malloc+0x102>
    0.00 :   a52b1:  lea    0x139f80(%rip),%rcx        # 1df238 <__PRETTY_FUNCTION__.1>
    0.00 :   a52b8:  mov    $0xcfa,%edx
    0.00 :   a52bd:  lea    0x1343c8(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a52c4:  lea    0x139b85(%rip),%rdi        # 1dee50 <__PRETTY_FUNCTION__.1+0xd10>
    0.00 :   a52cb:  call   a0e70 <__malloc_assert>
    0.00 :   a52d0:  call   a19b0 <ptmalloc_init.part.0>
    0.00 :   a52d5:  test   %rbp,%rbp
    0.00 :   a52d8:  jns    a50c5 <__libc_malloc+0x25>
    0.00 :   a52de:  mov    0x174b2b(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   a52e5:  movl   $0xc,%fs:(%rax)
    0.00 :   a52ec:  add    $0x10,%rsp
    0.00 :   a52f0:  xor    %eax,%eax
    0.00 :   a52f2:  pop    %rbx
    0.00 :   a52f3:  pop    %rbp
    0.00 :   a52f4:  pop    %r12
    0.00 :   a52f6:  ret
    0.00 :   a52f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   a5300:  add    $0x10,%rsp
    0.00 :   a5304:  xor    %eax,%eax
    0.00 :   a5306:  pop    %rbx
    0.00 :   a5307:  pop    %rbp
    0.00 :   a5308:  pop    %r12
    0.00 :   a530a:  ret
    0.00 :   a530b:  nopl   0x0(%rax,%rax,1)
    0.00 :   a5310:  call   a1090 <get_free_list>
    0.00 :   a5315:  mov    %rax,%r12
    0.00 :   a5318:  test   %rax,%rax
    0.00 :   a531b:  jne    a512e <__libc_malloc+0x8e>
    0.00 :   a5321:  xor    %esi,%esi
    0.00 :   a5323:  mov    %rbp,%rdi
    0.00 :   a5326:  call   a1ee0 <arena_get2.part.0>
    0.00 :   a532b:  mov    %rbp,%rsi
    0.00 :   a532e:  mov    %rax,%rdi
    0.00 :   a5331:  mov    %rax,%r12
    0.00 :   a5334:  call   a39b0 <_int_malloc>
    0.00 :   a5339:  test   %rax,%rax
    0.00 :   a533c:  jne    a536a <__libc_malloc+0x2ca>
    0.00 :   a533e:  test   %r12,%r12
    0.00 :   a5341:  je     a5151 <__libc_malloc+0xb1>
    0.00 :   a5347:  nopw   0x0(%rax,%rax,1)
    0.00 :   a5350:  nop
    0.00 :   a5351:  mov    %r12,%rdi
    0.00 :   a5354:  mov    %rbp,%rsi
    0.00 :   a5357:  call   a23c0 <arena_get_retry>
    0.00 :   a535c:  mov    %rbp,%rsi
    0.00 :   a535f:  mov    %rax,%rdi
    0.00 :   a5362:  mov    %rax,%r12
    0.00 :   a5365:  call   a39b0 <_int_malloc>
    0.00 :   a536a:  test   %r12,%r12
    0.00 :   a536d:  je     a5151 <__libc_malloc+0xb1>
    0.00 :   a5373:  jmp    a5142 <__libc_malloc+0xa2>
    0.00 :   a5378:  lea    0x139eb9(%rip),%rcx        # 1df238 <__PRETTY_FUNCTION__.1>
    0.00 :   a537f:  mov    $0xd10,%edx
    0.00 :   a5384:  lea    0x134301(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a538b:  lea    0x139b26(%rip),%rdi        # 1deeb8 <__PRETTY_FUNCTION__.1+0xd78>
    0.00 :   a5392:  call   a0e70 <__malloc_assert>
    0.00 :   a5397:  nopw   0x0(%rax,%rax,1)
    0.00 :   a53a0:  mov    %r12,%rdi
    0.00 :   a53a3:  mov    %rax,0x8(%rsp)
    0.00 :   a53a8:  call   91300 <__lll_lock_wake_private>
    0.00 :   a53ad:  mov    0x8(%rsp),%rax
    0.00 :   a53b2:  jmp    a5151 <__libc_malloc+0xb1>
    0.00 :   a53b7:  nopw   0x0(%rax,%rax,1)
    0.00 :   a53c0:  mov    %r12,%rdi
    0.00 :   a53c3:  call   91230 <__lll_lock_wait_private>
    0.00 :   a53c8:  jmp    a512e <__libc_malloc+0x8e>
    0.00 :   a53cd:  nopl   (%rax)
    0.00 :   a53d0:  lea    0x139949(%rip),%rdi        # 1ded20 <__PRETTY_FUNCTION__.1+0xbe0>
    0.00 :   a53d7:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (63 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000093f8 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter)>:
    0.00 :   93f8:   endbr64
    0.00 :   93fc:   push   %rbp
    0.00 :   93fd:   mov    %rsp,%rbp
    1.60 :   9400:   push   %rbx
    0.00 :   9401:   sub    $0x38,%rsp
    0.00 :   9405:   mov    %rdi,-0x38(%rbp)
    0.00 :   9409:   mov    %fs:0x28,%rax
    0.00 :   9412:   mov    %rax,-0x18(%rbp)
    0.00 :   9416:   xor    %eax,%eax
    0.00 :   9418:   lea    -0x38(%rbp),%rax
    0.00 :   941c:   mov    %rax,%rdi
    0.00 :   941f:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   9424:   mov    %rax,%rdi
    0.00 :   9427:   call   9397 <std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&)>
    0.00 :   942c:   mov    (%rax),%rax
   16.03 :   942f:   mov    %rax,-0x20(%rbp)
    0.00 :   9433:   mov    -0x38(%rbp),%rax
    0.00 :   9437:   mov    %rax,-0x28(%rbp)
    0.00 :   943b:   lea    -0x28(%rbp),%rax
    0.00 :   943f:   mov    %rax,%rdi
    0.00 :   9442:   call   9ee8 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator--()>
    1.60 :   9447:   jmp    948b <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter)+0x93>
    0.00 :   9449:   lea    -0x28(%rbp),%rax
    0.00 :   944d:   mov    %rax,%rdi
    0.00 :   9450:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   9455:   mov    %rax,%rdi
    0.00 :   9458:   call   9397 <std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&)>
    0.00 :   945d:   mov    %rax,%rbx
    0.00 :   9460:   lea    -0x38(%rbp),%rax
    0.00 :   9464:   mov    %rax,%rdi
    4.68 :   9467:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   946c:   mov    %rbx,%rsi
    0.00 :   946f:   mov    %rax,%rdi
    0.00 :   9472:   call   4ad4 <std::pair<int, float>::operator=(std::pair<int, float>&&)>
    0.00 :   9477:   mov    -0x28(%rbp),%rax
    0.00 :   947b:   mov    %rax,-0x38(%rbp)
    4.75 :   947f:   lea    -0x28(%rbp),%rax
    3.21 :   9483:   mov    %rax,%rdi
    0.00 :   9486:   call   9ee8 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator--()>
    0.00 :   948b:   mov    -0x28(%rbp),%rdx
   55.82 :   948f:   lea    -0x20(%rbp),%rcx
    0.00 :   9493:   lea    -0x39(%rbp),%rax
    1.60 :   9497:   mov    %rcx,%rsi
    0.00 :   949a:   mov    %rax,%rdi
    0.00 :   949d:   call   a024 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::pair<int, float>, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(std::pair<int, float>&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    6.43 :   94a2:   test   %al,%al
    0.00 :   94a4:   jne    9449 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter)+0x51>
    0.00 :   94a6:   lea    -0x20(%rbp),%rax
    0.00 :   94aa:   mov    %rax,%rdi
    0.00 :   94ad:   call   9397 <std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&)>
    0.00 :   94b2:   mov    %rax,%rbx
    0.00 :   94b5:   lea    -0x38(%rbp),%rax
    0.00 :   94b9:   mov    %rax,%rdi
    0.00 :   94bc:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   94c1:   mov    %rbx,%rsi
    0.00 :   94c4:   mov    %rax,%rdi
    0.00 :   94c7:   call   4ad4 <std::pair<int, float>::operator=(std::pair<int, float>&&)>
    0.00 :   94cc:   nop
    0.00 :   94cd:   mov    -0x18(%rbp),%rax
    0.00 :   94d1:   sub    %fs:0x28,%rax
    3.21 :   94da:   je     94e1 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter)+0xe9>
    0.00 :   94dc:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   94e1:   mov    -0x8(%rbp),%rbx
    1.06 :   94e5:   leave
    0.00 :   94e6:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (57 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013c9d0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9>:
    2.43 :   13c9d0: endbr64
    0.00 :   13c9d4: push   %r15
    0.00 :   13c9d6: push   %r14
    0.00 :   13c9d8: push   %r13
    0.00 :   13c9da: mov    %rdx,%r13
    2.06 :   13c9dd: push   %r12
    0.00 :   13c9df: push   %rbp
    0.00 :   13c9e0: push   %rbx
    1.71 :   13c9e1: mov    %rdi,%rbx
    0.00 :   13c9e4: sub    $0x48,%rsp
    0.00 :   13c9e8: mov    %rsi,(%rsp)
    2.29 :   13c9ec: lea    0x20(%rsp),%r15
    0.00 :   13c9f1: mov    %rdi,%rsi
    0.00 :   13c9f4: mov    %r15,%rdi
    0.00 :   13c9f7: mov    %fs:0x28,%rax
    1.62 :   13ca00: mov    %rax,0x38(%rsp)
    0.00 :   13ca05: xor    %eax,%eax
    0.00 :   13ca07: call   a21f0 <std::ostream::sentry::sentry(std::ostream&)@plt>
    1.65 :   13ca0c: cmpb   $0x0,0x20(%rsp)
   18.02 :   13ca11: je     13cae9 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x119>
    3.44 :   13ca17: mov    (%rbx),%rax
    0.00 :   13ca1a: mov    -0x18(%rax),%rax
    0.00 :   13ca1e: lea    (%rbx,%rax,1),%r12
    0.00 :   13ca22: mov    0x10(%r12),%rcx
    4.55 :   13ca27: mov    %rcx,0x8(%rsp)
    0.83 :   13ca2c: cmp    %rcx,%r13
    3.29 :   13ca2f: jge    13cb50 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x180>
    0.00 :   13ca35: mov    0x18(%r12),%ecx
    0.00 :   13ca3a: and    $0xb0,%ecx
    0.00 :   13ca40: mov    %ecx,0x14(%rsp)
    0.00 :   13ca44: cmp    $0x20,%ecx
    0.00 :   13ca47: je     13cba4 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x1d4>
    0.00 :   13ca4d: mov    0x8(%rsp),%rbp
    0.00 :   13ca52: sub    %r13,%rbp
    0.00 :   13ca55: cmpb   $0x0,0xe1(%r12)
    0.00 :   13ca5e: je     13cc88 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x2b8>
    0.00 :   13ca64: movzbl 0xe0(%r12),%r14d
    0.00 :   13ca6d: jmp    13ca89 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0xb9>
    0.00 :   13ca6f: nop
    0.00 :   13ca70: mov    %r14b,(%rax)
    0.00 :   13ca73: addq   $0x1,0x28(%rdi)
    0.00 :   13ca78: mov    (%rbx),%rax
    0.00 :   13ca7b: mov    -0x18(%rax),%rax
    0.00 :   13ca7f: sub    $0x1,%rbp
    0.00 :   13ca83: je     13cba0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x1d0>
    0.00 :   13ca89: mov    0xe8(%rbx,%rax,1),%rdi
    0.00 :   13ca91: mov    0x28(%rdi),%rax
    0.00 :   13ca95: cmp    0x30(%rdi),%rax
    0.00 :   13ca99: jb     13ca70 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0xa0>
    0.00 :   13ca9b: mov    (%rdi),%rax
    0.00 :   13ca9e: movzbl %r14b,%esi
    0.00 :   13caa2: call   *0x68(%rax)
    0.00 :   13caa5: cmp    $0xffffffff,%eax
    0.00 :   13caa8: jne    13ca78 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0xa8>
    0.00 :   13caaa: mov    (%rbx),%rax
    0.00 :   13caad: mov    -0x18(%rax),%rdi
    0.00 :   13cab1: add    %rbx,%rdi
    0.00 :   13cab4: mov    0x20(%rdi),%esi
    0.00 :   13cab7: or     $0x1,%esi
    0.00 :   13caba: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cabf: mov    (%rbx),%rax
    0.00 :   13cac2: mov    -0x18(%rax),%r12
    0.00 :   13cac6: add    %rbx,%r12
    0.00 :   13cac9: mov    0x20(%r12),%esi
    0.00 :   13cace: test   %esi,%esi
    0.00 :   13cad0: je     13cbb1 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x1e1>
    0.00 :   13cad6: cs nopw 0x0(%rax,%rax,1)
    0.00 :   13cae0: movq   $0x0,0x10(%r12)
   13.74 :   13cae9: mov    0x28(%rsp),%rax
    0.00 :   13caee: mov    (%rax),%rdx
    0.00 :   13caf1: add    -0x18(%rdx),%rax
   17.17 :   13caf5: mov    %rax,%rbp
    0.00 :   13caf8: testb  $0x20,0x19(%rax)
   14.79 :   13cafc: je     13cb28 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x158>
    0.00 :   13cafe: call   9f820 <std::uncaught_exception()@plt>
    0.00 :   13cb03: test   %al,%al
    0.00 :   13cb05: jne    13cb28 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x158>
    0.00 :   13cb07: mov    0xe8(%rbp),%rdi
    0.00 :   13cb0e: test   %rdi,%rdi
    0.00 :   13cb11: je     13cb28 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x158>
    0.00 :   13cb13: mov    (%rdi),%rax
    0.00 :   13cb16: call   *0x30(%rax)
    0.00 :   13cb19: cmp    $0xffffffff,%eax
    0.00 :   13cb1c: je     13ccd0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x300>
    0.00 :   13cb22: nopw   0x0(%rax,%rax,1)
    0.00 :   13cb28: mov    0x38(%rsp),%rax
    0.00 :   13cb2d: sub    %fs:0x28,%rax
    0.00 :   13cb36: jne    13cd96 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x3c6>
    0.00 :   13cb3c: add    $0x48,%rsp
    0.00 :   13cb40: mov    %rbx,%rax
    0.00 :   13cb43: pop    %rbx
    0.00 :   13cb44: pop    %rbp
    0.00 :   13cb45: pop    %r12
    1.64 :   13cb47: pop    %r13
    0.00 :   13cb49: pop    %r14
    0.00 :   13cb4b: pop    %r15
    0.00 :   13cb4d: ret
    0.00 :   13cb4e: xchg   %ax,%ax
    0.00 :   13cb50: mov    0xe8(%r12),%rdi
    0.00 :   13cb58: mov    (%rsp),%rsi
    0.00 :   13cb5c: mov    %r13,%rdx
    0.00 :   13cb5f: mov    (%rdi),%rax
    5.07 :   13cb62: call   *0x60(%rax)
    5.70 :   13cb65: mov    (%rbx),%rdx
    0.00 :   13cb68: mov    -0x18(%rdx),%r12
    0.00 :   13cb6c: add    %rbx,%r12
    0.00 :   13cb6f: cmp    %rax,%r13
    0.00 :   13cb72: je     13cae0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13cb78: mov    0x20(%r12),%esi
    0.00 :   13cb7d: mov    %r12,%rdi
    0.00 :   13cb80: or     $0x1,%esi
    0.00 :   13cb83: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cb88: mov    (%rbx),%rax
    0.00 :   13cb8b: mov    -0x18(%rax),%r12
    0.00 :   13cb8f: add    %rbx,%r12
    0.00 :   13cb92: movq   $0x0,0x10(%r12)
    0.00 :   13cb9b: jmp    13cae9 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x119>
    0.00 :   13cba0: lea    (%rbx,%rax,1),%r12
    0.00 :   13cba4: mov    0x20(%r12),%ecx
    0.00 :   13cba9: test   %ecx,%ecx
    0.00 :   13cbab: jne    13cae0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13cbb1: mov    0xe8(%r12),%rdi
    0.00 :   13cbb9: mov    (%rsp),%rsi
    0.00 :   13cbbd: mov    %r13,%rdx
    0.00 :   13cbc0: mov    (%rdi),%rax
    0.00 :   13cbc3: call   *0x60(%rax)
    0.00 :   13cbc6: mov    %rax,%rdx
    0.00 :   13cbc9: mov    (%rbx),%rax
    0.00 :   13cbcc: mov    -0x18(%rax),%rdi
    0.00 :   13cbd0: cmp    %rdx,%r13
    0.00 :   13cbd3: je     13cbe6 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x216>
    0.00 :   13cbd5: add    %rbx,%rdi
    0.00 :   13cbd8: mov    0x20(%rdi),%esi
    0.00 :   13cbdb: or     $0x1,%esi
    0.00 :   13cbde: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cbe3: mov    (%rbx),%rax
    0.00 :   13cbe6: mov    -0x18(%rax),%rax
    0.00 :   13cbea: cmpl   $0x20,0x14(%rsp)
    0.00 :   13cbef: lea    (%rbx,%rax,1),%r12
    0.00 :   13cbf3: jne    13cae0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13cbf9: mov    0x20(%r12),%edx
    0.00 :   13cbfe: test   %edx,%edx
    0.00 :   13cc00: jne    13cae0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13cc06: mov    0x8(%rsp),%rbp
    0.00 :   13cc0b: sub    %r13,%rbp
    0.00 :   13cc0e: cmpb   $0x0,0xe1(%r12)
    0.00 :   13cc17: je     13cd24 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x354>
    0.00 :   13cc1d: movzbl 0xe0(%r12),%r13d
    0.00 :   13cc26: jmp    13cc49 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x279>
    0.00 :   13cc28: nopl   0x0(%rax,%rax,1)
    0.00 :   13cc30: mov    %r13b,(%rax)
    0.00 :   13cc33: addq   $0x1,0x28(%rdi)
    0.00 :   13cc38: mov    (%rbx),%rax
    0.00 :   13cc3b: mov    -0x18(%rax),%rax
    0.00 :   13cc3f: sub    $0x1,%rbp
    0.00 :   13cc43: je     13cd60 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x390>
    0.00 :   13cc49: mov    0xe8(%rbx,%rax,1),%rdi
    0.00 :   13cc51: mov    0x28(%rdi),%rax
    0.00 :   13cc55: cmp    0x30(%rdi),%rax
    0.00 :   13cc59: jb     13cc30 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x260>
    0.00 :   13cc5b: mov    (%rdi),%rax
    0.00 :   13cc5e: movzbl %r13b,%esi
    0.00 :   13cc62: call   *0x68(%rax)
    0.00 :   13cc65: cmp    $0xffffffff,%eax
    0.00 :   13cc68: jne    13cc38 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x268>
    0.00 :   13cc6a: mov    (%rbx),%rax
    0.00 :   13cc6d: mov    -0x18(%rax),%rdi
    0.00 :   13cc71: add    %rbx,%rdi
    0.00 :   13cc74: mov    0x20(%rdi),%esi
    0.00 :   13cc77: or     $0x1,%esi
    0.00 :   13cc7a: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cc7f: jmp    13cb88 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x1b8>
    0.00 :   13cc84: nopl   0x0(%rax)
    0.00 :   13cc88: mov    0xf0(%r12),%rax
    0.00 :   13cc90: mov    %rax,0x18(%rsp)
    0.00 :   13cc95: test   %rax,%rax
    0.00 :   13cc98: je     13cda0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x3d0>
    0.00 :   13cc9e: mov    0x18(%rsp),%rax
    0.00 :   13cca3: cmpb   $0x0,0x38(%rax)
    0.00 :   13cca7: je     13ccf0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x320>
    0.00 :   13cca9: movzbl 0x59(%rax),%r14d
    0.00 :   13ccae: mov    %r14b,0xe0(%r12)
    0.00 :   13ccb6: mov    (%rbx),%rax
    0.00 :   13ccb9: movb   $0x1,0xe1(%r12)
    0.00 :   13ccc2: mov    -0x18(%rax),%rax
    0.00 :   13ccc6: jmp    13ca89 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0xb9>
    0.00 :   13cccb: nopl   0x0(%rax,%rax,1)
    0.00 :   13ccd0: mov    0x28(%rsp),%rdi
    0.00 :   13ccd5: mov    (%rdi),%rax
    0.00 :   13ccd8: add    -0x18(%rax),%rdi
    0.00 :   13ccdc: mov    0x20(%rdi),%esi
    0.00 :   13ccdf: or     $0x1,%esi
    0.00 :   13cce2: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cce7: jmp    13cb28 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x158>
    0.00 :   13ccec: nopl   0x0(%rax)
    0.00 :   13ccf0: mov    0x18(%rsp),%r14
    0.00 :   13ccf5: mov    %r14,%rdi
    0.00 :   13ccf8: call   9feb0 <std::ctype<char>::_M_widen_init() const@plt>
    0.00 :   13ccfd: mov    (%r14),%rax
    0.00 :   13cd00: mov    $0x20,%r14d
    0.00 :   13cd06: mov    0x30(%rax),%rax
    0.00 :   13cd0a: cmp    0xe928f(%rip),%rax        # 225fa0 <std::ctype<char>::do_widen(char) const@@GLIBCXX_3.4+0x16a430>
    0.00 :   13cd11: je     13ccae <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x2de>
    0.00 :   13cd13: mov    0x18(%rsp),%rdi
    0.00 :   13cd18: mov    $0x20,%esi
    0.00 :   13cd1d: call   *%rax
    0.00 :   13cd1f: mov    %eax,%r14d
    0.00 :   13cd22: jmp    13ccae <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x2de>
    0.00 :   13cd24: mov    0xf0(%r12),%r14
    0.00 :   13cd2c: test   %r14,%r14
    0.00 :   13cd2f: je     13cd9b <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x3cb>
    0.00 :   13cd31: cmpb   $0x0,0x38(%r14)
    0.00 :   13cd36: je     13cd69 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x399>
    0.00 :   13cd38: movzbl 0x59(%r14),%r13d
    0.00 :   13cd3d: mov    %r13b,0xe0(%r12)
    0.00 :   13cd45: mov    (%rbx),%rax
    0.00 :   13cd48: movb   $0x1,0xe1(%r12)
    0.00 :   13cd51: mov    -0x18(%rax),%rax
    0.00 :   13cd55: jmp    13cc49 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x279>
    0.00 :   13cd5a: nopw   0x0(%rax,%rax,1)
    0.00 :   13cd60: lea    (%rbx,%rax,1),%r12
    0.00 :   13cd64: jmp    13cae0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13cd69: mov    %r14,%rdi
    0.00 :   13cd6c: call   9feb0 <std::ctype<char>::_M_widen_init() const@plt>
    0.00 :   13cd71: mov    (%r14),%rax
    0.00 :   13cd74: mov    $0x20,%r13d
    0.00 :   13cd7a: mov    0x30(%rax),%rax
    0.00 :   13cd7e: cmp    0xe921b(%rip),%rax        # 225fa0 <std::ctype<char>::do_widen(char) const@@GLIBCXX_3.4+0x16a430>
    0.00 :   13cd85: je     13cd3d <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x36d>
    0.00 :   13cd87: mov    $0x20,%esi
    0.00 :   13cd8c: mov    %r14,%rdi
    0.00 :   13cd8f: call   *%rax
    0.00 :   13cd91: mov    %eax,%r13d
    0.00 :   13cd94: jmp    13cd3d <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x36d>
    0.00 :   13cd96: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   13cd9b: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13cda0: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13cda5: endbr64
    0.00 :   13cda9: mov    %rax,%rdi
    0.00 :   13cdac: mov    %rdx,%rax
    0.00 :   13cdaf: sub    $0x1,%rax
    0.00 :   13cdb3: jne    13cdd3 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x403>
    0.00 :   13cdb5: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13cdba: mov    (%rbx),%rax
    0.00 :   13cdbd: mov    $0x1,%esi
    0.00 :   13cdc2: add    -0x18(%rax),%rbx
    0.00 :   13cdc6: mov    %rbx,%rdi
    0.00 :   13cdc9: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13cdce: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   13cdd3: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13cdd8: mov    (%rbx),%rax
    0.00 :   13cddb: mov    $0x1,%esi
    0.00 :   13cde0: mov    -0x18(%rax),%rdi
    0.00 :   13cde4: add    %rbx,%rdi
    0.00 :   13cde7: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13cdec: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13cdf1: jmp    13cae9 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x119>
    0.00 :   13cdf6: endbr64
    0.00 :   13cdfa: mov    %rax,%rbx
    0.00 :   13cdfd: jmp    13ce11 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x441>
    0.00 :   13cdff: endbr64
    0.00 :   13ce03: mov    %rax,%rbx
    0.00 :   13ce06: jmp    13ce16 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x446>
    0.00 :   13ce08: endbr64
    0.00 :   13ce0c: mov    %rax,%rbx
    0.00 :   13ce0f: jmp    13ce26 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x456>
    0.00 :   13ce11: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13ce16: mov    %r15,%rdi
    0.00 :   13ce19: call   9f140 <std::ostream::sentry::~sentry()@plt>
    0.00 :   13ce1e: mov    %rbx,%rdi
    0.00 :   13ce21: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   13ce26: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13ce2b: jmp    13ce16 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0x446>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (55 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>:
    3.62 :   6878:   endbr64
    0.00 :   687c:   push   %rbp
    1.82 :   687d:   mov    %rsp,%rbp
    0.00 :   6880:   mov    %rdi,-0x8(%rbp)
    1.81 :   6884:   mov    -0x8(%rbp),%rax
   34.57 :   6888:   mov    (%rax),%rax
   56.35 :   688b:   pop    %rbp
    1.82 :   688c:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (39 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000055420 <__mpn_mul_1>:
    0.00 :   55420:  endbr64
    2.79 :   55424:  push   %rbx
    2.83 :   55425:  xor    %r10,%r10
    2.80 :   55428:  mov    (%rsi),%rax
    5.53 :   5542b:  mov    %rdx,%rbx
    0.00 :   5542e:  mul    %rcx
   23.94 :   55431:  mov    %rbx,%r11
    0.00 :   55434:  add    %r10,%rax
   13.00 :   55437:  adc    $0x0,%rdx
   18.70 :   5543b:  and    $0x3,%ebx
    2.73 :   5543e:  je     55472 <__mpn_mul_1+0x52>
    0.00 :   55440:  cmp    $0x2,%ebx
    0.00 :   55443:  je     5549e <__mpn_mul_1+0x7e>
    0.00 :   55445:  jg     55489 <__mpn_mul_1+0x69>
    0.00 :   55447:  dec    %r11
    2.02 :   5544a:  jne    55454 <__mpn_mul_1+0x34>
    0.00 :   5544c:  mov    %rax,(%rdi)
    0.00 :   5544f:  jmp    55534 <__mpn_mul_1+0x114>
    0.00 :   55454:  lea    0x8(%rsi,%r11,8),%rsi
    0.00 :   55459:  lea    -0x8(%rdi,%r11,8),%rdi
    0.00 :   5545e:  neg    %r11
    0.00 :   55461:  xor    %r10,%r10
    0.00 :   55464:  xor    %ebx,%ebx
    0.00 :   55466:  mov    %rax,%r9
    0.00 :   55469:  mov    (%rsi,%r11,8),%rax
    0.00 :   5546d:  mov    %rdx,%r8
    0.00 :   55470:  jmp    554d4 <__mpn_mul_1+0xb4>
    0.00 :   55472:  lea    (%rsi,%r11,8),%rsi
    0.00 :   55476:  lea    -0x10(%rdi,%r11,8),%rdi
    0.00 :   5547b:  neg    %r11
    0.00 :   5547e:  xor    %r10,%r10
    0.00 :   55481:  mov    %rax,%r8
    0.00 :   55484:  mov    %rdx,%rbx
    0.00 :   55487:  jmp    554e2 <__mpn_mul_1+0xc2>
    0.00 :   55489:  lea    -0x8(%rsi,%r11,8),%rsi
    0.00 :   5548e:  lea    -0x18(%rdi,%r11,8),%rdi
    0.00 :   55493:  neg    %r11
    0.00 :   55496:  mov    %rax,%rbx
    0.00 :   55499:  mov    %rdx,%r10
    0.00 :   5549c:  jmp    554f5 <__mpn_mul_1+0xd5>
    0.00 :   5549e:  lea    -0x10(%rsi,%r11,8),%rsi
    0.00 :   554a3:  lea    -0x20(%rdi,%r11,8),%rdi
    0.00 :   554a8:  neg    %r11
    0.00 :   554ab:  xor    %r8,%r8
    0.00 :   554ae:  xor    %ebx,%ebx
    0.00 :   554b0:  mov    %rax,%r10
    0.00 :   554b3:  mov    0x18(%rsi,%r11,8),%rax
    0.00 :   554b8:  mov    %rdx,%r9
    0.00 :   554bb:  jmp    55519 <__mpn_mul_1+0xf9>
    0.00 :   554bd:  nopl   (%rax)
    0.00 :   554c0:  mov    %r10,(%rdi,%r11,8)
    0.00 :   554c4:  add    %rax,%r9
    0.00 :   554c7:  mov    (%rsi,%r11,8),%rax
    0.00 :   554cb:  adc    %rdx,%r8
    0.00 :   554ce:  mov    $0x0,%r10d
    0.00 :   554d4:  mul    %rcx
    0.00 :   554d7:  mov    %r9,0x8(%rdi,%r11,8)
    0.00 :   554dc:  add    %rax,%r8
    0.00 :   554df:  adc    %rdx,%rbx
    0.00 :   554e2:  mov    0x8(%rsi,%r11,8),%rax
    0.00 :   554e7:  mul    %rcx
    0.00 :   554ea:  mov    %r8,0x10(%rdi,%r11,8)
    0.00 :   554ef:  add    %rax,%rbx
    0.00 :   554f2:  adc    %rdx,%r10
    0.00 :   554f5:  mov    0x10(%rsi,%r11,8),%rax
    0.00 :   554fa:  mul    %rcx
    0.00 :   554fd:  mov    %rbx,0x18(%rdi,%r11,8)
    0.00 :   55502:  mov    $0x0,%r8d
    0.00 :   55508:  mov    %r8,%rbx
    0.00 :   5550b:  add    %rax,%r10
    0.00 :   5550e:  mov    0x18(%rsi,%r11,8),%rax
    0.00 :   55513:  mov    %r8,%r9
    0.00 :   55516:  adc    %rdx,%r9
    0.00 :   55519:  mul    %rcx
    0.00 :   5551c:  add    $0x4,%r11
    0.00 :   55520:  js     554c0 <__mpn_mul_1+0xa0>
    0.00 :   55522:  mov    %r10,(%rdi,%r11,8)
    0.00 :   55526:  add    %rax,%r9
    0.00 :   55529:  adc    %r8,%rdx
    0.00 :   5552c:  mov    %r9,0x8(%rdi,%r11,8)
    0.00 :   55531:  add    %r8,%rdx
    0.00 :   55534:  mov    %rdx,%rax
    0.01 :   55537:  pop    %rbx
   25.65 :   55538:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (50 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ab0f <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<float> >, std::is_move_constructible<float>, std::is_move_assignable<float> >::value, void>::type std::swap<float>(float&, float&)>:
    3.93 :   ab0f:   endbr64
    0.00 :   ab13:   push   %rbp
    0.00 :   ab14:   mov    %rsp,%rbp
    0.00 :   ab17:   sub    $0x20,%rsp
    0.00 :   ab1b:   mov    %rdi,-0x18(%rbp)
    0.00 :   ab1f:   mov    %rsi,-0x20(%rbp)
    0.00 :   ab23:   mov    %fs:0x28,%rax
    0.00 :   ab2c:   mov    %rax,-0x8(%rbp)
    0.00 :   ab30:   xor    %eax,%eax
    0.00 :   ab32:   mov    -0x18(%rbp),%rax
    7.98 :   ab36:   mov    %rax,%rdi
    0.00 :   ab39:   call   aafd <std::remove_reference<float&>::type&& std::move<float&>(float&)>
    0.00 :   ab3e:   movss  (%rax),%xmm0
   37.63 :   ab42:   movss  %xmm0,-0xc(%rbp)
   15.89 :   ab47:   mov    -0x20(%rbp),%rax
    0.00 :   ab4b:   mov    %rax,%rdi
    0.00 :   ab4e:   call   aafd <std::remove_reference<float&>::type&& std::move<float&>(float&)>
    0.00 :   ab53:   movss  (%rax),%xmm0
    5.72 :   ab57:   mov    -0x18(%rbp),%rax
    0.00 :   ab5b:   movss  %xmm0,(%rax)
    3.99 :   ab5f:   lea    -0xc(%rbp),%rax
    3.07 :   ab63:   mov    %rax,%rdi
    0.00 :   ab66:   call   aafd <std::remove_reference<float&>::type&& std::move<float&>(float&)>
    0.00 :   ab6b:   movss  (%rax),%xmm0
   13.88 :   ab6f:   mov    -0x20(%rbp),%rax
    0.00 :   ab73:   movss  %xmm0,(%rax)
    7.93 :   ab77:   nop
    0.00 :   ab78:   mov    -0x8(%rbp),%rax
    0.00 :   ab7c:   sub    %fs:0x28,%rax
    0.00 :   ab85:   je     ab8c <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<float> >, std::is_move_constructible<float>, std::is_move_assignable<float> >::value, void>::type std::swap<float>(float&, float&)+0x7d>
    0.00 :   ab87:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   ab8c:   leave
    0.00 :   ab8d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (50 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000aa8a <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<int> >, std::is_move_constructible<int>, std::is_move_assignable<int> >::value, void>::type std::swap<int>(int&, int&)>:
    0.00 :   aa8a:   endbr64
    0.00 :   aa8e:   push   %rbp
    0.00 :   aa8f:   mov    %rsp,%rbp
    6.01 :   aa92:   sub    $0x20,%rsp
    6.06 :   aa96:   mov    %rdi,-0x18(%rbp)
    0.00 :   aa9a:   mov    %rsi,-0x20(%rbp)
    0.00 :   aa9e:   mov    %fs:0x28,%rax
    0.00 :   aaa7:   mov    %rax,-0x8(%rbp)
    0.00 :   aaab:   xor    %eax,%eax
    0.00 :   aaad:   mov    -0x18(%rbp),%rax
    5.25 :   aab1:   mov    %rax,%rdi
    4.05 :   aab4:   call   aa78 <std::remove_reference<int&>::type&& std::move<int&>(int&)>
    2.03 :   aab9:   mov    (%rax),%eax
   44.24 :   aabb:   mov    %eax,-0xc(%rbp)
    0.00 :   aabe:   mov    -0x20(%rbp),%rax
    0.00 :   aac2:   mov    %rax,%rdi
    0.00 :   aac5:   call   aa78 <std::remove_reference<int&>::type&& std::move<int&>(int&)>
    0.00 :   aaca:   mov    (%rax),%edx
    6.03 :   aacc:   mov    -0x18(%rbp),%rax
    0.00 :   aad0:   mov    %edx,(%rax)
   10.13 :   aad2:   lea    -0xc(%rbp),%rax
    0.00 :   aad6:   mov    %rax,%rdi
    0.00 :   aad9:   call   aa78 <std::remove_reference<int&>::type&& std::move<int&>(int&)>
    0.00 :   aade:   mov    (%rax),%edx
   16.21 :   aae0:   mov    -0x20(%rbp),%rax
    0.00 :   aae4:   mov    %edx,(%rax)
    0.00 :   aae6:   nop
    0.00 :   aae7:   mov    -0x8(%rbp),%rax
    0.00 :   aaeb:   sub    %fs:0x28,%rax
    0.00 :   aaf4:   je     aafb <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<int> >, std::is_move_constructible<int>, std::is_move_assignable<int> >::value, void>::type std::swap<int>(int&, int&)+0x71>
    0.00 :   aaf6:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   aafb:   leave
    0.00 :   aafc:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (44 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000113c80 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4>:
   43.10 :   113c80: endbr64
    7.71 :   113c84: push   %r13
    0.00 :   113c86: push   %r12
    0.00 :   113c88: push   %rbp
    0.00 :   113c89: push   %rbx
    0.00 :   113c8a: mov    %rdi,%rbx
    0.00 :   113c8d: sub    $0x8,%rsp
    0.00 :   113c91: testb  $0x11,0x78(%rdi)
   12.91 :   113c95: mov    0xc8(%rdi),%rdi
    1.92 :   113c9c: setne  %r13b
    0.00 :   113ca0: test   %rdi,%rdi
    0.00 :   113ca3: je     113dbe <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x13e>
    0.00 :   113ca9: mov    (%rdi),%rax
    1.92 :   113cac: mov    %rsi,%r12
    0.00 :   113caf: mov    %rdx,%rbp
    0.00 :   113cb2: call   *0x30(%rax)
    1.93 :   113cb5: test   %al,%al
    0.00 :   113cb7: je     113d50 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xd0>
    0.00 :   113cbd: test   %r13b,%r13b
    0.00 :   113cc0: je     113d50 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xd0>
    0.00 :   113cc6: cmpb   $0x0,0xa9(%rbx)
    0.00 :   113ccd: jne    113d50 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xd0>
    0.00 :   113cd3: mov    0x28(%rbx),%rcx
    8.12 :   113cd7: mov    0x30(%rbx),%rax
    0.00 :   113cdb: sub    %rcx,%rax
    0.00 :   113cde: cmpb   $0x0,0xaa(%rbx)
    0.00 :   113ce5: jne    113cfa <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x7a>
    0.00 :   113ce7: mov    0xa0(%rbx),%rdx
    0.00 :   113cee: lea    -0x1(%rdx),%rsi
    0.00 :   113cf2: cmp    $0x1,%rdx
    0.00 :   113cf6: cmova  %rsi,%rax
    0.00 :   113cfa: mov    $0x400,%edx
    0.00 :   113cff: cmp    %rdx,%rax
    0.00 :   113d02: cmovg  %rdx,%rax
    0.00 :   113d06: cmp    %rax,%rbp
   15.25 :   113d09: jl     113d50 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xd0>
    0.00 :   113d0b: mov    0x20(%rbx),%rsi
    0.00 :   113d0f: lea    0x68(%rbx),%rdi
    0.00 :   113d13: mov    %rbp,%r8
    0.00 :   113d16: sub    %rsi,%rcx
    0.00 :   113d19: mov    %rcx,%r13
    0.00 :   113d1c: mov    %r12,%rcx
    0.00 :   113d1f: mov    %r13,%rdx
    0.00 :   113d22: call   a1d60 <std::__basic_file<char>::xsputn_2(char const*, long, char const*, long)@plt>
    0.00 :   113d27: lea    0x0(%rbp,%r13,1),%rdx
    0.00 :   113d2c: cmp    %rax,%rdx
    0.00 :   113d2f: je     113d70 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xf0>
    0.00 :   113d31: mov    %rax,%rdx
    0.00 :   113d34: sub    %r13,%rdx
    0.00 :   113d37: cmp    %rax,%r13
    0.00 :   113d3a: mov    $0x0,%eax
    0.00 :   113d3f: cmovl  %rdx,%rax
    0.00 :   113d43: add    $0x8,%rsp
    0.00 :   113d47: pop    %rbx
    0.00 :   113d48: pop    %rbp
    0.00 :   113d49: pop    %r12
    0.00 :   113d4b: pop    %r13
    0.00 :   113d4d: ret
    0.00 :   113d4e: xchg   %ax,%ax
    0.00 :   113d50: add    $0x8,%rsp
    0.00 :   113d54: mov    %rbp,%rdx
    0.00 :   113d57: mov    %r12,%rsi
    0.00 :   113d5a: mov    %rbx,%rdi
    0.00 :   113d5d: pop    %rbx
    0.00 :   113d5e: pop    %rbp
    0.00 :   113d5f: pop    %r12
    7.14 :   113d61: pop    %r13
    0.00 :   113d63: jmp    a08d0 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@plt>
    0.00 :   113d68: nopl   0x0(%rax,%rax,1)
    0.00 :   113d70: mov    0x98(%rbx),%rdx
    0.00 :   113d77: testb  $0x11,0x78(%rbx)
    0.00 :   113d7b: movq   %rdx,%xmm0
    0.00 :   113d80: mov    %rdx,0x18(%rbx)
    0.00 :   113d84: punpcklqdq %xmm0,%xmm0
    0.00 :   113d88: movups %xmm0,0x8(%rbx)
    0.00 :   113d8c: je     113db8 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x138>
    0.00 :   113d8e: mov    0xa0(%rbx),%rcx
    0.00 :   113d95: cmp    $0x1,%rcx
    0.00 :   113d99: jbe    113db8 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x138>
    0.00 :   113d9b: lea    -0x1(%rdx,%rcx,1),%rcx
    0.00 :   113da0: mov    %rdx,0x28(%rbx)
    0.00 :   113da4: mov    %rdx,0x20(%rbx)
    0.00 :   113da8: mov    %rcx,0x30(%rbx)
    0.00 :   113dac: movb   $0x1,0xaa(%rbx)
    0.00 :   113db3: jmp    113d31 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xb1>
    0.00 :   113db8: xor    %edx,%edx
    0.00 :   113dba: xor    %ecx,%ecx
    0.00 :   113dbc: jmp    113da0 <std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x120>
    0.00 :   113dbe: call   9f540 <std::__throw_bad_cast()@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (38 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012dbe0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4>:
    0.19 :   12dbe0: endbr64
    0.00 :   12dbe4: push   %rbp
    0.00 :   12dbe5: mov    %rsp,%rbp
    0.00 :   12dbe8: push   %r15
    0.00 :   12dbea: mov    %r9d,%r15d
    0.00 :   12dbed: push   %r14
    0.00 :   12dbef: push   %r13
    0.00 :   12dbf1: mov    %rsi,%r13
    0.00 :   12dbf4: push   %r12
    0.00 :   12dbf6: push   %rbx
    0.00 :   12dbf7: mov    %rcx,%rbx
    5.81 :   12dbfa: sub    $0x88,%rsp
    0.00 :   12dc01: mov    %rdi,-0x90(%rbp)
    0.00 :   12dc08: mov    %rdx,-0x88(%rbp)
    0.00 :   12dc0f: mov    %r8d,-0x9c(%rbp)
    0.00 :   12dc16: movsd  %xmm0,-0x70(%rbp)
    0.00 :   12dc1b: mov    %fs:0x28,%rax
    0.00 :   12dc24: mov    %rax,-0x38(%rbp)
    0.00 :   12dc28: xor    %eax,%eax
    0.00 :   12dc2a: lea    0xd0(%rcx),%rax
    0.00 :   12dc31: mov    %rax,%rdi
    0.00 :   12dc34: mov    %rax,-0x80(%rbp)
    1.75 :   12dc38: call   12b240 <std::__numpunct_cache<char>::_M_cache(std::locale const&)@@GLIBCXX_3.4+0x4f0>
    2.95 :   12dc3d: mov    0x8(%rbx),%r14
    0.00 :   12dc41: movsbl %r15b,%edx
    0.00 :   12dc45: mov    %rbx,%rdi
    0.00 :   12dc48: mov    %rax,%r12
    0.00 :   12dc4b: mov    $0x6,%eax
    0.00 :   12dc50: test   %r14,%r14
    0.00 :   12dc53: cmovs  %rax,%r14
    8.90 :   12dc57: lea    -0x50(%rbp),%rax
    0.00 :   12dc5b: mov    %rax,%rsi
    2.94 :   12dc5e: mov    %rax,-0x78(%rbp)
    0.00 :   12dc62: call   a00b0 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@plt>
    0.00 :   12dc67: mov    0x18(%rbx),%eax
    2.94 :   12dc6a: mov    %rsp,%rdx
    0.00 :   12dc6d: and    $0x104,%eax
    0.00 :   12dc72: cmp    %rdx,%rsp
    0.00 :   12dc75: je     12dc8c <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0xac>
    0.00 :   12dc77: sub    $0x1000,%rsp
    0.00 :   12dc7e: orq    $0x0,0xff8(%rsp)
    0.00 :   12dc87: cmp    %rdx,%rsp
    0.00 :   12dc8a: jne    12dc77 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x97>
    0.00 :   12dc8c: sub    $0x40,%rsp
    0.00 :   12dc90: orq    $0x0,0x38(%rsp)
    5.80 :   12dc96: lea    0xf(%rsp),%r15
    0.00 :   12dc9b: and    $0xfffffffffffffff0,%r15
    2.98 :   12dc9f: mov    %r15,-0x68(%rbp)
    0.00 :   12dca3: cmp    $0x104,%eax
    0.00 :   12dca8: je     12df00 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x320>
    0.00 :   12dcae: call   a12c0 <std::locale::facet::_S_get_c_locale()@plt>
    0.00 :   12dcb3: movsd  -0x70(%rbp),%xmm0
    2.88 :   12dcb8: mov    %r14,%r8
    0.00 :   12dcbb: mov    %r15,%rsi
    0.00 :   12dcbe: mov    %rax,-0x58(%rbp)
    0.00 :   12dcc2: mov    -0x78(%rbp),%rcx
    2.91 :   12dcc6: lea    -0x58(%rbp),%rax
    0.00 :   12dcca: mov    $0x2d,%edx
    0.00 :   12dccf: mov    %rax,-0x98(%rbp)
    0.00 :   12dcd6: mov    %rax,%rdi
    0.00 :   12dcd9: mov    $0x1,%eax
    0.00 :   12dcde: call   fb400 <std::__cxx11::collate<char>::do_transform(char const*, char const*) const@@GLIBCXX_3.4.21+0x240>
    2.20 :   12dce3: mov    %eax,-0x5c(%rbp)
    5.84 :   12dce6: cmp    $0x2c,%eax
    0.00 :   12dce9: jle    12dd80 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   12dcef: lea    0x1(%rax),%r15d
    0.00 :   12dcf3: mov    %rsp,%rcx
    0.00 :   12dcf6: movslq %r15d,%rax
    0.00 :   12dcf9: add    $0x17,%rax
    0.00 :   12dcfd: mov    %rax,%rdx
    0.00 :   12dd00: and    $0xfffffffffffff000,%rax
    0.00 :   12dd06: sub    %rax,%rcx
    0.00 :   12dd09: and    $0xfffffffffffffff0,%rdx
    0.00 :   12dd0d: cmp    %rcx,%rsp
    0.00 :   12dd10: je     12dd27 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x147>
    0.00 :   12dd12: sub    $0x1000,%rsp
    0.00 :   12dd19: orq    $0x0,0xff8(%rsp)
    0.00 :   12dd22: cmp    %rcx,%rsp
    0.00 :   12dd25: jne    12dd12 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x132>
    0.00 :   12dd27: and    $0xfff,%edx
    0.00 :   12dd2d: sub    %rdx,%rsp
    0.00 :   12dd30: test   %rdx,%rdx
    0.00 :   12dd33: jne    12e230 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x650>
    0.00 :   12dd39: lea    0xf(%rsp),%rax
    0.00 :   12dd3e: and    $0xfffffffffffffff0,%rax
    0.00 :   12dd42: mov    %rax,-0x68(%rbp)
    0.00 :   12dd46: call   a12c0 <std::locale::facet::_S_get_c_locale()@plt>
    0.00 :   12dd4b: movsd  -0x70(%rbp),%xmm0
    0.00 :   12dd50: mov    %r14,%r8
    0.00 :   12dd53: mov    %r15d,%edx
    0.00 :   12dd56: mov    -0x78(%rbp),%rcx
    0.00 :   12dd5a: mov    -0x68(%rbp),%rsi
    0.00 :   12dd5e: mov    %rax,-0x58(%rbp)
    0.00 :   12dd62: mov    $0x1,%eax
    0.00 :   12dd67: mov    -0x98(%rbp),%rdi
    0.00 :   12dd6e: call   fb400 <std::__cxx11::collate<char>::do_transform(char const*, char const*) const@@GLIBCXX_3.4.21+0x240>
    0.00 :   12dd73: mov    %eax,-0x5c(%rbp)
    0.00 :   12dd76: cs nopw 0x0(%rax,%rax,1)
    0.00 :   12dd80: mov    -0x80(%rbp),%rdi
    0.00 :   12dd84: call   9e550 <std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)@plt>
    0.00 :   12dd89: movslq -0x5c(%rbp),%r15
    0.00 :   12dd8d: mov    %rsp,%r8
    0.00 :   12dd90: mov    %rax,%rdi
    0.00 :   12dd93: lea    0x17(%r15),%rax
    0.00 :   12dd97: mov    %r15,%r14
    0.00 :   12dd9a: mov    %r15,%rsi
    0.00 :   12dd9d: mov    %rax,%rdx
    0.00 :   12dda0: and    $0xfffffffffffff000,%rax
    0.00 :   12dda6: sub    %rax,%r8
    0.00 :   12dda9: and    $0xfffffffffffffff0,%rdx
    0.00 :   12ddad: cmp    %r8,%rsp
    0.00 :   12ddb0: je     12ddc7 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1e7>
    0.00 :   12ddb2: sub    $0x1000,%rsp
    0.00 :   12ddb9: orq    $0x0,0xff8(%rsp)
    0.00 :   12ddc2: cmp    %r8,%rsp
    0.00 :   12ddc5: jne    12ddb2 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1d2>
    0.00 :   12ddc7: and    $0xfff,%edx
    0.00 :   12ddcd: sub    %rdx,%rsp
    2.96 :   12ddd0: test   %rdx,%rdx
    0.00 :   12ddd3: jne    12e200 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x620>
    0.00 :   12ddd9: lea    0xf(%rsp),%rax
    0.00 :   12ddde: and    $0xfffffffffffffff0,%rax
    0.00 :   12dde2: mov    %rax,-0x70(%rbp)
    0.00 :   12dde6: mov    %rax,-0x78(%rbp)
    0.00 :   12ddea: mov    -0x68(%rbp),%rax
    0.00 :   12ddee: lea    (%rax,%r15,1),%rdx
    0.00 :   12ddf2: movzbl 0x38(%rdi),%eax
    2.91 :   12ddf6: cmp    $0x1,%al
    2.97 :   12ddf8: je     12e1d8 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x5f8>
    0.00 :   12ddfe: test   %al,%al
    0.00 :   12de00: je     12e130 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x550>
    0.00 :   12de06: mov    (%rdi),%rax
    0.00 :   12de09: mov    0x38(%rax),%rax
    0.00 :   12de0d: cmp    0xf80dc(%rip),%rax        # 225ef0 <std::ctype<char>::do_widen(char const*, char const*, char*) const@@GLIBCXX_3.4+0x14f4a0>
    0.00 :   12de14: jne    12e16d <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x58d>
    0.00 :   12de1a: movslq -0x5c(%rbp),%r15
    0.00 :   12de1e: mov    -0x68(%rbp),%rax
    0.00 :   12de22: mov    %r15,%r14
    0.00 :   12de25: cmp    %rax,%rdx
    0.00 :   12de28: je     12de39 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x259>
    0.00 :   12de2a: mov    -0x70(%rbp),%rdi
    0.00 :   12de2e: mov    %rsi,%rdx
    0.00 :   12de31: mov    %rax,%rsi
    0.00 :   12de34: call   a20f0 <memcpy@plt>
    0.00 :   12de39: test   %r15,%r15
    0.00 :   12de3c: je     12dfd0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x3f0>
    0.00 :   12de42: mov    -0x68(%rbp),%rdi
    8.78 :   12de46: mov    %r15,%rdx
    0.00 :   12de49: mov    $0x2e,%esi
    0.00 :   12de4e: call   9eab0 <memchr@plt>
    0.00 :   12de53: mov    %rax,%r8
    0.00 :   12de56: test   %rax,%rax
    8.78 :   12de59: je     12e188 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x5a8>
    0.00 :   12de5f: mov    -0x68(%rbp),%rax
    0.00 :   12de63: sub    %rax,%r8
    0.00 :   12de66: mov    -0x70(%rbp),%rax
    0.00 :   12de6a: add    %rax,%r8
    2.97 :   12de6d: movzbl 0x48(%r12),%eax
    0.00 :   12de73: mov    %al,(%r8)
    5.04 :   12de76: cmpb   $0x0,0x20(%r12)
    2.88 :   12de7c: jne    12dfdf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x3ff>
    0.00 :   12de82: mov    0x10(%rbx),%rdx
    0.00 :   12de86: mov    -0x70(%rbp),%rax
    0.00 :   12de8a: mov    %r15,%r12
    0.00 :   12de8d: cmp    %rdx,%r15
    0.00 :   12de90: jl     12e0b0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x4d0>
    0.00 :   12de96: cs nopw 0x0(%rax,%rax,1)
    0.00 :   12dea0: mov    -0x88(%rbp),%rcx
    0.00 :   12dea7: movq   $0x0,0x10(%rbx)
    0.00 :   12deaf: mov    %ecx,%ebx
    0.00 :   12deb1: test   %cl,%cl
    0.00 :   12deb3: jne    12ded1 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2f1>
    0.00 :   12deb5: mov    0x0(%r13),%r8
    0.00 :   12deb9: mov    %r12,%rdx
    0.00 :   12debc: mov    %rax,%rsi
    0.00 :   12debf: mov    %r13,%rdi
    0.00 :   12dec2: call   *0x60(%r8)
    0.00 :   12dec6: cmp    %rax,%r12
    0.00 :   12dec9: mov    $0x1,%eax
    0.00 :   12dece: cmovne %eax,%ebx
    0.00 :   12ded1: movzbl %bl,%edx
    0.00 :   12ded4: mov    -0x38(%rbp),%rax
    0.00 :   12ded8: sub    %fs:0x28,%rax
    2.92 :   12dee1: jne    12e24b <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x66b>
    0.00 :   12dee7: lea    -0x28(%rbp),%rsp
    0.00 :   12deeb: mov    %r13,%rax
    0.00 :   12deee: pop    %rbx
    0.00 :   12deef: pop    %r12
    0.00 :   12def1: pop    %r13
    0.00 :   12def3: pop    %r14
    0.00 :   12def5: pop    %r15
    2.94 :   12def7: pop    %rbp
    2.94 :   12def8: ret
    0.00 :   12def9: nopl   0x0(%rax)
    0.00 :   12df00: call   a12c0 <std::locale::facet::_S_get_c_locale()@plt>
    0.00 :   12df05: movsd  -0x70(%rbp),%xmm0
    0.00 :   12df0a: mov    -0x78(%rbp),%rcx
    0.00 :   12df0e: mov    %r15,%rsi
    0.00 :   12df11: mov    %rax,-0x58(%rbp)
    0.00 :   12df15: lea    -0x58(%rbp),%rax
    0.00 :   12df19: mov    $0x2d,%edx
    0.00 :   12df1e: mov    %rax,-0x98(%rbp)
    0.00 :   12df25: mov    %rax,%rdi
    0.00 :   12df28: mov    $0x1,%eax
    0.00 :   12df2d: call   fb400 <std::__cxx11::collate<char>::do_transform(char const*, char const*) const@@GLIBCXX_3.4.21+0x240>
    0.00 :   12df32: mov    %eax,-0x5c(%rbp)
    0.00 :   12df35: cmp    $0x2c,%eax
    0.00 :   12df38: jle    12dd80 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   12df3e: lea    0x1(%rax),%r14d
    0.00 :   12df42: mov    %rsp,%rcx
    0.00 :   12df45: movslq %r14d,%rax
    0.00 :   12df48: add    $0x17,%rax
    0.00 :   12df4c: mov    %rax,%rdx
    0.00 :   12df4f: and    $0xfffffffffffff000,%rax
    0.00 :   12df55: sub    %rax,%rcx
    0.00 :   12df58: and    $0xfffffffffffffff0,%rdx
    0.00 :   12df5c: cmp    %rcx,%rsp
    0.00 :   12df5f: je     12df76 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x396>
    0.00 :   12df61: sub    $0x1000,%rsp
    0.00 :   12df68: orq    $0x0,0xff8(%rsp)
    0.00 :   12df71: cmp    %rcx,%rsp
    0.00 :   12df74: jne    12df61 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x381>
    0.00 :   12df76: and    $0xfff,%edx
    0.00 :   12df7c: sub    %rdx,%rsp
    0.00 :   12df7f: test   %rdx,%rdx
    0.00 :   12df82: jne    12e240 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x660>
    0.00 :   12df88: lea    0xf(%rsp),%rax
    0.00 :   12df8d: and    $0xfffffffffffffff0,%rax
    0.00 :   12df91: mov    %rax,%r15
    0.00 :   12df94: mov    %rax,-0x68(%rbp)
    0.00 :   12df98: call   a12c0 <std::locale::facet::_S_get_c_locale()@plt>
    0.00 :   12df9d: movsd  -0x70(%rbp),%xmm0
    0.00 :   12dfa2: mov    %r14d,%edx
    0.00 :   12dfa5: mov    %r15,%rsi
    0.00 :   12dfa8: mov    -0x78(%rbp),%rcx
    0.00 :   12dfac: mov    -0x98(%rbp),%rdi
    0.00 :   12dfb3: mov    %rax,-0x58(%rbp)
    0.00 :   12dfb7: mov    $0x1,%eax
    0.00 :   12dfbc: call   fb400 <std::__cxx11::collate<char>::do_transform(char const*, char const*) const@@GLIBCXX_3.4.21+0x240>
    0.00 :   12dfc1: mov    %eax,-0x5c(%rbp)
    0.00 :   12dfc4: jmp    12dd80 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1a0>
    0.00 :   12dfc9: nopl   0x0(%rax)
    0.00 :   12dfd0: cmpb   $0x0,0x20(%r12)
    0.00 :   12dfd6: je     12de82 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2a2>
    0.00 :   12dfdc: xor    %r8d,%r8d
    0.00 :   12dfdf: lea    0x17(%r15,%r15,1),%rax
    0.00 :   12dfe4: mov    %rsp,%rcx
    0.00 :   12dfe7: mov    %rax,%rdx
    0.00 :   12dfea: and    $0xfffffffffffff000,%rax
    0.00 :   12dff0: sub    %rax,%rcx
    0.00 :   12dff3: and    $0xfffffffffffffff0,%rdx
    0.00 :   12dff7: cmp    %rcx,%rsp
    0.00 :   12dffa: je     12e011 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x431>
    0.00 :   12dffc: sub    $0x1000,%rsp
    0.00 :   12e003: orq    $0x0,0xff8(%rsp)
    0.00 :   12e00c: cmp    %rcx,%rsp
    0.00 :   12e00f: jne    12dffc <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x41c>
    0.00 :   12e011: and    $0xfff,%edx
    0.00 :   12e017: sub    %rdx,%rsp
    0.00 :   12e01a: test   %rdx,%rdx
    0.00 :   12e01d: je     12e025 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x445>
    0.00 :   12e01f: orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   12e025: mov    -0x68(%rbp),%rsi
    0.00 :   12e029: lea    0xf(%rsp),%rax
    0.00 :   12e02e: and    $0xfffffffffffffff0,%rax
    0.00 :   12e032: movzbl (%rsi),%edx
    0.00 :   12e035: sub    $0x2b,%edx
    0.00 :   12e038: and    $0xfd,%edx
    0.00 :   12e03e: jne    12e210 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x630>
    0.00 :   12e044: mov    -0x70(%rbp),%rcx
    0.00 :   12e048: lea    -0x1(%r14),%r9d
    0.00 :   12e04c: mov    $0x1,%r14d
    0.00 :   12e052: mov    %r9d,-0x5c(%rbp)
    0.00 :   12e056: lea    0x1(%rax),%r9
    0.00 :   12e05a: movzbl (%rcx),%edx
    0.00 :   12e05d: lea    0x1(%rcx),%rsi
    0.00 :   12e061: mov    %rsi,-0x78(%rbp)
    0.00 :   12e065: mov    %dl,(%rax)
    0.00 :   12e067: lea    -0x5c(%rbp),%rdi
    0.00 :   12e06b: movsbl 0x49(%r12),%ecx
    0.00 :   12e071: mov    0x18(%r12),%rdx
    0.00 :   12e076: mov    %rax,-0x68(%rbp)
    0.00 :   12e07a: mov    0x10(%r12),%rsi
    0.00 :   12e07f: push   %rdi
    0.00 :   12e080: push   -0x78(%rbp)
    0.00 :   12e083: mov    -0x90(%rbp),%rdi
    0.00 :   12e08a: call   a1dd0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_float(char const*, unsigned long, char, char const*, char*, char*, int&) const@plt>
    0.00 :   12e08f: add    -0x5c(%rbp),%r14d
    0.00 :   12e093: mov    0x10(%rbx),%rdx
    0.00 :   12e097: movslq %r14d,%r15
    0.00 :   12e09a: mov    %r14d,-0x5c(%rbp)
    0.00 :   12e09e: mov    -0x68(%rbp),%rax
    0.00 :   12e0a2: pop    %rcx
    0.00 :   12e0a3: mov    %r15,%r12
    0.00 :   12e0a6: pop    %rsi
    0.00 :   12e0a7: cmp    %rdx,%r15
    0.00 :   12e0aa: jge    12dea0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2c0>
    0.00 :   12e0b0: lea    0x17(%rdx),%rcx
    0.00 :   12e0b4: mov    %rsp,%rdi
    0.00 :   12e0b7: mov    %rcx,%rsi
    0.00 :   12e0ba: and    $0xfffffffffffff000,%rcx
    0.00 :   12e0c1: sub    %rcx,%rdi
    0.00 :   12e0c4: and    $0xfffffffffffffff0,%rsi
    0.00 :   12e0c8: cmp    %rdi,%rsp
    0.00 :   12e0cb: je     12e0e2 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x502>
    0.00 :   12e0cd: sub    $0x1000,%rsp
    0.00 :   12e0d4: orq    $0x0,0xff8(%rsp)
    0.00 :   12e0dd: cmp    %rdi,%rsp
    0.00 :   12e0e0: jne    12e0cd <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x4ed>
    0.00 :   12e0e2: and    $0xfff,%esi
    0.00 :   12e0e8: sub    %rsi,%rsp
    0.00 :   12e0eb: test   %rsi,%rsi
    0.00 :   12e0ee: jne    12e220 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x640>
    0.00 :   12e0f4: lea    0xf(%rsp),%r14
    0.00 :   12e0f9: lea    -0x5c(%rbp),%rcx
    0.00 :   12e0fd: sub    $0x8,%rsp
    0.00 :   12e101: movsbl -0x9c(%rbp),%esi
    0.00 :   12e108: push   %rcx
    0.00 :   12e109: and    $0xfffffffffffffff0,%r14
    0.00 :   12e10d: mov    -0x90(%rbp),%rdi
    0.00 :   12e114: mov    %rax,%r9
    0.00 :   12e117: mov    %r14,%r8
    0.00 :   12e11a: mov    %rbx,%rcx
    0.00 :   12e11d: call   a05c0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_pad(char, long, std::ios_base&, char*, char const*, int&) const@plt>
    0.00 :   12e122: pop    %rax
    0.00 :   12e123: movslq -0x5c(%rbp),%r12
    0.00 :   12e127: mov    %r14,%rax
    0.00 :   12e12a: pop    %rdx
    0.00 :   12e12b: jmp    12dea0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2c0>
    0.00 :   12e130: mov    %rdx,-0xa8(%rbp)
    0.00 :   12e137: mov    %rsi,-0x98(%rbp)
    0.00 :   12e13e: mov    %rdi,-0x80(%rbp)
    0.00 :   12e142: call   9feb0 <std::ctype<char>::_M_widen_init() const@plt>
    0.00 :   12e147: mov    -0x80(%rbp),%rdi
    0.00 :   12e14b: mov    -0xa8(%rbp),%rdx
    0.00 :   12e152: mov    -0x98(%rbp),%rsi
    0.00 :   12e159: mov    (%rdi),%rax
    0.00 :   12e15c: mov    0x38(%rax),%rax
    0.00 :   12e160: cmp    0xf7d89(%rip),%rax        # 225ef0 <std::ctype<char>::do_widen(char const*, char const*, char*) const@@GLIBCXX_3.4+0x14f4a0>
    0.00 :   12e167: je     12de1a <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x23a>
    0.00 :   12e16d: mov    -0x70(%rbp),%rcx
    0.00 :   12e171: mov    -0x68(%rbp),%rsi
    0.00 :   12e175: call   *%rax
    0.00 :   12e177: movslq -0x5c(%rbp),%r15
    0.00 :   12e17b: mov    %r15,%r14
    0.00 :   12e17e: jmp    12de39 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x259>
    0.00 :   12e183: nopl   0x0(%rax,%rax,1)
    0.00 :   12e188: cmpb   $0x0,0x20(%r12)
    0.00 :   12e18e: je     12de82 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2a2>
    0.00 :   12e194: cmp    $0x2,%r14d
    0.00 :   12e198: jle    12dfdf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x3ff>
    0.00 :   12e19e: mov    -0x68(%rbp),%rax
    0.00 :   12e1a2: movzbl 0x1(%rax),%eax
    0.00 :   12e1a6: cmp    $0x39,%al
    0.00 :   12e1a8: jg     12de82 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2a2>
    0.00 :   12e1ae: mov    -0x68(%rbp),%rsi
    0.00 :   12e1b2: movzbl 0x2(%rsi),%esi
    0.00 :   12e1b6: lea    -0x30(%rsi),%edx
    0.00 :   12e1b9: mov    %sil,-0x80(%rbp)
    0.00 :   12e1bd: cmp    $0x9,%dl
    0.00 :   12e1c0: ja     12de82 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2a2>
    0.00 :   12e1c6: cmp    $0x2f,%al
    0.00 :   12e1c8: jle    12de82 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x2a2>
    0.00 :   12e1ce: jmp    12dfdf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x3ff>
    0.00 :   12e1d3: nopl   0x0(%rax,%rax,1)
    0.00 :   12e1d8: mov    -0x68(%rbp),%rax
    0.00 :   12e1dc: cmp    %rax,%rdx
    0.00 :   12e1df: je     12de39 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x259>
    0.00 :   12e1e5: mov    -0x70(%rbp),%rdi
    0.00 :   12e1e9: mov    %r15,%rdx
    0.00 :   12e1ec: mov    %rax,%rsi
    0.00 :   12e1ef: call   a20f0 <memcpy@plt>
    0.00 :   12e1f4: jmp    12de39 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x259>
    0.00 :   12e1f9: nopl   0x0(%rax)
    0.00 :   12e200: orq    $0x0,-0x8(%rsp,%rdx,1)
    5.83 :   12e206: jmp    12ddd9 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x1f9>
    0.00 :   12e20b: nopl   0x0(%rax,%rax,1)
    0.00 :   12e210: mov    %rax,%r9
    0.00 :   12e213: xor    %r14d,%r14d
    0.00 :   12e216: jmp    12e067 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x487>
    0.00 :   12e21b: nopl   0x0(%rax,%rax,1)
    0.00 :   12e220: orq    $0x0,-0x8(%rsp,%rsi,1)
    0.00 :   12e226: jmp    12e0f4 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x514>
    0.00 :   12e22b: nopl   0x0(%rax,%rax,1)
    0.00 :   12e230: orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   12e236: jmp    12dd39 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x159>
    0.00 :   12e23b: nopl   0x0(%rax,%rax,1)
    0.00 :   12e240: orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   12e246: jmp    12df88 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0x3a8>
    0.00 :   12e24b: call   a0ef0 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (48 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000090f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>:
    0.00 :   90f6:   endbr64
    2.10 :   90fa:   push   %rbp
   10.49 :   90fb:   mov    %rsp,%rbp
   10.31 :   90fe:   push   %rbx
    0.00 :   90ff:   sub    $0x28,%rsp
    0.00 :   9103:   mov    %rdi,-0x18(%rbp)
    8.38 :   9107:   mov    %rsi,-0x20(%rbp)
    2.10 :   910b:   mov    %rdx,-0x28(%rbp)
    0.00 :   910f:   lea    -0x28(%rbp),%rax
   12.49 :   9113:   mov    %rax,%rdi
   10.33 :   9116:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   911b:   mov    %rax,%rbx
    0.00 :   911e:   lea    -0x20(%rbp),%rax
    0.00 :   9122:   mov    %rax,%rdi
    0.00 :   9125:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   912a:   mov    %rbx,%rsi
    0.00 :   912d:   mov    %rax,%rdi
    0.00 :   9130:   call   9f0c <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)>
   18.74 :   9135:   mov    -0x8(%rbp),%rbx
   22.98 :   9139:   leave
    2.09 :   913a:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (32 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000054620 <__mpn_cmp>:
    0.00 :   54620:  endbr64
    0.00 :   54624:  sub    $0x1,%rdx
    0.00 :   54628:  jns    54636 <__mpn_cmp+0x16>
    0.00 :   5462a:  jmp    54650 <__mpn_cmp+0x30>
    0.00 :   5462c:  nopl   0x0(%rax)
    0.00 :   54630:  sub    $0x1,%rdx
   16.14 :   54634:  jb     54650 <__mpn_cmp+0x30>
    0.00 :   54636:  mov    (%rdi,%rdx,8),%rax
   28.19 :   5463a:  mov    (%rsi,%rdx,8),%rcx
   39.03 :   5463e:  cmp    %rcx,%rax
    5.37 :   54641:  je     54630 <__mpn_cmp+0x10>
    0.00 :   54643:  cmp    %rax,%rcx
    2.70 :   54646:  sbb    %eax,%eax
    3.16 :   54648:  and    $0x2,%eax
    3.19 :   5464b:  sub    $0x1,%eax
    2.22 :   5464e:  ret
    0.00 :   5464f:  nop
    0.00 :   54650:  xor    %eax,%eax
    0.00 :   54652:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (33 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008f9b0 <_IO_str_init_static_internal>:
    0.00 :   8f9b0:  endbr64
    0.00 :   8f9b4:  push   %r14
    0.00 :   8f9b6:  movq   %rsi,%xmm1
    0.00 :   8f9bb:  mov    %rdi,%r14
    0.00 :   8f9be:  push   %r13
    0.00 :   8f9c0:  punpcklqdq %xmm1,%xmm1
    0.00 :   8f9c4:  mov    %rsi,%r13
    0.00 :   8f9c7:  push   %r12
    0.00 :   8f9c9:  mov    %rcx,%r12
    0.00 :   8f9cc:  push   %rbp
    3.23 :   8f9cd:  push   %rbx
    0.00 :   8f9ce:  mov    %rsi,%rbx
    0.00 :   8f9d1:  sub    $0x10,%rsp
    0.00 :   8f9d5:  movaps %xmm1,(%rsp)
    0.00 :   8f9d9:  test   %rdx,%rdx
    0.00 :   8f9dc:  jne    8fa50 <_IO_str_init_static_internal+0xa0>
    0.00 :   8f9de:  xor    %esi,%esi
    0.00 :   8f9e0:  mov    %rbx,%rdi
    0.00 :   8f9e3:  call   283a0 <*ABS*+0xaaf80@plt>
    0.00 :   8f9e8:  mov    %rax,%rbp
    3.26 :   8f9eb:  xor    %ecx,%ecx
    3.23 :   8f9ed:  mov    %rbp,%rdx
    0.00 :   8f9f0:  mov    %rbx,%rsi
    0.00 :   8f9f3:  mov    %r14,%rdi
    0.00 :   8f9f6:  call   8dc20 <_IO_setb>
    3.32 :   8f9fb:  test   %r12,%r12
    9.68 :   8f9fe:  je     8fa70 <_IO_str_init_static_internal+0xc0>
    0.00 :   8fa00:  mov    %r12,%rbx
    0.00 :   8fa03:  movq   %r13,%xmm0
    0.00 :   8fa08:  movq   %r12,%xmm2
    8.56 :   8fa0d:  movdqa (%rsp),%xmm3
    8.82 :   8fa12:  movq   %rbp,%xmm4
    0.00 :   8fa17:  movq   $0x0,0xe0(%r14)
    5.44 :   8fa22:  punpcklqdq %xmm2,%xmm0
    3.23 :   8fa26:  movups %xmm0,0x8(%r14)
    0.00 :   8fa2b:  movq   %rbx,%xmm0
    0.00 :   8fa30:  punpcklqdq %xmm4,%xmm0
    0.00 :   8fa34:  movups %xmm3,0x18(%r14)
    6.42 :   8fa39:  movups %xmm0,0x28(%r14)
    0.00 :   8fa3e:  add    $0x10,%rsp
    0.00 :   8fa42:  pop    %rbx
   19.13 :   8fa43:  pop    %rbp
    3.16 :   8fa44:  pop    %r12
    4.68 :   8fa46:  pop    %r13
    0.00 :   8fa48:  pop    %r14
   12.98 :   8fa4a:  ret
    0.00 :   8fa4b:  nopl   0x0(%rax,%rax,1)
    0.00 :   8fa50:  add    %rsi,%rdx
    0.00 :   8fa53:  mov    $0xffffffffffffffff,%rax
    2.25 :   8fa5a:  cmp    %rdx,%rsi
    0.00 :   8fa5d:  cmovb  %rdx,%rax
    0.00 :   8fa61:  mov    %rax,%rbp
    2.60 :   8fa64:  jmp    8f9eb <_IO_str_init_static_internal+0x3b>
    0.00 :   8fa66:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   8fa70:  mov    %rbp,%r12
    0.00 :   8fa73:  mov    %rbx,%rbp
    0.00 :   8fa76:  jmp    8fa03 <_IO_str_init_static_internal+0x53>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (29 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013dca0 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9>:
    0.00 :   13dca0: endbr64
    0.00 :   13dca4: push   %r15
    0.00 :   13dca6: mov    %rdi,%rsi
    0.00 :   13dca9: movq   %xmm0,%r15
    0.00 :   13dcae: push   %r14
    0.00 :   13dcb0: push   %r13
    0.00 :   13dcb2: push   %r12
    0.00 :   13dcb4: push   %rbp
    0.00 :   13dcb5: push   %rbx
    3.42 :   13dcb6: mov    %rdi,%rbx
    0.00 :   13dcb9: sub    $0x28,%rsp
    0.00 :   13dcbd: mov    %fs:0x28,%rax
    0.00 :   13dcc6: mov    %rax,0x18(%rsp)
    0.00 :   13dccb: xor    %eax,%eax
    0.00 :   13dccd: mov    %rsp,%r13
    0.00 :   13dcd0: mov    %r13,%rdi
    3.34 :   13dcd3: call   a21f0 <std::ostream::sentry::sentry(std::ostream&)@plt>
    0.00 :   13dcd8: cmpb   $0x0,(%rsp)
    0.00 :   13dcdc: je     13dd47 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xa7>
    0.00 :   13dcde: mov    (%rbx),%rax
    0.00 :   13dce1: mov    -0x18(%rax),%rbp
    0.00 :   13dce5: add    %rbx,%rbp
    0.00 :   13dce8: mov    0xf8(%rbp),%r12
    0.00 :   13dcef: test   %r12,%r12
    0.00 :   13dcf2: je     13de49 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1a9>
    0.00 :   13dcf8: cmpb   $0x0,0xe1(%rbp)
    0.00 :   13dcff: je     13ddb0 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x110>
    0.00 :   13dd05: movsbl 0xe0(%rbp),%r8d
    0.00 :   13dd0d: mov    0xe8(%rbp),%rsi
    0.00 :   13dd14: mov    (%r12),%rax
    0.00 :   13dd18: xor    %edx,%edx
    3.38 :   13dd1a: mov    %rbp,%rcx
    0.00 :   13dd1d: movq   %r15,%xmm0
    0.00 :   13dd22: mov    %r12,%rdi
    0.00 :   13dd25: test   %rsi,%rsi
    0.00 :   13dd28: sete   %dl
    0.00 :   13dd2b: call   *0x38(%rax)
    0.00 :   13dd2e: test   %dl,%dl
    0.00 :   13dd30: je     13dd47 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xa7>
    0.00 :   13dd32: mov    (%rbx),%rax
    0.00 :   13dd35: mov    -0x18(%rax),%rdi
    0.00 :   13dd39: add    %rbx,%rdi
    0.00 :   13dd3c: mov    0x20(%rdi),%esi
    0.00 :   13dd3f: or     $0x1,%esi
    0.00 :   13dd42: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13dd47: mov    0x8(%rsp),%rax
    0.00 :   13dd4c: mov    (%rax),%rdx
   27.35 :   13dd4f: add    -0x18(%rdx),%rax
   20.12 :   13dd53: mov    %rax,%rbp
    0.00 :   13dd56: testb  $0x20,0x19(%rax)
   28.80 :   13dd5a: je     13dd80 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13dd5c: call   9f820 <std::uncaught_exception()@plt>
    0.00 :   13dd61: test   %al,%al
    0.00 :   13dd63: jne    13dd80 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13dd65: mov    0xe8(%rbp),%rdi
    0.00 :   13dd6c: test   %rdi,%rdi
    0.00 :   13dd6f: je     13dd80 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13dd71: mov    (%rdi),%rax
    0.00 :   13dd74: call   *0x30(%rax)
    0.00 :   13dd77: cmp    $0xffffffff,%eax
    0.00 :   13dd7a: je     13de28 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x188>
    0.00 :   13dd80: mov    0x18(%rsp),%rax
    0.00 :   13dd85: sub    %fs:0x28,%rax
    0.00 :   13dd8e: jne    13de44 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1a4>
    0.00 :   13dd94: add    $0x28,%rsp
    0.00 :   13dd98: mov    %rbx,%rax
    0.00 :   13dd9b: pop    %rbx
    0.00 :   13dd9c: pop    %rbp
    0.00 :   13dd9d: pop    %r12
   13.60 :   13dd9f: pop    %r13
    0.00 :   13dda1: pop    %r14
    0.00 :   13dda3: pop    %r15
    0.00 :   13dda5: ret
    0.00 :   13dda6: cs nopw 0x0(%rax,%rax,1)
    0.00 :   13ddb0: mov    0xf0(%rbp),%r14
    0.00 :   13ddb7: test   %r14,%r14
    0.00 :   13ddba: je     13de4e <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1ae>
    0.00 :   13ddc0: cmpb   $0x0,0x38(%r14)
    0.00 :   13ddc5: je     13ddf0 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x150>
    0.00 :   13ddc7: movsbl 0x59(%r14),%r8d
    0.00 :   13ddcc: mov    %r8d,%eax
    0.00 :   13ddcf: mov    %al,0xe0(%rbp)
    0.00 :   13ddd5: mov    (%rbx),%rax
    0.00 :   13ddd8: movb   $0x1,0xe1(%rbp)
    0.00 :   13dddf: mov    -0x18(%rax),%rbp
    0.00 :   13dde3: add    %rbx,%rbp
    0.00 :   13dde6: jmp    13dd0d <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x6d>
    0.00 :   13ddeb: nopl   0x0(%rax,%rax,1)
    0.00 :   13ddf0: mov    %r14,%rdi
    0.00 :   13ddf3: call   9feb0 <std::ctype<char>::_M_widen_init() const@plt>
    0.00 :   13ddf8: mov    (%r14),%rax
    0.00 :   13ddfb: mov    $0x20,%r8d
    0.00 :   13de01: mov    0x30(%rax),%rdx
    0.00 :   13de05: cmp    0xe8194(%rip),%rdx        # 225fa0 <std::ctype<char>::do_widen(char) const@@GLIBCXX_3.4+0x16a430>
    0.00 :   13de0c: mov    $0x20,%eax
    0.00 :   13de11: je     13ddcf <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x12f>
    0.00 :   13de13: mov    $0x20,%esi
    0.00 :   13de18: mov    %r14,%rdi
    0.00 :   13de1b: call   *%rdx
    0.00 :   13de1d: movsbl %al,%r8d
    0.00 :   13de21: jmp    13ddcf <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x12f>
    0.00 :   13de23: nopl   0x0(%rax,%rax,1)
    0.00 :   13de28: mov    0x8(%rsp),%rdi
    0.00 :   13de2d: mov    (%rdi),%rax
    0.00 :   13de30: add    -0x18(%rax),%rdi
    0.00 :   13de34: mov    0x20(%rdi),%esi
    0.00 :   13de37: or     $0x1,%esi
    0.00 :   13de3a: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13de3f: jmp    13dd80 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13de44: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   13de49: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13de4e: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13de53: endbr64
    0.00 :   13de57: mov    %rax,%rdi
    0.00 :   13de5a: mov    %rdx,%rax
    0.00 :   13de5d: jmp    13de68 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1c8>
    0.00 :   13de5f: endbr64
    0.00 :   13de63: mov    %rax,%rbx
    0.00 :   13de66: jmp    13de91 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1f1>
    0.00 :   13de68: sub    $0x1,%rax
    0.00 :   13de6c: jne    13dea1 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x201>
    0.00 :   13de6e: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13de73: mov    (%rbx),%rax
    0.00 :   13de76: mov    $0x1,%esi
    0.00 :   13de7b: add    -0x18(%rax),%rbx
    0.00 :   13de7f: mov    %rbx,%rdi
    0.00 :   13de82: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13de87: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   13de8c: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13de91: mov    %r13,%rdi
    0.00 :   13de94: call   9f140 <std::ostream::sentry::~sentry()@plt>
    0.00 :   13de99: mov    %rbx,%rdi
    0.00 :   13de9c: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   13dea1: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13dea6: mov    (%rbx),%rax
    0.00 :   13dea9: mov    $0x1,%esi
    0.00 :   13deae: mov    -0x18(%rax),%rdi
    0.00 :   13deb2: add    %rbx,%rdi
    0.00 :   13deb5: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13deba: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13debf: jmp    13dd47 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0xa7>
    0.00 :   13dec4: endbr64
    0.00 :   13dec8: mov    %rax,%rbx
    0.00 :   13decb: jmp    13ded6 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x236>
    0.00 :   13decd: endbr64
    0.00 :   13ded1: mov    %rax,%rbx
    0.00 :   13ded4: jmp    13de8c <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1ec>
    0.00 :   13ded6: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13dedb: jmp    13de91 <std::ostream& std::ostream::_M_insert<double>(double)@@GLIBCXX_3.4.9+0x1f1>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (33 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a07c0 <__memcpy_avx_unaligned_erms>:
    0.00 :   1a07c0: endbr64
    0.00 :   1a07c4: mov    %rdi,%rax
    0.00 :   1a07c7: cmp    $0x20,%rdx
    0.00 :   1a07cb: jb     1a07f0 <__memcpy_avx_unaligned_erms+0x30>
    0.00 :   1a07cd: vmovdqu (%rsi),%ymm0
    0.00 :   1a07d1: cmp    $0x40,%rdx
    0.00 :   1a07d5: ja     1a0880 <__memcpy_avx_unaligned_erms+0xc0>
    0.00 :   1a07db: vmovdqu -0x20(%rsi,%rdx,1),%ymm1
    0.00 :   1a07e1: vmovdqu %ymm0,(%rdi)
    0.00 :   1a07e5: vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
    0.00 :   1a07eb: vzeroupper
    0.00 :   1a07ee: ret
    0.00 :   1a07ef: nop
    0.00 :   1a07f0: cmp    $0x10,%edx
    9.59 :   1a07f3: jae    1a0822 <__memcpy_avx_unaligned_erms+0x62>
    0.00 :   1a07f5: cmp    $0x8,%edx
    2.62 :   1a07f8: jae    1a0840 <__memcpy_avx_unaligned_erms+0x80>
    0.00 :   1a07fa: cmp    $0x4,%edx
    0.00 :   1a07fd: jae    1a0815 <__memcpy_avx_unaligned_erms+0x55>
    0.00 :   1a07ff: cmp    $0x1,%edx
    3.51 :   1a0802: jl     1a0814 <__memcpy_avx_unaligned_erms+0x54>
    0.00 :   1a0804: mov    (%rsi),%cl
   10.61 :   1a0806: je     1a0812 <__memcpy_avx_unaligned_erms+0x52>
    0.00 :   1a0808: movzwl -0x2(%rsi,%rdx,1),%esi
    4.71 :   1a080d: mov    %si,-0x2(%rdi,%rdx,1)
    0.00 :   1a0812: mov    %cl,(%rdi)
    7.54 :   1a0814: ret
    0.00 :   1a0815: mov    -0x4(%rsi,%rdx,1),%ecx
    9.80 :   1a0819: mov    (%rsi),%esi
    3.45 :   1a081b: mov    %ecx,-0x4(%rdi,%rdx,1)
    3.57 :   1a081f: mov    %esi,(%rdi)
    0.00 :   1a0821: ret
    0.00 :   1a0822: vmovdqu (%rsi),%xmm0
   18.99 :   1a0826: vmovdqu -0x10(%rsi,%rdx,1),%xmm1
    3.56 :   1a082c: vmovdqu %xmm0,(%rdi)
    7.01 :   1a0830: vmovdqu %xmm1,-0x10(%rdi,%rdx,1)
    7.79 :   1a0836: ret
    0.00 :   1a0837: nopw   0x0(%rax,%rax,1)
    0.00 :   1a0840: mov    -0x8(%rsi,%rdx,1),%rcx
    7.25 :   1a0845: mov    (%rsi),%rsi
    0.00 :   1a0848: mov    %rsi,(%rdi)
    0.00 :   1a084b: mov    %rcx,-0x8(%rdi,%rdx,1)
    0.00 :   1a0850: ret
    0.00 :   1a0851: vmovdqu -0x20(%rsi,%rdx,1),%ymm2
    0.00 :   1a0857: vmovdqu -0x40(%rsi,%rdx,1),%ymm3
    0.00 :   1a085d: vmovdqu %ymm0,(%rdi)
    0.00 :   1a0861: vmovdqu %ymm1,0x20(%rdi)
    0.00 :   1a0866: vmovdqu %ymm2,-0x20(%rdi,%rdx,1)
    0.00 :   1a086c: vmovdqu %ymm3,-0x40(%rdi,%rdx,1)
    0.00 :   1a0872: vzeroupper
    0.00 :   1a0875: ret
    0.00 :   1a0876: cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a0880: cmp    0x79b71(%rip),%rdx        # 21a3f8 <__x86_rep_movsb_threshold>
    0.00 :   1a0887: ja     1a0a80 <__memcpy_avx_unaligned_erms+0x2c0>
    0.00 :   1a088d: cmp    $0x100,%rdx
    0.00 :   1a0894: ja     1a08f5 <__memcpy_avx_unaligned_erms+0x135>
    0.00 :   1a0896: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a089b: cmp    $0x80,%rdx
    0.00 :   1a08a2: jbe    1a0851 <__memcpy_avx_unaligned_erms+0x91>
    0.00 :   1a08a4: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a08a9: vmovdqu 0x60(%rsi),%ymm3
    0.00 :   1a08ae: vmovdqu -0x20(%rsi,%rdx,1),%ymm4
    0.00 :   1a08b4: vmovdqu -0x40(%rsi,%rdx,1),%ymm5
    0.00 :   1a08ba: vmovdqu -0x60(%rsi,%rdx,1),%ymm6
    0.00 :   1a08c0: vmovdqu -0x80(%rsi,%rdx,1),%ymm7
    0.00 :   1a08c6: vmovdqu %ymm0,(%rdi)
    0.00 :   1a08ca: vmovdqu %ymm1,0x20(%rdi)
    0.00 :   1a08cf: vmovdqu %ymm2,0x40(%rdi)
    0.00 :   1a08d4: vmovdqu %ymm3,0x60(%rdi)
    0.00 :   1a08d9: vmovdqu %ymm4,-0x20(%rdi,%rdx,1)
    0.00 :   1a08df: vmovdqu %ymm5,-0x40(%rdi,%rdx,1)
    0.00 :   1a08e5: vmovdqu %ymm6,-0x60(%rdi,%rdx,1)
    0.00 :   1a08eb: vmovdqu %ymm7,-0x80(%rdi,%rdx,1)
    0.00 :   1a08f1: vzeroupper
    0.00 :   1a08f4: ret
    0.00 :   1a08f5: mov    %rdi,%rcx
    0.00 :   1a08f8: sub    %rsi,%rcx
    0.00 :   1a08fb: cmp    %rdx,%rcx
    0.00 :   1a08fe: jb     1a09b0 <__memcpy_avx_unaligned_erms+0x1f0>
    0.00 :   1a0904: cmp    0x80c9d(%rip),%rdx        # 2215a8 <__x86_shared_non_temporal_threshold>
    0.00 :   1a090b: ja     1a0aed <__memcpy_avx_unaligned_erms+0x32d>
    0.00 :   1a0911: lea    (%rcx,%rdx,1),%r8
    0.00 :   1a0915: xor    %rcx,%r8
    0.00 :   1a0918: shr    $0x3f,%r8
    0.00 :   1a091c: and    $0xf00,%ecx
    0.00 :   1a0922: add    %r8d,%ecx
    0.00 :   1a0925: je     1a09b5 <__memcpy_avx_unaligned_erms+0x1f5>
    0.00 :   1a092b: vmovdqu -0x20(%rsi,%rdx,1),%ymm5
    0.00 :   1a0931: vmovdqu -0x40(%rsi,%rdx,1),%ymm6
    0.00 :   1a0937: mov    %rdi,%rcx
    0.00 :   1a093a: or     $0x1f,%rdi
    0.00 :   1a093e: vmovdqu -0x60(%rsi,%rdx,1),%ymm7
    0.00 :   1a0944: vmovdqu -0x80(%rsi,%rdx,1),%ymm8
    0.00 :   1a094a: sub    %rcx,%rsi
    0.00 :   1a094d: inc    %rdi
    0.00 :   1a0950: add    %rdi,%rsi
    0.00 :   1a0953: lea    -0x80(%rcx,%rdx,1),%rdx
    0.00 :   1a0958: nopl   0x0(%rax,%rax,1)
    0.00 :   1a0960: vmovdqu (%rsi),%ymm1
    0.00 :   1a0964: vmovdqu 0x20(%rsi),%ymm2
    0.00 :   1a0969: vmovdqu 0x40(%rsi),%ymm3
    0.00 :   1a096e: vmovdqu 0x60(%rsi),%ymm4
    0.00 :   1a0973: sub    $0xffffffffffffff80,%rsi
    0.00 :   1a0977: vmovdqa %ymm1,(%rdi)
    0.00 :   1a097b: vmovdqa %ymm2,0x20(%rdi)
    0.00 :   1a0980: vmovdqa %ymm3,0x40(%rdi)
    0.00 :   1a0985: vmovdqa %ymm4,0x60(%rdi)
    0.00 :   1a098a: sub    $0xffffffffffffff80,%rdi
    0.00 :   1a098e: cmp    %rdi,%rdx
    0.00 :   1a0991: ja     1a0960 <__memcpy_avx_unaligned_erms+0x1a0>
    0.00 :   1a0993: vmovdqu %ymm5,0x60(%rdx)
    0.00 :   1a0998: vmovdqu %ymm6,0x40(%rdx)
    0.00 :   1a099d: vmovdqu %ymm7,0x20(%rdx)
    0.00 :   1a09a2: vmovdqu %ymm8,(%rdx)
    0.00 :   1a09a6: vmovdqu %ymm0,(%rcx)
    0.00 :   1a09aa: vzeroupper
    0.00 :   1a09ad: ret
    0.00 :   1a09ae: xchg   %ax,%ax
    0.00 :   1a09b0: test   %rcx,%rcx
    0.00 :   1a09b3: je     1a09aa <__memcpy_avx_unaligned_erms+0x1ea>
    0.00 :   1a09b5: vmovdqu 0x20(%rsi),%ymm5
    0.00 :   1a09ba: vmovdqu 0x40(%rsi),%ymm6
    0.00 :   1a09bf: lea    -0x81(%rdi,%rdx,1),%rcx
    0.00 :   1a09c7: vmovdqu 0x60(%rsi),%ymm7
    0.00 :   1a09cc: vmovdqu -0x20(%rsi,%rdx,1),%ymm8
    0.00 :   1a09d2: sub    %rdi,%rsi
    0.00 :   1a09d5: and    $0xffffffffffffffe0,%rcx
    0.00 :   1a09d9: add    %rcx,%rsi
    0.00 :   1a09dc: nopl   0x0(%rax)
    0.00 :   1a09e0: vmovdqu 0x60(%rsi),%ymm1
    0.00 :   1a09e5: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a09ea: vmovdqu 0x20(%rsi),%ymm3
    0.00 :   1a09ef: vmovdqu (%rsi),%ymm4
    0.00 :   1a09f3: add    $0xffffffffffffff80,%rsi
    0.00 :   1a09f7: vmovdqa %ymm1,0x60(%rcx)
    0.00 :   1a09fc: vmovdqa %ymm2,0x40(%rcx)
    0.00 :   1a0a01: vmovdqa %ymm3,0x20(%rcx)
    0.00 :   1a0a06: vmovdqa %ymm4,(%rcx)
    0.00 :   1a0a0a: add    $0xffffffffffffff80,%rcx
    0.00 :   1a0a0e: cmp    %rcx,%rdi
    0.00 :   1a0a11: jb     1a09e0 <__memcpy_avx_unaligned_erms+0x220>
    0.00 :   1a0a13: vmovdqu %ymm0,(%rdi)
    0.00 :   1a0a17: vmovdqu %ymm5,0x20(%rdi)
    0.00 :   1a0a1c: vmovdqu %ymm6,0x40(%rdi)
    0.00 :   1a0a21: vmovdqu %ymm7,0x60(%rdi)
    0.00 :   1a0a26: vmovdqu %ymm8,-0x20(%rdx,%rdi,1)
    0.00 :   1a0a2c: vzeroupper
    0.00 :   1a0a2f: ret
    0.00 :   1a0a30: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a0a3b: nopl   0x0(%rax,%rax,1)
    0.00 :   1a0a40: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0a45: test   $0xe00,%ecx
    0.00 :   1a0a4b: jne    1a0ab5 <__memcpy_avx_unaligned_erms+0x2f5>
    0.00 :   1a0a4d: mov    %rcx,%r9
    0.00 :   1a0a50: lea    -0x1(%rsi,%rdx,1),%rcx
    0.00 :   1a0a55: or     $0x3f,%rsi
    0.00 :   1a0a59: lea    0x1(%rsi,%r9,1),%rdi
    0.00 :   1a0a5e: sub    %rsi,%rcx
    0.00 :   1a0a61: inc    %rsi
    0.00 :   1a0a64: rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   1a0a66: vmovdqu %ymm0,(%r8)
    0.00 :   1a0a6b: vmovdqu %ymm1,0x20(%r8)
    0.00 :   1a0a71: vzeroupper
    0.00 :   1a0a74: ret
    0.00 :   1a0a75: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a0a80: mov    %rdi,%rcx
    0.00 :   1a0a83: sub    %rsi,%rcx
    0.00 :   1a0a86: cmp    %rdx,%rcx
    0.00 :   1a0a89: jb     1a09b0 <__memcpy_avx_unaligned_erms+0x1f0>
    0.00 :   1a0a8f: mov    %rdi,%r8
    0.00 :   1a0a92: cmp    0x80b07(%rip),%rdx        # 2215a0 <__x86_rep_movsb_stop_threshold>
    0.00 :   1a0a99: jae    1a0ae0 <__memcpy_avx_unaligned_erms+0x320>
    0.00 :   1a0a9b: testl  $0x1,0x80af3(%rip)        # 221598 <__x86_string_control>
    0.00 :   1a0aa5: je     1a0a40 <__memcpy_avx_unaligned_erms+0x280>
    0.00 :   1a0aa7: cmp    $0xffffffc0,%ecx
    0.00 :   1a0aaa: ja     1a092b <__memcpy_avx_unaligned_erms+0x16b>
    0.00 :   1a0ab0: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0ab5: sub    %rdi,%rsi
    0.00 :   1a0ab8: add    $0x3f,%rdi
    0.00 :   1a0abc: lea    (%r8,%rdx,1),%rcx
    0.00 :   1a0ac0: and    $0xffffffffffffffc0,%rdi
    0.00 :   1a0ac4: add    %rdi,%rsi
    0.00 :   1a0ac7: sub    %rdi,%rcx
    0.00 :   1a0aca: rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   1a0acc: vmovdqu %ymm0,(%r8)
    0.00 :   1a0ad1: vmovdqu %ymm1,0x20(%r8)
    0.00 :   1a0ad7: vzeroupper
    0.00 :   1a0ada: ret
    0.00 :   1a0adb: nopl   0x0(%rax,%rax,1)
    0.00 :   1a0ae0: cmp    0x79911(%rip),%rdx        # 21a3f8 <__x86_rep_movsb_threshold>
    0.00 :   1a0ae7: jb     1a0911 <__memcpy_avx_unaligned_erms+0x151>
    0.00 :   1a0aed: neg    %rcx
    0.00 :   1a0af0: cmp    %rcx,%rdx
    0.00 :   1a0af3: ja     1a092b <__memcpy_avx_unaligned_erms+0x16b>
    0.00 :   1a0af9: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0afe: vmovdqu %ymm0,(%rdi)
    0.00 :   1a0b02: vmovdqu %ymm1,0x20(%rdi)
    0.00 :   1a0b07: mov    %rdi,%r8
    0.00 :   1a0b0a: and    $0x3f,%r8
    0.00 :   1a0b0e: sub    $0x40,%r8
    0.00 :   1a0b12: sub    %r8,%rsi
    0.00 :   1a0b15: sub    %r8,%rdi
    0.00 :   1a0b18: add    %r8,%rdx
    0.00 :   1a0b1b: not    %ecx
    0.00 :   1a0b1d: test   $0xf00,%ecx
    0.00 :   1a0b23: je     1a0cb0 <__memcpy_avx_unaligned_erms+0x4f0>
    0.00 :   1a0b29: mov    %rdx,%r10
    0.00 :   1a0b2c: shr    $0x4,%r10
    0.00 :   1a0b30: cmp    0x80a71(%rip),%r10        # 2215a8 <__x86_shared_non_temporal_threshold>
    0.00 :   1a0b37: jae    1a0cb0 <__memcpy_avx_unaligned_erms+0x4f0>
    0.00 :   1a0b3d: and    $0x1fff,%edx
    0.00 :   1a0b43: shr    $0x9,%r10
    0.00 :   1a0b47: nopw   0x0(%rax,%rax,1)
    0.00 :   1a0b50: mov    $0x20,%ecx
    0.00 :   1a0b55: prefetcht0 0x80(%rsi)
    0.00 :   1a0b5c: prefetcht0 0xc0(%rsi)
    0.00 :   1a0b63: prefetcht0 0x100(%rsi)
    0.00 :   1a0b6a: prefetcht0 0x140(%rsi)
    0.00 :   1a0b71: prefetcht0 0x1080(%rsi)
    0.00 :   1a0b78: prefetcht0 0x10c0(%rsi)
    0.00 :   1a0b7f: prefetcht0 0x1100(%rsi)
    0.00 :   1a0b86: prefetcht0 0x1140(%rsi)
    0.00 :   1a0b8d: vmovdqu (%rsi),%ymm0
    0.00 :   1a0b91: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0b96: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0b9b: vmovdqu 0x60(%rsi),%ymm3
    0.00 :   1a0ba0: vmovdqu 0x1000(%rsi),%ymm4
    0.00 :   1a0ba8: vmovdqu 0x1020(%rsi),%ymm5
    0.00 :   1a0bb0: vmovdqu 0x1040(%rsi),%ymm6
    0.00 :   1a0bb8: vmovdqu 0x1060(%rsi),%ymm7
    0.00 :   1a0bc0: sub    $0xffffffffffffff80,%rsi
    0.00 :   1a0bc4: vmovntdq %ymm0,(%rdi)
    0.00 :   1a0bc8: vmovntdq %ymm1,0x20(%rdi)
    0.00 :   1a0bcd: vmovntdq %ymm2,0x40(%rdi)
    0.00 :   1a0bd2: vmovntdq %ymm3,0x60(%rdi)
    0.00 :   1a0bd7: vmovntdq %ymm4,0x1000(%rdi)
    0.00 :   1a0bdf: vmovntdq %ymm5,0x1020(%rdi)
    0.00 :   1a0be7: vmovntdq %ymm6,0x1040(%rdi)
    0.00 :   1a0bef: vmovntdq %ymm7,0x1060(%rdi)
    0.00 :   1a0bf7: sub    $0xffffffffffffff80,%rdi
    0.00 :   1a0bfb: dec    %ecx
    0.00 :   1a0bfd: jne    1a0b55 <__memcpy_avx_unaligned_erms+0x395>
    0.00 :   1a0c03: add    $0x1000,%rdi
    0.00 :   1a0c0a: add    $0x1000,%rsi
    0.00 :   1a0c11: dec    %r10
    0.00 :   1a0c14: jne    1a0b50 <__memcpy_avx_unaligned_erms+0x390>
    0.00 :   1a0c1a: sfence
    0.00 :   1a0c1d: cmp    $0x80,%edx
    0.00 :   1a0c23: jbe    1a0c7a <__memcpy_avx_unaligned_erms+0x4ba>
    0.00 :   1a0c25: prefetcht0 0x80(%rsi)
    0.00 :   1a0c2c: prefetcht0 0xc0(%rsi)
    0.00 :   1a0c33: prefetcht0 0x80(%rdi)
    0.00 :   1a0c3a: prefetcht0 0xc0(%rdi)
    0.00 :   1a0c41: vmovdqu (%rsi),%ymm0
    0.00 :   1a0c45: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0c4a: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0c4f: vmovdqu 0x60(%rsi),%ymm3
    0.00 :   1a0c54: sub    $0xffffffffffffff80,%rsi
    0.00 :   1a0c58: add    $0xffffff80,%edx
    0.00 :   1a0c5b: vmovdqa %ymm0,(%rdi)
    0.00 :   1a0c5f: vmovdqa %ymm1,0x20(%rdi)
    0.00 :   1a0c64: vmovdqa %ymm2,0x40(%rdi)
    0.00 :   1a0c69: vmovdqa %ymm3,0x60(%rdi)
    0.00 :   1a0c6e: sub    $0xffffffffffffff80,%rdi
    0.00 :   1a0c72: cmp    $0x80,%edx
    0.00 :   1a0c78: ja     1a0c25 <__memcpy_avx_unaligned_erms+0x465>
    0.00 :   1a0c7a: vmovdqu -0x80(%rsi,%rdx,1),%ymm0
    0.00 :   1a0c80: vmovdqu -0x60(%rsi,%rdx,1),%ymm1
    0.00 :   1a0c86: vmovdqu -0x40(%rsi,%rdx,1),%ymm2
    0.00 :   1a0c8c: vmovdqu -0x20(%rsi,%rdx,1),%ymm3
    0.00 :   1a0c92: vmovdqu %ymm0,-0x80(%rdi,%rdx,1)
    0.00 :   1a0c98: vmovdqu %ymm1,-0x60(%rdi,%rdx,1)
    0.00 :   1a0c9e: vmovdqu %ymm2,-0x40(%rdi,%rdx,1)
    0.00 :   1a0ca4: vmovdqu %ymm3,-0x20(%rdi,%rdx,1)
    0.00 :   1a0caa: vzeroupper
    0.00 :   1a0cad: ret
    0.00 :   1a0cae: xchg   %ax,%ax
    0.00 :   1a0cb0: mov    %rdx,%r10
    0.00 :   1a0cb3: and    $0x3fff,%edx
    0.00 :   1a0cb9: shr    $0xe,%r10
    0.00 :   1a0cbd: nopl   (%rax)
    0.00 :   1a0cc0: mov    $0x20,%ecx
    0.00 :   1a0cc5: prefetcht0 0x80(%rsi)
    0.00 :   1a0ccc: prefetcht0 0xc0(%rsi)
    0.00 :   1a0cd3: prefetcht0 0x1080(%rsi)
    0.00 :   1a0cda: prefetcht0 0x10c0(%rsi)
    0.00 :   1a0ce1: prefetcht0 0x2080(%rsi)
    0.00 :   1a0ce8: prefetcht0 0x20c0(%rsi)
    0.00 :   1a0cef: prefetcht0 0x3080(%rsi)
    0.00 :   1a0cf6: prefetcht0 0x30c0(%rsi)
    0.00 :   1a0cfd: vmovdqu (%rsi),%ymm0
    0.00 :   1a0d01: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0d06: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0d0b: vmovdqu 0x60(%rsi),%ymm3
    0.00 :   1a0d10: vmovdqu 0x1000(%rsi),%ymm4
    0.00 :   1a0d18: vmovdqu 0x1020(%rsi),%ymm5
    0.00 :   1a0d20: vmovdqu 0x1040(%rsi),%ymm6
    0.00 :   1a0d28: vmovdqu 0x1060(%rsi),%ymm7
    0.00 :   1a0d30: vmovdqu 0x2000(%rsi),%ymm8
    0.00 :   1a0d38: vmovdqu 0x2020(%rsi),%ymm9
    0.00 :   1a0d40: vmovdqu 0x2040(%rsi),%ymm10
    0.00 :   1a0d48: vmovdqu 0x2060(%rsi),%ymm11
    0.00 :   1a0d50: vmovdqu 0x3000(%rsi),%ymm12
    0.00 :   1a0d58: vmovdqu 0x3020(%rsi),%ymm13
    0.00 :   1a0d60: vmovdqu 0x3040(%rsi),%ymm14
    0.00 :   1a0d68: vmovdqu 0x3060(%rsi),%ymm15
    0.00 :   1a0d70: sub    $0xffffffffffffff80,%rsi
    0.00 :   1a0d74: vmovntdq %ymm0,(%rdi)
    0.00 :   1a0d78: vmovntdq %ymm1,0x20(%rdi)
    0.00 :   1a0d7d: vmovntdq %ymm2,0x40(%rdi)
    0.00 :   1a0d82: vmovntdq %ymm3,0x60(%rdi)
    0.00 :   1a0d87: vmovntdq %ymm4,0x1000(%rdi)
    0.00 :   1a0d8f: vmovntdq %ymm5,0x1020(%rdi)
    0.00 :   1a0d97: vmovntdq %ymm6,0x1040(%rdi)
    0.00 :   1a0d9f: vmovntdq %ymm7,0x1060(%rdi)
    0.00 :   1a0da7: vmovntdq %ymm8,0x2000(%rdi)
    0.00 :   1a0daf: vmovntdq %ymm9,0x2020(%rdi)
    0.00 :   1a0db7: vmovntdq %ymm10,0x2040(%rdi)
    0.00 :   1a0dbf: vmovntdq %ymm11,0x2060(%rdi)
    0.00 :   1a0dc7: vmovntdq %ymm12,0x3000(%rdi)
    0.00 :   1a0dcf: vmovntdq %ymm13,0x3020(%rdi)
    0.00 :   1a0dd7: vmovntdq %ymm14,0x3040(%rdi)
    0.00 :   1a0ddf: vmovntdq %ymm15,0x3060(%rdi)
    0.00 :   1a0de7: sub    $0xffffffffffffff80,%rdi
    0.00 :   1a0deb: dec    %ecx
    0.00 :   1a0ded: jne    1a0cc5 <__memcpy_avx_unaligned_erms+0x505>
    0.00 :   1a0df3: add    $0x3000,%rdi
    0.00 :   1a0dfa: add    $0x3000,%rsi
    0.00 :   1a0e01: dec    %r10
    0.00 :   1a0e04: jne    1a0cc0 <__memcpy_avx_unaligned_erms+0x500>
    0.00 :   1a0e0a: sfence
    0.00 :   1a0e0d: cmp    $0x80,%edx
    0.00 :   1a0e13: jbe    1a0e6a <__memcpy_avx_unaligned_erms+0x6aa>
    0.00 :   1a0e15: prefetcht0 0x80(%rsi)
    0.00 :   1a0e1c: prefetcht0 0xc0(%rsi)
    0.00 :   1a0e23: prefetcht0 0x80(%rdi)
    0.00 :   1a0e2a: prefetcht0 0xc0(%rdi)
    0.00 :   1a0e31: vmovdqu (%rsi),%ymm0
    0.00 :   1a0e35: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0e3a: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0e3f: vmovdqu 0x60(%rsi),%ymm3
    0.00 :   1a0e44: sub    $0xffffffffffffff80,%rsi
    0.00 :   1a0e48: add    $0xffffff80,%edx
    0.00 :   1a0e4b: vmovdqa %ymm0,(%rdi)
    0.00 :   1a0e4f: vmovdqa %ymm1,0x20(%rdi)
    0.00 :   1a0e54: vmovdqa %ymm2,0x40(%rdi)
    0.00 :   1a0e59: vmovdqa %ymm3,0x60(%rdi)
    0.00 :   1a0e5e: sub    $0xffffffffffffff80,%rdi
    0.00 :   1a0e62: cmp    $0x80,%edx
    0.00 :   1a0e68: ja     1a0e15 <__memcpy_avx_unaligned_erms+0x655>
    0.00 :   1a0e6a: vmovdqu -0x80(%rsi,%rdx,1),%ymm0
    0.00 :   1a0e70: vmovdqu -0x60(%rsi,%rdx,1),%ymm1
    0.00 :   1a0e76: vmovdqu -0x40(%rsi,%rdx,1),%ymm2
    0.00 :   1a0e7c: vmovdqu -0x20(%rsi,%rdx,1),%ymm3
    0.00 :   1a0e82: vmovdqu %ymm0,-0x80(%rdi,%rdx,1)
    0.00 :   1a0e88: vmovdqu %ymm1,-0x60(%rdi,%rdx,1)
    0.00 :   1a0e8e: vmovdqu %ymm2,-0x40(%rdi,%rdx,1)
    0.00 :   1a0e94: vmovdqu %ymm3,-0x20(%rdi,%rdx,1)
    0.00 :   1a0e9a: vzeroupper
    0.00 :   1a0e9d: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (40 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007c36 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    0.00 :   7c36:   endbr64
    0.00 :   7c3a:   push   %rbp
    0.00 :   7c3b:   mov    %rsp,%rbp
    0.00 :   7c3e:   push   %r12
    0.00 :   7c40:   push   %rbx
    2.53 :   7c41:   sub    $0x20,%rsp
    0.00 :   7c45:   mov    %rdi,-0x18(%rbp)
    5.10 :   7c49:   mov    %rsi,-0x20(%rbp)
    5.11 :   7c4d:   mov    %rdx,-0x28(%rbp)
    0.00 :   7c51:   mov    -0x18(%rbp),%rax
    5.08 :   7c55:   mov    (%rax),%rdx
    0.00 :   7c58:   mov    -0x20(%rbp),%rax
    0.00 :   7c5c:   shl    $0x3,%rax
    0.00 :   7c60:   add    %rdx,%rax
    0.00 :   7c63:   mov    (%rax),%rax
    5.10 :   7c66:   test   %rax,%rax
    0.00 :   7c69:   je     7ca8 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*)+0x72>
    0.00 :   7c6b:   mov    -0x18(%rbp),%rax
    0.00 :   7c6f:   mov    (%rax),%rdx
    0.00 :   7c72:   mov    -0x20(%rbp),%rax
    0.00 :   7c76:   shl    $0x3,%rax
    0.00 :   7c7a:   add    %rdx,%rax
    0.00 :   7c7d:   mov    (%rax),%rax
    0.00 :   7c80:   mov    (%rax),%rdx
    0.00 :   7c83:   mov    -0x28(%rbp),%rax
    0.00 :   7c87:   mov    %rdx,(%rax)
    0.00 :   7c8a:   mov    -0x18(%rbp),%rax
    0.00 :   7c8e:   mov    (%rax),%rdx
    0.00 :   7c91:   mov    -0x20(%rbp),%rax
    0.00 :   7c95:   shl    $0x3,%rax
    0.00 :   7c99:   add    %rdx,%rax
    0.00 :   7c9c:   mov    (%rax),%rax
    0.00 :   7c9f:   mov    -0x28(%rbp),%rdx
    0.00 :   7ca3:   mov    %rdx,(%rax)
    1.14 :   7ca6:   jmp    7d20 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*)+0xea>
    0.00 :   7ca8:   mov    -0x18(%rbp),%rax
    4.87 :   7cac:   mov    0x10(%rax),%rdx
    0.00 :   7cb0:   mov    -0x28(%rbp),%rax
    0.00 :   7cb4:   mov    %rdx,(%rax)
    0.00 :   7cb7:   mov    -0x18(%rbp),%rax
    0.00 :   7cbb:   mov    -0x28(%rbp),%rdx
    2.52 :   7cbf:   mov    %rdx,0x10(%rax)
    0.00 :   7cc3:   mov    -0x28(%rbp),%rax
    0.00 :   7cc7:   mov    (%rax),%rax
    7.53 :   7cca:   test   %rax,%rax
    5.07 :   7ccd:   je     7d03 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*)+0xcd>
    0.00 :   7ccf:   mov    -0x28(%rbp),%rbx
    0.00 :   7cd3:   mov    -0x18(%rbp),%rax
    0.00 :   7cd7:   mov    (%rax),%r12
    0.00 :   7cda:   mov    -0x28(%rbp),%rax
    0.00 :   7cde:   mov    %rax,%rdi
    0.00 :   7ce1:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    0.00 :   7ce6:   lea    0x8(%rax),%rdx
    0.00 :   7cea:   mov    -0x18(%rbp),%rax
    0.00 :   7cee:   mov    %rdx,%rsi
    0.00 :   7cf1:   mov    %rax,%rdi
    0.00 :   7cf4:   call   88da <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const>
    5.10 :   7cf9:   shl    $0x3,%rax
    0.00 :   7cfd:   add    %r12,%rax
    0.00 :   7d00:   mov    %rbx,(%rax)
   33.01 :   7d03:   mov    -0x18(%rbp),%rax
    0.00 :   7d07:   mov    (%rax),%rdx
    2.57 :   7d0a:   mov    -0x20(%rbp),%rax
    0.00 :   7d0e:   shl    $0x3,%rax
    0.00 :   7d12:   add    %rdx,%rax
    2.55 :   7d15:   mov    -0x18(%rbp),%rdx
    0.00 :   7d19:   add    $0x10,%rdx
    0.00 :   7d1d:   mov    %rdx,(%rax)
   12.72 :   7d20:   nop
    0.00 :   7d21:   add    $0x20,%rsp
    0.00 :   7d25:   pop    %rbx
    0.00 :   7d26:   pop    %r12
    0.00 :   7d28:   pop    %rbp
    0.00 :   7d29:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (45 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000130f80 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4>:
    0.00 :   130f80: endbr64
    0.00 :   130f84: push   %r15
    0.00 :   130f86: lea    0xd0(%r9),%rdi
    0.00 :   130f8d: push   %r14
    0.00 :   130f8f: push   %r13
    2.25 :   130f91: mov    $0x8,%r13d
    0.00 :   130f97: push   %r12
    0.00 :   130f99: push   %rbp
    0.00 :   130f9a: push   %rbx
    0.00 :   130f9b: mov    %r9,%rbx
    0.00 :   130f9e: sub    $0xa8,%rsp
    0.00 :   130fa5: mov    0xe0(%rsp),%rax
    0.00 :   130fad: mov    %rsi,0x70(%rsp)
    0.00 :   130fb2: mov    %rdx,0x78(%rsp)
    0.00 :   130fb7: mov    %rax,0x40(%rsp)
    0.00 :   130fbc: mov    0xe8(%rsp),%rax
    0.00 :   130fc4: mov    %rcx,0x60(%rsp)
    0.00 :   130fc9: mov    %r8,0x68(%rsp)
    0.00 :   130fce: mov    %rax,0x48(%rsp)
    0.00 :   130fd3: mov    %fs:0x28,%rax
    0.00 :   130fdc: mov    %rax,0x98(%rsp)
    0.00 :   130fe4: xor    %eax,%eax
    0.00 :   130fe6: call   12b240 <std::__numpunct_cache<char>::_M_cache(std::locale const&)@@GLIBCXX_3.4+0x4f0>
    0.00 :   130feb: mov    0x18(%rbx),%r15d
    0.00 :   130fef: mov    %rax,%rbp
    0.00 :   130ff2: and    $0x4a,%r15d
    0.00 :   130ff6: cmp    $0x40,%r15d
    0.00 :   130ffa: je     13100f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x8f>
    0.00 :   130ffc: cmp    $0x8,%r15d
    0.00 :   131000: mov    $0x10,%r13d
    0.00 :   131006: mov    $0xa,%eax
    0.00 :   13100b: cmovne %eax,%r13d
    0.00 :   13100f: lea    0x70(%rsp),%rbx
    0.00 :   131014: lea    0x60(%rsp),%rsi
    0.00 :   131019: mov    %rbx,%rdi
    0.00 :   13101c: mov    %rsi,0x28(%rsp)
    0.00 :   131021: mov    %rbx,0x8(%rsp)
    0.00 :   131026: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   13102b: mov    %al,0x5d(%rsp)
    0.00 :   13102f: test   %al,%al
    0.00 :   131031: jne    1317b0 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x830>
    0.00 :   131037: mov    %rbx,%rdi
    0.00 :   13103a: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   13103f: cmp    %al,0x6e(%rbp)
    0.00 :   131042: mov    %eax,%ebx
    0.00 :   131044: sete   0x5e(%rsp)
    0.00 :   131049: je     131054 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xd4>
    0.00 :   13104b: cmp    %al,0x6f(%rbp)
    0.00 :   13104e: jne    131880 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x900>
    0.00 :   131054: movzbl 0x20(%rbp),%edx
    0.00 :   131058: test   %dl,%dl
    0.00 :   13105a: jne    131330 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x3b0>
    0.00 :   131060: cmp    %al,0x48(%rbp)
    0.00 :   131063: je     13109e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x11e>
    0.00 :   131065: mov    0x70(%rsp),%rdi
    0.00 :   13106a: call   1271b0 <std::codecvt_byname<char, char, __mbstate_t>::~codecvt_byname()@@GLIBCXX_3.4+0x70>
    0.00 :   13106f: mov    0x28(%rsp),%rsi
    0.00 :   131074: mov    0x8(%rsp),%rdi
    0.00 :   131079: movl   $0xffffffff,0x78(%rsp)
    0.00 :   131081: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   131086: test   %al,%al
    0.00 :   131088: jne    13188e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x90e>
    0.00 :   13108e: mov    0x8(%rsp),%rdi
    0.00 :   131093: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   131098: movzbl 0x20(%rbp),%edx
    0.00 :   13109c: mov    %eax,%ebx
    0.00 :   13109e: xor    %r12d,%r12d
    2.32 :   1310a1: xor    %r14d,%r14d
    0.00 :   1310a4: mov    %r15d,%ecx
    0.00 :   1310a7: test   %dl,%dl
    0.00 :   1310a9: je     1310b4 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x134>
    0.00 :   1310ab: cmp    %bl,0x49(%rbp)
    0.00 :   1310ae: je     1317c6 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x846>
    0.00 :   1310b4: cmp    %bl,0x48(%rbp)
    0.00 :   1310b7: je     13115e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1de>
    0.00 :   1310bd: cmp    %bl,0x72(%rbp)
   11.84 :   1310c0: je     131340 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x3c0>
    0.00 :   1310c6: test   %r12b,%r12b
    0.00 :   1310c9: je     1313ac <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x42c>
    0.00 :   1310cf: cmp    %bl,0x70(%rbp)
    0.00 :   1310d2: je     1310dd <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x15d>
    0.00 :   1310d4: cmp    %bl,0x71(%rbp)
    0.00 :   1310d7: jne    1318a8 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x928>
    0.00 :   1310dd: test   %ecx,%ecx
    0.00 :   1310df: sete   %al
    0.00 :   1310e2: cmp    $0x10,%r13d
    0.00 :   1310e6: sete   %sil
    0.00 :   1310ea: or     %sil,%al
    0.00 :   1310ed: je     1318e6 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x966>
    0.00 :   1310f3: xor    %r12d,%r12d
    0.00 :   1310f6: xor    %r14d,%r14d
    0.00 :   1310f9: mov    $0x10,%r13d
    0.00 :   1310ff: mov    0x70(%rsp),%r15
    0.00 :   131104: mov    0x10(%r15),%rax
    0.00 :   131108: mov    0x18(%r15),%rdx
    0.00 :   13110c: cmp    %rdx,%rax
    0.00 :   13110f: jae    131500 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x580>
    0.00 :   131115: add    $0x1,%rax
    0.00 :   131119: movl   $0xffffffff,0x78(%rsp)
    0.00 :   131121: mov    %rax,0x10(%r15)
    0.00 :   131125: cmp    %rdx,%rax
    0.00 :   131128: jae    131530 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x5b0>
    0.00 :   13112e: xor    %r15d,%r15d
    0.00 :   131131: mov    0x60(%rsp),%rdi
    0.00 :   131136: cmpl   $0xffffffff,0x68(%rsp)
    0.00 :   13113b: sete   %al
    0.00 :   13113e: test   %rdi,%rdi
    0.00 :   131141: setne  %dl
    0.00 :   131144: and    %al,%dl
    0.00 :   131146: jne    1314c0 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x540>
    0.00 :   13114c: cmp    %r15b,%al
    0.00 :   13114f: jne    131380 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x400>
    0.00 :   131155: movb   $0x1,0x5d(%rsp)
    0.00 :   13115a: movzbl 0x20(%rbp),%edx
    0.00 :   13115e: cmp    $0x10,%r13d
    0.00 :   131162: je     1313bb <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x43b>
    0.00 :   131168: movslq %r13d,%rax
    0.00 :   13116b: mov    %r13d,%r15d
    0.00 :   13116e: mov    %rax,0x38(%rsp)
    0.00 :   131173: mov    0xf43ce(%rip),%rax        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    2.50 :   13117a: mov    %rax,0x50(%rsp)
    0.00 :   13117f: add    $0x18,%rax
    0.00 :   131183: mov    %rax,0x90(%rsp)
    0.00 :   13118b: test   %dl,%dl
    0.00 :   13118d: jne    131800 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x880>
    0.00 :   131193: movzbl 0x5e(%rsp),%edx
    0.00 :   131198: movslq %r15d,%rsi
    0.00 :   13119b: movabs $0x7fffffffffffffff,%rax
    0.00 :   1311a5: mov    %rsi,0x18(%rsp)
    2.41 :   1311aa: add    %rdx,%rax
    0.00 :   1311ad: xor    %edx,%edx
    0.00 :   1311af: mov    %rax,0x20(%rsp)
    0.00 :   1311b4: div    %rsi
    9.44 :   1311b7: mov    %rax,(%rsp)
    0.00 :   1311bb: movzbl 0x88(%rbp),%eax
    0.00 :   1311c2: mov    %al,0x5f(%rsp)
    0.00 :   1311c6: test   %al,%al
    0.00 :   1311c8: jne    131610 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x690>
    0.00 :   1311ce: cmpb   $0x0,0x5d(%rsp)
    0.00 :   1311d3: movb   $0x0,0x58(%rsp)
    0.00 :   1311d8: jne    13196f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x9ef>
    2.46 :   1311de: movzbl 0x38(%rsp),%eax
    0.00 :   1311e3: xor    %r15d,%r15d
    0.00 :   1311e6: add    $0x30,%eax
    0.00 :   1311e9: mov    %al,0x28(%rsp)
    4.59 :   1311ed: movsbl %bl,%edx
    0.00 :   1311f0: cmp    $0xa,%r13d
    0.00 :   1311f4: jg     1313e8 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x468>
    0.00 :   1311fa: cmp    $0x2f,%bl
    2.41 :   1311fd: jle    13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   131203: cmp    %bl,0x28(%rsp)
    0.00 :   131207: jle    13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   13120d: lea    -0x30(%rdx),%eax
    1.92 :   131210: cmp    %r15,(%rsp)
    0.00 :   131214: jb     1313d8 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x458>
    0.00 :   13121a: mov    0x18(%rsp),%rdx
    0.00 :   13121f: mov    0x20(%rsp),%rcx
    0.00 :   131224: cltq
    0.00 :   131226: imul   %r15,%rdx
    2.41 :   13122a: sub    %rax,%rcx
    0.00 :   13122d: cmp    %rdx,%rcx
    0.00 :   131230: lea    (%rax,%rdx,1),%r15
    0.00 :   131234: setb   %cl
    2.43 :   131237: or     %cl,0x58(%rsp)
    0.00 :   13123b: add    $0x1,%r14d
    0.00 :   13123f: mov    0x70(%rsp),%rbx
    0.00 :   131244: mov    0x10(%rbx),%rax
    2.55 :   131248: mov    0x18(%rbx),%rdx
    0.00 :   13124c: cmp    %rdx,%rax
    0.00 :   13124f: jae    131780 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x800>
    0.00 :   131255: add    $0x1,%rax
    0.00 :   131259: movl   $0xffffffff,0x78(%rsp)
    0.00 :   131261: mov    %rax,0x10(%rbx)
    0.00 :   131265: movb   $0x0,0x8(%rsp)
    0.00 :   13126a: cmp    %rdx,%rax
    0.00 :   13126d: jae    1318f6 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x976>
    0.00 :   131273: mov    0x60(%rsp),%rdi
    2.32 :   131278: cmpl   $0xffffffff,0x68(%rsp)
    0.00 :   13127d: sete   %al
    0.00 :   131280: test   %rdi,%rdi
    0.00 :   131283: je     13128d <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x30d>
    0.00 :   131285: test   %al,%al
    0.00 :   131287: jne    1315a0 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x620>
    0.00 :   13128d: cmp    0x8(%rsp),%al
    2.30 :   131291: jne    1314d8 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x558>
    0.00 :   131297: mov    $0x1,%ebx
    0.00 :   13129c: mov    0x90(%rsp),%rdx
    0.00 :   1312a4: cmpq   $0x0,-0x18(%rdx)
    0.00 :   1312a9: jne    13141f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x49f>
    0.00 :   1312af: cmp    $0x1,%r12b
    0.00 :   1312b3: je     13146e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x4ee>
    0.00 :   1312b9: test   %r14d,%r14d
    0.00 :   1312bc: jne    13146e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x4ee>
    0.00 :   1312c2: mov    0x48(%rsp),%rax
    0.00 :   1312c7: movq   $0x0,(%rax)
    0.00 :   1312ce: mov    0x40(%rsp),%rax
    0.00 :   1312d3: movl   $0x4,(%rax)
    0.00 :   1312d9: test   %bl,%bl
    0.00 :   1312db: je     1312e5 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x365>
    0.00 :   1312dd: mov    0x40(%rsp),%rax
    0.00 :   1312e2: orl    $0x2,(%rax)
    0.00 :   1312e5: mov    0x50(%rsp),%rax
    0.00 :   1312ea: lea    -0x18(%rdx),%rdi
    0.00 :   1312ee: mov    0x70(%rsp),%r12
    2.40 :   1312f3: mov    0x78(%rsp),%r13
   21.03 :   1312f8: cmp    %rax,%rdi
    0.00 :   1312fb: jne    1318b3 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x933>
    0.00 :   131301: mov    0x98(%rsp),%rax
    0.00 :   131309: sub    %fs:0x28,%rax
    0.00 :   131312: jne    1319b1 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xa31>
    0.00 :   131318: add    $0xa8,%rsp
    0.00 :   13131f: mov    %r12,%rax
    0.00 :   131322: mov    %r13,%rdx
    0.00 :   131325: pop    %rbx
    1.31 :   131326: pop    %rbp
    0.00 :   131327: pop    %r12
    0.00 :   131329: pop    %r13
    0.00 :   13132b: pop    %r14
    0.00 :   13132d: pop    %r15
    0.00 :   13132f: ret
    0.00 :   131330: cmp    %al,0x49(%rbp)
    0.00 :   131333: jne    131060 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xe0>
    0.00 :   131339: jmp    13109e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x11e>
    0.00 :   13133e: xchg   %ax,%ax
    0.00 :   131340: mov    %r12d,%eax
    0.00 :   131343: xor    $0x1,%eax
    0.00 :   131346: cmp    $0xa,%r13d
    0.00 :   13134a: sete   %sil
    0.00 :   13134e: or     %sil,%al
    0.00 :   131351: je     1310cf <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x14f>
    0.00 :   131357: cmp    $0x8,%r13d
    0.00 :   13135b: sete   %r12b
    0.00 :   13135f: test   %ecx,%ecx
    0.00 :   131361: sete   %dl
    0.00 :   131364: or     %dl,%r12b
    0.00 :   131367: je     131590 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x610>
    0.00 :   13136d: xor    %r14d,%r14d
    0.00 :   131370: mov    $0x8,%r13d
    0.00 :   131376: jmp    1310ff <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x17f>
    0.00 :   13137b: nopl   0x0(%rax,%rax,1)
    0.00 :   131380: mov    0x70(%rsp),%rdi
    0.00 :   131385: test   %rdi,%rdi
    0.00 :   131388: je     131580 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x600>
    0.00 :   13138e: mov    0x10(%rdi),%rax
    0.00 :   131392: cmp    0x18(%rdi),%rax
    0.00 :   131396: jae    13155e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x5de>
    0.00 :   13139c: movzbl (%rax),%ebx
    0.00 :   13139f: movzbl 0x20(%rbp),%edx
    0.00 :   1313a3: test   %r12b,%r12b
    0.00 :   1313a6: jne    1310a7 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x127>
    0.00 :   1313ac: movb   $0x0,0x5d(%rsp)
    0.00 :   1313b1: cmp    $0x10,%r13d
    0.00 :   1313b5: jne    131168 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1e8>
    0.00 :   1313bb: movq   $0x16,0x38(%rsp)
    0.00 :   1313c4: mov    $0x10,%r15d
    0.00 :   1313ca: mov    $0x16,%r13d
    0.00 :   1313d0: jmp    131173 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1f3>
    0.00 :   1313d5: nopl   (%rax)
    0.00 :   1313d8: movb   $0x1,0x58(%rsp)
    0.00 :   1313dd: jmp    13123f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x2bf>
    0.00 :   1313e2: nopw   0x0(%rax,%rax,1)
    0.00 :   1313e8: lea    -0x30(%rbx),%eax
    0.00 :   1313eb: cmp    $0x9,%al
    0.00 :   1313ed: jbe    13120d <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x28d>
    0.00 :   1313f3: lea    -0x61(%rbx),%eax
    0.00 :   1313f6: cmp    $0x5,%al
    0.00 :   1313f8: ja     1315f4 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x674>
    0.00 :   1313fe: lea    -0x57(%rdx),%eax
    0.00 :   131401: cmp    $0x56,%edx
    0.00 :   131404: jne    131210 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x290>
    0.00 :   13140a: mov    0x90(%rsp),%rdx
    0.00 :   131412: xor    %ebx,%ebx
    0.00 :   131414: cmpq   $0x0,-0x18(%rdx)
    0.00 :   131419: je     1312af <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x32f>
    0.00 :   13141f: lea    0x90(%rsp),%r13
    0.00 :   131427: movsbl %r14b,%esi
    0.00 :   13142b: mov    %r13,%rdi
    0.00 :   13142e: mov    %r13,0x10(%rsp)
    0.00 :   131433: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   131438: mov    0x18(%rbp),%rsi
    0.00 :   13143c: mov    0x10(%rbp),%rdi
    0.00 :   131440: mov    %r13,%rdx
    0.00 :   131443: call   a20a0 <std::__verify_grouping(char const*, unsigned long, std::string const&)@plt>
    0.00 :   131448: test   %al,%al
    0.00 :   13144a: je     131840 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x8c0>
    0.00 :   131450: mov    0x90(%rsp),%rdx
    0.00 :   131458: test   %r14d,%r14d
    0.00 :   13145b: jne    13146e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x4ee>
    0.00 :   13145d: cmp    $0x1,%r12b
    0.00 :   131461: je     13146e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x4ee>
    0.00 :   131463: cmpq   $0x0,-0x18(%rdx)
    0.00 :   131468: je     1312c2 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x342>
    0.00 :   13146e: cmpb   $0x0,0x5d(%rsp)
    2.04 :   131473: jne    1312c2 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x342>
    0.00 :   131479: cmpb   $0x0,0x58(%rsp)
    2.23 :   13147e: je     131820 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x8a0>
    0.00 :   131484: movabs $0x8000000000000000,%rcx
    0.00 :   13148e: cmpb   $0x0,0x5e(%rsp)
    0.00 :   131493: movabs $0x7fffffffffffffff,%rax
    0.00 :   13149d: cmovne %rcx,%rax
    0.00 :   1314a1: mov    0x48(%rsp),%rcx
    0.00 :   1314a6: mov    %rax,(%rcx)
    0.00 :   1314a9: mov    0x40(%rsp),%rax
    0.00 :   1314ae: movl   $0x4,(%rax)
    0.00 :   1314b4: jmp    1312d9 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x359>
    0.00 :   1314b9: nopl   0x0(%rax)
    0.00 :   1314c0: mov    0x18(%rdi),%rax
    0.00 :   1314c4: cmp    %rax,0x10(%rdi)
    0.00 :   1314c8: jae    131850 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x8d0>
    0.00 :   1314ce: xor    %eax,%eax
    0.00 :   1314d0: jmp    13114c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1cc>
    0.00 :   1314d5: nopl   (%rax)
    0.00 :   1314d8: mov    0x70(%rsp),%rdi
    0.00 :   1314dd: test   %rdi,%rdi
    0.00 :   1314e0: je     1315e0 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x660>
    0.00 :   1314e6: mov    0x10(%rdi),%rax
    6.62 :   1314ea: cmp    0x18(%rdi),%rax
    0.00 :   1314ee: jae    131922 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x9a2>
    0.00 :   1314f4: movzbl (%rax),%ebx
    3.20 :   1314f7: jmp    1311ed <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x26d>
    0.00 :   1314fc: nopl   0x0(%rax)
    0.00 :   131500: mov    (%r15),%rax
    0.00 :   131503: mov    %ecx,0x58(%rsp)
    0.00 :   131507: mov    %r15,%rdi
    0.00 :   13150a: call   *0x50(%rax)
    0.00 :   13150d: mov    0x10(%r15),%rax
    0.00 :   131511: mov    0x18(%r15),%rdx
    0.00 :   131515: movl   $0xffffffff,0x78(%rsp)
    0.00 :   13151d: mov    0x58(%rsp),%ecx
    0.00 :   131521: cmp    %rdx,%rax
    0.00 :   131524: jb     13112e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1ae>
    0.00 :   13152a: nopw   0x0(%rax,%rax,1)
    0.00 :   131530: mov    (%r15),%rax
    0.00 :   131533: mov    %ecx,0x58(%rsp)
    0.00 :   131537: mov    %r15,%rdi
    0.00 :   13153a: call   *0x48(%rax)
    0.00 :   13153d: mov    0x58(%rsp),%ecx
    0.00 :   131541: cmp    $0xffffffff,%eax
    0.00 :   131544: jne    13112e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1ae>
    0.00 :   13154a: movq   $0x0,0x70(%rsp)
    0.00 :   131553: mov    $0x1,%r15d
    0.00 :   131559: jmp    131131 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1b1>
    0.00 :   13155e: mov    (%rdi),%rax
    0.00 :   131561: mov    %ecx,0x58(%rsp)
    0.00 :   131565: call   *0x48(%rax)
    0.00 :   131568: mov    0x58(%rsp),%ecx
    0.00 :   13156c: cmp    $0xffffffff,%eax
    0.00 :   13156f: mov    %eax,%ebx
    0.00 :   131571: jne    13139f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x41f>
    0.00 :   131577: movq   $0x0,0x70(%rsp)
    0.00 :   131580: mov    $0xffffffff,%ebx
    0.00 :   131585: jmp    13139f <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x41f>
    0.00 :   13158a: nopw   0x0(%rax,%rax,1)
    0.00 :   131590: add    $0x1,%r14d
    0.00 :   131594: mov    %eax,%r12d
    0.00 :   131597: jmp    1310ff <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x17f>
    0.00 :   13159c: nopl   0x0(%rax)
    0.00 :   1315a0: mov    0x18(%rdi),%rcx
    0.00 :   1315a4: xor    %eax,%eax
    0.00 :   1315a6: cmp    %rcx,0x10(%rdi)
    0.00 :   1315aa: jb     13128d <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x30d>
    0.00 :   1315b0: mov    (%rdi),%rax
    0.00 :   1315b3: lea    0x90(%rsp),%rcx
    0.00 :   1315bb: mov    %rcx,0x10(%rsp)
    0.00 :   1315c0: call   *0x48(%rax)
    0.00 :   1315c3: cmp    $0xffffffff,%eax
    0.00 :   1315c6: sete   %al
    0.00 :   1315c9: jne    13128d <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x30d>
    0.00 :   1315cf: movq   $0x0,0x60(%rsp)
    0.00 :   1315d8: jmp    13128d <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x30d>
    0.00 :   1315dd: nopl   (%rax)
    0.00 :   1315e0: cmp    $0xa,%r13d
    0.00 :   1315e4: jle    13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   1315ea: mov    $0xffffffff,%ebx
    0.00 :   1315ef: mov    $0xffffffff,%edx
    0.00 :   1315f4: sub    $0x41,%ebx
    0.00 :   1315f7: cmp    $0x5,%bl
    0.00 :   1315fa: ja     13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   131600: lea    -0x37(%rdx),%eax
    0.00 :   131603: jmp    131210 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x290>
    0.00 :   131608: nopl   0x0(%rax,%rax,1)
    0.00 :   131610: cmpb   $0x0,0x5d(%rsp)
    0.00 :   131615: jne    131981 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xa01>
    0.00 :   13161b: lea    0x90(%rsp),%rax
    0.00 :   131623: movb   $0x0,0x58(%rsp)
    0.00 :   131628: lea    0x72(%rbp),%r13
    0.00 :   13162c: xor    %r15d,%r15d
    0.00 :   13162f: mov    %rax,0x30(%rsp)
    0.00 :   131634: movzbl 0x20(%rbp),%eax
    0.00 :   131638: test   %al,%al
    0.00 :   13163a: je     131645 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x6c5>
    0.00 :   13163c: cmp    %bl,0x49(%rbp)
    0.00 :   13163f: je     131713 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x793>
    0.00 :   131645: cmp    %bl,0x48(%rbp)
    0.00 :   131648: je     13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   13164e: mov    0x38(%rsp),%rdx
    0.00 :   131653: movsbl %bl,%esi
    0.00 :   131656: mov    %r13,%rdi
    0.00 :   131659: call   9eab0 <memchr@plt>
    0.00 :   13165e: test   %rax,%rax
    0.00 :   131661: je     13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   131667: sub    %r13,%rax
    0.00 :   13166a: lea    -0x6(%rax),%edx
    0.00 :   13166d: cmp    $0xf,%eax
    0.00 :   131670: cmovg  %edx,%eax
    0.00 :   131673: cmp    %r15,(%rsp)
    0.00 :   131677: jb     131768 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x7e8>
    0.00 :   13167d: mov    0x18(%rsp),%rdx
    0.00 :   131682: mov    0x20(%rsp),%rcx
    0.00 :   131687: cltq
    0.00 :   131689: imul   %r15,%rdx
    0.00 :   13168d: sub    %rax,%rcx
    0.00 :   131690: cmp    %rdx,%rcx
    0.00 :   131693: lea    (%rax,%rdx,1),%r15
    0.00 :   131697: setb   %cl
    0.00 :   13169a: or     %cl,0x58(%rsp)
    0.00 :   13169e: add    $0x1,%r14d
    0.00 :   1316a2: mov    0x70(%rsp),%rdi
    0.00 :   1316a7: mov    0x10(%rdi),%rax
    0.00 :   1316ab: cmp    0x18(%rdi),%rax
    0.00 :   1316af: jae    13174b <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x7cb>
    0.00 :   1316b5: add    $0x1,%rax
    0.00 :   1316b9: mov    %rax,0x10(%rdi)
    0.00 :   1316bd: mov    0x30(%rsp),%rax
    0.00 :   1316c2: mov    0x28(%rsp),%rsi
    0.00 :   1316c7: movl   $0xffffffff,0x78(%rsp)
    0.00 :   1316cf: mov    0x8(%rsp),%rdi
    0.00 :   1316d4: mov    %rax,0x10(%rsp)
    0.00 :   1316d9: call   12faf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, unsigned long long) const@@GLIBCXX_3.4+0x30>
    0.00 :   1316de: mov    %eax,%ebx
    0.00 :   1316e0: test   %al,%al
    0.00 :   1316e2: jne    13129c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x31c>
    0.00 :   1316e8: mov    0x30(%rsp),%rax
    0.00 :   1316ed: mov    0x8(%rsp),%rdi
    0.00 :   1316f2: mov    %rax,0x10(%rsp)
    0.00 :   1316f7: call   103500 <bool std::has_facet<std::__cxx11::messages<char> >(std::locale const&)@@GLIBCXX_3.4.21+0x50>
    0.00 :   1316fc: mov    %eax,%ebx
    0.00 :   1316fe: movzbl 0x20(%rbp),%eax
    0.00 :   131702: test   %al,%al
    0.00 :   131704: je     131645 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x6c5>
    0.00 :   13170a: cmp    %bl,0x49(%rbp)
    0.00 :   13170d: jne    131645 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x6c5>
    0.00 :   131713: test   %r14d,%r14d
    0.00 :   131716: je     131998 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xa18>
    0.00 :   13171c: lea    0x90(%rsp),%rax
    0.00 :   131724: movsbl %r14b,%esi
    0.00 :   131728: mov    %rax,%rdi
    0.00 :   13172b: mov    %rax,0x10(%rsp)
    0.00 :   131730: call   a0d80 <std::string::push_back(char)@plt>
    0.00 :   131735: mov    0x70(%rsp),%rdi
    0.00 :   13173a: xor    %r14d,%r14d
    0.00 :   13173d: mov    0x10(%rdi),%rax
    0.00 :   131741: cmp    0x18(%rdi),%rax
    0.00 :   131745: jb     1316b5 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x735>
    0.00 :   13174b: mov    (%rdi),%rax
    0.00 :   13174e: lea    0x90(%rsp),%rcx
    0.00 :   131756: mov    %rcx,0x10(%rsp)
    0.00 :   13175b: call   *0x50(%rax)
    0.00 :   13175e: jmp    1316bd <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x73d>
    0.00 :   131763: nopl   0x0(%rax,%rax,1)
    0.00 :   131768: movzbl 0x5f(%rsp),%eax
    0.00 :   13176d: mov    %al,0x58(%rsp)
    0.00 :   131771: jmp    1316a2 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x722>
    0.00 :   131776: cs nopw 0x0(%rax,%rax,1)
    0.00 :   131780: mov    (%rbx),%rax
    0.00 :   131783: lea    0x90(%rsp),%rcx
    0.00 :   13178b: mov    %rbx,%rdi
    0.00 :   13178e: mov    %rcx,0x10(%rsp)
    0.00 :   131793: call   *0x50(%rax)
    0.00 :   131796: mov    0x10(%rbx),%rax
    0.00 :   13179a: mov    0x18(%rbx),%rdx
    0.00 :   13179e: movl   $0xffffffff,0x78(%rsp)
    0.00 :   1317a6: jmp    131265 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x2e5>
    0.00 :   1317ab: nopl   0x0(%rax,%rax,1)
    0.00 :   1317b0: movb   $0x0,0x5e(%rsp)
    0.00 :   1317b5: movzbl 0x20(%rbp),%edx
    0.00 :   1317b9: xor    %ebx,%ebx
    0.00 :   1317bb: xor    %r14d,%r14d
    0.00 :   1317be: xor    %r12d,%r12d
    0.00 :   1317c1: jmp    13115e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1de>
    0.00 :   1317c6: cmp    $0x10,%r13d
    0.00 :   1317ca: jne    131168 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1e8>
    0.00 :   1317d0: mov    0xf3d71(%rip),%rax        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   1317d7: mov    $0x10,%r15d
    0.00 :   1317dd: movq   $0x16,0x38(%rsp)
    0.00 :   1317e6: mov    $0x16,%r13d
    0.00 :   1317ec: mov    %rax,0x50(%rsp)
    0.00 :   1317f1: add    $0x18,%rax
    0.00 :   1317f5: mov    %rax,0x90(%rsp)
    0.00 :   1317fd: nopl   (%rax)
    0.00 :   131800: lea    0x90(%rsp),%rax
    0.00 :   131808: mov    $0x20,%esi
    0.00 :   13180d: mov    %rax,%rdi
    0.00 :   131810: mov    %rax,0x10(%rsp)
    0.00 :   131815: call   9eb00 <std::string::reserve(unsigned long)@plt>
    0.00 :   13181a: jmp    131193 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x213>
    0.00 :   13181f: nop
    2.39 :   131820: mov    %r15,%rax
    0.00 :   131823: mov    0x48(%rsp),%rcx
    0.00 :   131828: neg    %rax
    0.00 :   13182b: cmpb   $0x0,0x5e(%rsp)
    4.63 :   131830: cmove  %r15,%rax
    0.00 :   131834: mov    %rax,(%rcx)
    0.00 :   131837: jmp    1312d9 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x359>
    0.00 :   13183c: nopl   0x0(%rax)
    0.00 :   131840: mov    0x40(%rsp),%rax
    0.00 :   131845: movl   $0x4,(%rax)
    0.00 :   13184b: jmp    131450 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x4d0>
    0.00 :   131850: mov    (%rdi),%rax
    0.00 :   131853: mov    %ecx,(%rsp)
    0.00 :   131856: mov    %dl,0x58(%rsp)
    0.00 :   13185a: call   *0x48(%rax)
    0.00 :   13185d: movzbl 0x58(%rsp),%edx
    0.00 :   131862: mov    (%rsp),%ecx
    0.00 :   131865: cmp    $0xffffffff,%eax
    0.00 :   131868: jne    1314ce <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x54e>
    0.00 :   13186e: movq   $0x0,0x60(%rsp)
    0.00 :   131877: mov    %edx,%eax
    0.00 :   131879: jmp    13114c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1cc>
    0.00 :   13187e: xchg   %ax,%ax
    0.00 :   131880: movb   $0x0,0x5e(%rsp)
    0.00 :   131885: movzbl 0x20(%rbp),%edx
    0.00 :   131889: jmp    13109e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x11e>
    0.00 :   13188e: mov    %al,0x5d(%rsp)
    0.00 :   131892: movzbl 0x20(%rbp),%edx
    0.00 :   131896: xor    %r12d,%r12d
    0.00 :   131899: xor    %r14d,%r14d
    0.00 :   13189c: jmp    13115e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1de>
    0.00 :   1318a1: nopl   0x0(%rax)
    0.00 :   1318a8: mov    $0x1,%r12d
    0.00 :   1318ae: jmp    13115e <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1de>
    0.00 :   1318b3: mov    0xf3a26(%rip),%rax        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   1318ba: cmpb   $0x0,(%rax)
    0.00 :   1318bd: je     131960 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x9e0>
    0.00 :   1318c3: mov    -0x8(%rdx),%eax
    0.00 :   1318c6: lea    -0x1(%rax),%ecx
    0.00 :   1318c9: mov    %ecx,-0x8(%rdx)
    0.00 :   1318cc: test   %eax,%eax
    0.00 :   1318ce: jg     131301 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x381>
    0.00 :   1318d4: lea    0x8f(%rsp),%rsi
    0.00 :   1318dc: call   9e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
    0.00 :   1318e1: jmp    131301 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x381>
    0.00 :   1318e6: movb   $0x0,0x5d(%rsp)
    0.00 :   1318eb: mov    $0x1,%r12d
    0.00 :   1318f1: jmp    131168 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x1e8>
    0.00 :   1318f6: mov    (%rbx),%rax
    0.00 :   1318f9: lea    0x90(%rsp),%rcx
    0.00 :   131901: mov    %rbx,%rdi
    0.00 :   131904: mov    %rcx,0x10(%rsp)
    0.00 :   131909: call   *0x48(%rax)
    0.00 :   13190c: cmp    $0xffffffff,%eax
    0.00 :   13190f: je     1319a3 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0xa23>
    0.00 :   131915: cmp    $0xffffffff,%eax
    0.00 :   131918: sete   0x8(%rsp)
    0.00 :   13191d: jmp    131273 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x2f3>
    0.00 :   131922: mov    (%rdi),%rax
    0.00 :   131925: lea    0x90(%rsp),%rcx
    0.00 :   13192d: mov    %rcx,0x10(%rsp)
    0.00 :   131932: call   *0x48(%rax)
    0.00 :   131935: mov    %eax,%edx
    0.00 :   131937: mov    %eax,%ebx
    0.00 :   131939: cmp    $0xffffffff,%eax
    0.00 :   13193c: jne    1311ed <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x26d>
    0.00 :   131942: movq   $0x0,0x70(%rsp)
    0.00 :   13194b: cmp    $0xa,%r13d
    0.00 :   13194f: jle    13140a <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x48a>
    0.00 :   131955: mov    $0xffffffff,%ebx
    0.00 :   13195a: jmp    1313f3 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x473>
    0.00 :   13195f: nop
    0.00 :   131960: mov    $0xffffffff,%eax
    0.00 :   131965: lock xadd %eax,-0x8(%rdx)
    0.00 :   13196a: jmp    1318cc <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x94c>
    0.00 :   13196f: movzbl 0x5d(%rsp),%ebx
    0.00 :   131974: xor    %r15d,%r15d
    0.00 :   131977: movb   $0x0,0x5d(%rsp)
    0.00 :   13197c: jmp    13129c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x31c>
    0.00 :   131981: movzbl 0x5d(%rsp),%ebx
    0.00 :   131986: movb   $0x0,0x58(%rsp)
    0.00 :   13198b: xor    %r15d,%r15d
    0.00 :   13198e: movb   $0x0,0x5d(%rsp)
    0.00 :   131993: jmp    13129c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x31c>
    0.00 :   131998: mov    %al,0x5d(%rsp)
    0.00 :   13199c: xor    %ebx,%ebx
    0.00 :   13199e: jmp    13129c <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x31c>
    0.00 :   1319a3: movq   $0x0,0x70(%rsp)
    0.00 :   1319ac: jmp    131915 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4+0x995>
    0.00 :   1319b1: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   1319b6: endbr64
    0.00 :   1319ba: mov    %rax,%rbx
    0.00 :   1319bd: mov    0x10(%rsp),%rdi
    0.00 :   1319c2: call   9f920 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    0.00 :   1319c7: mov    %rbx,%rdi
    0.00 :   1319ca: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (39 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004710 <std::vector<float, std::allocator<float> >::push_back(float const&)>:
    0.00 :   4710:   endbr64
    0.00 :   4714:   push   %rbp
    0.00 :   4715:   mov    %rsp,%rbp
    0.00 :   4718:   sub    $0x10,%rsp
    0.00 :   471c:   mov    %rdi,-0x8(%rbp)
    0.00 :   4720:   mov    %rsi,-0x10(%rbp)
    7.67 :   4724:   mov    -0x8(%rbp),%rax
   15.30 :   4728:   mov    0x8(%rax),%rdx
   23.05 :   472c:   mov    -0x8(%rbp),%rax
    2.56 :   4730:   mov    0x10(%rax),%rax
   15.41 :   4734:   cmp    %rax,%rdx
    5.09 :   4737:   je     476a <std::vector<float, std::allocator<float> >::push_back(float const&)+0x5a>
    0.00 :   4739:   mov    -0x8(%rbp),%rax
    0.00 :   473d:   mov    0x8(%rax),%rcx
    2.55 :   4741:   mov    -0x8(%rbp),%rax
    0.00 :   4745:   mov    -0x10(%rbp),%rdx
    2.58 :   4749:   mov    %rcx,%rsi
    0.00 :   474c:   mov    %rax,%rdi
    0.00 :   474f:   call   5739 <void std::allocator_traits<std::allocator<float> >::construct<float, float const&>(std::allocator<float>&, float*, float const&)>
    0.00 :   4754:   mov    -0x8(%rbp),%rax
    0.00 :   4758:   mov    0x8(%rax),%rax
    2.60 :   475c:   lea    0x4(%rax),%rdx
    0.00 :   4760:   mov    -0x8(%rbp),%rax
    0.00 :   4764:   mov    %rdx,0x8(%rax)
   23.20 :   4768:   jmp    478c <std::vector<float, std::allocator<float> >::push_back(float const&)+0x7c>
    0.00 :   476a:   mov    -0x8(%rbp),%rax
    0.00 :   476e:   mov    %rax,%rdi
    0.00 :   4771:   call   5776 <std::vector<float, std::allocator<float> >::end()>
    0.00 :   4776:   mov    %rax,%rcx
    0.00 :   4779:   mov    -0x10(%rbp),%rdx
    0.00 :   477d:   mov    -0x8(%rbp),%rax
    0.00 :   4781:   mov    %rcx,%rsi
    0.00 :   4784:   mov    %rax,%rdi
    0.00 :   4787:   call   57c6 <void std::vector<float, std::allocator<float> >::_M_realloc_insert<float const&>(__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >, float const&)>
    0.00 :   478c:   nop
    0.00 :   478d:   leave
    0.00 :   478e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (39 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a3c <std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&)>:
    5.13 :   7a3c:   endbr64
    5.15 :   7a40:   push   %rbp
   12.94 :   7a41:   mov    %rsp,%rbp
    0.00 :   7a44:   mov    %rdi,-0x8(%rbp)
    0.00 :   7a48:   mov    -0x8(%rbp),%rax
   68.06 :   7a4c:   pop    %rbp
    8.72 :   7a4d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (37 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000086f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>:
   27.47 :   86f6:   endbr64
    0.00 :   86fa:   push   %rbp
    0.00 :   86fb:   mov    %rsp,%rbp
    0.00 :   86fe:   sub    $0x10,%rsp
    5.46 :   8702:   mov    %rdi,-0x8(%rbp)
    2.74 :   8706:   mov    -0x8(%rbp),%rax
   57.55 :   870a:   mov    %rax,%rdi
    0.00 :   870d:   call   96c4 <std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >, true>::_M_get()>
    1.29 :   8712:   leave
    5.49 :   8713:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (36 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ac2e <std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&)>:
    0.00 :   ac2e:   endbr64
    2.77 :   ac32:   push   %rbp
    0.00 :   ac33:   mov    %rsp,%rbp
    2.77 :   ac36:   mov    %rdi,-0x8(%rbp)
    2.81 :   ac3a:   mov    -0x8(%rbp),%rax
   55.43 :   ac3e:   mov    (%rax),%rax
   33.44 :   ac41:   pop    %rbp
    2.78 :   ac42:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (35 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004634 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long)>:
    2.87 :   4634:   endbr64
    0.00 :   4638:   push   %rbp
    0.00 :   4639:   mov    %rsp,%rbp
    0.00 :   463c:   mov    %rdi,-0x8(%rbp)
    5.81 :   4640:   mov    %rsi,-0x10(%rbp)
    2.87 :   4644:   mov    -0x8(%rbp),%rax
   39.96 :   4648:   mov    (%rax),%rcx
   42.77 :   464b:   mov    -0x10(%rbp),%rdx
    0.00 :   464f:   mov    %rdx,%rax
    0.00 :   4652:   add    %rax,%rax
    0.00 :   4655:   add    %rdx,%rax
    0.00 :   4658:   shl    $0x3,%rax
    0.00 :   465c:   add    %rcx,%rax
    5.73 :   465f:   pop    %rbp
    0.00 :   4660:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (34 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000054aa <std::__detail::_Node_iterator_base<std::pair<int const, float>, false>::_M_incr()>:
    2.94 :   54aa:   endbr64
    0.00 :   54ae:   push   %rbp
    2.94 :   54af:   mov    %rsp,%rbp
    0.00 :   54b2:   sub    $0x10,%rsp
    2.94 :   54b6:   mov    %rdi,-0x8(%rbp)
    2.94 :   54ba:   mov    -0x8(%rbp),%rax
   20.60 :   54be:   mov    (%rax),%rax
   41.20 :   54c1:   mov    %rax,%rdi
    0.00 :   54c4:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    0.00 :   54c9:   mov    -0x8(%rbp),%rdx
    0.00 :   54cd:   mov    %rax,(%rdx)
    5.83 :   54d0:   nop
    8.82 :   54d1:   leave
   11.79 :   54d2:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (34 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a2a <std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)>:
   11.81 :   7a2a:   endbr64
    0.00 :   7a2e:   push   %rbp
   11.68 :   7a2f:   mov    %rsp,%rbp
    0.00 :   7a32:   mov    %rdi,-0x8(%rbp)
   11.78 :   7a36:   mov    -0x8(%rbp),%rax
   61.78 :   7a3a:   pop    %rbp
    2.95 :   7a3b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (34 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006704 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>:
    0.00 :   6704:   endbr64
    0.00 :   6708:   push   %rbp
    0.00 :   6709:   mov    %rsp,%rbp
    0.00 :   670c:   sub    $0x70,%rsp
    2.96 :   6710:   mov    %rdi,-0x48(%rbp)
    0.00 :   6714:   mov    %rsi,-0x50(%rbp)
    0.00 :   6718:   mov    %rdx,-0x58(%rbp)
    0.00 :   671c:   mov    %rcx,-0x60(%rbp)
    5.89 :   6720:   mov    %r8,-0x68(%rbp)
    0.00 :   6724:   mov    %fs:0x28,%rax
    2.94 :   672d:   mov    %rax,-0x8(%rbp)
    0.00 :   6731:   xor    %eax,%eax
    0.00 :   6733:   mov    -0x48(%rbp),%rax
    2.95 :   6737:   add    $0x20,%rax
    0.00 :   673b:   mov    %rax,%rdi
    0.00 :   673e:   call   3fb6 <std::__detail::_Prime_rehash_policy::_M_state() const>
    0.00 :   6743:   mov    %rax,-0x38(%rbp)
    0.00 :   6747:   lea    -0x38(%rbp),%rax
    0.00 :   674b:   mov    %rax,-0x28(%rbp)
    0.00 :   674f:   mov    -0x48(%rbp),%rax
    0.00 :   6753:   lea    0x20(%rax),%rdi
    2.97 :   6757:   mov    -0x48(%rbp),%rax
    0.00 :   675b:   mov    0x18(%rax),%rdx
    2.97 :   675f:   mov    -0x48(%rbp),%rax
    0.00 :   6763:   mov    0x8(%rax),%rax
    0.00 :   6767:   mov    -0x68(%rbp),%rcx
    0.00 :   676b:   mov    %rax,%rsi
    0.00 :   676e:   call   24e0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>
    0.00 :   6773:   mov    %eax,%ecx
    0.00 :   6775:   mov    %rdx,%rax
    2.96 :   6778:   mov    %ecx,-0x20(%rbp)
    8.87 :   677b:   mov    %rax,-0x18(%rbp)
   11.82 :   677f:   movzbl -0x20(%rbp),%eax
   14.58 :   6783:   test   %al,%al
    0.00 :   6785:   je     67b5 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)+0xb1>
    0.00 :   6787:   mov    -0x18(%rbp),%rcx
    0.00 :   678b:   mov    -0x28(%rbp),%rdx
    0.00 :   678f:   mov    -0x48(%rbp),%rax
    0.00 :   6793:   mov    %rcx,%rsi
    0.00 :   6796:   mov    %rax,%rdi
    0.00 :   6799:   call   7ba8 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)>
    0.00 :   679e:   mov    -0x58(%rbp),%rdx
    0.00 :   67a2:   mov    -0x48(%rbp),%rax
    0.00 :   67a6:   mov    %rdx,%rsi
    0.00 :   67a9:   mov    %rax,%rdi
    0.00 :   67ac:   call   659a <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(unsigned long) const>
    0.00 :   67b1:   mov    %rax,-0x50(%rbp)
    0.00 :   67b5:   mov    -0x60(%rbp),%rax
    2.96 :   67b9:   lea    0x8(%rax),%rcx
    0.00 :   67bd:   mov    -0x58(%rbp),%rdx
    2.95 :   67c1:   mov    -0x48(%rbp),%rax
    0.00 :   67c5:   mov    %rcx,%rsi
    0.00 :   67c8:   mov    %rax,%rdi
    2.96 :   67cb:   call   7c1e <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const>
    0.00 :   67d0:   mov    -0x60(%rbp),%rdx
    0.00 :   67d4:   mov    -0x50(%rbp),%rcx
    0.00 :   67d8:   mov    -0x48(%rbp),%rax
    0.00 :   67dc:   mov    %rcx,%rsi
    5.81 :   67df:   mov    %rax,%rdi
    0.00 :   67e2:   call   7c36 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    8.85 :   67e7:   mov    -0x48(%rbp),%rax
    0.00 :   67eb:   mov    0x18(%rax),%rax
    0.00 :   67ef:   lea    0x1(%rax),%rdx
    2.96 :   67f3:   mov    -0x48(%rbp),%rax
    0.00 :   67f7:   mov    %rdx,0x18(%rax)
    0.00 :   67fb:   mov    -0x60(%rbp),%rdx
    0.00 :   67ff:   lea    -0x30(%rbp),%rax
    8.72 :   6803:   mov    %rdx,%rsi
    0.00 :   6806:   mov    %rax,%rdi
    0.00 :   6809:   call   684e <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    2.95 :   680e:   mov    -0x30(%rbp),%rax
    2.94 :   6812:   mov    -0x8(%rbp),%rdx
    0.00 :   6816:   sub    %fs:0x28,%rdx
    0.00 :   681f:   je     6826 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)+0x122>
    0.00 :   6821:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   6826:   leave
    0.00 :   6827:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (37 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a39b0 <_int_malloc>:
    0.00 :   a39b0:  test   %rsi,%rsi
    0.00 :   a39b3:  js     a4090 <_int_malloc+0x6e0>
    0.00 :   a39b9:  push   %r15
    0.00 :   a39bb:  lea    0x17(%rsi),%rax
    0.00 :   a39bf:  push   %r14
    0.00 :   a39c1:  push   %r13
    0.00 :   a39c3:  push   %r12
    0.00 :   a39c5:  push   %rbp
    0.00 :   a39c6:  mov    %rsi,%rbp
    0.00 :   a39c9:  push   %rbx
    0.00 :   a39ca:  mov    %rdi,%rbx
    0.00 :   a39cd:  sub    $0x98,%rsp
    0.00 :   a39d4:  cmp    $0x1f,%rax
    0.00 :   a39d8:  ja     a3af8 <_int_malloc+0x148>
    0.00 :   a39de:  test   %rdi,%rdi
    0.00 :   a39e1:  je     a4050 <_int_malloc+0x6a0>
    0.00 :   a39e7:  cmpq   $0x1f,0x17db11(%rip)        # 221500 <global_max_fast>
    0.00 :   a39ef:  ja     a3be0 <_int_malloc+0x230>
    0.00 :   a39f5:  mov    $0x80,%edx
    0.00 :   a39fa:  mov    $0x2,%r14d
    0.00 :   a3a00:  mov    $0x20,%r13d
    0.00 :   a3a06:  add    %rbx,%rdx
    0.00 :   a3a09:  mov    0x8(%rdx),%rax
    1.39 :   a3a0d:  lea    -0x10(%rdx),%rsi
    0.00 :   a3a11:  cmp    %rax,%rsi
    0.00 :   a3a14:  je     a3de8 <_int_malloc+0x438>
    0.00 :   a3a1a:  mov    0x18(%rax),%rcx
    0.00 :   a3a1e:  cmp    %rax,0x10(%rcx)
    0.00 :   a3a22:  jne    a4570 <_int_malloc+0xbc0>
    0.00 :   a3a28:  lea    0x177251(%rip),%r9        # 21ac80 <main_arena>
    0.00 :   a3a2f:  orq    $0x1,0x8(%rax,%r13,1)
    0.00 :   a3a35:  mov    %rcx,0x8(%rdx)
    0.00 :   a3a39:  mov    %rsi,0x10(%rcx)
    0.00 :   a3a3d:  cmp    %r9,%rbx
    0.00 :   a3a40:  je     a3a47 <_int_malloc+0x97>
    0.00 :   a3a42:  orq    $0x4,0x8(%rax)
    0.00 :   a3a47:  mov    0x17635a(%rip),%rdi        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a3a4e:  mov    %fs:(%rdi),%r8
    0.00 :   a3a52:  test   %r8,%r8
    0.00 :   a3a55:  je     a40a8 <_int_malloc+0x6f8>
    0.00 :   a3a5b:  lea    -0x11(%r13),%rdi
    0.00 :   a3a5f:  shr    $0x4,%rdi
    0.00 :   a3a63:  cmp    %rdi,0x17695e(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3a6a:  jbe    a40a8 <_int_malloc+0x6f8>
    0.00 :   a3a70:  mov    0x17da61(%rip),%r14        # 2214d8 <tcache_key>
    0.00 :   a3a77:  mov    0x17695a(%rip),%r11        # 21a3d8 <mp_+0x78>
    0.00 :   a3a7e:  lea    0x10(%rdi),%r15
    0.00 :   a3a82:  movzwl (%r8,%rdi,2),%r10d
    0.00 :   a3a87:  mov    %r14,(%rsp)
    0.00 :   a3a8b:  movzwl %r10w,%r12d
    0.00 :   a3a8f:  cmp    %r11,%r12
    0.00 :   a3a92:  jae    a40a8 <_int_malloc+0x6f8>
    0.00 :   a3a98:  cmp    %rcx,%rsi
    0.00 :   a3a9b:  je     a40a8 <_int_malloc+0x6f8>
    0.00 :   a3aa1:  mov    0x18(%rcx),%r12
    0.00 :   a3aa5:  orq    $0x1,0x8(%rcx,%r13,1)
    0.00 :   a3aab:  cmp    %r9,%rbx
    0.00 :   a3aae:  je     a3ab5 <_int_malloc+0x105>
    0.00 :   a3ab0:  orq    $0x4,0x8(%rcx)
    0.00 :   a3ab5:  mov    (%rsp),%r14
    0.00 :   a3ab9:  mov    %r12,0x8(%rdx)
    0.00 :   a3abd:  add    $0x1,%r10d
    0.00 :   a3ac1:  mov    %rsi,0x10(%r12)
    0.00 :   a3ac6:  mov    %r14,0x18(%rcx)
    0.00 :   a3aca:  lea    0x10(%rcx),%r14
    0.00 :   a3ace:  mov    %r14,0x8(%rsp)
    0.00 :   a3ad3:  shr    $0xc,%r14
    0.00 :   a3ad7:  xor    (%r8,%r15,8),%r14
    0.00 :   a3adb:  mov    %r14,0x10(%rcx)
    0.00 :   a3adf:  mov    0x8(%rsp),%r14
    0.00 :   a3ae4:  mov    %r12,%rcx
    0.00 :   a3ae7:  mov    %r14,(%r8,%r15,8)
    0.00 :   a3aeb:  mov    %r10w,(%r8,%rdi,2)
    0.00 :   a3af0:  jmp    a3a8b <_int_malloc+0xdb>
    0.00 :   a3af2:  nopw   0x0(%rax,%rax,1)
    0.00 :   a3af8:  and    $0xfffffffffffffff0,%rax
    0.00 :   a3afc:  mov    %rax,%r13
    0.00 :   a3aff:  test   %rdi,%rdi
    0.00 :   a3b02:  je     a4056 <_int_malloc+0x6a6>
    0.00 :   a3b08:  mov    %eax,%r14d
    0.00 :   a3b0b:  shr    $0x4,%r14d
    0.00 :   a3b0f:  cmp    0x17d9ea(%rip),%rax        # 221500 <global_max_fast>
    0.00 :   a3b16:  jbe    a3d60 <_int_malloc+0x3b0>
    0.00 :   a3b1c:  cmp    $0x3ff,%rax
    0.00 :   a3b22:  jbe    a4558 <_int_malloc+0xba8>
    0.00 :   a3b28:  mov    $0x2,%edx
    0.00 :   a3b2d:  mov    %rax,%rcx
    0.00 :   a3b30:  mov    %rax,%rdi
    0.00 :   a3b33:  mov    %rax,%rsi
    0.00 :   a3b36:  shr    $0xc,%rsi
    0.00 :   a3b3a:  mov    %rax,%r15
    0.00 :   a3b3d:  shr    $0x12,%rax
    0.00 :   a3b41:  shr    $0xf,%r15
    0.00 :   a3b45:  shr    $0x6,%rcx
    0.00 :   a3b49:  lea    0x6e(%rsi),%r9d
    0.00 :   a3b4d:  mov    %rsi,0x68(%rsp)
    0.00 :   a3b52:  shr    $0x9,%rdi
    0.00 :   a3b56:  cmp    %rdx,%rax
    0.00 :   a3b59:  lea    0x77(%r15),%r10d
    0.00 :   a3b5d:  mov    %r15,0x70(%rsp)
    0.00 :   a3b62:  cmova  %rdx,%rax
    0.00 :   a3b66:  mov    %r15,%rdx
    0.00 :   a3b69:  lea    0x5b(%rdi),%r15d
    0.00 :   a3b6d:  mov    %rcx,0x50(%rsp)
    2.96 :   a3b72:  mov    %rdi,0x60(%rsp)
    0.00 :   a3b77:  lea    0x7c(%rax),%r11d
    0.00 :   a3b7b:  mov    %rsi,%rax
    0.00 :   a3b7e:  mov    %ecx,%esi
    0.00 :   a3b80:  mov    %r10d,0x7c(%rsp)
    0.00 :   a3b85:  add    $0x30,%esi
    0.00 :   a3b88:  mov    %r11d,0x78(%rsp)
    0.00 :   a3b8d:  mov    %r9d,0x80(%rsp)
    0.00 :   a3b95:  mov    %r15d,0x84(%rsp)
    0.00 :   a3b9d:  mov    %esi,0x5c(%rsp)
    0.00 :   a3ba1:  mov    %esi,0x24(%rsp)
    2.96 :   a3ba5:  cmp    $0x30,%rcx
    0.00 :   a3ba9:  jbe    a3bc8 <_int_malloc+0x218>
    0.00 :   a3bab:  mov    %r15d,0x24(%rsp)
    0.00 :   a3bb0:  cmp    $0x14,%rdi
    0.00 :   a3bb4:  jbe    a3bc8 <_int_malloc+0x218>
    0.00 :   a3bb6:  mov    %r9d,0x24(%rsp)
    0.00 :   a3bbb:  cmp    $0xa,%rax
    0.00 :   a3bbf:  ja     a4318 <_int_malloc+0x968>
    0.00 :   a3bc5:  nopl   (%rax)
    0.00 :   a3bc8:  mov    0x8(%rbx),%eax
    0.00 :   a3bcb:  test   %eax,%eax
    0.00 :   a3bcd:  je     a3e43 <_int_malloc+0x493>
    0.00 :   a3bd3:  mov    %rbx,%rdi
    0.00 :   a3bd6:  call   a17f0 <malloc_consolidate>
    0.00 :   a3bdb:  jmp    a3e43 <_int_malloc+0x493>
    0.00 :   a3be0:  xor    %eax,%eax
    0.00 :   a3be2:  mov    $0x10,%ecx
    0.00 :   a3be7:  mov    $0x2,%r14d
    0.00 :   a3bed:  mov    $0x20,%r13d
    0.00 :   a3bf3:  lea    (%rbx,%rax,8),%rdi
    0.00 :   a3bf7:  mov    0x10(%rdi),%rdx
    0.00 :   a3bfb:  test   %rdx,%rdx
    0.00 :   a3bfe:  je     a3d7d <_int_malloc+0x3cd>
    0.00 :   a3c04:  test   $0xf,%dl
    0.00 :   a3c07:  jne    a4420 <_int_malloc+0xa70>
    0.00 :   a3c0d:  add    %rbx,%rcx
    0.00 :   a3c10:  mov    %fs:0x18,%esi
    2.96 :   a3c18:  mov    0x10(%rdx),%rax
    8.82 :   a3c1c:  test   %esi,%esi
    0.00 :   a3c1e:  jne    a3d44 <_int_malloc+0x394>
    0.00 :   a3c24:  lea    0x10(%rdx),%r9
    0.00 :   a3c28:  mov    %r9,%rsi
    0.00 :   a3c2b:  shr    $0xc,%rsi
    0.00 :   a3c2f:  xor    %rsi,%rax
    0.00 :   a3c32:  mov    %rax,0x10(%rdi)
    0.00 :   a3c36:  mov    0x8(%rdx),%rax
    0.00 :   a3c3a:  shr    $0x4,%eax
    0.00 :   a3c3d:  cmp    %r14d,%eax
    0.00 :   a3c40:  jne    a4440 <_int_malloc+0xa90>
    0.00 :   a3c46:  mov    0x17615b(%rip),%r12        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a3c4d:  lea    -0x11(%r13),%r11
    0.00 :   a3c51:  shr    $0x4,%r11
    0.00 :   a3c55:  mov    %fs:(%r12),%rax
    0.00 :   a3c5a:  test   %rax,%rax
    0.00 :   a3c5d:  je     a406c <_int_malloc+0x6bc>
    0.00 :   a3c63:  cmp    %r11,0x17675e(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3c6a:  jbe    a406c <_int_malloc+0x6bc>
    0.00 :   a3c70:  movzwl (%rax,%r11,2),%eax
    0.00 :   a3c75:  cmp    0x17675c(%rip),%rax        # 21a3d8 <mp_+0x78>
    0.00 :   a3c7c:  lea    0x10(%r11),%rbx
    0.00 :   a3c80:  jb     a3cdb <_int_malloc+0x32b>
    0.00 :   a3c82:  jmp    a406c <_int_malloc+0x6bc>
    0.00 :   a3c87:  nopw   0x0(%rax,%rax,1)
    0.00 :   a3c90:  lea    0x10(%rdx),%r10
    0.00 :   a3c94:  mov    %r10,%rsi
    0.00 :   a3c97:  shr    $0xc,%rsi
    0.00 :   a3c9b:  xor    %rsi,%rax
    0.00 :   a3c9e:  mov    %rax,0x10(%rdi)
    0.00 :   a3ca2:  mov    0x17d82f(%rip),%rax        # 2214d8 <tcache_key>
    0.00 :   a3ca9:  mov    %rax,0x18(%rdx)
    0.00 :   a3cad:  mov    %fs:(%r12),%r8
    2.94 :   a3cb2:  movzwl (%r8,%r11,2),%eax
    2.96 :   a3cb7:  xor    (%r8,%rbx,8),%rsi
    2.87 :   a3cbb:  mov    %rsi,0x10(%rdx)
    0.00 :   a3cbf:  add    $0x1,%eax
    0.00 :   a3cc2:  mov    %r10,(%r8,%rbx,8)
    0.00 :   a3cc6:  mov    %ax,(%r8,%r11,2)
    0.00 :   a3ccb:  movzwl %ax,%eax
    5.92 :   a3cce:  cmp    0x176703(%rip),%rax        # 21a3d8 <mp_+0x78>
    2.97 :   a3cd5:  jae    a406c <_int_malloc+0x6bc>
    2.97 :   a3cdb:  mov    0x10(%rdi),%rdx
    0.00 :   a3cdf:  test   %rdx,%rdx
    0.00 :   a3ce2:  je     a406c <_int_malloc+0x6bc>
    0.00 :   a3ce8:  test   $0xf,%dl
    0.00 :   a3ceb:  jne    a4360 <_int_malloc+0x9b0>
    0.00 :   a3cf1:  mov    %fs:0x18,%esi
    0.00 :   a3cf9:  mov    0x10(%rdx),%rax
   11.81 :   a3cfd:  test   %esi,%esi
    2.95 :   a3cff:  je     a3c90 <_int_malloc+0x2e0>
    0.00 :   a3d01:  jmp    a3dc8 <_int_malloc+0x418>
    0.00 :   a3d06:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   a3d10:  test   $0xf,%sil
    0.00 :   a3d14:  jne    a4350 <_int_malloc+0x9a0>
    0.00 :   a3d1a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a3d20:  mov    %rdx,%rax
    0.00 :   a3d23:  cmpl   $0x0,%fs:0x18
    0.00 :   a3d2c:  je     a3d2f <_int_malloc+0x37f>
    0.00 :   a3d2e:  lock cmpxchg %rsi,(%rcx)
    0.00 :   a3d33:  cmp    %rdx,%rax
    0.00 :   a3d36:  je     a3c36 <_int_malloc+0x286>
    0.00 :   a3d3c:  test   %rax,%rax
    0.00 :   a3d3f:  je     a3d7d <_int_malloc+0x3cd>
    0.00 :   a3d41:  mov    %rax,%rdx
    0.00 :   a3d44:  lea    0x10(%rdx),%r9
    0.00 :   a3d48:  mov    0x10(%rdx),%rax
    2.97 :   a3d4c:  mov    %r9,%r8
    0.00 :   a3d4f:  shr    $0xc,%r8
    0.00 :   a3d53:  mov    %r8,%rsi
    0.00 :   a3d56:  xor    %rax,%rsi
    0.00 :   a3d59:  cmp    %rax,%r8
    0.00 :   a3d5c:  je     a3d20 <_int_malloc+0x370>
    0.00 :   a3d5e:  jmp    a3d10 <_int_malloc+0x360>
    0.00 :   a3d60:  lea    -0x2(%r14),%eax
    0.00 :   a3d64:  lea    (%rbx,%rax,8),%rdi
    0.00 :   a3d68:  lea    0x10(,%rax,8),%rcx
    0.00 :   a3d70:  mov    0x10(%rdi),%rdx
    2.93 :   a3d74:  test   %rdx,%rdx
    0.00 :   a3d77:  jne    a3c04 <_int_malloc+0x254>
    0.00 :   a3d7d:  lea    0xc(%r14,%r14,1),%edx
    0.00 :   a3d82:  shl    $0x3,%rdx
    0.00 :   a3d86:  jmp    a3a06 <_int_malloc+0x56>
    0.00 :   a3d8b:  nopl   0x0(%rax,%rax,1)
    0.00 :   a3d90:  test   $0xf,%r8b
    0.00 :   a3d94:  jne    a4350 <_int_malloc+0x9a0>
    0.00 :   a3d9a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a3da0:  mov    %rdx,%rax
    0.00 :   a3da3:  cmpl   $0x0,%fs:0x18
    0.00 :   a3dac:  je     a3daf <_int_malloc+0x3ff>
    0.00 :   a3dae:  lock cmpxchg %r8,(%rcx)
   23.66 :   a3db3:  cmp    %rdx,%rax
    0.00 :   a3db6:  je     a3ca2 <_int_malloc+0x2f2>
    0.00 :   a3dbc:  test   %rax,%rax
    0.00 :   a3dbf:  je     a406c <_int_malloc+0x6bc>
    0.00 :   a3dc5:  mov    %rax,%rdx
    0.00 :   a3dc8:  lea    0x10(%rdx),%r10
    0.00 :   a3dcc:  mov    0x10(%rdx),%rax
    0.00 :   a3dd0:  mov    %r10,%rsi
    0.00 :   a3dd3:  shr    $0xc,%rsi
    0.00 :   a3dd7:  mov    %rsi,%r8
    2.94 :   a3dda:  xor    %rax,%r8
    2.96 :   a3ddd:  cmp    %rax,%rsi
    0.00 :   a3de0:  je     a3da0 <_int_malloc+0x3f0>
    0.00 :   a3de2:  jmp    a3d90 <_int_malloc+0x3e0>
    0.00 :   a3de4:  nopl   0x0(%rax)
    0.00 :   a3de8:  mov    %r13,%rax
    0.00 :   a3deb:  mov    %r13,%rdi
    0.00 :   a3dee:  mov    %r14d,0x24(%rsp)
    0.00 :   a3df3:  shr    $0x6,%rax
    0.00 :   a3df7:  shr    $0x9,%rdi
    0.00 :   a3dfb:  movl   $0x6e,0x80(%rsp)
    0.00 :   a3e06:  mov    %rax,0x50(%rsp)
    0.00 :   a3e0b:  add    $0x30,%eax
    0.00 :   a3e0e:  mov    %rdi,0x60(%rsp)
    0.00 :   a3e13:  add    $0x5b,%edi
    0.00 :   a3e16:  mov    %edi,0x84(%rsp)
    0.00 :   a3e1d:  mov    %eax,0x5c(%rsp)
    0.00 :   a3e21:  movl   $0x77,0x7c(%rsp)
    0.00 :   a3e29:  movl   $0x7c,0x78(%rsp)
    0.00 :   a3e31:  movq   $0x0,0x70(%rsp)
    1.37 :   a3e3a:  movq   $0x0,0x68(%rsp)
    0.00 :   a3e43:  lea    -0x11(%r13),%rax
    0.00 :   a3e47:  mov    0x175f5a(%rip),%r12        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a3e4e:  shr    $0x4,%rax
    0.00 :   a3e52:  mov    %rax,%r15
    0.00 :   a3e55:  xor    %eax,%eax
    0.00 :   a3e57:  mov    %rax,0x8(%rsp)
    0.00 :   a3e5c:  cmpq   $0x0,%fs:(%r12)
    0.00 :   a3e62:  je     a3e74 <_int_malloc+0x4c4>
    0.00 :   a3e64:  cmp    %r15,0x17655d(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3e6b:  cmova  %r13,%rax
    0.00 :   a3e6f:  mov    %rax,0x8(%rsp)
    0.00 :   a3e74:  lea    0x60(%rbx),%r11
    0.00 :   a3e78:  movq   $0x0,(%rsp)
    0.00 :   a3e80:  mov    %r14d,0x58(%rsp)
    0.00 :   a3e85:  movq   %r11,%xmm1
    0.00 :   a3e8a:  mov    %rbp,0x28(%rsp)
    0.00 :   a3e8f:  punpcklqdq %xmm1,%xmm1
    0.00 :   a3e93:  mov    0x78(%rbx),%rdx
    0.00 :   a3e97:  cmp    %r11,%rdx
    0.00 :   a3e9a:  je     a4228 <_int_malloc+0x878>
    0.00 :   a3ea0:  mov    0x176539(%rip),%r8        # 21a3e0 <mp_+0x80>
    0.00 :   a3ea7:  mov    0x17652a(%rip),%rax        # 21a3d8 <mp_+0x78>
    0.00 :   a3eae:  test   %r8,%r8
    0.00 :   a3eb1:  setne  0x30(%rsp)
    0.00 :   a3eb6:  mov    %fs:(%r12),%r14
    0.00 :   a3ebb:  xor    %edi,%edi
    0.00 :   a3ebd:  xor    %r9d,%r9d
    0.00 :   a3ec0:  mov    %rax,0x10(%rsp)
    0.00 :   a3ec5:  mov    0x17d60c(%rip),%rax        # 2214d8 <tcache_key>
    0.00 :   a3ecc:  mov    %rax,0x38(%rsp)
    0.00 :   a3ed1:  lea    0x20(%r13),%rax
    0.00 :   a3ed5:  mov    %rax,0x48(%rsp)
    0.00 :   a3eda:  lea    0x10(%r15),%rax
    0.00 :   a3ede:  mov    %rax,0x40(%rsp)
    0.00 :   a3ee3:  mov    0x8(%rdx),%rax
    0.00 :   a3ee7:  movq   %rdx,%xmm0
    0.00 :   a3eec:  punpcklqdq %xmm0,%xmm0
    0.00 :   a3ef0:  and    $0xfffffffffffffff8,%rax
    0.00 :   a3ef4:  lea    (%rdx,%rax,1),%r10
    0.00 :   a3ef8:  cmp    $0x10,%rax
    0.00 :   a3efc:  jbe    a40d0 <_int_malloc+0x720>
    0.00 :   a3f02:  mov    0x888(%rbx),%rsi
    0.00 :   a3f09:  cmp    %rax,%rsi
    0.00 :   a3f0c:  jb     a40d0 <_int_malloc+0x720>
    0.00 :   a3f12:  mov    0x8(%r10),%rcx
    1.38 :   a3f16:  cmp    $0xf,%rcx
    0.00 :   a3f1a:  jbe    a40e0 <_int_malloc+0x730>
    0.00 :   a3f20:  cmp    %rcx,%rsi
    0.00 :   a3f23:  jb     a40e0 <_int_malloc+0x730>
    0.00 :   a3f29:  mov    (%r10),%rsi
    0.00 :   a3f2c:  and    $0xfffffffffffffff8,%rsi
    0.00 :   a3f30:  cmp    %rax,%rsi
    0.00 :   a3f33:  jne    a4370 <_int_malloc+0x9c0>
    0.00 :   a3f39:  mov    0x18(%rdx),%rsi
    0.00 :   a3f3d:  cmp    %rdx,0x10(%rsi)
    0.00 :   a3f41:  jne    a42d0 <_int_malloc+0x920>
    0.00 :   a3f47:  cmp    %r11,0x10(%rdx)
    0.00 :   a3f4b:  jne    a42d0 <_int_malloc+0x920>
    0.00 :   a3f51:  test   $0x1,%cl
    0.00 :   a3f54:  jne    a4430 <_int_malloc+0xa80>
    0.00 :   a3f5a:  cmp    $0x3ff,%r13
    0.00 :   a3f61:  ja     a3f6c <_int_malloc+0x5bc>
    0.00 :   a3f63:  cmp    %r11,%rsi
    0.00 :   a3f66:  je     a4380 <_int_malloc+0x9d0>
    0.00 :   a3f6c:  mov    %rsi,0x78(%rbx)
    0.00 :   a3f70:  mov    %r11,0x10(%rsi)
    0.00 :   a3f74:  cmp    %r13,%rax
    0.00 :   a3f77:  je     a40f0 <_int_malloc+0x740>
    0.00 :   a3f7d:  cmp    $0x3ff,%rax
    0.00 :   a3f83:  ja     a4138 <_int_malloc+0x788>
    0.00 :   a3f89:  mov    %eax,%ecx
    0.00 :   a3f8b:  shr    $0x4,%ecx
    0.00 :   a3f8e:  lea    0xc(%rcx,%rcx,1),%eax
    0.00 :   a3f92:  cltq
    0.00 :   a3f94:  lea    (%rbx,%rax,8),%rax
    0.00 :   a3f98:  mov    (%rax),%r10
    0.00 :   a3f9b:  lea    -0x10(%rax),%rbp
    0.00 :   a3f9f:  mov    %ecx,%eax
    0.00 :   a3fa1:  movq   %r10,%xmm0
    0.00 :   a3fa6:  movq   %rbp,%xmm2
    0.00 :   a3fab:  mov    $0x1,%esi
    0.00 :   a3fb0:  sar    $0x5,%eax
    0.00 :   a3fb3:  punpcklqdq %xmm2,%xmm0
    0.00 :   a3fb7:  addq   $0x1,(%rsp)
    0.00 :   a3fbc:  shl    %cl,%esi
    0.00 :   a3fbe:  cltq
    0.00 :   a3fc0:  or     %esi,0x860(%rbx,%rax,4)
    0.00 :   a3fc7:  mov    (%rsp),%rax
    0.00 :   a3fcb:  movups %xmm0,0x10(%rdx)
    0.00 :   a3fcf:  mov    %rdx,0x18(%r10)
    0.00 :   a3fd3:  mov    %rdx,0x10(%rbp)
    0.00 :   a3fd7:  test   %r9d,%r9d
    0.00 :   a3fda:  je     a4210 <_int_malloc+0x860>
    0.00 :   a3fe0:  cmp    %rax,%r8
    0.00 :   a3fe3:  jae    a4020 <_int_malloc+0x670>
    0.00 :   a3fe5:  cmpb   $0x0,0x30(%rsp)
    0.00 :   a3fea:  je     a4020 <_int_malloc+0x670>
    0.00 :   a3fec:  lea    0x10(%r15),%rdx
    0.00 :   a3ff0:  mov    (%r14,%rdx,8),%r9
    0.00 :   a3ff4:  test   $0xf,%r9b
    0.00 :   a3ff8:  jne    a48c1 <_int_malloc+0xf11>
    0.00 :   a3ffe:  mov    %r9,%rax
    0.00 :   a4001:  shr    $0xc,%rax
    0.00 :   a4005:  xor    (%r9),%rax
    0.00 :   a4008:  mov    %rax,(%r14,%rdx,8)
    0.00 :   a400c:  subw   $0x1,(%r14,%r15,2)
    0.00 :   a4012:  movq   $0x0,0x8(%r9)
    0.00 :   a401a:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a401c:  nopl   0x0(%rax)
    0.00 :   a4020:  add    $0x1,%edi
    0.00 :   a4023:  cmp    $0x270f,%edi
    0.00 :   a4029:  jg     a473d <_int_malloc+0xd8d>
    0.00 :   a402f:  mov    0x78(%rbx),%rdx
    0.00 :   a4033:  cmp    %rdx,%r11
    0.00 :   a4036:  je     a473d <_int_malloc+0xd8d>
    0.00 :   a403c:  mov    $0x1,%r9d
    0.00 :   a4042:  jmp    a3ee3 <_int_malloc+0x533>
    0.00 :   a4047:  nopw   0x0(%rax,%rax,1)
    0.00 :   a4050:  mov    $0x20,%r13d
    0.00 :   a4056:  xor    %esi,%esi
    0.00 :   a4058:  mov    %r13,%rdi
    0.00 :   a405b:  call   a30d0 <sysmalloc>
    0.00 :   a4060:  mov    %rax,%r9
    0.00 :   a4063:  test   %rax,%rax
    0.00 :   a4066:  je     a4330 <_int_malloc+0x980>
    0.00 :   a406c:  mov    0x17d48a(%rip),%esi        # 2214fc <perturb_byte>
    0.00 :   a4072:  test   %esi,%esi
    0.00 :   a4074:  jne    a40b6 <_int_malloc+0x706>
    0.00 :   a4076:  add    $0x98,%rsp
    0.00 :   a407d:  mov    %r9,%rax
    0.00 :   a4080:  pop    %rbx
    0.00 :   a4081:  pop    %rbp
    0.00 :   a4082:  pop    %r12
    0.00 :   a4084:  pop    %r13
    0.00 :   a4086:  pop    %r14
    0.00 :   a4088:  pop    %r15
    0.00 :   a408a:  ret
    0.00 :   a408b:  nopl   0x0(%rax,%rax,1)
    0.00 :   a4090:  mov    0x175d79(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   a4097:  movl   $0xc,%fs:(%rax)
    0.00 :   a409e:  xor    %eax,%eax
    0.00 :   a40a0:  ret
    0.00 :   a40a1:  nopl   0x0(%rax)
    0.00 :   a40a8:  mov    0x17d44e(%rip),%esi        # 2214fc <perturb_byte>
    0.00 :   a40ae:  lea    0x10(%rax),%r9
    0.00 :   a40b2:  test   %esi,%esi
    0.00 :   a40b4:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a40b6:  mov    %r9,%rdi
    0.00 :   a40b9:  xor    $0xff,%sil
    0.00 :   a40bd:  mov    %rbp,%rdx
    0.00 :   a40c0:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a40c5:  mov    %rax,%r9
    0.00 :   a40c8:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a40ca:  nopw   0x0(%rax,%rax,1)
    0.00 :   a40d0:  lea    0x13aae9(%rip),%rdi        # 1debc0 <__PRETTY_FUNCTION__.1+0xa80>
    0.00 :   a40d7:  call   a0ce0 <malloc_printerr>
    0.00 :   a40dc:  nopl   0x0(%rax)
    0.00 :   a40e0:  lea    0x13ab01(%rip),%rdi        # 1debe8 <__PRETTY_FUNCTION__.1+0xaa8>
    0.00 :   a40e7:  call   a0ce0 <malloc_printerr>
    0.00 :   a40ec:  nopl   0x0(%rax)
    0.00 :   a40f0:  or     $0x1,%rcx
    0.00 :   a40f4:  lea    0x176b85(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a40fb:  mov    %rcx,0x8(%r10)
    0.00 :   a40ff:  cmp    %rax,%rbx
    0.00 :   a4102:  je     a4109 <_int_malloc+0x759>
    0.00 :   a4104:  orq    $0x4,0x8(%rdx)
    0.00 :   a4109:  cmpq   $0x0,0x8(%rsp)
    0.00 :   a410f:  lea    0x10(%rdx),%r9
    0.00 :   a4113:  je     a4128 <_int_malloc+0x778>
    0.00 :   a4115:  movzwl (%r14,%r15,2),%ecx
    0.00 :   a411a:  mov    %rcx,%rax
    0.00 :   a411d:  cmp    0x10(%rsp),%rcx
    0.00 :   a4122:  jb     a42e0 <_int_malloc+0x930>
    0.00 :   a4128:  mov    0x28(%rsp),%rbp
    0.00 :   a412d:  jmp    a406c <_int_malloc+0x6bc>
    0.00 :   a4132:  nopw   0x0(%rax,%rax,1)
    0.00 :   a4138:  mov    %rax,%rcx
    0.00 :   a413b:  shr    $0x6,%rcx
    0.00 :   a413f:  add    $0x30,%ecx
    0.00 :   a4142:  cmp    $0xc3f,%rax
    0.00 :   a4148:  jbe    a41a0 <_int_malloc+0x7f0>
    0.00 :   a414a:  mov    %rax,%rcx
    0.00 :   a414d:  shr    $0x9,%rcx
    0.00 :   a4151:  add    $0x5b,%ecx
    0.00 :   a4154:  cmp    $0x29ff,%rax
    0.00 :   a415a:  jbe    a41a0 <_int_malloc+0x7f0>
    0.00 :   a415c:  mov    %rax,%rcx
    0.00 :   a415f:  shr    $0xc,%rcx
    0.00 :   a4163:  add    $0x6e,%ecx
    0.00 :   a4166:  cmp    $0xafff,%rax
    0.00 :   a416c:  jbe    a41a0 <_int_malloc+0x7f0>
    0.00 :   a416e:  mov    %rax,%rcx
    0.00 :   a4171:  shr    $0xf,%rcx
    0.00 :   a4175:  add    $0x77,%ecx
    0.00 :   a4178:  cmp    $0x27fff,%rax
    0.00 :   a417e:  jbe    a41a0 <_int_malloc+0x7f0>
    0.00 :   a4180:  mov    %rax,%rcx
    0.00 :   a4183:  mov    $0x2,%esi
    0.00 :   a4188:  shr    $0x12,%rcx
    0.00 :   a418c:  cmp    %rsi,%rcx
    0.00 :   a418f:  cmova  %rsi,%rcx
    0.00 :   a4193:  add    $0x7c,%ecx
    0.00 :   a4196:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   a41a0:  lea    0xc(%rcx,%rcx,1),%esi
    0.00 :   a41a4:  movslq %esi,%rsi
    0.00 :   a41a7:  lea    (%rbx,%rsi,8),%rbp
    0.00 :   a41ab:  mov    0x0(%rbp),%rsi
    2.97 :   a41af:  lea    -0x10(%rbp),%r10
    0.00 :   a41b3:  cmp    %rsi,%r10
    0.00 :   a41b6:  je     a4340 <_int_malloc+0x990>
    0.00 :   a41bc:  mov    0x8(%rbp),%rbp
    0.00 :   a41c0:  or     $0x1,%rax
    0.00 :   a41c4:  mov    %rax,0x88(%rsp)
    0.00 :   a41cc:  mov    0x8(%rbp),%rax
    0.00 :   a41d0:  test   $0x4,%al
    0.00 :   a41d2:  jne    a4927 <_int_malloc+0xf77>
    0.00 :   a41d8:  cmp    0x88(%rsp),%rax
    0.00 :   a41e0:  jbe    a457c <_int_malloc+0xbcc>
    0.00 :   a41e6:  mov    0x28(%rsi),%rax
    0.00 :   a41ea:  movq   %rsi,%xmm0
    0.00 :   a41ef:  movq   %rax,%xmm3
    0.00 :   a41f4:  punpcklqdq %xmm3,%xmm0
    0.00 :   a41f8:  movups %xmm0,0x20(%rdx)
    0.00 :   a41fc:  mov    %rdx,0x20(%rax)
    0.00 :   a4200:  mov    %rdx,0x28(%rsi)
    0.00 :   a4204:  jmp    a3f9f <_int_malloc+0x5ef>
    0.00 :   a4209:  nopl   0x0(%rax)
    0.00 :   a4210:  add    $0x1,%edi
    0.00 :   a4213:  cmp    $0x270f,%edi
    0.00 :   a4219:  jg     a4228 <_int_malloc+0x878>
    0.00 :   a421b:  mov    0x78(%rbx),%rdx
    0.00 :   a421f:  cmp    %r11,%rdx
    0.00 :   a4222:  jne    a3ee3 <_int_malloc+0x533>
    0.00 :   a4228:  cmp    $0x3ff,%r13
    0.00 :   a422f:  jbe    a4253 <_int_malloc+0x8a3>
    0.00 :   a4231:  mov    0x24(%rsp),%eax
    0.00 :   a4235:  lea    0xc(%rax,%rax,1),%eax
    0.00 :   a4239:  lea    (%rbx,%rax,8),%rdx
    0.00 :   a423d:  mov    (%rdx),%rax
    0.00 :   a4240:  lea    -0x10(%rdx),%rcx
    0.00 :   a4244:  cmp    %rcx,%rax
    0.00 :   a4247:  je     a4253 <_int_malloc+0x8a3>
    0.00 :   a4249:  cmp    %r13,0x8(%rax)
    0.00 :   a424d:  jae    a4781 <_int_malloc+0xdd1>
    0.00 :   a4253:  mov    0x24(%rsp),%eax
    0.00 :   a4257:  lea    0x1(%rax),%ecx
    0.00 :   a425a:  lea    0xe(%rax,%rax,1),%eax
    0.00 :   a425e:  mov    %ecx,%edi
    0.00 :   a4260:  lea    -0x10(%rbx,%rax,8),%rdx
    0.00 :   a4265:  shr    $0x5,%edi
    0.00 :   a4268:  mov    %edi,%eax
    0.00 :   a426a:  mov    0x860(%rbx,%rax,4),%esi
    0.00 :   a4271:  mov    $0x1,%eax
    0.00 :   a4276:  shl    %cl,%eax
    0.00 :   a4278:  nopl   0x0(%rax,%rax,1)
    0.00 :   a4280:  cmp    %esi,%eax
    0.00 :   a4282:  ja     a4450 <_int_malloc+0xaa0>
    0.00 :   a4288:  test   %eax,%eax
    0.00 :   a428a:  jne    a42a4 <_int_malloc+0x8f4>
    0.00 :   a428c:  jmp    a4450 <_int_malloc+0xaa0>
    0.00 :   a4291:  nopl   0x0(%rax)
    0.00 :   a4298:  add    $0x10,%rdx
    0.00 :   a429c:  add    %eax,%eax
    0.00 :   a429e:  je     a471e <_int_malloc+0xd6e>
    0.00 :   a42a4:  test   %esi,%eax
    0.00 :   a42a6:  je     a4298 <_int_malloc+0x8e8>
    0.00 :   a42a8:  mov    0x18(%rdx),%rcx
    0.00 :   a42ac:  cmp    %rcx,%rdx
    0.00 :   a42af:  jne    a45fe <_int_malloc+0xc4e>
    0.00 :   a42b5:  mov    %eax,%ecx
    0.00 :   a42b7:  add    $0x10,%rdx
    0.00 :   a42bb:  add    %eax,%eax
    0.00 :   a42bd:  not    %ecx
    0.00 :   a42bf:  and    %ecx,%esi
    0.00 :   a42c1:  mov    %edi,%ecx
    0.00 :   a42c3:  mov    %esi,0x860(%rbx,%rcx,4)
    0.00 :   a42ca:  jmp    a4280 <_int_malloc+0x8d0>
    0.00 :   a42cc:  nopl   0x0(%rax)
    0.00 :   a42d0:  lea    0x13a971(%rip),%rdi        # 1dec48 <__PRETTY_FUNCTION__.1+0xb08>
    0.00 :   a42d7:  call   a0ce0 <malloc_printerr>
    0.00 :   a42dc:  nopl   0x0(%rax)
    0.00 :   a42e0:  mov    0x38(%rsp),%rcx
    0.00 :   a42e5:  mov    0x40(%rsp),%r10
    0.00 :   a42ea:  add    $0x1,%eax
    0.00 :   a42ed:  mov    %rcx,0x18(%rdx)
    0.00 :   a42f1:  mov    %r9,%rcx
    0.00 :   a42f4:  shr    $0xc,%rcx
    0.00 :   a42f8:  xor    (%r14,%r10,8),%rcx
    0.00 :   a42fc:  mov    %rcx,0x10(%rdx)
    0.00 :   a4300:  mov    %rsi,%rdx
    0.00 :   a4303:  mov    %r9,(%r14,%r10,8)
    0.00 :   a4307:  mov    %ax,(%r14,%r15,2)
    0.00 :   a430c:  jmp    a4033 <_int_malloc+0x683>
    0.00 :   a4311:  nopl   0x0(%rax)
    0.00 :   a4318:  cmp    $0x5,%rdx
    0.00 :   a431c:  cmovb  %r10d,%r11d
    0.00 :   a4320:  mov    %r11d,0x24(%rsp)
    0.00 :   a4325:  jmp    a3bc8 <_int_malloc+0x218>
    0.00 :   a432a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a4330:  xor    %r9d,%r9d
    0.00 :   a4333:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a4338:  nopl   0x0(%rax,%rax,1)
    0.00 :   a4340:  movups %xmm0,0x20(%rdx)
    0.00 :   a4344:  mov    %r10,%rbp
    0.00 :   a4347:  jmp    a3f9f <_int_malloc+0x5ef>
    0.00 :   a434c:  nopl   0x0(%rax)
    0.00 :   a4350:  lea    0x13a7b1(%rip),%rdi        # 1deb08 <__PRETTY_FUNCTION__.1+0x9c8>
    0.00 :   a4357:  call   a0ce0 <malloc_printerr>
    0.00 :   a435c:  nopl   0x0(%rax)
    0.00 :   a4360:  lea    0x13a7f9(%rip),%rdi        # 1deb60 <__PRETTY_FUNCTION__.1+0xa20>
    0.00 :   a4367:  call   a0ce0 <malloc_printerr>
    0.00 :   a436c:  nopl   0x0(%rax)
    0.00 :   a4370:  lea    0x13a899(%rip),%rdi        # 1dec10 <__PRETTY_FUNCTION__.1+0xad0>
    0.00 :   a4377:  call   a0ce0 <malloc_printerr>
    0.00 :   a437c:  nopl   0x0(%rax)
    0.00 :   a4380:  cmp    %rdx,0x68(%rbx)
    0.00 :   a4384:  jne    a3f6c <_int_malloc+0x5bc>
    0.00 :   a438a:  cmp    %rax,0x48(%rsp)
    0.00 :   a438f:  jae    a3f6c <_int_malloc+0x5bc>
    0.00 :   a4395:  lea    (%rdx,%r13,1),%rsi
    0.00 :   a4399:  sub    %r13,%rax
    0.00 :   a439c:  mov    0x28(%rsp),%rbp
    0.00 :   a43a1:  movq   %rsi,%xmm0
    0.00 :   a43a6:  mov    %rsi,0x78(%rbx)
    0.00 :   a43aa:  punpcklqdq %xmm0,%xmm0
    0.00 :   a43ae:  movups %xmm0,0x68(%rbx)
    0.00 :   a43b2:  movups %xmm1,0x10(%rsi)
    0.00 :   a43b6:  cmp    $0x3ff,%rax
    0.00 :   a43bc:  jbe    a43c6 <_int_malloc+0xa16>
    0.00 :   a43be:  pxor   %xmm0,%xmm0
    0.00 :   a43c2:  movups %xmm0,0x20(%rsi)
    0.00 :   a43c6:  lea    0x1768b3(%rip),%rcx        # 21ac80 <main_arena>
    0.00 :   a43cd:  lea    0x10(%rdx),%r9
    0.00 :   a43d1:  cmp    %rcx,%rbx
    0.00 :   a43d4:  setne  %cl
    0.00 :   a43d7:  movzbl %cl,%ecx
    0.00 :   a43da:  shl    $0x2,%rcx
    0.00 :   a43de:  or     %r13,%rcx
    0.00 :   a43e1:  or     $0x1,%rcx
    0.00 :   a43e5:  mov    %rcx,0x8(%rdx)
    0.00 :   a43e9:  mov    %rax,%rcx
    0.00 :   a43ec:  or     $0x1,%rcx
    0.00 :   a43f0:  mov    %rcx,0x8(%rsi)
    0.00 :   a43f4:  mov    %rax,(%r10)
    0.00 :   a43f7:  mov    0x17d0ff(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a43fd:  test   %eax,%eax
    0.00 :   a43ff:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a4405:  xor    $0xff,%al
    0.00 :   a4407:  mov    %r9,%rdi
    0.00 :   a440a:  mov    %rbp,%rdx
    0.00 :   a440d:  mov    %eax,%esi
    0.00 :   a440f:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a4414:  mov    %rax,%r9
    0.00 :   a4417:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a441c:  nopl   0x0(%rax)
    0.00 :   a4420:  lea    0x13a6b1(%rip),%rdi        # 1dead8 <__PRETTY_FUNCTION__.1+0x998>
    0.00 :   a4427:  call   a0ce0 <malloc_printerr>
    0.00 :   a442c:  nopl   0x0(%rax)
    0.00 :   a4430:  lea    0x13a841(%rip),%rdi        # 1dec78 <__PRETTY_FUNCTION__.1+0xb38>
    0.00 :   a4437:  call   a0ce0 <malloc_printerr>
    0.00 :   a443c:  nopl   0x0(%rax)
    0.00 :   a4440:  lea    0x13a6f1(%rip),%rdi        # 1deb38 <__PRETTY_FUNCTION__.1+0x9f8>
    0.00 :   a4447:  call   a0ce0 <malloc_printerr>
    0.00 :   a444c:  nopl   0x0(%rax)
    0.00 :   a4450:  lea    0x1(%rdi),%eax
    0.00 :   a4453:  cmp    $0x3,%edi
    0.00 :   a4456:  je     a4495 <_int_malloc+0xae5>
    0.00 :   a4458:  mov    %eax,%edx
    0.00 :   a445a:  mov    0x860(%rbx,%rdx,4),%esi
    1.34 :   a4461:  test   %esi,%esi
    0.00 :   a4463:  jne    a46cd <_int_malloc+0xd1d>
    0.00 :   a4469:  lea    0x2(%rdi),%eax
    0.00 :   a446c:  cmp    $0x2,%edi
    0.00 :   a446f:  je     a4495 <_int_malloc+0xae5>
    0.00 :   a4471:  mov    %eax,%edx
    0.00 :   a4473:  mov    0x860(%rbx,%rdx,4),%esi
    0.00 :   a447a:  test   %esi,%esi
    0.00 :   a447c:  jne    a46cd <_int_malloc+0xd1d>
    0.00 :   a4482:  cmp    $0x1,%edi
    0.00 :   a4485:  je     a4495 <_int_malloc+0xae5>
    0.00 :   a4487:  mov    0x86c(%rbx),%esi
    0.00 :   a448d:  test   %esi,%esi
    0.00 :   a448f:  jne    a46fe <_int_malloc+0xd4e>
    0.00 :   a4495:  mov    0x60(%rbx),%rax
    0.00 :   a4499:  mov    0x8(%rax),%rdx
    2.97 :   a449d:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a44a1:  cmp    %rdx,0x888(%rbx)
    0.00 :   a44a8:  jb     a46e6 <_int_malloc+0xd36>
    0.00 :   a44ae:  lea    0x20(%r13),%rcx
    0.00 :   a44b2:  cmp    %rdx,%rcx
    0.00 :   a44b5:  jbe    a4873 <_int_malloc+0xec3>
    0.00 :   a44bb:  mov    %r11,0x30(%rsp)
    0.00 :   a44c0:  movaps %xmm1,0x10(%rsp)
    0.00 :   a44c5:  mov    0x8(%rbx),%eax
    0.00 :   a44c8:  test   %eax,%eax
    0.00 :   a44ca:  je     a48cd <_int_malloc+0xf1d>
    0.00 :   a44d0:  mov    %rbx,%rdi
    0.00 :   a44d3:  call   a17f0 <malloc_consolidate>
    0.00 :   a44d8:  mov    0x58(%rsp),%eax
    0.00 :   a44dc:  movdqa 0x10(%rsp),%xmm1
    0.00 :   a44e2:  cmp    $0x3ff,%r13
    0.00 :   a44e9:  mov    0x30(%rsp),%r11
    0.00 :   a44ee:  mov    %eax,0x24(%rsp)
    0.00 :   a44f2:  jbe    a3e93 <_int_malloc+0x4e3>
    0.00 :   a44f8:  mov    0x5c(%rsp),%eax
    0.00 :   a44fc:  cmpq   $0x30,0x50(%rsp)
    0.00 :   a4502:  mov    %eax,0x24(%rsp)
    0.00 :   a4506:  jbe    a3e93 <_int_malloc+0x4e3>
    0.00 :   a450c:  mov    0x84(%rsp),%eax
    0.00 :   a4513:  cmpq   $0x14,0x60(%rsp)
    0.00 :   a4519:  mov    %eax,0x24(%rsp)
    0.00 :   a451d:  jbe    a3e93 <_int_malloc+0x4e3>
    0.00 :   a4523:  mov    0x80(%rsp),%eax
    0.00 :   a452a:  cmpq   $0xa,0x68(%rsp)
    0.00 :   a4530:  mov    %eax,0x24(%rsp)
    0.00 :   a4534:  jbe    a3e93 <_int_malloc+0x4e3>
    0.00 :   a453a:  mov    0x7c(%rsp),%eax
    0.00 :   a453e:  cmpq   $0x4,0x70(%rsp)
    0.00 :   a4544:  cmova  0x78(%rsp),%eax
    0.00 :   a4549:  mov    %eax,0x24(%rsp)
    0.00 :   a454d:  jmp    a3e93 <_int_malloc+0x4e3>
    0.00 :   a4552:  nopw   0x0(%rax,%rax,1)
    0.00 :   a4558:  lea    -0x2(%r14,%r14,1),%eax
    0.00 :   a455d:  lea    0x70(,%rax,8),%rdx
    0.00 :   a4565:  jmp    a3a06 <_int_malloc+0x56>
    0.00 :   a456a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a4570:  lea    0x13a619(%rip),%rdi        # 1deb90 <__PRETTY_FUNCTION__.1+0xa50>
    0.00 :   a4577:  call   a0ce0 <malloc_printerr>
    0.00 :   a457c:  mov    0x8(%rsi),%r10
    0.00 :   a4580:  test   $0x4,%r10b
    0.00 :   a4584:  jne    a48fc <_int_malloc+0xf4c>
    0.00 :   a458a:  mov    0x88(%rsp),%rax
    0.00 :   a4592:  jmp    a45aa <_int_malloc+0xbfa>
    0.00 :   a4594:  nopl   0x0(%rax)
    0.00 :   a4598:  mov    0x20(%rsi),%rsi
    0.00 :   a459c:  mov    0x8(%rsi),%r10
    0.00 :   a45a0:  test   $0x4,%r10b
    0.00 :   a45a4:  jne    a4854 <_int_malloc+0xea4>
    0.00 :   a45aa:  cmp    %r10,%rax
    0.00 :   a45ad:  jb     a4598 <_int_malloc+0xbe8>
    0.00 :   a45af:  je     a45f8 <_int_malloc+0xc48>
    0.00 :   a45b1:  movq   %rsi,%xmm0
    0.00 :   a45b6:  movhps 0x28(%rsi),%xmm0
    0.00 :   a45ba:  movups %xmm0,0x20(%rdx)
    0.00 :   a45be:  mov    0x28(%rsi),%rax
    0.00 :   a45c2:  cmp    %rsi,0x20(%rax)
    0.00 :   a45c6:  jne    a46f2 <_int_malloc+0xd42>
    0.00 :   a45cc:  mov    %rdx,0x28(%rsi)
    0.00 :   a45d0:  mov    0x28(%rdx),%rax
    0.00 :   a45d4:  mov    %rsi,%r10
    0.00 :   a45d7:  mov    %rdx,0x20(%rax)
    0.00 :   a45db:  mov    0x18(%r10),%rbp
    0.00 :   a45df:  cmp    %r10,0x10(%rbp)
    0.00 :   a45e3:  je     a3f9f <_int_malloc+0x5ef>
    0.00 :   a45e9:  lea    0x13a6f8(%rip),%rdi        # 1dece8 <__PRETTY_FUNCTION__.1+0xba8>
    0.00 :   a45f0:  call   a0ce0 <malloc_printerr>
    0.00 :   a45f5:  nopl   (%rax)
    0.00 :   a45f8:  mov    0x10(%rsi),%r10
    0.00 :   a45fc:  jmp    a45db <_int_malloc+0xc2b>
    0.00 :   a45fe:  mov    0x8(%rcx),%r14
    0.00 :   a4602:  mov    0x28(%rsp),%rbp
    0.00 :   a4607:  and    $0xfffffffffffffff8,%r14
    0.00 :   a460b:  cmp    %r13,%r14
    0.00 :   a460e:  jb     a4966 <_int_malloc+0xfb6>
    0.00 :   a4614:  mov    %r14,%r12
    0.00 :   a4617:  mov    %rcx,%rdi
    0.00 :   a461a:  mov    %r11,0x8(%rsp)
    0.00 :   a461f:  sub    %r13,%r12
    0.00 :   a4622:  mov    %rcx,(%rsp)
    0.00 :   a4626:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a462b:  cmp    $0x1f,%r12
    0.00 :   a462f:  mov    (%rsp),%rcx
    0.00 :   a4633:  mov    0x8(%rsp),%r11
    0.00 :   a4638:  jbe    a4705 <_int_malloc+0xd55>
    0.00 :   a463e:  mov    0x70(%rbx),%rax
    0.00 :   a4642:  movq   %r11,%xmm5
    0.00 :   a4647:  lea    (%rcx,%r13,1),%rdx
    0.00 :   a464b:  movq   %rax,%xmm0
    0.00 :   a4650:  punpcklqdq %xmm5,%xmm0
    0.00 :   a4654:  cmp    %r11,0x18(%rax)
    0.00 :   a4658:  jne    a4775 <_int_malloc+0xdc5>
    0.00 :   a465e:  movups %xmm0,0x10(%rdx)
    0.00 :   a4662:  mov    %rdx,0x70(%rbx)
    0.00 :   a4666:  mov    %rdx,0x18(%rax)
    0.00 :   a466a:  cmp    $0x3ff,%r13
    0.00 :   a4671:  ja     a4677 <_int_malloc+0xcc7>
    0.00 :   a4673:  mov    %rdx,0x68(%rbx)
    0.00 :   a4677:  cmp    $0x3ff,%r12
    0.00 :   a467e:  jbe    a4688 <_int_malloc+0xcd8>
    0.00 :   a4680:  pxor   %xmm0,%xmm0
    0.00 :   a4684:  movups %xmm0,0x20(%rdx)
    0.00 :   a4688:  lea    0x1765f1(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a468f:  cmp    %rax,%rbx
    0.00 :   a4692:  setne  %al
    0.00 :   a4695:  movzbl %al,%eax
    0.00 :   a4698:  shl    $0x2,%rax
    0.00 :   a469c:  or     %r13,%rax
    0.00 :   a469f:  or     $0x1,%rax
    0.00 :   a46a3:  mov    %rax,0x8(%rcx)
    0.00 :   a46a7:  mov    %r12,%rax
    0.00 :   a46aa:  or     $0x1,%rax
    0.00 :   a46ae:  mov    %rax,0x8(%rdx)
    0.00 :   a46b2:  mov    %r12,(%rcx,%r14,1)
    0.00 :   a46b6:  mov    0x17ce40(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a46bc:  lea    0x10(%rcx),%r9
    0.00 :   a46c0:  test   %eax,%eax
    0.00 :   a46c2:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a46c8:  jmp    a4405 <_int_malloc+0xa55>
    0.00 :   a46cd:  mov    %eax,%edi
    0.00 :   a46cf:  mov    %edi,%eax
    0.00 :   a46d1:  shl    $0x6,%eax
    0.00 :   a46d4:  add    $0xc,%eax
    0.00 :   a46d7:  lea    -0x10(%rbx,%rax,8),%rdx
    0.00 :   a46dc:  mov    $0x1,%eax
    0.00 :   a46e1:  jmp    a42a4 <_int_malloc+0x8f4>
    0.00 :   a46e6:  lea    0x1350ff(%rip),%rdi        # 1d97ec <null+0xf71>
    0.00 :   a46ed:  call   a0ce0 <malloc_printerr>
    0.00 :   a46f2:  lea    0x13a5af(%rip),%rdi        # 1deca8 <__PRETTY_FUNCTION__.1+0xb68>
    0.00 :   a46f9:  call   a0ce0 <malloc_printerr>
    0.00 :   a46fe:  mov    $0x3,%edi
    0.00 :   a4703:  jmp    a46cf <_int_malloc+0xd1f>
    0.00 :   a4705:  lea    0x176574(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a470c:  orq    $0x1,0x8(%rcx,%r14,1)
    0.00 :   a4712:  cmp    %rax,%rbx
    0.00 :   a4715:  je     a46b6 <_int_malloc+0xd06>
    0.00 :   a4717:  orq    $0x4,0x8(%rcx)
    0.00 :   a471c:  jmp    a46b6 <_int_malloc+0xd06>
    0.00 :   a471e:  lea    0x13aae3(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a4725:  mov    $0x10bb,%edx
    0.00 :   a472a:  lea    0x134f5b(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4731:  lea    0x1350ab(%rip),%rdi        # 1d97e3 <null+0xf68>
    0.00 :   a4738:  call   a0e70 <__malloc_assert>
    0.00 :   a473d:  mov    %fs:(%r12),%rax
    0.00 :   a4742:  lea    0x10(%r15),%rcx
    0.00 :   a4746:  mov    (%rax,%rcx,8),%r9
    0.00 :   a474a:  test   $0xf,%r9b
    0.00 :   a474e:  jne    a48c1 <_int_malloc+0xf11>
    0.00 :   a4754:  mov    %r9,%rdx
    0.00 :   a4757:  shr    $0xc,%rdx
    0.00 :   a475b:  xor    (%r9),%rdx
    0.00 :   a475e:  mov    %rdx,(%rax,%rcx,8)
    0.00 :   a4762:  subw   $0x1,(%rax,%r15,2)
    0.00 :   a4768:  movq   $0x0,0x8(%r9)
    0.00 :   a4770:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a4775:  lea    0x13a62c(%rip),%rdi        # 1deda8 <__PRETTY_FUNCTION__.1+0xc68>
    0.00 :   a477c:  call   a0ce0 <malloc_printerr>
    0.00 :   a4781:  mov    0x28(%rsp),%rbp
    0.00 :   a4786:  mov    0x28(%rax),%r14
    0.00 :   a478a:  jmp    a4790 <_int_malloc+0xde0>
    0.00 :   a478c:  mov    0x28(%r14),%r14
    0.00 :   a4790:  mov    0x8(%r14),%rcx
    0.00 :   a4794:  mov    %rcx,%r15
    0.00 :   a4797:  and    $0xfffffffffffffff8,%r15
    0.00 :   a479b:  cmp    %r13,%r15
    0.00 :   a479e:  jb     a478c <_int_malloc+0xddc>
    0.00 :   a47a0:  cmp    %r14,0x8(%rdx)
    0.00 :   a47a4:  je     a47b2 <_int_malloc+0xe02>
    0.00 :   a47a6:  mov    0x10(%r14),%rax
    0.00 :   a47aa:  cmp    0x8(%rax),%rcx
    0.00 :   a47ae:  cmove  %rax,%r14
    0.00 :   a47b2:  mov    %r15,%r12
    0.00 :   a47b5:  mov    %r14,%rdi
    0.00 :   a47b8:  mov    %r11,(%rsp)
    0.00 :   a47bc:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a47c1:  sub    %r13,%r12
    0.00 :   a47c4:  mov    (%rsp),%r11
    0.00 :   a47c8:  cmp    $0x1f,%r12
    0.00 :   a47cc:  jbe    a4946 <_int_malloc+0xf96>
    0.00 :   a47d2:  mov    0x70(%rbx),%rax
    0.00 :   a47d6:  movq   %r11,%xmm4
    0.00 :   a47db:  lea    (%r14,%r13,1),%rdx
    0.00 :   a47df:  movq   %rax,%xmm0
    0.00 :   a47e4:  punpcklqdq %xmm4,%xmm0
    0.00 :   a47e8:  cmp    %r11,0x18(%rax)
    0.00 :   a47ec:  jne    a491b <_int_malloc+0xf6b>
    0.00 :   a47f2:  movups %xmm0,0x10(%rdx)
    0.00 :   a47f6:  mov    %rdx,0x70(%rbx)
    0.00 :   a47fa:  mov    %rdx,0x18(%rax)
    0.00 :   a47fe:  cmp    $0x3ff,%r12
    0.00 :   a4805:  jbe    a480f <_int_malloc+0xe5f>
    0.00 :   a4807:  pxor   %xmm0,%xmm0
    0.00 :   a480b:  movups %xmm0,0x20(%rdx)
    0.00 :   a480f:  lea    0x17646a(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a4816:  cmp    %rax,%rbx
    0.00 :   a4819:  setne  %al
    0.00 :   a481c:  movzbl %al,%eax
    0.00 :   a481f:  shl    $0x2,%rax
    0.00 :   a4823:  or     %r13,%rax
    0.00 :   a4826:  or     $0x1,%rax
    0.00 :   a482a:  mov    %rax,0x8(%r14)
    0.00 :   a482e:  mov    %r12,%rax
    0.00 :   a4831:  or     $0x1,%rax
    0.00 :   a4835:  mov    %rax,0x8(%rdx)
    0.00 :   a4839:  mov    %r12,(%r14,%r15,1)
    0.00 :   a483d:  mov    0x17ccb9(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a4843:  lea    0x10(%r14),%r9
    0.00 :   a4847:  test   %eax,%eax
    0.00 :   a4849:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a484f:  jmp    a4405 <_int_malloc+0xa55>
    0.00 :   a4854:  lea    0x13a9ad(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a485b:  mov    $0x101a,%edx
    0.00 :   a4860:  lea    0x134e25(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4867:  lea    0x134f5e(%rip),%rdi        # 1d97cc <null+0xf51>
    0.00 :   a486e:  call   a0e70 <__malloc_assert>
    0.00 :   a4873:  lea    0x176406(%rip),%rcx        # 21ac80 <main_arena>
    0.00 :   a487a:  lea    (%rax,%r13,1),%rsi
    0.00 :   a487e:  mov    0x28(%rsp),%rbp
    0.00 :   a4883:  cmp    %rcx,%rbx
    0.00 :   a4886:  mov    %rsi,0x60(%rbx)
    0.00 :   a488a:  lea    0x10(%rax),%r9
    0.00 :   a488e:  setne  %cl
    0.00 :   a4891:  sub    %r13,%rdx
    0.00 :   a4894:  movzbl %cl,%ecx
    0.00 :   a4897:  or     $0x1,%rdx
    0.00 :   a489b:  shl    $0x2,%rcx
    0.00 :   a489f:  or     %r13,%rcx
    0.00 :   a48a2:  or     $0x1,%rcx
    0.00 :   a48a6:  mov    %rcx,0x8(%rax)
    0.00 :   a48aa:  mov    0x17cc4c(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a48b0:  mov    %rdx,0x8(%rsi)
    0.00 :   a48b4:  test   %eax,%eax
    0.00 :   a48b6:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a48bc:  jmp    a4405 <_int_malloc+0xa55>
    0.00 :   a48c1:  lea    0x13a458(%rip),%rdi        # 1ded20 <__PRETTY_FUNCTION__.1+0xbe0>
    0.00 :   a48c8:  call   a0ce0 <malloc_printerr>
    0.00 :   a48cd:  mov    %rbx,%rsi
    0.00 :   a48d0:  mov    %r13,%rdi
    0.00 :   a48d3:  mov    0x28(%rsp),%rbp
    0.00 :   a48d8:  call   a30d0 <sysmalloc>
    0.00 :   a48dd:  mov    %rax,%r9
    0.00 :   a48e0:  test   %rax,%rax
    0.00 :   a48e3:  je     a4330 <_int_malloc+0x980>
    0.00 :   a48e9:  mov    0x17cc0d(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a48ef:  test   %eax,%eax
    0.00 :   a48f1:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a48f7:  jmp    a4405 <_int_malloc+0xa55>
    0.00 :   a48fc:  lea    0x13a905(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a4903:  mov    $0x1016,%edx
    0.00 :   a4908:  lea    0x134d7d(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a490f:  lea    0x134eb6(%rip),%rdi        # 1d97cc <null+0xf51>
    0.00 :   a4916:  call   a0e70 <__malloc_assert>
    0.00 :   a491b:  lea    0x13a42e(%rip),%rdi        # 1ded50 <__PRETTY_FUNCTION__.1+0xc10>
    0.00 :   a4922:  call   a0ce0 <malloc_printerr>
    0.00 :   a4927:  lea    0x13a8da(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a492e:  mov    $0x1009,%edx
    0.00 :   a4933:  lea    0x134d52(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a493a:  lea    0x134e70(%rip),%rdi        # 1d97b1 <null+0xf36>
    0.00 :   a4941:  call   a0e70 <__malloc_assert>
    0.00 :   a4946:  lea    0x176333(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a494d:  orq    $0x1,0x8(%r14,%r15,1)
    0.00 :   a4953:  cmp    %rax,%rbx
    0.00 :   a4956:  je     a483d <_int_malloc+0xe8d>
    0.00 :   a495c:  orq    $0x4,0x8(%r14)
    0.00 :   a4961:  jmp    a483d <_int_malloc+0xe8d>
    0.00 :   a4966:  lea    0x13a89b(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a496d:  mov    $0x10ce,%edx
    0.00 :   a4972:  lea    0x134d13(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4979:  lea    0x13a3f8(%rip),%rdi        # 1ded78 <__PRETTY_FUNCTION__.1+0xc38>
    0.00 :   a4980:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (35 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006646 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::_Scoped_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>:
    2.95 :   6646:   endbr64
    0.00 :   664a:   push   %rbp
    0.00 :   664b:   mov    %rsp,%rbp
    0.00 :   664e:   push   %r13
    0.00 :   6650:   push   %r12
    0.00 :   6652:   push   %rbx
    0.00 :   6653:   sub    $0x38,%rsp
    5.92 :   6657:   mov    %rdi,-0x28(%rbp)
    0.00 :   665b:   mov    %rsi,-0x30(%rbp)
    0.00 :   665f:   mov    %rdx,-0x38(%rbp)
    2.97 :   6663:   mov    %rcx,-0x40(%rbp)
    0.00 :   6667:   mov    %r8,-0x48(%rbp)
    2.95 :   666b:   mov    -0x28(%rbp),%rax
    2.95 :   666f:   mov    -0x30(%rbp),%rdx
    5.92 :   6673:   mov    %rdx,(%rax)
    0.00 :   6676:   mov    -0x30(%rbp),%rbx
    0.00 :   667a:   mov    -0x48(%rbp),%rax
    5.89 :   667e:   mov    %rax,%rdi
    0.00 :   6681:   call   7a4e <std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&)>
    0.00 :   6686:   mov    %rax,%r13
    0.00 :   6689:   mov    -0x40(%rbp),%rax
    5.94 :   668d:   mov    %rax,%rdi
    0.00 :   6690:   call   7a3c <std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&)>
    0.00 :   6695:   mov    %rax,%r12
    0.00 :   6698:   mov    -0x38(%rbp),%rax
    2.96 :   669c:   mov    %rax,%rdi
    0.00 :   669f:   call   7a2a <std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)>
    7.25 :   66a4:   mov    %r13,%rcx
    0.00 :   66a7:   mov    %r12,%rdx
    0.00 :   66aa:   mov    %rax,%rsi
    0.00 :   66ad:   mov    %rbx,%rdi
    0.00 :   66b0:   call   7a80 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>
    2.96 :   66b5:   mov    -0x28(%rbp),%rdx
    8.88 :   66b9:   mov    %rax,0x8(%rdx)
    9.87 :   66bd:   nop
   17.77 :   66be:   add    $0x38,%rsp
    2.98 :   66c2:   pop    %rbx
    5.92 :   66c3:   pop    %r12
    0.00 :   66c5:   pop    %r13
    2.97 :   66c7:   pop    %rbp
    2.96 :   66c8:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (34 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>:
    2.99 :   803a:   endbr64
    0.00 :   803e:   push   %rbp
    5.99 :   803f:   mov    %rsp,%rbp
   14.92 :   8042:   mov    %rdi,-0x8(%rbp)
   17.94 :   8046:   mov    -0x8(%rbp),%rax
   49.30 :   804a:   pop    %rbp
    8.86 :   804b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (33 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000aa78 <std::remove_reference<int&>::type&& std::move<int&>(int&)>:
   15.25 :   aa78:   endbr64
    2.83 :   aa7c:   push   %rbp
    3.05 :   aa7d:   mov    %rsp,%rbp
   12.20 :   aa80:   mov    %rdi,-0x8(%rbp)
    9.15 :   aa84:   mov    -0x8(%rbp),%rax
   57.53 :   aa88:   pop    %rbp
    0.00 :   aa89:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (33 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000096c4 <std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >, true>::_M_get()>:
    3.05 :   96c4:   endbr64
    0.00 :   96c8:   push   %rbp
    3.03 :   96c9:   mov    %rsp,%rbp
    0.00 :   96cc:   mov    %rdi,-0x8(%rbp)
    6.08 :   96d0:   mov    -0x8(%rbp),%rax
   81.77 :   96d4:   pop    %rbp
    6.07 :   96d5:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (33 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004662 <std::vector<int, std::allocator<int> >::push_back(int const&)>:
    2.88 :   4662:   endbr64
   15.46 :   4666:   push   %rbp
    0.00 :   4667:   mov    %rsp,%rbp
    0.00 :   466a:   sub    $0x10,%rsp
    0.00 :   466e:   mov    %rdi,-0x8(%rbp)
    0.00 :   4672:   mov    %rsi,-0x10(%rbp)
    0.00 :   4676:   mov    -0x8(%rbp),%rax
   12.20 :   467a:   mov    0x8(%rax),%rdx
   33.92 :   467e:   mov    -0x8(%rbp),%rax
    0.00 :   4682:   mov    0x10(%rax),%rax
    8.85 :   4686:   cmp    %rax,%rdx
    0.00 :   4689:   je     46bc <std::vector<int, std::allocator<int> >::push_back(int const&)+0x5a>
    0.00 :   468b:   mov    -0x8(%rbp),%rax
    0.00 :   468f:   mov    0x8(%rax),%rcx
    9.27 :   4693:   mov    -0x8(%rbp),%rax
    2.51 :   4697:   mov    -0x10(%rbp),%rdx
    0.00 :   469b:   mov    %rcx,%rsi
    3.09 :   469e:   mov    %rax,%rdi
    0.00 :   46a1:   call   54f2 <void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
    0.00 :   46a6:   mov    -0x8(%rbp),%rax
    0.00 :   46aa:   mov    0x8(%rax),%rax
    3.10 :   46ae:   lea    0x4(%rax),%rdx
    2.71 :   46b2:   mov    -0x8(%rbp),%rax
    0.00 :   46b6:   mov    %rdx,0x8(%rax)
    6.02 :   46ba:   jmp    46de <std::vector<int, std::allocator<int> >::push_back(int const&)+0x7c>
    0.00 :   46bc:   mov    -0x8(%rbp),%rax
    0.00 :   46c0:   mov    %rax,%rdi
    0.00 :   46c3:   call   5530 <std::vector<int, std::allocator<int> >::end()>
    0.00 :   46c8:   mov    %rax,%rcx
    0.00 :   46cb:   mov    -0x10(%rbp),%rdx
    0.00 :   46cf:   mov    -0x8(%rbp),%rax
    0.00 :   46d3:   mov    %rcx,%rsi
    0.00 :   46d6:   mov    %rax,%rdi
    0.00 :   46d9:   call   5580 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>
    0.00 :   46de:   nop
    0.00 :   46df:   leave
    0.00 :   46e0:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (32 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004790 <std::vector<int, std::allocator<int> >::operator[](unsigned long)>:
    0.00 :   4790:   endbr64
    0.00 :   4794:   push   %rbp
    0.00 :   4795:   mov    %rsp,%rbp
    0.00 :   4798:   mov    %rdi,-0x8(%rbp)
    3.12 :   479c:   mov    %rsi,-0x10(%rbp)
    0.00 :   47a0:   mov    -0x8(%rbp),%rax
   37.80 :   47a4:   mov    (%rax),%rdx
   52.81 :   47a7:   mov    -0x10(%rbp),%rax
    6.27 :   47ab:   shl    $0x2,%rax
    0.00 :   47af:   add    %rdx,%rax
    0.00 :   47b2:   pop    %rbp
    0.00 :   47b3:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (32 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000068ac <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>:
    4.62 :   68ac:   endbr64
    3.14 :   68b0:   push   %rbp
    0.00 :   68b1:   mov    %rsp,%rbp
    0.00 :   68b4:   mov    %rdi,-0x8(%rbp)
   15.97 :   68b8:   mov    -0x8(%rbp),%rax
   60.37 :   68bc:   pop    %rbp
   15.90 :   68bd:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (31 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a2ee <std::pair<int, float>::pair<int, float, true>()>:
    3.20 :   a2ee:   endbr64
    0.00 :   a2f2:   push   %rbp
    0.00 :   a2f3:   mov    %rsp,%rbp
    0.00 :   a2f6:   mov    %rdi,-0x8(%rbp)
    3.20 :   a2fa:   mov    -0x8(%rbp),%rax
    3.21 :   a2fe:   movl   $0x0,(%rax)
   31.77 :   a304:   mov    -0x8(%rbp),%rax
   17.85 :   a308:   pxor   %xmm0,%xmm0
    0.00 :   a30c:   movss  %xmm0,0x4(%rax)
   40.76 :   a311:   nop
    0.00 :   a312:   pop    %rbp
    0.00 :   a313:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (31 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a53e0 <__libc_free>:
    3.23 :   a53e0:  endbr64
    0.00 :   a53e4:  test   %rdi,%rdi
    0.00 :   a53e7:  je     a54a8 <__libc_free+0xc8>
    0.00 :   a53ed:  push   %rbp
    0.00 :   a53ee:  lea    -0x10(%rdi),%rsi
    0.00 :   a53f2:  push   %rbx
   12.94 :   a53f3:  sub    $0x18,%rsp
    0.00 :   a53f7:  mov    0x174a12(%rip),%rbx        # 219e10 <_DYNAMIC+0x250>
    0.00 :   a53fe:  mov    -0x8(%rdi),%rax
    3.23 :   a5402:  mov    %fs:(%rbx),%ebp
    9.68 :   a5405:  test   $0x2,%al
    0.00 :   a5407:  jne    a5460 <__libc_free+0x80>
    0.00 :   a5409:  mov    0x174998(%rip),%rdx        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a5410:  cmpq   $0x0,%fs:(%rdx)
   16.16 :   a5415:  je     a54b0 <__libc_free+0xd0>
    0.00 :   a541b:  lea    0x17585e(%rip),%rdi        # 21ac80 <main_arena>
    0.00 :   a5422:  test   $0x4,%al
    0.00 :   a5424:  je     a544c <__libc_free+0x6c>
    0.00 :   a5426:  mov    0x174f63(%rip),%rdx        # 21a390 <mp_+0x30>
    0.00 :   a542d:  lea    0x0(,%rdx,4),%rax
    6.44 :   a5435:  neg    %rax
    3.23 :   a5438:  test   %rdx,%rdx
    0.00 :   a543b:  mov    $0xfffffffffc000000,%rdx
    3.24 :   a5442:  cmove  %rdx,%rax
    0.00 :   a5446:  and    %rsi,%rax
    0.00 :   a5449:  mov    (%rax),%rdi
   16.16 :   a544c:  xor    %edx,%edx
    0.00 :   a544e:  call   a26a0 <_int_free>
   16.01 :   a5453:  mov    %ebp,%fs:(%rbx)
    0.00 :   a5456:  add    $0x18,%rsp
    0.00 :   a545a:  pop    %rbx
    3.23 :   a545b:  pop    %rbp
    6.46 :   a545c:  ret
    0.00 :   a545d:  nopl   (%rax)
    0.00 :   a5460:  mov    0x174f42(%rip),%edx        # 21a3a8 <mp_+0x48>
    0.00 :   a5466:  test   %edx,%edx
    0.00 :   a5468:  jne    a5492 <__libc_free+0xb2>
    0.00 :   a546a:  cmp    0x174eff(%rip),%rax        # 21a370 <mp_+0x10>
    0.00 :   a5471:  jbe    a5492 <__libc_free+0xb2>
    0.00 :   a5473:  cmp    $0x2000000,%rax
    0.00 :   a5479:  ja     a5492 <__libc_free+0xb2>
    0.00 :   a547b:  and    $0xfffffffffffffff8,%rax
    0.00 :   a547f:  lea    (%rax,%rax,1),%rdx
    0.00 :   a5483:  mov    %rax,0x174ee6(%rip)        # 21a370 <mp_+0x10>
    0.00 :   a548a:  mov    %rdx,0x174ecf(%rip)        # 21a360 <mp_>
    0.00 :   a5491:  nop
    0.00 :   a5492:  mov    %rsi,%rdi
    0.00 :   a5495:  call   a0f60 <munmap_chunk>
    0.00 :   a549a:  mov    %ebp,%fs:(%rbx)
    0.00 :   a549d:  add    $0x18,%rsp
    0.00 :   a54a1:  pop    %rbx
    0.00 :   a54a2:  pop    %rbp
    0.00 :   a54a3:  ret
    0.00 :   a54a4:  nopl   0x0(%rax)
    0.00 :   a54a8:  ret
    0.00 :   a54a9:  nopl   0x0(%rax)
    0.00 :   a54b0:  mov    0x1748f9(%rip),%rdx        # 219db0 <_DYNAMIC+0x1f0>
    0.00 :   a54b7:  mov    %rdi,(%rsp)
    0.00 :   a54bb:  cmpb   $0x0,%fs:(%rdx)
    0.00 :   a54bf:  jne    a541b <__libc_free+0x3b>
    0.00 :   a54c5:  mov    %rsi,0x8(%rsp)
    0.00 :   a54ca:  call   a4990 <tcache_init.part.0>
    0.00 :   a54cf:  mov    (%rsp),%rdi
    0.00 :   a54d3:  mov    0x8(%rsp),%rsi
    0.00 :   a54d8:  mov    -0x8(%rdi),%rax
    0.00 :   a54dc:  jmp    a541b <__libc_free+0x3b>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (26 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000014a7f0 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4>:
    0.00 :   14a7f0: endbr64
    0.01 :   14a7f4: push   %r15
    0.00 :   14a7f6: push   %r14
    0.00 :   14a7f8: push   %r13
   18.12 :   14a7fa: push   %r12
    0.00 :   14a7fc: push   %rbp
    0.00 :   14a7fd: push   %rbx
    0.00 :   14a7fe: sub    $0x8,%rsp
    0.00 :   14a802: test   %rdx,%rdx
    0.00 :   14a805: jle    14a8b5 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xc5>
    0.00 :   14a80b: mov    %rdi,%r12
    0.00 :   14a80e: mov    %rsi,%r13
   10.77 :   14a811: mov    %rdx,%r14
    0.00 :   14a814: xor    %ebp,%ebp
    0.00 :   14a816: cs nopw 0x0(%rax,%rax,1)
    0.00 :   14a820: mov    0x28(%r12),%rdi
    0.00 :   14a825: mov    0x30(%r12),%rbx
    4.50 :   14a82a: sub    %rdi,%rbx
    0.00 :   14a82d: je     14a870 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x80>
    0.00 :   14a82f: mov    %r14,%r15
    0.00 :   14a832: sub    %rbp,%r15
    3.04 :   14a835: cmp    %rbx,%r15
    0.00 :   14a838: jl     14a8a0 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xb0>
    0.00 :   14a83a: mov    %rbx,%rdx
    0.00 :   14a83d: mov    %r13,%rsi
    0.00 :   14a840: add    %rbx,%rbp
    0.00 :   14a843: call   a20f0 <memcpy@plt>
    0.00 :   14a848: add    %rbx,0x28(%r12)
    0.00 :   14a84d: cmp    %r14,%rbp
    0.00 :   14a850: jl     14a868 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x78>
    2.81 :   14a852: add    $0x8,%rsp
    4.61 :   14a856: mov    %rbp,%rax
    0.00 :   14a859: pop    %rbx
   18.41 :   14a85a: pop    %rbp
    4.57 :   14a85b: pop    %r12
    7.50 :   14a85d: pop    %r13
    0.00 :   14a85f: pop    %r14
    3.05 :   14a861: pop    %r15
    0.00 :   14a863: ret
    0.00 :   14a864: nopl   0x0(%rax)
    0.00 :   14a868: add    %rbx,%r13
    0.00 :   14a86b: nopl   0x0(%rax,%rax,1)
    0.00 :   14a870: mov    (%r12),%rax
    0.00 :   14a874: movzbl 0x0(%r13),%esi
    0.00 :   14a879: mov    0x68(%rax),%rax
    0.00 :   14a87d: cmp    0xdb684(%rip),%rax        # 225f08 <std::basic_streambuf<char, std::char_traits<char> >::overflow(int)@@GLIBCXX_3.4+0xdb858>
    0.00 :   14a884: je     14a852 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x62>
    0.00 :   14a886: mov    %r12,%rdi
    0.00 :   14a889: call   *%rax
    0.00 :   14a88b: cmp    $0xffffffff,%eax
    0.00 :   14a88e: je     14a852 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x62>
    0.00 :   14a890: add    $0x1,%rbp
    0.00 :   14a894: add    $0x1,%r13
    0.00 :   14a898: cmp    %rbp,%r14
    0.00 :   14a89b: jg     14a820 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x30>
    0.00 :   14a89d: jmp    14a852 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x62>
    0.00 :   14a89f: nop
    0.00 :   14a8a0: mov    %r15,%rdx
    0.00 :   14a8a3: mov    %r13,%rsi
    0.00 :   14a8a6: mov    %r14,%rbp
    0.00 :   14a8a9: call   a20f0 <memcpy@plt>
    0.00 :   14a8ae: add    %r15,0x28(%r12)
   22.59 :   14a8b3: jmp    14a852 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x62>
    0.00 :   14a8b5: xor    %ebp,%ebp
    0.00 :   14a8b7: jmp    14a852 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0x62>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (31 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006b34 <void __gnu_cxx::new_allocator<float>::construct<float, float const&>(float*, float const&)>:
    0.00 :   6b34:   endbr64
    0.00 :   6b38:   push   %rbp
    0.00 :   6b39:   mov    %rsp,%rbp
    0.00 :   6b3c:   sub    $0x20,%rsp
    0.00 :   6b40:   mov    %rdi,-0x8(%rbp)
    0.00 :   6b44:   mov    %rsi,-0x10(%rbp)
    0.00 :   6b48:   mov    %rdx,-0x18(%rbp)
    0.00 :   6b4c:   mov    -0x18(%rbp),%rax
    3.13 :   6b50:   mov    %rax,%rdi
    0.00 :   6b53:   call   6b22 <float const& std::forward<float const&>(std::remove_reference<float const&>::type&)>
    6.50 :   6b58:   movss  (%rax),%xmm0
   25.91 :   6b5c:   movss  %xmm0,-0x1c(%rbp)
   19.38 :   6b61:   mov    -0x10(%rbp),%rax
    0.00 :   6b65:   mov    %rax,%rsi
    0.00 :   6b68:   mov    $0x4,%edi
    0.00 :   6b6d:   call   3f09 <operator new(unsigned long, void*)>
    0.00 :   6b72:   movss  -0x1c(%rbp),%xmm0
   25.78 :   6b77:   movss  %xmm0,(%rax)
   19.30 :   6b7b:   nop
    0.00 :   6b7c:   leave
    0.00 :   6b7d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (30 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009397 <std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&)>:
    0.00 :   9397:   endbr64
    0.00 :   939b:   push   %rbp
    6.75 :   939c:   mov    %rsp,%rbp
   10.11 :   939f:   mov    %rdi,-0x8(%rbp)
    0.00 :   93a3:   mov    -0x8(%rbp),%rax
   83.14 :   93a7:   pop    %rbp
    0.00 :   93a8:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (29 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013bf70 <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4>:
    0.00 :   13bf70: endbr64
    0.00 :   13bf74: push   %rbp
    7.97 :   13bf75: mov    %rdi,%rbp
    0.00 :   13bf78: push   %rbx
    4.78 :   13bf79: mov    %rsi,%rbx
    0.00 :   13bf7c: sub    $0x8,%rsp
   15.42 :   13bf80: mov    (%rsi),%rax
    0.00 :   13bf83: mov    %rsi,0x8(%rdi)
    0.00 :   13bf87: movb   $0x0,(%rdi)
    0.00 :   13bf8a: mov    -0x18(%rax),%rdi
    4.70 :   13bf8e: add    %rsi,%rdi
    8.40 :   13bf91: mov    0xd8(%rdi),%rax
    8.15 :   13bf98: mov    0x20(%rdi),%esi
    0.00 :   13bf9b: test   %rax,%rax
   12.67 :   13bf9e: je     13bfca <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4+0x5a>
    0.00 :   13bfa0: test   %esi,%esi
    0.00 :   13bfa2: je     13bfb8 <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4+0x48>
    0.00 :   13bfa4: test   $0x1,%sil
    0.00 :   13bfa8: jne    13bfe0 <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4+0x70>
    0.00 :   13bfaa: add    $0x8,%rsp
    0.00 :   13bfae: pop    %rbx
    0.00 :   13bfaf: pop    %rbp
    0.00 :   13bfb0: ret
    0.00 :   13bfb1: nopl   0x0(%rax)
    0.00 :   13bfb8: mov    %rax,%rdi
    0.00 :   13bfbb: call   a0770 <std::ostream::flush()@plt>
    0.00 :   13bfc0: mov    (%rbx),%rax
    0.00 :   13bfc3: add    -0x18(%rax),%rbx
    0.00 :   13bfc7: mov    %rbx,%rdi
    0.00 :   13bfca: mov    0x20(%rdi),%esi
   13.45 :   13bfcd: test   %esi,%esi
    6.36 :   13bfcf: jne    13bfa4 <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4+0x34>
    0.00 :   13bfd1: movb   $0x1,0x0(%rbp)
    3.19 :   13bfd5: add    $0x8,%rsp
    3.18 :   13bfd9: pop    %rbx
    8.57 :   13bfda: pop    %rbp
    3.15 :   13bfdb: ret
    0.00 :   13bfdc: nopl   0x0(%rax)
    0.00 :   13bfe0: add    $0x8,%rsp
    0.00 :   13bfe4: or     $0x4,%esi
    0.00 :   13bfe7: pop    %rbx
    0.00 :   13bfe8: pop    %rbp
    0.00 :   13bfe9: jmp    a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (28 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009de0 <bool __gnu_cxx::operator< <std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>:
    7.30 :   9de0:   endbr64
    0.00 :   9de4:   push   %rbp
    0.00 :   9de5:   mov    %rsp,%rbp
    3.65 :   9de8:   push   %rbx
    3.65 :   9de9:   sub    $0x18,%rsp
    0.00 :   9ded:   mov    %rdi,-0x18(%rbp)
    7.30 :   9df1:   mov    %rsi,-0x20(%rbp)
    0.00 :   9df5:   mov    -0x18(%rbp),%rax
   16.32 :   9df9:   mov    %rax,%rdi
    0.00 :   9dfc:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   9e01:   mov    (%rax),%rbx
   21.94 :   9e04:   mov    -0x20(%rbp),%rax
    0.00 :   9e08:   mov    %rax,%rdi
    0.00 :   9e0b:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   9e10:   mov    (%rax),%rax
   28.87 :   9e13:   cmp    %rax,%rbx
    0.00 :   9e16:   setb   %al
   10.96 :   9e19:   mov    -0x8(%rbp),%rbx
    0.00 :   9e1d:   leave
    0.00 :   9e1e:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (20 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001992c0 <__memchr_avx2>:
   10.66 :   1992c0: endbr64
    0.00 :   1992c4: test   %rdx,%rdx
    0.00 :   1992c7: je     199334 <__memchr_avx2+0x74>
    0.00 :   1992c9: vmovd  %esi,%xmm0
    0.00 :   1992cd: vpbroadcastb %xmm0,%ymm0
   10.63 :   1992d2: mov    %edi,%eax
    0.00 :   1992d4: and    $0xfff,%eax
    0.00 :   1992d9: cmp    $0xfe0,%eax
    0.00 :   1992de: ja     199340 <__memchr_avx2+0x80>
    0.00 :   1992e0: vpcmpeqb (%rdi),%ymm0,%ymm1
   21.01 :   1992e4: vpmovmskb %ymm1,%eax
    0.00 :   1992e8: cmp    $0x20,%rdx
    0.00 :   1992ec: jbe    199320 <__memchr_avx2+0x60>
    0.00 :   1992ee: test   %eax,%eax
    0.00 :   1992f0: je     1993b0 <__memchr_avx2+0xf0>
    0.00 :   1992f6: tzcnt  %eax,%eax
    0.00 :   1992fa: add    %rdi,%rax
    0.00 :   1992fd: vzeroupper
    0.00 :   199300: ret
    0.00 :   199301: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19930c: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   199317: nopw   0x0(%rax,%rax,1)
    0.00 :   199320: tzcnt  %eax,%eax
   57.70 :   199324: xor    %ecx,%ecx
    0.00 :   199326: cmp    %eax,%edx
    0.00 :   199328: lea    (%rdi,%rax,1),%rax
    0.00 :   19932c: cmovle %rcx,%rax
    0.00 :   199330: vzeroupper
    0.00 :   199333: ret
    0.00 :   199334: xor    %eax,%eax
    0.00 :   199336: ret
    0.00 :   199337: nopw   0x0(%rax,%rax,1)
    0.00 :   199340: mov    %rdi,%rcx
    0.00 :   199343: or     $0x1f,%rcx
    0.00 :   199347: vpcmpeqb -0x1f(%rcx),%ymm0,%ymm1
    0.00 :   19934c: vpmovmskb %ymm1,%eax
    0.00 :   199350: lea    0x1(%rcx),%rsi
    0.00 :   199354: sub    %rdi,%rsi
    0.00 :   199357: sarx   %edi,%eax,%eax
    0.00 :   19935c: cmp    %rsi,%rdx
    0.00 :   19935f: jbe    199320 <__memchr_avx2+0x60>
    0.00 :   199361: test   %eax,%eax
    0.00 :   199363: je     1993b0 <__memchr_avx2+0xf0>
    0.00 :   199365: tzcnt  %eax,%eax
    0.00 :   199369: add    %rdi,%rax
    0.00 :   19936c: vzeroupper
    0.00 :   19936f: ret
    0.00 :   199370: tzcnt  %eax,%eax
    0.00 :   199374: inc    %rdi
    0.00 :   199377: add    %rdi,%rax
    0.00 :   19937a: vzeroupper
    0.00 :   19937d: ret
    0.00 :   19937e: xchg   %ax,%ax
    0.00 :   199380: tzcnt  %eax,%eax
    0.00 :   199384: add    $0x21,%rdi
    0.00 :   199388: add    %rdi,%rax
    0.00 :   19938b: vzeroupper
    0.00 :   19938e: ret
    0.00 :   19938f: nop
    0.00 :   199390: tzcnt  %eax,%eax
    0.00 :   199394: add    $0x41,%rdi
    0.00 :   199398: add    %rdi,%rax
    0.00 :   19939b: vzeroupper
    0.00 :   19939e: ret
    0.00 :   19939f: nop
    0.00 :   1993a0: tzcnt  %eax,%eax
    0.00 :   1993a4: add    $0x61,%rdi
    0.00 :   1993a8: add    %rdi,%rax
    0.00 :   1993ab: vzeroupper
    0.00 :   1993ae: ret
    0.00 :   1993af: nop
    0.00 :   1993b0: xor    %ecx,%ecx
    0.00 :   1993b2: sub    %edi,%ecx
    0.00 :   1993b4: or     $0x1f,%rdi
    0.00 :   1993b8: lea    0x81(%rdi,%rcx,1),%esi
    0.00 :   1993bf: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
    0.00 :   1993c4: vpmovmskb %ymm1,%eax
    0.00 :   1993c8: sub    %rsi,%rdx
    0.00 :   1993cb: jbe    199460 <__memchr_avx2+0x1a0>
    0.00 :   1993d1: test   %eax,%eax
    0.00 :   1993d3: jne    199370 <__memchr_avx2+0xb0>
    0.00 :   1993d5: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
    0.00 :   1993da: vpmovmskb %ymm1,%eax
    0.00 :   1993de: test   %eax,%eax
    0.00 :   1993e0: jne    199380 <__memchr_avx2+0xc0>
    0.00 :   1993e2: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
    0.00 :   1993e7: vpmovmskb %ymm1,%eax
    0.00 :   1993eb: test   %eax,%eax
    0.00 :   1993ed: jne    199390 <__memchr_avx2+0xd0>
    0.00 :   1993ef: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
    0.00 :   1993f4: vpmovmskb %ymm1,%eax
    0.00 :   1993f8: test   %eax,%eax
    0.00 :   1993fa: jne    1993a0 <__memchr_avx2+0xe0>
    0.00 :   1993fc: sub    $0x80,%rdx
    0.00 :   199403: jbe    199510 <__memchr_avx2+0x250>
    0.00 :   199409: inc    %rdi
    0.00 :   19940c: mov    %edi,%ecx
    0.00 :   19940e: or     $0x7f,%rdi
    0.00 :   199412: and    $0x7f,%ecx
    0.00 :   199415: add    %rcx,%rdx
    0.00 :   199418: nopl   0x0(%rax,%rax,1)
    0.00 :   199420: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
    0.00 :   199425: vpcmpeqb 0x21(%rdi),%ymm0,%ymm2
    0.00 :   19942a: vpcmpeqb 0x41(%rdi),%ymm0,%ymm3
    0.00 :   19942f: vpcmpeqb 0x61(%rdi),%ymm0,%ymm4
    0.00 :   199434: vpor   %ymm1,%ymm2,%ymm5
    0.00 :   199438: vpor   %ymm3,%ymm4,%ymm6
    0.00 :   19943c: vpor   %ymm5,%ymm6,%ymm5
    0.00 :   199440: vpmovmskb %ymm5,%ecx
    0.00 :   199444: test   %ecx,%ecx
    0.00 :   199446: jne    199490 <__memchr_avx2+0x1d0>
    0.00 :   199448: sub    $0xffffffffffffff80,%rdi
    0.00 :   19944c: sub    $0x80,%rdx
    0.00 :   199453: ja     199420 <__memchr_avx2+0x160>
    0.00 :   199455: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
    0.00 :   19945a: vpmovmskb %ymm1,%eax
    0.00 :   19945e: xchg   %ax,%ax
    0.00 :   199460: test   %eax,%eax
    0.00 :   199462: jne    1994c0 <__memchr_avx2+0x200>
    0.00 :   199464: add    $0x40,%edx
    0.00 :   199467: jg     199530 <__memchr_avx2+0x270>
    0.00 :   19946d: add    $0x20,%edx
    0.00 :   199470: jle    19948a <__memchr_avx2+0x1ca>
    0.00 :   199472: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
    0.00 :   199477: vpmovmskb %ymm1,%eax
    0.00 :   19947b: tzcnt  %eax,%eax
    0.00 :   19947f: cmp    %eax,%edx
    0.00 :   199481: jbe    1994e0 <__memchr_avx2+0x220>
    0.00 :   199483: add    $0x21,%rdi
    0.00 :   199487: add    %rdi,%rax
    0.00 :   19948a: vzeroupper
    0.00 :   19948d: ret
    0.00 :   19948e: xchg   %ax,%ax
    0.00 :   199490: vpmovmskb %ymm1,%eax
    0.00 :   199494: test   %eax,%eax
    0.00 :   199496: jne    1994f0 <__memchr_avx2+0x230>
    0.00 :   199498: vpmovmskb %ymm2,%eax
    0.00 :   19949c: test   %eax,%eax
    0.00 :   19949e: jne    199500 <__memchr_avx2+0x240>
    0.00 :   1994a0: vpmovmskb %ymm3,%eax
    0.00 :   1994a4: shl    $0x20,%rcx
    0.00 :   1994a8: or     %rcx,%rax
    0.00 :   1994ab: tzcnt  %rax,%rax
    0.00 :   1994b0: sub    $0xffffffffffffffbf,%rdi
    0.00 :   1994b4: add    %rdi,%rax
    0.00 :   1994b7: vzeroupper
    0.00 :   1994ba: ret
    0.00 :   1994bb: nopl   0x0(%rax,%rax,1)
    0.00 :   1994c0: tzcnt  %eax,%eax
    0.00 :   1994c4: sub    $0xffffff80,%edx
    0.00 :   1994c7: cmp    %eax,%edx
    0.00 :   1994c9: jbe    1994e0 <__memchr_avx2+0x220>
    0.00 :   1994cb: inc    %rdi
    0.00 :   1994ce: add    %rdi,%rax
    0.00 :   1994d1: vzeroupper
    0.00 :   1994d4: ret
    0.00 :   1994d5: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1994e0: xor    %eax,%eax
    0.00 :   1994e2: vzeroupper
    0.00 :   1994e5: ret
    0.00 :   1994e6: cs nopw 0x0(%rax,%rax,1)
    0.00 :   1994f0: tzcnt  %eax,%eax
    0.00 :   1994f4: inc    %rdi
    0.00 :   1994f7: add    %rdi,%rax
    0.00 :   1994fa: vzeroupper
    0.00 :   1994fd: ret
    0.00 :   1994fe: xchg   %ax,%ax
    0.00 :   199500: tzcnt  %eax,%eax
    0.00 :   199504: sub    $0xffffffffffffffdf,%rdi
    0.00 :   199508: add    %rdi,%rax
    0.00 :   19950b: vzeroupper
    0.00 :   19950e: ret
    0.00 :   19950f: nop
    0.00 :   199510: vpcmpeqb 0x81(%rdi),%ymm0,%ymm1
    0.00 :   199518: vpmovmskb %ymm1,%eax
    0.00 :   19951c: sub    $0xffffffffffffff80,%rdi
    0.00 :   199520: test   %eax,%eax
    0.00 :   199522: jne    1994c0 <__memchr_avx2+0x200>
    0.00 :   199524: add    $0x40,%edx
    0.00 :   199527: jle    19946d <__memchr_avx2+0x1ad>
    0.00 :   19952d: nopl   (%rax)
    0.00 :   199530: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
    0.00 :   199535: vpmovmskb %ymm1,%eax
    0.00 :   199539: test   %eax,%eax
    0.00 :   19953b: jne    199500 <__memchr_avx2+0x240>
    0.00 :   19953d: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
    0.00 :   199542: vpmovmskb %ymm1,%eax
    0.00 :   199546: mov    $0xffffffffffffffff,%rcx
    0.00 :   19954d: bzhi   %rdx,%rcx,%rcx
    0.00 :   199552: and    %ecx,%eax
    0.00 :   199554: jne    199580 <__memchr_avx2+0x2c0>
    0.00 :   199556: sub    $0x20,%edx
    0.00 :   199559: jbe    199577 <__memchr_avx2+0x2b7>
    0.00 :   19955b: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
    0.00 :   199560: vpmovmskb %ymm1,%eax
    0.00 :   199564: shr    $0x20,%rcx
    0.00 :   199568: and    %ecx,%eax
    0.00 :   19956a: je     199577 <__memchr_avx2+0x2b7>
    0.00 :   19956c: tzcnt  %eax,%eax
    0.00 :   199570: add    $0x61,%rdi
    0.00 :   199574: add    %rdi,%rax
    0.00 :   199577: vzeroupper
    0.00 :   19957a: ret
    0.00 :   19957b: nopl   0x0(%rax,%rax,1)
    0.00 :   199580: tzcnt  %eax,%eax
    0.00 :   199584: sub    $0xffffffffffffffbf,%rdi
    0.00 :   199588: add    %rdi,%rax
    0.00 :   19958b: vzeroupper
    0.00 :   19958e: ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (21 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000883f0 <__vsnprintf_internal>:
    0.00 :   883f0:  endbr64
    4.03 :   883f4:  push   %r15
    0.00 :   883f6:  mov    %rcx,%r15
    0.00 :   883f9:  push   %r14
    0.00 :   883fb:  mov    %rdx,%r14
    0.00 :   883fe:  push   %r13
    0.00 :   88400:  push   %r12
    0.00 :   88402:  push   %rbp
    0.00 :   88403:  push   %rbx
   10.65 :   88404:  mov    %r8d,%ebx
    0.00 :   88407:  sub    $0x158,%rsp
    0.00 :   8840e:  mov    %fs:0x28,%rax
    3.77 :   88417:  mov    %rax,0x148(%rsp)
    0.00 :   8841f:  xor    %eax,%eax
    0.00 :   88421:  movq   $0x0,0x98(%rsp)
    4.64 :   8842d:  test   %rsi,%rsi
    0.00 :   88430:  je     884d8 <__vsnprintf_internal+0xe8>
    0.00 :   88436:  mov    %rdi,%rbp
    0.00 :   88439:  lea    -0x1(%rsi),%r12
    0.00 :   8843d:  lea    0x100(%rsp),%r9
    0.00 :   88445:  lea    0x10(%rsp),%r13
    0.00 :   8844a:  xor    %r8d,%r8d
    0.00 :   8844d:  xor    %ecx,%ecx
    0.00 :   8844f:  mov    $0xffffffff,%edx
   10.56 :   88454:  mov    $0x8000,%esi
    0.00 :   88459:  mov    %r13,%rdi
    0.00 :   8845c:  mov    %r9,0x8(%rsp)
    0.00 :   88461:  call   8e650 <_IO_no_init>
    5.39 :   88466:  mov    %rbp,%rcx
    0.00 :   88469:  mov    %r12,%rdx
    0.00 :   8846c:  mov    %rbp,%rsi
    0.00 :   8846f:  lea    0x18ee8a(%rip),%rax        # 217300 <_IO_strn_jumps>
    0.00 :   88476:  mov    %r13,%rdi
    0.00 :   88479:  mov    %rax,0xe8(%rsp)
    3.74 :   88481:  movb   $0x0,0x0(%rbp)
    0.00 :   88485:  call   8f9b0 <_IO_str_init_static_internal>
    0.00 :   8848a:  mov    %ebx,%ecx
    0.00 :   8848c:  mov    %r15,%rdx
    0.00 :   8848f:  mov    %r14,%rsi
    0.00 :   88492:  mov    %r13,%rdi
    0.00 :   88495:  call   75030 <__vfprintf_internal>
   16.44 :   8849a:  mov    0x8(%rsp),%r9
    0.00 :   8849f:  cmp    %r9,0x48(%rsp)
    5.43 :   884a4:  je     884ae <__vsnprintf_internal+0xbe>
    0.00 :   884a6:  mov    0x38(%rsp),%rdx
    0.00 :   884ab:  movb   $0x0,(%rdx)
   15.95 :   884ae:  mov    0x148(%rsp),%rdx
    0.00 :   884b6:  sub    %fs:0x28,%rdx
    0.00 :   884bf:  jne    884ee <__vsnprintf_internal+0xfe>
    0.00 :   884c1:  add    $0x158,%rsp
    0.00 :   884c8:  pop    %rbx
    5.18 :   884c9:  pop    %rbp
    0.00 :   884ca:  pop    %r12
    5.43 :   884cc:  pop    %r13
    4.54 :   884ce:  pop    %r14
    0.00 :   884d0:  pop    %r15
    4.25 :   884d2:  ret
    0.00 :   884d3:  nopl   0x0(%rax,%rax,1)
    0.00 :   884d8:  lea    0x100(%rsp),%r9
    0.00 :   884e0:  mov    $0x3f,%r12d
    0.00 :   884e6:  mov    %r9,%rbp
    0.00 :   884e9:  jmp    88445 <__vsnprintf_internal+0x55>
    0.00 :   884ee:  call   136550 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000019d7e0 <__strlen_avx2>:
   63.52 :   19d7e0: endbr64
    0.00 :   19d7e4: mov    %edi,%eax
    0.00 :   19d7e6: mov    %rdi,%rdx
    0.00 :   19d7e9: vpxor  %xmm0,%xmm0,%xmm0
    0.00 :   19d7ed: and    $0xfff,%eax
    3.58 :   19d7f2: cmp    $0xfe0,%eax
    0.00 :   19d7f7: ja     19d930 <__strlen_avx2+0x150>
    0.00 :   19d7fd: vpcmpeqb (%rdi),%ymm0,%ymm1
    6.38 :   19d801: vpmovmskb %ymm1,%eax
    4.94 :   19d805: test   %eax,%eax
   16.12 :   19d807: je     19d860 <__strlen_avx2+0x80>
    0.00 :   19d809: tzcnt  %eax,%eax
    5.45 :   19d80d: vzeroupper
    0.00 :   19d810: ret
    0.00 :   19d811: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d81c: nopl   0x0(%rax)
    0.00 :   19d820: tzcnt  %eax,%eax
    0.00 :   19d824: sub    %edx,%edi
    0.00 :   19d826: inc    %edi
    0.00 :   19d828: add    %edi,%eax
    0.00 :   19d82a: vzeroupper
    0.00 :   19d82d: ret
    0.00 :   19d82e: xchg   %ax,%ax
    0.00 :   19d830: tzcnt  %eax,%eax
    0.00 :   19d834: sub    %edx,%edi
    0.00 :   19d836: add    $0x21,%edi
    0.00 :   19d839: add    %edi,%eax
    0.00 :   19d83b: vzeroupper
    0.00 :   19d83e: ret
    0.00 :   19d83f: nop
    0.00 :   19d840: tzcnt  %eax,%eax
    0.00 :   19d844: sub    %edx,%edi
    0.00 :   19d846: add    $0x41,%edi
    0.00 :   19d849: add    %edi,%eax
    0.00 :   19d84b: vzeroupper
    0.00 :   19d84e: ret
    0.00 :   19d84f: nop
    0.00 :   19d850: tzcnt  %eax,%eax
    0.00 :   19d854: sub    %edx,%edi
    0.00 :   19d856: add    $0x61,%edi
    0.00 :   19d859: add    %edi,%eax
    0.00 :   19d85b: vzeroupper
    0.00 :   19d85e: ret
    0.00 :   19d85f: nop
    0.00 :   19d860: or     $0x1f,%rdi
    0.00 :   19d864: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
    0.00 :   19d869: vpmovmskb %ymm1,%eax
    0.00 :   19d86d: test   %eax,%eax
    0.00 :   19d86f: jne    19d820 <__strlen_avx2+0x40>
    0.00 :   19d871: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
    0.00 :   19d876: vpmovmskb %ymm1,%eax
    0.00 :   19d87a: test   %eax,%eax
    0.00 :   19d87c: jne    19d830 <__strlen_avx2+0x50>
    0.00 :   19d87e: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
    0.00 :   19d883: vpmovmskb %ymm1,%eax
    0.00 :   19d887: test   %eax,%eax
    0.00 :   19d889: jne    19d840 <__strlen_avx2+0x60>
    0.00 :   19d88b: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
    0.00 :   19d890: vpmovmskb %ymm1,%eax
    0.00 :   19d894: test   %eax,%eax
    0.00 :   19d896: jne    19d850 <__strlen_avx2+0x70>
    0.00 :   19d898: inc    %rdi
    0.00 :   19d89b: or     $0x7f,%rdi
    0.00 :   19d89f: nop
    0.00 :   19d8a0: vmovdqa 0x1(%rdi),%ymm1
    0.00 :   19d8a5: vpminub 0x21(%rdi),%ymm1,%ymm2
    0.00 :   19d8aa: vmovdqa 0x41(%rdi),%ymm3
    0.00 :   19d8af: vpminub 0x61(%rdi),%ymm3,%ymm4
    0.00 :   19d8b4: vpminub %ymm2,%ymm4,%ymm5
    0.00 :   19d8b8: vpcmpeqb %ymm5,%ymm0,%ymm5
    0.00 :   19d8bc: vpmovmskb %ymm5,%ecx
    0.00 :   19d8c0: sub    $0xffffffffffffff80,%rdi
    0.00 :   19d8c4: test   %ecx,%ecx
    0.00 :   19d8c6: je     19d8a0 <__strlen_avx2+0xc0>
    0.00 :   19d8c8: vpcmpeqb %ymm1,%ymm0,%ymm1
    0.00 :   19d8cc: vpmovmskb %ymm1,%eax
    0.00 :   19d8d0: sub    %rdx,%rdi
    0.00 :   19d8d3: test   %eax,%eax
    0.00 :   19d8d5: jne    19d910 <__strlen_avx2+0x130>
    0.00 :   19d8d7: vpcmpeqb %ymm2,%ymm0,%ymm2
    0.00 :   19d8db: vpmovmskb %ymm2,%eax
    0.00 :   19d8df: test   %eax,%eax
    0.00 :   19d8e1: jne    19d920 <__strlen_avx2+0x140>
    0.00 :   19d8e3: vpcmpeqb %ymm3,%ymm0,%ymm3
    0.00 :   19d8e7: vpmovmskb %ymm3,%eax
    0.00 :   19d8eb: shl    $0x20,%rcx
    0.00 :   19d8ef: or     %rcx,%rax
    0.00 :   19d8f2: tzcnt  %rax,%rax
    0.00 :   19d8f7: sub    $0x3f,%rdi
    0.00 :   19d8fb: add    %rdi,%rax
    0.00 :   19d8fe: vzeroupper
    0.00 :   19d901: ret
    0.00 :   19d902: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d90d: nopl   (%rax)
    0.00 :   19d910: tzcnt  %eax,%eax
    0.00 :   19d914: sub    $0x7f,%rdi
    0.00 :   19d918: add    %rdi,%rax
    0.00 :   19d91b: vzeroupper
    0.00 :   19d91e: ret
    0.00 :   19d91f: nop
    0.00 :   19d920: tzcnt  %eax,%eax
    0.00 :   19d924: sub    $0x5f,%rdi
    0.00 :   19d928: add    %rdi,%rax
    0.00 :   19d92b: vzeroupper
    0.00 :   19d92e: ret
    0.00 :   19d92f: nop
    0.00 :   19d930: or     $0x1f,%rdi
    0.00 :   19d934: vpcmpeqb -0x1f(%rdi),%ymm0,%ymm1
    0.00 :   19d939: vpmovmskb %ymm1,%eax
    0.00 :   19d93d: sarx   %edx,%eax,%eax
    0.00 :   19d942: test   %eax,%eax
    0.00 :   19d944: je     19d864 <__strlen_avx2+0x84>
    0.00 :   19d94a: tzcnt  %eax,%eax
    0.00 :   19d94e: vzeroupper
    0.00 :   19d951: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (26 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000aafd <std::remove_reference<float&>::type&& std::move<float&>(float&)>:
    0.00 :   aafd:   endbr64
    7.78 :   ab01:   push   %rbp
    0.00 :   ab02:   mov    %rsp,%rbp
    0.00 :   ab05:   mov    %rdi,-0x8(%rbp)
   30.23 :   ab09:   mov    -0x8(%rbp),%rax
   61.99 :   ab0d:   pop    %rbp
    0.00 :   ab0e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (26 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003f09 <operator new(unsigned long, void*)>:
   15.48 :   3f09:   endbr64
    7.89 :   3f0d:   push   %rbp
    2.00 :   3f0e:   mov    %rsp,%rbp
   23.63 :   3f11:   mov    %rdi,-0x8(%rbp)
    7.86 :   3f15:   mov    %rsi,-0x10(%rbp)
    7.85 :   3f19:   mov    -0x10(%rbp),%rax
   35.30 :   3f1d:   pop    %rbp
    0.00 :   3f1e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000af9b <write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&)>:
    0.00 :   af9b:   endbr64
    0.00 :   af9f:   push   %rbp
    0.00 :   afa0:   mov    %rsp,%rbp
    0.00 :   afa3:   push   %rbx
    0.00 :   afa4:   sub    $0x248,%rsp
    0.00 :   afab:   mov    %rdi,-0x248(%rbp)
    0.00 :   afb2:   mov    %rsi,-0x250(%rbp)
    0.00 :   afb9:   mov    %fs:0x28,%rax
    0.00 :   afc2:   mov    %rax,-0x18(%rbp)
    0.00 :   afc6:   xor    %eax,%eax
    0.00 :   afc8:   mov    -0x248(%rbp),%rcx
    0.00 :   afcf:   lea    -0x220(%rbp),%rax
    0.00 :   afd6:   mov    $0x10,%edx
    0.00 :   afdb:   mov    %rcx,%rsi
    0.00 :   afde:   mov    %rax,%rdi
    0.00 :   afe1:   call   25e0 <std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    0.00 :   afe6:   mov    -0x250(%rbp),%rax
    0.00 :   afed:   mov    %rax,-0x228(%rbp)
    0.00 :   aff4:   mov    -0x228(%rbp),%rax
    0.00 :   affb:   mov    %rax,%rdi
    0.00 :   affe:   call   b7e4 <std::vector<float, std::allocator<float> >::begin() const>
    0.00 :   b003:   mov    %rax,-0x238(%rbp)
    0.00 :   b00a:   mov    -0x228(%rbp),%rax
    0.00 :   b011:   mov    %rax,%rdi
    0.00 :   b014:   call   b830 <std::vector<float, std::allocator<float> >::end() const>
    0.00 :   b019:   mov    %rax,-0x230(%rbp)
    0.00 :   b020:   jmp    b07a <write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&)+0xdf>
    0.00 :   b022:   lea    -0x238(%rbp),%rax
    0.00 :   b029:   mov    %rax,%rdi
    0.00 :   b02c:   call   b8e4 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator*() const>
    0.00 :   b031:   movss  (%rax),%xmm0
    5.51 :   b035:   movss  %xmm0,-0x23c(%rbp)
   18.69 :   b03d:   mov    -0x23c(%rbp),%edx
   41.45 :   b043:   lea    -0x220(%rbp),%rax
    0.00 :   b04a:   movd   %edx,%xmm0
   23.04 :   b04e:   mov    %rax,%rdi
    0.00 :   b051:   call   23f0 <std::ostream::operator<<(float)@plt>
    0.00 :   b056:   mov    %rax,%rdx
    0.00 :   b059:   lea    0x1090(%rip),%rax        # c0f0 <__pstl::execution::v1::unseq+0x55>
    0.00 :   b060:   mov    %rax,%rsi
   11.32 :   b063:   mov    %rdx,%rdi
    0.00 :   b066:   call   2440 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   b06b:   lea    -0x238(%rbp),%rax
    0.00 :   b072:   mov    %rax,%rdi
    0.00 :   b075:   call   b8c0 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator++()>
    0.00 :   b07a:   lea    -0x230(%rbp),%rdx
    0.00 :   b081:   lea    -0x238(%rbp),%rax
    0.00 :   b088:   mov    %rdx,%rsi
    0.00 :   b08b:   mov    %rax,%rdi
    0.00 :   b08e:   call   b880 <bool __gnu_cxx::operator!=<float const*, std::vector<float, std::allocator<float> > >(__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&, __gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&)>
    0.00 :   b093:   test   %al,%al
    0.00 :   b095:   jne    b022 <write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&)+0x87>
    0.00 :   b097:   lea    -0x220(%rbp),%rax
    0.00 :   b09e:   mov    %rax,%rdi
    0.00 :   b0a1:   call   2500 <std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()@plt>
    0.00 :   b0a6:   mov    -0x18(%rbp),%rax
    0.00 :   b0aa:   sub    %fs:0x28,%rax
    0.00 :   b0b3:   je     b0dd <write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&)+0x142>
    0.00 :   b0b5:   jmp    b0d8 <write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&)+0x13d>
    0.00 :   b0b7:   endbr64
    0.00 :   b0bb:   mov    %rax,%rbx
    0.00 :   b0be:   lea    -0x220(%rbp),%rax
    0.00 :   b0c5:   mov    %rax,%rdi
    0.00 :   b0c8:   call   2500 <std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()@plt>
    0.00 :   b0cd:   mov    %rbx,%rax
    0.00 :   b0d0:   mov    %rax,%rdi
    0.00 :   b0d3:   call   2580 <_Unwind_Resume@plt>
    0.00 :   b0d8:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   b0dd:   mov    -0x8(%rbp),%rbx
    0.00 :   b0e1:   leave
    0.00 :   b0e2:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (18 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008e650 <_IO_no_init>:
    0.00 :   8e650:  endbr64
    0.00 :   8e654:  push   %r13
    0.00 :   8e656:  mov    %r8,%r13
    0.00 :   8e659:  push   %r12
   11.40 :   8e65b:  mov    %edx,%r12d
    5.78 :   8e65e:  push   %rbp
    4.15 :   8e65f:  mov    %rdi,%rbp
    0.00 :   8e662:  push   %rbx
    0.00 :   8e663:  mov    %rcx,%rbx
    0.00 :   8e666:  sub    $0x8,%rsp
    0.00 :   8e66a:  call   8e5e0 <_IO_old_init>
    0.00 :   8e66f:  mov    %r12d,0xc0(%rbp)
   21.42 :   8e676:  test   %r12d,%r12d
    0.00 :   8e679:  js     8e6c0 <_IO_no_init+0x70>
    0.00 :   8e67b:  mov    %rbx,0xa0(%rbp)
    0.00 :   8e682:  pxor   %xmm0,%xmm0
    0.00 :   8e686:  movq   $0x0,0x50(%rbx)
    0.00 :   8e68e:  mov    %r13,0xe0(%rbx)
    0.00 :   8e695:  movups %xmm0,(%rbx)
    0.00 :   8e698:  movups %xmm0,0x10(%rbx)
    0.00 :   8e69c:  movups %xmm0,0x20(%rbx)
    0.00 :   8e6a0:  movups %xmm0,0x30(%rbx)
    0.00 :   8e6a4:  movups %xmm0,0x40(%rbx)
    0.00 :   8e6a8:  movq   $0x0,0xa8(%rbp)
    5.76 :   8e6b3:  add    $0x8,%rsp
    0.00 :   8e6b7:  pop    %rbx
   17.42 :   8e6b8:  pop    %rbp
    5.66 :   8e6b9:  pop    %r12
    0.00 :   8e6bb:  pop    %r13
   28.40 :   8e6bd:  ret
    0.00 :   8e6be:  xchg   %ax,%ax
    0.00 :   8e6c0:  movq   $0xffffffffffffffff,0xa0(%rbp)
    0.00 :   8e6cb:  jmp    8e6a8 <_IO_no_init+0x58>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (25 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a15c <std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&)>:
    0.00 :   a15c:   endbr64
    0.00 :   a160:   push   %rbp
    4.11 :   a161:   mov    %rsp,%rbp
    4.09 :   a164:   mov    %rdi,-0x8(%rbp)
    0.00 :   a168:   mov    %rsi,-0x10(%rbp)
    4.10 :   a16c:   mov    -0x8(%rbp),%rax
    9.98 :   a170:   mov    -0x10(%rbp),%rdx
   20.43 :   a174:   mov    (%rdx),%rdx
   36.88 :   a177:   mov    %rdx,(%rax)
   16.37 :   a17a:   nop
    0.00 :   a17b:   pop    %rbp
    4.04 :   a17c:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (27 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013d090 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9>:
    0.00 :   13d090: endbr64
    0.00 :   13d094: push   %r15
    0.00 :   13d096: push   %r14
    6.68 :   13d098: push   %r13
    0.00 :   13d09a: push   %r12
    0.00 :   13d09c: mov    %rsi,%r12
    3.87 :   13d09f: mov    %rdi,%rsi
    0.00 :   13d0a2: push   %rbp
    3.89 :   13d0a3: push   %rbx
    0.00 :   13d0a4: mov    %rdi,%rbx
    0.00 :   13d0a7: sub    $0x28,%rsp
    0.00 :   13d0ab: mov    %fs:0x28,%rax
    0.00 :   13d0b4: mov    %rax,0x18(%rsp)
    0.00 :   13d0b9: xor    %eax,%eax
    0.00 :   13d0bb: mov    %rsp,%r14
    3.90 :   13d0be: mov    %r14,%rdi
    0.00 :   13d0c1: call   a21f0 <std::ostream::sentry::sentry(std::ostream&)@plt>
    0.00 :   13d0c6: cmpb   $0x0,(%rsp)
    6.66 :   13d0ca: je     13d133 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xa3>
    0.00 :   13d0cc: mov    (%rbx),%rax
    0.00 :   13d0cf: mov    -0x18(%rax),%rbp
    0.00 :   13d0d3: add    %rbx,%rbp
    0.00 :   13d0d6: mov    0xf8(%rbp),%r13
    7.77 :   13d0dd: test   %r13,%r13
    0.00 :   13d0e0: je     13d239 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1a9>
    0.00 :   13d0e6: cmpb   $0x0,0xe1(%rbp)
    3.89 :   13d0ed: je     13d1a0 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x110>
    3.84 :   13d0f3: movsbl 0xe0(%rbp),%r8d
    3.86 :   13d0fb: mov    0xe8(%rbp),%rsi
    0.00 :   13d102: mov    0x0(%r13),%rax
    7.57 :   13d106: xor    %edx,%edx
    0.00 :   13d108: mov    %r12,%r9
    0.00 :   13d10b: mov    %rbp,%rcx
    0.00 :   13d10e: mov    %r13,%rdi
    0.00 :   13d111: test   %rsi,%rsi
    0.00 :   13d114: sete   %dl
    0.00 :   13d117: call   *0x18(%rax)
   11.59 :   13d11a: test   %dl,%dl
    0.00 :   13d11c: je     13d133 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xa3>
    0.00 :   13d11e: mov    (%rbx),%rax
    0.00 :   13d121: mov    -0x18(%rax),%rdi
    0.00 :   13d125: add    %rbx,%rdi
    0.00 :   13d128: mov    0x20(%rdi),%esi
    0.00 :   13d12b: or     $0x1,%esi
    0.00 :   13d12e: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13d133: mov    0x8(%rsp),%rax
    0.00 :   13d138: mov    (%rax),%rdx
    0.00 :   13d13b: add    -0x18(%rdx),%rax
    9.38 :   13d13f: mov    %rax,%rbp
    0.00 :   13d142: testb  $0x20,0x19(%rax)
   23.20 :   13d146: je     13d170 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13d148: call   9f820 <std::uncaught_exception()@plt>
    0.00 :   13d14d: test   %al,%al
    0.00 :   13d14f: jne    13d170 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13d151: mov    0xe8(%rbp),%rdi
    0.00 :   13d158: test   %rdi,%rdi
    0.00 :   13d15b: je     13d170 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13d15d: mov    (%rdi),%rax
    0.00 :   13d160: call   *0x30(%rax)
    0.00 :   13d163: cmp    $0xffffffff,%eax
    0.00 :   13d166: je     13d218 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x188>
    0.00 :   13d16c: nopl   0x0(%rax)
    3.89 :   13d170: mov    0x18(%rsp),%rax
    0.00 :   13d175: sub    %fs:0x28,%rax
    0.00 :   13d17e: jne    13d234 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1a4>
    0.00 :   13d184: add    $0x28,%rsp
    0.00 :   13d188: mov    %rbx,%rax
    0.00 :   13d18b: pop    %rbx
    0.00 :   13d18c: pop    %rbp
    0.00 :   13d18d: pop    %r12
    0.00 :   13d18f: pop    %r13
    0.00 :   13d191: pop    %r14
    0.00 :   13d193: pop    %r15
    0.00 :   13d195: ret
    0.00 :   13d196: cs nopw 0x0(%rax,%rax,1)
    0.00 :   13d1a0: mov    0xf0(%rbp),%r15
    0.00 :   13d1a7: test   %r15,%r15
    0.00 :   13d1aa: je     13d23e <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1ae>
    0.00 :   13d1b0: cmpb   $0x0,0x38(%r15)
    0.00 :   13d1b5: je     13d1e0 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x150>
    0.00 :   13d1b7: movsbl 0x59(%r15),%r8d
    0.00 :   13d1bc: mov    %r8d,%eax
    0.00 :   13d1bf: mov    %al,0xe0(%rbp)
    0.00 :   13d1c5: mov    (%rbx),%rax
    0.00 :   13d1c8: movb   $0x1,0xe1(%rbp)
    0.00 :   13d1cf: mov    -0x18(%rax),%rbp
    0.00 :   13d1d3: add    %rbx,%rbp
    0.00 :   13d1d6: jmp    13d0fb <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x6b>
    0.00 :   13d1db: nopl   0x0(%rax,%rax,1)
    0.00 :   13d1e0: mov    %r15,%rdi
    0.00 :   13d1e3: call   9feb0 <std::ctype<char>::_M_widen_init() const@plt>
    0.00 :   13d1e8: mov    (%r15),%rax
    0.00 :   13d1eb: mov    $0x20,%r8d
    0.00 :   13d1f1: mov    0x30(%rax),%rdx
    0.00 :   13d1f5: cmp    0xe8da4(%rip),%rdx        # 225fa0 <std::ctype<char>::do_widen(char) const@@GLIBCXX_3.4+0x16a430>
    0.00 :   13d1fc: mov    $0x20,%eax
    0.00 :   13d201: je     13d1bf <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x12f>
    0.00 :   13d203: mov    $0x20,%esi
    0.00 :   13d208: mov    %r15,%rdi
    0.00 :   13d20b: call   *%rdx
    0.00 :   13d20d: movsbl %al,%r8d
    0.00 :   13d211: jmp    13d1bf <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x12f>
    0.00 :   13d213: nopl   0x0(%rax,%rax,1)
    0.00 :   13d218: mov    0x8(%rsp),%rdi
    0.00 :   13d21d: mov    (%rdi),%rax
    0.00 :   13d220: add    -0x18(%rax),%rdi
    0.00 :   13d224: mov    0x20(%rdi),%esi
    0.00 :   13d227: or     $0x1,%esi
    0.00 :   13d22a: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13d22f: jmp    13d170 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xe0>
    0.00 :   13d234: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   13d239: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13d23e: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   13d243: endbr64
    0.00 :   13d247: mov    %rax,%rdi
    0.00 :   13d24a: mov    %rdx,%rax
    0.00 :   13d24d: jmp    13d258 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1c8>
    0.00 :   13d24f: endbr64
    0.00 :   13d253: mov    %rax,%rbx
    0.00 :   13d256: jmp    13d281 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1f1>
    0.00 :   13d258: sub    $0x1,%rax
    0.00 :   13d25c: jne    13d291 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x201>
    0.00 :   13d25e: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13d263: mov    (%rbx),%rax
    0.00 :   13d266: mov    $0x1,%esi
    0.00 :   13d26b: add    -0x18(%rax),%rbx
    0.00 :   13d26f: mov    %rbx,%rdi
    0.00 :   13d272: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13d277: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   13d27c: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13d281: mov    %r14,%rdi
    0.00 :   13d284: call   9f140 <std::ostream::sentry::~sentry()@plt>
    0.00 :   13d289: mov    %rbx,%rdi
    0.00 :   13d28c: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   13d291: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   13d296: mov    (%rbx),%rax
    0.00 :   13d299: mov    $0x1,%esi
    0.00 :   13d29e: mov    -0x18(%rax),%rdi
    0.00 :   13d2a2: add    %rbx,%rdi
    0.00 :   13d2a5: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   13d2aa: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13d2af: jmp    13d133 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0xa3>
    0.00 :   13d2b4: endbr64
    0.00 :   13d2b8: mov    %rax,%rbx
    0.00 :   13d2bb: jmp    13d2c6 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x236>
    0.00 :   13d2bd: endbr64
    0.00 :   13d2c1: mov    %rax,%rbx
    0.00 :   13d2c4: jmp    13d27c <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1ec>
    0.00 :   13d2c6: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   13d2cb: jmp    13d281 <std::ostream& std::ostream::_M_insert<long>(long)@@GLIBCXX_3.4.9+0x1f1>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (24 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005d9c <float&& std::forward<float>(std::remove_reference<float>::type&)>:
    0.00 :   5d9c:   endbr64
   29.15 :   5da0:   push   %rbp
    0.00 :   5da1:   mov    %rsp,%rbp
   12.53 :   5da4:   mov    %rdi,-0x8(%rbp)
    8.35 :   5da8:   mov    -0x8(%rbp),%rax
   45.79 :   5dac:   pop    %rbp
    4.18 :   5dad:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (24 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000046e2 <std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >::operator[](unsigned long)>:
    0.00 :   46e2:   endbr64
    4.19 :   46e6:   push   %rbp
    0.00 :   46e7:   mov    %rsp,%rbp
    0.00 :   46ea:   mov    %rdi,-0x8(%rbp)
   12.49 :   46ee:   mov    %rsi,-0x10(%rbp)
   20.93 :   46f2:   mov    -0x8(%rbp),%rax
   29.22 :   46f6:   mov    (%rax),%rcx
   12.27 :   46f9:   mov    -0x10(%rbp),%rdx
    4.18 :   46fd:   mov    %rdx,%rax
    4.19 :   4700:   add    %rax,%rax
    8.35 :   4703:   add    %rdx,%rax
    0.00 :   4706:   shl    $0x3,%rax
    4.18 :   470a:   add    %rcx,%rax
    0.00 :   470d:   pop    %rbp
    0.00 :   470e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (24 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000041bc <int&& std::forward<int>(std::remove_reference<int>::type&)>:
    4.19 :   41bc:   endbr64
    0.00 :   41c0:   push   %rbp
    0.00 :   41c1:   mov    %rsp,%rbp
    0.00 :   41c4:   mov    %rdi,-0x8(%rbp)
    0.00 :   41c8:   mov    -0x8(%rbp),%rax
   66.65 :   41cc:   pop    %rbp
   29.16 :   41cd:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (24 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000994c <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>:
    6.77 :   994c:   endbr64
    0.00 :   9950:   push   %rbp
    8.83 :   9951:   mov    %rsp,%rbp
    0.00 :   9954:   push   %r13
    0.00 :   9956:   push   %r12
    4.45 :   9958:   push   %rbx
    0.00 :   9959:   sub    $0x58,%rsp
    0.00 :   995d:   mov    %rdi,-0x48(%rbp)
    4.45 :   9961:   mov    %rsi,-0x50(%rbp)
    8.91 :   9965:   mov    %rdx,-0x58(%rbp)
    0.00 :   9969:   mov    %rcx,-0x60(%rbp)
    4.37 :   996d:   mov    %r8,-0x68(%rbp)
    0.00 :   9971:   mov    %fs:0x28,%rax
    0.00 :   997a:   mov    %rax,-0x28(%rbp)
    0.00 :   997e:   xor    %eax,%eax
    0.00 :   9980:   mov    -0x58(%rbp),%rax
    8.89 :   9984:   mov    %rax,%rdi
    0.00 :   9987:   call   7a2a <std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)>
    4.43 :   998c:   mov    -0x60(%rbp),%rax
    4.45 :   9990:   mov    %rax,%rdi
    0.00 :   9993:   call   7a3c <std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&)>
    4.44 :   9998:   mov    %rax,%rdx
    0.00 :   999b:   lea    -0x30(%rbp),%rax
    0.00 :   999f:   mov    %rdx,%rsi
    0.00 :   99a2:   mov    %rax,%rdi
    0.00 :   99a5:   call   9922 <std::tuple<int const&>::tuple(std::tuple<int const&>&&)>
    8.84 :   99aa:   lea    -0x30(%rbp),%r13
    0.00 :   99ae:   mov    -0x68(%rbp),%rax
    0.00 :   99b2:   mov    %rax,%rdi
    0.00 :   99b5:   call   7a4e <std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&)>
    0.00 :   99ba:   mov    -0x50(%rbp),%rbx
    0.00 :   99be:   mov    %rbx,%rsi
    8.90 :   99c1:   mov    $0x8,%edi
    0.00 :   99c6:   call   3f09 <operator new(unsigned long, void*)>
    0.00 :   99cb:   mov    %rax,%r12
    0.00 :   99ce:   mov    %r13,%rsi
    0.00 :   99d1:   mov    %r12,%rdi
    0.00 :   99d4:   call   a17e <std::pair<int const, float>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>)>
    8.88 :   99d9:   jmp    99f8 <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)+0xac>
    0.00 :   99db:   endbr64
    0.00 :   99df:   mov    %rax,%r13
    0.00 :   99e2:   mov    %rbx,%rsi
    0.00 :   99e5:   mov    %r12,%rdi
    0.00 :   99e8:   call   3f1f <operator delete(void*, void*)>
    0.00 :   99ed:   mov    %r13,%rax
    0.00 :   99f0:   mov    %rax,%rdi
    0.00 :   99f3:   call   2580 <_Unwind_Resume@plt>
    0.00 :   99f8:   mov    -0x28(%rbp),%rax
    8.89 :   99fc:   sub    %fs:0x28,%rax
    0.00 :   9a05:   je     9a0c <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)+0xc0>
    0.00 :   9a07:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   9a0c:   add    $0x58,%rsp
    0.07 :   9a10:   pop    %rbx
    4.43 :   9a11:   pop    %r12
    0.00 :   9a13:   pop    %r13
    0.00 :   9a15:   pop    %rbp
    0.00 :   9a16:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (23 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004a8c <std::pair<int, float>::pair<int&, float&, true>(int&, float&)>:
    0.00 :   4a8c:   endbr64
    0.00 :   4a90:   push   %rbp
    0.00 :   4a91:   mov    %rsp,%rbp
    0.00 :   4a94:   sub    $0x20,%rsp
    4.44 :   4a98:   mov    %rdi,-0x8(%rbp)
    0.00 :   4a9c:   mov    %rsi,-0x10(%rbp)
    0.00 :   4aa0:   mov    %rdx,-0x18(%rbp)
    0.00 :   4aa4:   mov    -0x10(%rbp),%rax
    0.00 :   4aa8:   mov    %rax,%rdi
    0.00 :   4aab:   call   5d78 <int& std::forward<int&>(std::remove_reference<int&>::type&)>
    9.31 :   4ab0:   mov    (%rax),%edx
   15.85 :   4ab2:   mov    -0x8(%rbp),%rax
    0.00 :   4ab6:   mov    %edx,(%rax)
    4.65 :   4ab8:   mov    -0x18(%rbp),%rax
    0.00 :   4abc:   mov    %rax,%rdi
    0.00 :   4abf:   call   5d8a <float& std::forward<float&>(std::remove_reference<float&>::type&)>
    0.00 :   4ac4:   movss  (%rax),%xmm0
   57.27 :   4ac8:   mov    -0x8(%rbp),%rax
    0.00 :   4acc:   movss  %xmm0,0x4(%rax)
    8.48 :   4ad1:   nop
    0.00 :   4ad2:   leave
    0.00 :   4ad3:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (23 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012e9b0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4>:
    0.00 :   12e9b0: endbr64
    0.00 :   12e9b4: push   %rbp
    0.00 :   12e9b5: mov    %rsp,%rbp
    0.00 :   12e9b8: push   %r15
    0.00 :   12e9ba: mov    %rdx,%r15
    0.00 :   12e9bd: push   %r14
    0.00 :   12e9bf: mov    %r9,%r14
    0.00 :   12e9c2: push   %r13
    0.00 :   12e9c4: mov    %rsi,%r13
    0.00 :   12e9c7: push   %r12
    0.00 :   12e9c9: push   %rbx
    0.00 :   12e9ca: mov    %rcx,%rbx
   13.55 :   12e9cd: sub    $0x48,%rsp
    0.00 :   12e9d1: mov    %rdi,-0x60(%rbp)
    0.00 :   12e9d5: lea    0xd0(%rcx),%rdi
    0.00 :   12e9dc: mov    %r8d,-0x50(%rbp)
    0.00 :   12e9e0: mov    %fs:0x28,%rax
    0.00 :   12e9e9: mov    %rax,-0x38(%rbp)
    0.00 :   12e9ed: xor    %eax,%eax
    4.56 :   12e9ef: call   12b240 <std::__numpunct_cache<char>::_M_cache(std::locale const&)@@GLIBCXX_3.4+0x4f0>
    4.56 :   12e9f4: mov    0x18(%rbx),%r11d
    0.00 :   12e9f8: mov    %rax,%r12
    0.00 :   12e9fb: lea    0x4a(%rax),%rdx
    0.00 :   12e9ff: mov    %rsp,%rax
    0.00 :   12ea02: cmp    %rax,%rsp
    4.54 :   12ea05: je     12ea1c <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x6c>
    0.00 :   12ea07: sub    $0x1000,%rsp
    0.00 :   12ea0e: orq    $0x0,0xff8(%rsp)
    0.00 :   12ea17: cmp    %rax,%rsp
    0.00 :   12ea1a: jne    12ea07 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x57>
    0.00 :   12ea1c: sub    $0x30,%rsp
    0.00 :   12ea20: orq    $0x0,0x28(%rsp)
    0.00 :   12ea26: mov    %r11d,%eax
    0.00 :   12ea29: lea    0xf(%rsp),%r9
    0.00 :   12ea2e: mov    %r14,%rsi
    0.00 :   12ea31: and    $0x4a,%eax
    0.00 :   12ea34: and    $0xfffffffffffffff0,%r9
    0.00 :   12ea38: cmp    $0x40,%eax
    0.00 :   12ea3b: mov    %eax,-0x64(%rbp)
    0.00 :   12ea3e: setne  %r10b
    0.00 :   12ea42: cmp    $0x8,%eax
    0.00 :   12ea45: setne  %al
    0.00 :   12ea48: and    %eax,%r10d
    0.00 :   12ea4b: test   %r14,%r14
    0.00 :   12ea4e: jg     12ea5a <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0xaa>
    0.00 :   12ea50: neg    %rsi
    0.00 :   12ea53: test   %r10b,%r10b
    0.00 :   12ea56: cmove  %r14,%rsi
    0.00 :   12ea5a: mov    %r10d,%r8d
    0.00 :   12ea5d: lea    0x28(%r9),%rdi
    0.00 :   12ea61: mov    %r11d,%ecx
    0.00 :   12ea64: mov    %r9,-0x58(%rbp)
    0.00 :   12ea68: and    $0x1,%r8d
    0.00 :   12ea6c: mov    %r10b,-0x49(%rbp)
    0.00 :   12ea70: mov    %r11d,-0x48(%rbp)
    0.00 :   12ea74: call   12e8f0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long double) const@@GLIBCXX_3.4+0x20>
    0.00 :   12ea79: mov    $0x28,%esi
    0.00 :   12ea7e: mov    -0x58(%rbp),%r9
    0.00 :   12ea82: mov    -0x48(%rbp),%r11d
    0.00 :   12ea86: sub    %eax,%esi
    0.00 :   12ea88: mov    %eax,-0x3c(%rbp)
    0.00 :   12ea8b: movzbl -0x49(%rbp),%r10d
    0.00 :   12ea90: movslq %esi,%rsi
    9.12 :   12ea93: add    %r9,%rsi
    0.00 :   12ea96: cmpb   $0x0,0x20(%r12)
    0.00 :   12ea9c: jne    12ebd0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x220>
    0.00 :   12eaa2: test   %r10b,%r10b
    0.00 :   12eaa5: je     12ec70 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x2c0>
    0.00 :   12eaab: test   %r14,%r14
    0.00 :   12eaae: js     12eb30 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x180>
    0.00 :   12eab4: and    $0x800,%r11d
    0.00 :   12eabb: je     12eacf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x11f>
    0.00 :   12eabd: add    $0x1,%eax
    0.00 :   12eac0: movzbl 0x4b(%r12),%edx
    0.00 :   12eac6: sub    $0x1,%rsi
    0.00 :   12eaca: mov    %eax,-0x3c(%rbp)
    0.00 :   12eacd: mov    %dl,(%rsi)
    0.00 :   12eacf: mov    0x10(%rbx),%rdx
    0.00 :   12ead3: movslq %eax,%r12
    9.12 :   12ead6: cmp    %rdx,%r12
    0.00 :   12ead9: jl     12eb4e <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x19e>
    0.00 :   12eadb: movq   $0x0,0x10(%rbx)
    0.00 :   12eae3: mov    %r15d,%ebx
    0.00 :   12eae6: test   %r15b,%r15b
    0.00 :   12eae9: jne    12eb03 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x153>
    0.00 :   12eaeb: mov    0x0(%r13),%rax
    0.00 :   12eaef: mov    %r12,%rdx
    0.00 :   12eaf2: mov    %r13,%rdi
    0.00 :   12eaf5: call   *0x60(%rax)
   45.43 :   12eaf8: cmp    %r12,%rax
    0.00 :   12eafb: mov    $0x1,%eax
    0.00 :   12eb00: cmovne %eax,%ebx
    0.00 :   12eb03: movzbl %bl,%edx
    0.00 :   12eb06: mov    -0x38(%rbp),%rax
    4.57 :   12eb0a: sub    %fs:0x28,%rax
    0.00 :   12eb13: jne    12ecea <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x33a>
    0.00 :   12eb19: lea    -0x28(%rbp),%rsp
    0.00 :   12eb1d: mov    %r13,%rax
    0.00 :   12eb20: pop    %rbx
    0.00 :   12eb21: pop    %r12
    0.00 :   12eb23: pop    %r13
    0.00 :   12eb25: pop    %r14
    0.00 :   12eb27: pop    %r15
    4.55 :   12eb29: pop    %rbp
    0.00 :   12eb2a: ret
    0.00 :   12eb2b: nopl   0x0(%rax,%rax,1)
    0.00 :   12eb30: movzbl 0x4a(%r12),%edx
    0.00 :   12eb36: add    $0x1,%eax
    0.00 :   12eb39: sub    $0x1,%rsi
    0.00 :   12eb3d: movslq %eax,%r12
    0.00 :   12eb40: mov    %eax,-0x3c(%rbp)
    0.00 :   12eb43: mov    %dl,(%rsi)
    0.00 :   12eb45: mov    0x10(%rbx),%rdx
    0.00 :   12eb49: cmp    %rdx,%r12
    0.00 :   12eb4c: jge    12eadb <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x12b>
    0.00 :   12eb4e: lea    0x17(%rdx),%rax
    0.00 :   12eb52: mov    %rsp,%rdi
    0.00 :   12eb55: mov    %rax,%rcx
    0.00 :   12eb58: and    $0xfffffffffffff000,%rax
    0.00 :   12eb5e: sub    %rax,%rdi
    0.00 :   12eb61: and    $0xfffffffffffffff0,%rcx
    0.00 :   12eb65: cmp    %rdi,%rsp
    0.00 :   12eb68: je     12eb7f <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x1cf>
    0.00 :   12eb6a: sub    $0x1000,%rsp
    0.00 :   12eb71: orq    $0x0,0xff8(%rsp)
    0.00 :   12eb7a: cmp    %rdi,%rsp
    0.00 :   12eb7d: jne    12eb6a <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x1ba>
    0.00 :   12eb7f: and    $0xfff,%ecx
    0.00 :   12eb85: sub    %rcx,%rsp
    0.00 :   12eb88: test   %rcx,%rcx
    0.00 :   12eb8b: jne    12ecb8 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x308>
    0.00 :   12eb91: lea    0xf(%rsp),%r14
    0.00 :   12eb96: lea    -0x3c(%rbp),%rcx
    0.00 :   12eb9a: sub    $0x8,%rsp
    0.00 :   12eb9e: mov    %rsi,%r9
    0.00 :   12eba1: movsbl -0x50(%rbp),%eax
    0.00 :   12eba5: and    $0xfffffffffffffff0,%r14
    0.00 :   12eba9: mov    -0x60(%rbp),%rdi
    0.00 :   12ebad: push   %rcx
    0.00 :   12ebae: mov    %r14,%r8
    0.00 :   12ebb1: mov    %rbx,%rcx
    0.00 :   12ebb4: mov    %eax,%esi
    0.00 :   12ebb6: call   a05c0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_pad(char, long, std::ios_base&, char*, char const*, int&) const@plt>
    0.00 :   12ebbb: pop    %rax
    0.00 :   12ebbc: movslq -0x3c(%rbp),%r12
    0.00 :   12ebc0: mov    %r14,%rsi
    0.00 :   12ebc3: pop    %rdx
    0.00 :   12ebc4: jmp    12eadb <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x12b>
    0.00 :   12ebc9: nopl   0x0(%rax)
    0.00 :   12ebd0: add    $0x1,%eax
    0.00 :   12ebd3: mov    %rsp,%rcx
    0.00 :   12ebd6: cltq
    0.00 :   12ebd8: lea    0x17(%rax,%rax,1),%rax
    0.00 :   12ebdd: mov    %rax,%rdx
    0.00 :   12ebe0: and    $0xfffffffffffff000,%rax
    0.00 :   12ebe6: sub    %rax,%rcx
    0.00 :   12ebe9: and    $0xfffffffffffffff0,%rdx
    0.00 :   12ebed: cmp    %rcx,%rsp
    0.00 :   12ebf0: je     12ec07 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x257>
    0.00 :   12ebf2: sub    $0x1000,%rsp
    0.00 :   12ebf9: orq    $0x0,0xff8(%rsp)
    0.00 :   12ec02: cmp    %rcx,%rsp
    0.00 :   12ec05: jne    12ebf2 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x242>
    0.00 :   12ec07: and    $0xfff,%edx
    0.00 :   12ec0d: sub    %rdx,%rsp
    0.00 :   12ec10: test   %rdx,%rdx
    0.00 :   12ec13: jne    12ecc8 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x318>
    0.00 :   12ec19: lea    -0x3c(%rbp),%rdi
    0.00 :   12ec1d: mov    0x10(%r12),%rax
    0.00 :   12ec22: mov    %r11d,-0x58(%rbp)
    0.00 :   12ec26: mov    %rbx,%r8
    0.00 :   12ec29: lea    0xf(%rsp),%r9
    0.00 :   12ec2e: mov    %r10b,-0x49(%rbp)
    0.00 :   12ec32: movsbl 0x49(%r12),%ecx
    0.00 :   12ec38: mov    0x18(%r12),%rdx
    0.00 :   12ec3d: push   %rdi
    0.00 :   12ec3e: and    $0xfffffffffffffff0,%r9
    0.00 :   12ec42: push   %rsi
    0.00 :   12ec43: mov    -0x60(%rbp),%rdi
    0.00 :   12ec47: mov    %rax,%rsi
    0.00 :   12ec4a: add    $0x2,%r9
    0.00 :   12ec4e: mov    %r9,-0x48(%rbp)
    0.00 :   12ec52: call   9fb00 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_group_int(char const*, unsigned long, char, std::ios_base&, char*, char*, int&) const@plt>
    0.00 :   12ec57: pop    %rcx
    0.00 :   12ec58: mov    -0x3c(%rbp),%eax
    0.00 :   12ec5b: pop    %rsi
    0.00 :   12ec5c: mov    -0x58(%rbp),%r11d
    0.00 :   12ec60: mov    -0x48(%rbp),%rsi
    0.00 :   12ec64: movzbl -0x49(%rbp),%r10d
    0.00 :   12ec69: jmp    12eaa2 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0xf2>
    0.00 :   12ec6e: xchg   %ax,%ax
    0.00 :   12ec70: test   $0x200,%r11d
    0.00 :   12ec77: je     12eacf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x11f>
    0.00 :   12ec7d: test   %r14,%r14
    0.00 :   12ec80: je     12eacf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x11f>
    0.00 :   12ec86: cmpl   $0x40,-0x64(%rbp)
    0.00 :   12ec8a: je     12ecd3 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x323>
    0.00 :   12ec8c: shr    $0xe,%r11d
    0.00 :   12ec90: add    $0x2,%eax
    0.00 :   12ec93: sub    $0x2,%rsi
    0.00 :   12ec97: and    $0x1,%r11d
    0.00 :   12ec9b: movzbl 0x4c(%r12,%r11,1),%edx
    0.00 :   12eca1: mov    %eax,-0x3c(%rbp)
    0.00 :   12eca4: mov    %dl,0x1(%rsi)
    0.00 :   12eca7: movzbl 0x4e(%r12),%edx
    0.00 :   12ecad: mov    %dl,(%rsi)
    0.00 :   12ecaf: jmp    12eacf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x11f>
    0.00 :   12ecb4: nopl   0x0(%rax)
    0.00 :   12ecb8: orq    $0x0,-0x8(%rsp,%rcx,1)
    0.00 :   12ecbe: jmp    12eb91 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x1e1>
    0.00 :   12ecc3: nopl   0x0(%rax,%rax,1)
    0.00 :   12ecc8: orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   12ecce: jmp    12ec19 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x269>
    0.00 :   12ecd3: movzbl 0x4e(%r12),%edx
    0.00 :   12ecd9: add    $0x1,%eax
    0.00 :   12ecdc: sub    $0x1,%rsi
    0.00 :   12ece0: mov    %eax,-0x3c(%rbp)
    0.00 :   12ece3: mov    %dl,(%rsi)
    0.00 :   12ece5: jmp    12eacf <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0x11f>
    0.00 :   12ecea: call   a0ef0 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (21 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003f48 <std::__detail::_Hash_node_base::_Hash_node_base()>:
    0.00 :   3f48:   endbr64
    0.00 :   3f4c:   push   %rbp
    0.00 :   3f4d:   mov    %rsp,%rbp
    0.00 :   3f50:   mov    %rdi,-0x8(%rbp)
    0.00 :   3f54:   mov    -0x8(%rbp),%rax
   41.86 :   3f58:   movq   $0x0,(%rax)
   58.14 :   3f5f:   nop
    0.00 :   3f60:   pop    %rbp
    0.00 :   3f61:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (21 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000068be <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>:
    4.90 :   68be:   endbr64
    0.00 :   68c2:   push   %rbp
    0.00 :   68c3:   mov    %rsp,%rbp
    9.74 :   68c6:   push   %rbx
    0.00 :   68c7:   sub    $0x28,%rsp
    0.00 :   68cb:   mov    %rdi,-0x18(%rbp)
    4.39 :   68cf:   mov    %rsi,-0x20(%rbp)
    0.00 :   68d3:   mov    %rdx,-0x28(%rbp)
    0.00 :   68d7:   mov    -0x28(%rbp),%rax
    4.86 :   68db:   mov    %rax,%rdi
    4.88 :   68de:   call   68ac <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    4.89 :   68e3:   mov    (%rax),%ebx
   48.24 :   68e5:   mov    -0x20(%rbp),%rax
    0.00 :   68e9:   mov    %rax,%rsi
    0.00 :   68ec:   mov    $0x4,%edi
    0.00 :   68f1:   call   3f09 <operator new(unsigned long, void*)>
    0.00 :   68f6:   mov    %ebx,(%rax)
    8.35 :   68f8:   nop
    9.75 :   68f9:   mov    -0x8(%rbp),%rbx
    0.00 :   68fd:   leave
    0.00 :   68fe:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (22 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000120880 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4>:
    0.00 :   120880: endbr64
    0.00 :   120884: push   %r13
    0.00 :   120886: push   %r12
    0.00 :   120888: push   %rbp
    4.59 :   120889: mov    %rdi,%rbp
    4.62 :   12088c: push   %rbx
    0.00 :   12088d: mov    %rsi,%rbx
    4.57 :   120890: sub    $0x8,%rsp
    4.31 :   120894: mov    (%rsi),%rax
    0.00 :   120897: movb   $0x0,(%rdi)
    0.00 :   12089a: mov    -0x18(%rax),%rdi
    0.00 :   12089e: add    %rsi,%rdi
    0.00 :   1208a1: mov    0x20(%rdi),%esi
    0.00 :   1208a4: test   %esi,%esi
    0.00 :   1208a6: jne    1208db <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x5b>
    0.00 :   1208a8: mov    0xd8(%rdi),%rax
    0.00 :   1208af: mov    %edx,%r12d
    4.39 :   1208b2: test   %rax,%rax
    0.00 :   1208b5: je     1208f0 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x70>
    0.00 :   1208b7: mov    %rax,%rdi
    0.00 :   1208ba: call   a0770 <std::ostream::flush()@plt>
    0.00 :   1208bf: mov    (%rbx),%rax
    0.00 :   1208c2: mov    -0x18(%rax),%rdi
    0.00 :   1208c6: add    %rbx,%rdi
    0.00 :   1208c9: test   %r12b,%r12b
    0.00 :   1208cc: jne    1208d4 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x54>
    0.00 :   1208ce: testb  $0x10,0x19(%rdi)
    0.00 :   1208d2: jne    120910 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x90>
    0.00 :   1208d4: mov    0x20(%rdi),%esi
    4.92 :   1208d7: test   %esi,%esi
    0.00 :   1208d9: je     1208fa <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x7a>
    0.00 :   1208db: add    $0x8,%rsp
    0.00 :   1208df: or     $0x4,%esi
    0.00 :   1208e2: pop    %rbx
    0.00 :   1208e3: pop    %rbp
    0.00 :   1208e4: pop    %r12
    0.00 :   1208e6: pop    %r13
    0.00 :   1208e8: jmp    a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   1208ed: nopl   (%rax)
    0.00 :   1208f0: test   %dl,%dl
    0.00 :   1208f2: jne    1208fa <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x7a>
    0.00 :   1208f4: testb  $0x10,0x19(%rdi)
    0.00 :   1208f8: jne    120910 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x90>
    0.00 :   1208fa: movb   $0x1,0x0(%rbp)
    0.00 :   1208fe: add    $0x8,%rsp
    4.88 :   120902: pop    %rbx
    0.00 :   120903: pop    %rbp
    0.00 :   120904: pop    %r12
    0.00 :   120906: pop    %r13
    0.00 :   120908: ret
    0.00 :   120909: nopl   0x0(%rax)
    0.00 :   120910: mov    0xe8(%rdi),%r12
    0.00 :   120917: mov    0x10(%r12),%rax
    4.74 :   12091c: cmp    0x18(%r12),%rax
    4.85 :   120921: jae    1209cc <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x14c>
    0.00 :   120927: mov    0xf0(%rdi),%r13
    0.00 :   12092e: movzbl (%rax),%eax
   13.60 :   120931: test   %r13,%r13
    0.00 :   120934: je     1209f7 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x177>
    0.00 :   12093a: mov    0x30(%r13),%rdx
    0.00 :   12093e: movzbl %al,%eax
    4.57 :   120941: testb  $0x20,0x1(%rdx,%rax,2)
   31.01 :   120946: je     120976 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xf6>
    0.00 :   120948: mov    0x10(%r12),%rax
    0.00 :   12094d: mov    0x18(%r12),%rdx
    0.00 :   120952: cmp    %rdx,%rax
    0.00 :   120955: jae    120988 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x108>
    0.00 :   120957: add    $0x1,%rax
    0.00 :   12095b: mov    %rax,0x10(%r12)
    0.00 :   120960: cmp    %rdx,%rax
    0.00 :   120963: jae    1209a8 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x128>
    0.00 :   120965: movzbl (%rax),%eax
    0.00 :   120968: mov    0x30(%r13),%rdx
    8.95 :   12096c: movzbl %al,%eax
    0.00 :   12096f: testb  $0x20,0x1(%rdx,%rax,2)
    0.00 :   120974: jne    120948 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xc8>
    0.00 :   120976: mov    (%rbx),%rax
    0.00 :   120979: add    -0x18(%rax),%rbx
    0.00 :   12097d: mov    %rbx,%rdi
    0.00 :   120980: jmp    1208d4 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x54>
    0.00 :   120985: nopl   (%rax)
    0.00 :   120988: mov    (%r12),%rax
    0.00 :   12098c: mov    %r12,%rdi
    0.00 :   12098f: call   *0x50(%rax)
    0.00 :   120992: cmp    $0xffffffff,%eax
    0.00 :   120995: je     1209b7 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x137>
    0.00 :   120997: mov    0x10(%r12),%rax
    0.00 :   12099c: mov    0x18(%r12),%rdx
    0.00 :   1209a1: jmp    120960 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xe0>
    0.00 :   1209a3: nopl   0x0(%rax,%rax,1)
    0.00 :   1209a8: mov    (%r12),%rax
    0.00 :   1209ac: mov    %r12,%rdi
    0.00 :   1209af: call   *0x48(%rax)
    0.00 :   1209b2: cmp    $0xffffffff,%eax
    0.00 :   1209b5: jne    12093a <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xba>
    0.00 :   1209b7: mov    (%rbx),%rax
    0.00 :   1209ba: add    -0x18(%rax),%rbx
    0.00 :   1209be: mov    %rbx,%rdi
    0.00 :   1209c1: mov    0x20(%rdi),%esi
    0.00 :   1209c4: or     $0x2,%esi
    0.00 :   1209c7: jmp    1208db <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x5b>
    0.00 :   1209cc: mov    (%r12),%rax
    0.00 :   1209d0: mov    %r12,%rdi
    0.00 :   1209d3: call   *0x48(%rax)
    0.00 :   1209d6: mov    (%rbx),%rdx
    0.00 :   1209d9: mov    -0x18(%rdx),%rdi
    0.00 :   1209dd: add    %rbx,%rdi
    0.00 :   1209e0: mov    0xf0(%rdi),%r13
    0.00 :   1209e7: test   %r13,%r13
    0.00 :   1209ea: je     1209f7 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x177>
    0.00 :   1209ec: cmp    $0xffffffff,%eax
    0.00 :   1209ef: jne    12093a <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xba>
    0.00 :   1209f5: jmp    1209c1 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x141>
    0.00 :   1209f7: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   1209fc: endbr64
    0.00 :   120a00: mov    %rax,%rdi
    0.00 :   120a03: mov    %rdx,%rax
    0.00 :   120a06: sub    $0x1,%rax
    0.00 :   120a0a: jne    120a2a <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x1aa>
    0.00 :   120a0c: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   120a11: mov    (%rbx),%rax
    0.00 :   120a14: mov    $0x1,%esi
    0.00 :   120a19: add    -0x18(%rax),%rbx
    0.00 :   120a1d: mov    %rbx,%rdi
    0.00 :   120a20: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   120a25: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   120a2a: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   120a2f: mov    (%rbx),%rax
    0.00 :   120a32: mov    $0x1,%esi
    0.00 :   120a37: mov    -0x18(%rax),%rdi
    0.00 :   120a3b: add    %rbx,%rdi
    0.00 :   120a3e: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   120a43: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120a48: jmp    120976 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0xf6>
    0.00 :   120a4d: endbr64
    0.00 :   120a51: mov    %rax,%rbx
    0.00 :   120a54: jmp    120a5f <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x1df>
    0.00 :   120a56: endbr64
    0.00 :   120a5a: mov    %rax,%rbx
    0.00 :   120a5d: jmp    120a6c <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x1ec>
    0.00 :   120a5f: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120a64: mov    %rbx,%rdi
    0.00 :   120a67: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   120a6c: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120a71: mov    %rbx,%rdi
    0.00 :   120a74: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (17 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000039ac0 <__uselocale>:
    0.00 :   39ac0:  endbr64
    0.00 :   39ac4:  mov    0x1e04a5(%rip),%rcx        # 219f70 <_DYNAMIC+0x3b0>
    0.00 :   39acb:  lea    0x1e1aae(%rip),%rdx        # 21b580 <_nl_global_locale>
    0.00 :   39ad2:  mov    %fs:(%rcx),%rax
   13.93 :   39ad6:  test   %rdi,%rdi
    0.00 :   39ad9:  je     39b14 <__uselocale+0x54>
    0.00 :   39adb:  cmp    $0xffffffffffffffff,%rdi
    0.00 :   39adf:  cmove  %rdx,%rdi
    0.00 :   39ae3:  mov    %rdi,%fs:(%rcx)
    7.04 :   39ae7:  mov    0x1e030a(%rip),%rcx        # 219df8 <_DYNAMIC+0x238>
    0.00 :   39aee:  mov    0x68(%rdi),%rsi
   14.15 :   39af2:  mov    %rsi,%fs:(%rcx)
   14.09 :   39af6:  mov    0x1e02eb(%rip),%rcx        # 219de8 <_DYNAMIC+0x228>
    0.00 :   39afd:  mov    0x70(%rdi),%rsi
   14.27 :   39b01:  mov    %rsi,%fs:(%rcx)
   17.62 :   39b05:  mov    0x1e04ec(%rip),%rcx        # 219ff8 <_DYNAMIC+0x438>
    0.00 :   39b0c:  mov    0x78(%rdi),%rsi
    4.89 :   39b10:  mov    %rsi,%fs:(%rcx)
   14.02 :   39b14:  cmp    %rdx,%rax
    0.00 :   39b17:  mov    $0xffffffffffffffff,%rdx
    0.00 :   39b1e:  cmove  %rdx,%rax
    0.00 :   39b22:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006828 <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator->() const>:
    0.00 :   6828:   endbr64
    0.00 :   682c:   push   %rbp
    0.00 :   682d:   mov    %rsp,%rbp
   10.45 :   6830:   sub    $0x10,%rsp
   10.44 :   6834:   mov    %rdi,-0x8(%rbp)
    0.00 :   6838:   mov    -0x8(%rbp),%rax
   20.95 :   683c:   mov    (%rax),%rax
   40.41 :   683f:   add    $0x8,%rax
    0.00 :   6843:   mov    %rax,%rdi
    0.00 :   6846:   call   688e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr()>
    2.03 :   684b:   leave
   15.73 :   684c:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000873e <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    5.26 :   873e:   endbr64
    0.00 :   8742:   push   %rbp
    5.25 :   8743:   mov    %rsp,%rbp
    0.00 :   8746:   sub    $0x20,%rsp
    0.00 :   874a:   mov    %rdi,-0x18(%rbp)
    0.00 :   874e:   mov    %rsi,-0x20(%rbp)
   10.55 :   8752:   mov    -0x20(%rbp),%rax
   15.80 :   8756:   mov    %rax,%rdi
    0.00 :   8759:   call   96e9 <std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, float>, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>
    0.00 :   875e:   mov    %rax,-0x8(%rbp)
    0.00 :   8762:   mov    -0x18(%rbp),%rax
    0.00 :   8766:   mov    %rax,%rdi
    0.00 :   8769:   call   86f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>
    0.00 :   876e:   mov    %rax,%rcx
   15.78 :   8771:   mov    -0x8(%rbp),%rax
    0.00 :   8775:   mov    $0x1,%edx
    0.00 :   877a:   mov    %rax,%rsi
    0.00 :   877d:   mov    %rcx,%rdi
    0.00 :   8780:   call   89da <std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>
   26.33 :   8785:   nop
    0.00 :   8786:   leave
   21.03 :   8787:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000070d0 <bool __gnu_cxx::operator!=<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>:
    0.00 :   70d0:   endbr64
    0.00 :   70d4:   push   %rbp
    0.00 :   70d5:   mov    %rsp,%rbp
    5.27 :   70d8:   push   %rbx
    0.00 :   70d9:   sub    $0x18,%rsp
    0.00 :   70dd:   mov    %rdi,-0x18(%rbp)
    0.00 :   70e1:   mov    %rsi,-0x20(%rbp)
    0.00 :   70e5:   mov    -0x18(%rbp),%rax
    5.29 :   70e9:   mov    %rax,%rdi
    0.00 :   70ec:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   70f1:   mov    (%rax),%rbx
   36.73 :   70f4:   mov    -0x20(%rbp),%rax
    0.00 :   70f8:   mov    %rax,%rdi
    0.00 :   70fb:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   7100:   mov    (%rax),%rax
   36.91 :   7103:   cmp    %rax,%rbx
    0.00 :   7106:   setne  %al
   10.54 :   7109:   mov    -0x8(%rbp),%rbx
    5.28 :   710d:   leave
    0.00 :   710e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a024 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::pair<int, float>, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(std::pair<int, float>&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>:
    0.00 :   a024:   endbr64
    0.00 :   a028:   push   %rbp
   15.92 :   a029:   mov    %rsp,%rbp
    0.00 :   a02c:   sub    $0x20,%rsp
    0.00 :   a030:   mov    %rdi,-0x8(%rbp)
    0.00 :   a034:   mov    %rsi,-0x10(%rbp)
    0.00 :   a038:   mov    %rdx,-0x18(%rbp)
    5.33 :   a03c:   lea    -0x18(%rbp),%rax
    0.00 :   a040:   mov    %rax,%rdi
   10.68 :   a043:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   a048:   mov    %rax,%rdx
    0.00 :   a04b:   mov    -0x10(%rbp),%rax
    0.00 :   a04f:   mov    %rdx,%rsi
    0.00 :   a052:   mov    %rax,%rdi
    0.00 :   a055:   call   9f0c <bool std::operator< <int, float>(std::pair<int, float> const&, std::pair<int, float> const&)>
   20.62 :   a05a:   leave
   47.45 :   a05b:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000048000 <str_to_mpn.constprop.0>:
    0.00 :   48000:  push   %r15
    0.00 :   48002:  push   %r14
    0.00 :   48004:  push   %r13
    5.15 :   48006:  push   %r12
    0.00 :   48008:  push   %rbp
    0.00 :   48009:  push   %rbx
    0.00 :   4800a:  sub    $0x18,%rsp
    0.00 :   4800e:  movq   $0x0,(%rcx)
    0.00 :   48015:  mov    %r8,0x8(%rsp)
    0.00 :   4801a:  mov    0x50(%rsp),%r8
   10.64 :   4801f:  test   %esi,%esi
    0.00 :   48021:  jle    48280 <str_to_mpn.constprop.0+0x280>
    0.00 :   48027:  mov    %rdx,%r15
    0.00 :   4802a:  mov    %rdi,%r12
    0.00 :   4802d:  mov    %esi,%ebp
    0.00 :   4802f:  mov    %rcx,%r14
    0.00 :   48032:  movabs $0x8ac7230489e80000,%r13
    0.00 :   4803c:  xor    %ebx,%ebx
    0.00 :   4803e:  xor    %edx,%edx
    5.38 :   48040:  movsbq (%r12),%rax
   26.53 :   48045:  lea    -0x30(%rax),%esi
    4.89 :   48048:  cmp    $0x9,%sil
   10.62 :   4804c:  jbe    48064 <str_to_mpn.constprop.0+0x64>
    0.00 :   4804e:  test   %r8,%r8
    0.00 :   48051:  je     4805c <str_to_mpn.constprop.0+0x5c>
    0.00 :   48053:  cmp    (%r8),%al
    0.00 :   48056:  je     48130 <str_to_mpn.constprop.0+0x130>
    0.00 :   4805c:  add    %r9,%r12
    0.00 :   4805f:  movsbq (%r12),%rax
    0.00 :   48064:  lea    (%rbx,%rbx,4),%rsi
    0.00 :   48068:  add    $0x1,%r12
    0.00 :   4806c:  add    $0x1,%edx
    0.00 :   4806f:  lea    -0x30(%rax,%rsi,2),%rbx
   10.67 :   48074:  sub    $0x1,%ebp
    0.00 :   48077:  je     48168 <str_to_mpn.constprop.0+0x168>
    0.00 :   4807d:  cmp    $0x13,%edx
    5.04 :   48080:  jne    48040 <str_to_mpn.constprop.0+0x40>
    0.00 :   48082:  mov    (%r14),%rdx
    0.00 :   48085:  test   %rdx,%rdx
    0.00 :   48088:  jne    480a0 <str_to_mpn.constprop.0+0xa0>
    0.00 :   4808a:  mov    %rbx,(%r15)
    0.00 :   4808d:  xor    %ebx,%ebx
    0.00 :   4808f:  movq   $0x1,(%r14)
    0.00 :   48096:  jmp    48040 <str_to_mpn.constprop.0+0x40>
    0.00 :   48098:  nopl   0x0(%rax,%rax,1)
    0.00 :   480a0:  mov    %r15,%rsi
    0.00 :   480a3:  mov    %r15,%rdi
    0.00 :   480a6:  mov    %r13,%rcx
    0.00 :   480a9:  mov    %r8,0x50(%rsp)
    0.00 :   480ae:  mov    %r9,(%rsp)
    0.00 :   480b2:  call   55420 <__mpn_mul_1>
    0.00 :   480b7:  mov    (%r14),%rsi
    0.00 :   480ba:  add    %rbx,(%r15)
    0.00 :   480bd:  mov    (%rsp),%r9
    0.00 :   480c1:  mov    0x50(%rsp),%r8
    0.00 :   480c6:  mov    %rax,%rdi
    0.00 :   480c9:  jae    480f8 <str_to_mpn.constprop.0+0xf8>
    0.00 :   480cb:  sub    $0x1,%rsi
    0.00 :   480cf:  xor    %eax,%eax
    0.00 :   480d1:  jmp    480ef <str_to_mpn.constprop.0+0xef>
    0.00 :   480d3:  nopl   0x0(%rax,%rax,1)
    0.00 :   480d8:  mov    0x8(%r15,%rax,8),%rcx
    0.00 :   480dd:  lea    0x1(%rcx),%rdx
    0.00 :   480e1:  mov    %rdx,0x8(%r15,%rax,8)
    0.00 :   480e6:  add    $0x1,%rax
    0.00 :   480ea:  test   %rdx,%rdx
    0.00 :   480ed:  jne    480f8 <str_to_mpn.constprop.0+0xf8>
    0.00 :   480ef:  cmp    %rax,%rsi
    0.00 :   480f2:  jne    480d8 <str_to_mpn.constprop.0+0xd8>
    0.00 :   480f4:  add    $0x1,%rdi
    0.00 :   480f8:  test   %rdi,%rdi
    0.00 :   480fb:  je     48120 <str_to_mpn.constprop.0+0x120>
    0.00 :   480fd:  mov    (%r14),%rax
    0.00 :   48100:  cmp    $0x9,%rax
    0.00 :   48104:  jg     48261 <str_to_mpn.constprop.0+0x261>
    0.00 :   4810a:  mov    %rdi,(%r15,%rax,8)
    0.00 :   4810e:  xor    %ebx,%ebx
    0.00 :   48110:  xor    %edx,%edx
    0.00 :   48112:  addq   $0x1,(%r14)
    0.00 :   48116:  jmp    48040 <str_to_mpn.constprop.0+0x40>
    0.00 :   4811b:  nopl   0x0(%rax,%rax,1)
    0.00 :   48120:  xor    %ebx,%ebx
    0.00 :   48122:  xor    %edx,%edx
    0.00 :   48124:  jmp    48040 <str_to_mpn.constprop.0+0x40>
    0.00 :   48129:  nopl   0x0(%rax)
    0.00 :   48130:  movzbl 0x1(%r8),%esi
    0.00 :   48135:  mov    $0x1,%eax
    0.00 :   4813a:  test   %sil,%sil
    0.00 :   4813d:  je     48158 <str_to_mpn.constprop.0+0x158>
    0.00 :   4813f:  nop
    0.00 :   48140:  cmp    %sil,(%r12,%rax,1)
    0.00 :   48144:  jne    4805c <str_to_mpn.constprop.0+0x5c>
    0.00 :   4814a:  add    $0x1,%rax
    0.00 :   4814e:  movzbl (%r8,%rax,1),%esi
    0.00 :   48153:  test   %sil,%sil
    0.00 :   48156:  jne    48140 <str_to_mpn.constprop.0+0x140>
    0.00 :   48158:  add    %rax,%r12
    0.00 :   4815b:  movsbq (%r12),%rax
    0.00 :   48160:  jmp    48064 <str_to_mpn.constprop.0+0x64>
    0.00 :   48165:  nopl   (%rax)
    0.00 :   48168:  mov    0x8(%rsp),%rdi
    0.00 :   4816d:  mov    (%rdi),%rcx
    0.00 :   48170:  test   %rcx,%rcx
    0.00 :   48173:  jle    48183 <str_to_mpn.constprop.0+0x183>
    0.00 :   48175:  mov    $0x13,%eax
    0.00 :   4817a:  sub    %edx,%eax
    0.00 :   4817c:  cltq
    0.00 :   4817e:  cmp    %rax,%rcx
    0.00 :   48181:  jle    481b8 <str_to_mpn.constprop.0+0x1b8>
    0.00 :   48183:  lea    0x184b16(%rip),%rax        # 1ccca0 <_tens_in_limb>
    0.00 :   4818a:  movslq %edx,%rdx
    0.00 :   4818d:  mov    (%rax,%rdx,8),%rcx
    5.33 :   48191:  mov    (%r14),%rdx
    0.00 :   48194:  test   %rdx,%rdx
    0.00 :   48197:  jne    481dd <str_to_mpn.constprop.0+0x1dd>
    0.00 :   48199:  mov    %rbx,(%r15)
    0.00 :   4819c:  movq   $0x1,(%r14)
    0.00 :   481a3:  add    $0x18,%rsp
    0.00 :   481a7:  mov    %r12,%rax
    0.00 :   481aa:  pop    %rbx
   15.75 :   481ab:  pop    %rbp
    0.00 :   481ac:  pop    %r12
    0.00 :   481ae:  pop    %r13
    0.00 :   481b0:  pop    %r14
    0.00 :   481b2:  pop    %r15
    0.00 :   481b4:  ret
    0.00 :   481b5:  nopl   (%rax)
    0.00 :   481b8:  lea    0x184ae1(%rip),%rax        # 1ccca0 <_tens_in_limb>
    0.00 :   481bf:  movslq %edx,%rdx
    0.00 :   481c2:  movq   $0x0,(%rdi)
    0.00 :   481c9:  add    %rcx,%rdx
    0.00 :   481cc:  imul   (%rax,%rcx,8),%rbx
    0.00 :   481d1:  mov    (%rax,%rdx,8),%rcx
    0.00 :   481d5:  mov    (%r14),%rdx
    0.00 :   481d8:  test   %rdx,%rdx
    0.00 :   481db:  je     48199 <str_to_mpn.constprop.0+0x199>
    0.00 :   481dd:  mov    %r15,%rsi
    0.00 :   481e0:  mov    %r15,%rdi
    0.00 :   481e3:  call   55420 <__mpn_mul_1>
    0.00 :   481e8:  mov    (%r14),%rsi
    0.00 :   481eb:  add    %rbx,(%r15)
    0.00 :   481ee:  jae    48220 <str_to_mpn.constprop.0+0x220>
    0.00 :   481f0:  sub    $0x1,%rsi
    0.00 :   481f4:  xor    %edx,%edx
    0.00 :   481f6:  jmp    48217 <str_to_mpn.constprop.0+0x217>
    0.00 :   481f8:  nopl   0x0(%rax,%rax,1)
    0.00 :   48200:  mov    0x8(%r15,%rdx,8),%rdi
    0.00 :   48205:  lea    0x1(%rdi),%rcx
    0.00 :   48209:  mov    %rcx,0x8(%r15,%rdx,8)
    0.00 :   4820e:  add    $0x1,%rdx
    0.00 :   48212:  test   %rcx,%rcx
    0.00 :   48215:  jne    48220 <str_to_mpn.constprop.0+0x220>
    0.00 :   48217:  cmp    %rdx,%rsi
    0.00 :   4821a:  jne    48200 <str_to_mpn.constprop.0+0x200>
    0.00 :   4821c:  add    $0x1,%rax
    0.00 :   48220:  test   %rax,%rax
    0.00 :   48223:  je     481a3 <str_to_mpn.constprop.0+0x1a3>
    0.00 :   48229:  mov    (%r14),%rdx
    0.00 :   4822c:  cmp    $0x9,%rdx
    0.00 :   48230:  jg     48242 <str_to_mpn.constprop.0+0x242>
    0.00 :   48232:  lea    0x1(%rdx),%rcx
    0.00 :   48236:  mov    %rcx,(%r14)
    0.00 :   48239:  mov    %rax,(%r15,%rdx,8)
    0.00 :   4823d:  jmp    481a3 <str_to_mpn.constprop.0+0x1a3>
    0.00 :   48242:  lea    0x195387(%rip),%rcx        # 1dd5d0 <__PRETTY_FUNCTION__.2>
    0.00 :   48249:  mov    $0x1c4,%edx
    0.00 :   4824e:  lea    0x19040a(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   48255:  lea    0x19034d(%rip),%rdi        # 1d85a9 <not_available+0x4b>
    0.00 :   4825c:  call   39e50 <__assert_fail>
    0.00 :   48261:  lea    0x195368(%rip),%rcx        # 1dd5d0 <__PRETTY_FUNCTION__.2>
    0.00 :   48268:  mov    $0x18c,%edx
    0.00 :   4826d:  lea    0x1903eb(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   48274:  lea    0x19032e(%rip),%rdi        # 1d85a9 <not_available+0x4b>
    0.00 :   4827b:  call   39e50 <__assert_fail>
    0.00 :   48280:  lea    0x195349(%rip),%rcx        # 1dd5d0 <__PRETTY_FUNCTION__.2>
    0.00 :   48287:  mov    $0x17b,%edx
    0.00 :   4828c:  lea    0x1903cc(%rip),%rsi        # 1d865f <not_available+0x101>
    0.00 :   48293:  lea    0x190304(%rip),%rdi        # 1d859e <not_available+0x40>
    0.00 :   4829a:  call   39e50 <__assert_fail>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (19 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a66a <std::pair<int const, float>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)>:
    0.00 :   a66a:   endbr64
    0.00 :   a66e:   push   %rbp
    0.00 :   a66f:   mov    %rsp,%rbp
    0.00 :   a672:   sub    $0x20,%rsp
    0.00 :   a676:   mov    %rdi,-0x8(%rbp)
    0.00 :   a67a:   mov    %rsi,-0x10(%rbp)
    0.00 :   a67e:   mov    %rdx,-0x18(%rbp)
   16.11 :   a682:   mov    -0x10(%rbp),%rax
    0.00 :   a686:   mov    %rax,%rdi
    0.00 :   a689:   call   a962 <std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&)>
    5.40 :   a68e:   mov    %rax,%rdi
   10.76 :   a691:   call   68ac <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
   10.75 :   a696:   mov    (%rax),%edx
   35.41 :   a698:   mov    -0x8(%rbp),%rax
    0.00 :   a69c:   mov    %edx,(%rax)
    5.36 :   a69e:   mov    -0x8(%rbp),%rax
    0.00 :   a6a2:   pxor   %xmm0,%xmm0
    0.00 :   a6a6:   movss  %xmm0,0x4(%rax)
   10.79 :   a6ab:   nop
    0.00 :   a6ac:   leave
    5.42 :   a6ad:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (18 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005dae <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::__normal_iterator(std::pair<int, float>* const&)>:
    0.00 :   5dae:   endbr64
    0.00 :   5db2:   push   %rbp
    0.00 :   5db3:   mov    %rsp,%rbp
    0.00 :   5db6:   mov    %rdi,-0x8(%rbp)
    0.00 :   5dba:   mov    %rsi,-0x10(%rbp)
    5.56 :   5dbe:   mov    -0x10(%rbp),%rax
   16.63 :   5dc2:   mov    (%rax),%rdx
   16.49 :   5dc5:   mov    -0x8(%rbp),%rax
    0.00 :   5dc9:   mov    %rdx,(%rax)
   11.10 :   5dcc:   nop
   44.67 :   5dcd:   pop    %rbp
    5.55 :   5dce:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (18 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a89e <std::pair<int, float>::swap(std::pair<int, float>&)>:
    0.00 :   a89e:   endbr64
    0.00 :   a8a2:   push   %rbp
    0.00 :   a8a3:   mov    %rsp,%rbp
    0.00 :   a8a6:   sub    $0x10,%rsp
    5.61 :   a8aa:   mov    %rdi,-0x8(%rbp)
    0.00 :   a8ae:   mov    %rsi,-0x10(%rbp)
    0.00 :   a8b2:   mov    -0x10(%rbp),%rdx
   22.37 :   a8b6:   mov    -0x8(%rbp),%rax
   27.98 :   a8ba:   mov    %rdx,%rsi
    0.00 :   a8bd:   mov    %rax,%rdi
    0.00 :   a8c0:   call   aa8a <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<int> >, std::is_move_constructible<int>, std::is_move_assignable<int> >::value, void>::type std::swap<int>(int&, int&)>
   16.29 :   a8c5:   mov    -0x10(%rbp),%rax
    0.00 :   a8c9:   lea    0x4(%rax),%rdx
    0.00 :   a8cd:   mov    -0x8(%rbp),%rax
    0.00 :   a8d1:   add    $0x4,%rax
    5.60 :   a8d5:   mov    %rdx,%rsi
    0.00 :   a8d8:   mov    %rax,%rdi
    0.00 :   a8db:   call   ab0f <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<float> >, std::is_move_constructible<float>, std::is_move_assignable<float> >::value, void>::type std::swap<float>(float&, float&)>
    0.00 :   a8e0:   nop
   22.16 :   a8e1:   leave
    0.00 :   a8e2:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (17 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009a18 <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>:
    0.00 :   9a18:   endbr64
    0.00 :   9a1c:   push   %rbp
    5.83 :   9a1d:   mov    %rsp,%rbp
   11.87 :   9a20:   sub    $0x20,%rsp
    0.00 :   9a24:   mov    %rdi,-0x8(%rbp)
    5.92 :   9a28:   mov    %rsi,-0x10(%rbp)
    5.91 :   9a2c:   mov    %rdx,-0x18(%rbp)
    0.00 :   9a30:   mov    -0x18(%rbp),%rax
   35.50 :   9a34:   shl    $0x4,%rax
    0.00 :   9a38:   mov    %rax,%rdx
    0.00 :   9a3b:   mov    -0x10(%rbp),%rax
   17.25 :   9a3f:   mov    %rdx,%rsi
    0.00 :   9a42:   mov    %rax,%rdi
    0.00 :   9a45:   call   2460 <operator delete(void*, unsigned long)@plt>
    5.91 :   9a4a:   leave
   11.81 :   9a4b:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (13 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000054d10 <__mpn_lshift>:
    0.00 :   54d10:  endbr64
    8.52 :   54d14:  lea    -0x8(%rdi,%rdx,8),%rdi
   22.55 :   54d19:  lea    -0x8(%rsi,%rdx,8),%rsi
    0.00 :   54d1e:  mov    %edx,%eax
    0.00 :   54d20:  and    $0x3,%eax
    0.00 :   54d23:  jne    54d43 <__mpn_lshift+0x33>
    0.00 :   54d25:  mov    (%rsi),%r10
    0.00 :   54d28:  mov    -0x8(%rsi),%r11
    0.00 :   54d2c:  xor    %eax,%eax
    0.00 :   54d2e:  shld   %cl,%r10,%rax
    0.00 :   54d32:  mov    -0x10(%rsi),%r8
    0.00 :   54d36:  lea    0x18(%rdi),%rdi
    0.00 :   54d3a:  sub    $0x4,%rdx
    0.00 :   54d3e:  jmp    54df2 <__mpn_lshift+0xe2>
    0.00 :   54d43:  cmp    $0x2,%eax
    0.00 :   54d46:  jae    54d70 <__mpn_lshift+0x60>
    0.00 :   54d48:  mov    (%rsi),%r9
   14.21 :   54d4b:  xor    %eax,%eax
    0.00 :   54d4d:  shld   %cl,%r9,%rax
   46.00 :   54d51:  sub    $0x2,%rdx
    0.00 :   54d55:  jb     54d69 <__mpn_lshift+0x59>
    0.00 :   54d57:  mov    -0x8(%rsi),%r10
    0.00 :   54d5b:  mov    -0x10(%rsi),%r11
    0.00 :   54d5f:  lea    -0x8(%rsi),%rsi
    0.00 :   54d63:  lea    0x10(%rdi),%rdi
    0.00 :   54d67:  jmp    54de6 <__mpn_lshift+0xd6>
    0.00 :   54d69:  shl    %cl,%r9
    0.00 :   54d6c:  mov    %r9,(%rdi)
    8.72 :   54d6f:  ret
    0.00 :   54d70:  jne    54db0 <__mpn_lshift+0xa0>
    0.00 :   54d72:  mov    (%rsi),%r8
    0.00 :   54d75:  mov    -0x8(%rsi),%r9
    0.00 :   54d79:  xor    %eax,%eax
    0.00 :   54d7b:  shld   %cl,%r8,%rax
    0.00 :   54d7f:  sub    $0x3,%rdx
    0.00 :   54d83:  jb     54d93 <__mpn_lshift+0x83>
    0.00 :   54d85:  mov    -0x10(%rsi),%r10
    0.00 :   54d89:  lea    -0x10(%rsi),%rsi
    0.00 :   54d8d:  lea    0x8(%rdi),%rdi
    0.00 :   54d91:  jmp    54dda <__mpn_lshift+0xca>
    0.00 :   54d93:  shld   %cl,%r9,%r8
    0.00 :   54d97:  mov    %r8,(%rdi)
    0.00 :   54d9a:  shl    %cl,%r9
    0.00 :   54d9d:  mov    %r9,-0x8(%rdi)
    0.00 :   54da1:  ret
    0.00 :   54da2:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   54dad:  nopl   (%rax)
    0.00 :   54db0:  mov    (%rsi),%r11
    0.00 :   54db3:  mov    -0x8(%rsi),%r8
    0.00 :   54db7:  xor    %eax,%eax
    0.00 :   54db9:  shld   %cl,%r11,%rax
    0.00 :   54dbd:  mov    -0x10(%rsi),%r9
    0.00 :   54dc1:  lea    -0x18(%rsi),%rsi
    0.00 :   54dc5:  sub    $0x4,%rdx
    0.00 :   54dc9:  jb     54e0c <__mpn_lshift+0xfc>
    0.00 :   54dcb:  nopl   0x0(%rax,%rax,1)
    0.00 :   54dd0:  shld   %cl,%r8,%r11
    0.00 :   54dd4:  mov    (%rsi),%r10
    0.00 :   54dd7:  mov    %r11,(%rdi)
    0.00 :   54dda:  shld   %cl,%r9,%r8
    0.00 :   54dde:  mov    -0x8(%rsi),%r11
    0.00 :   54de2:  mov    %r8,-0x8(%rdi)
    0.00 :   54de6:  shld   %cl,%r10,%r9
    0.00 :   54dea:  mov    -0x10(%rsi),%r8
    0.00 :   54dee:  mov    %r9,-0x10(%rdi)
    0.00 :   54df2:  shld   %cl,%r11,%r10
    0.00 :   54df6:  mov    -0x18(%rsi),%r9
    0.00 :   54dfa:  mov    %r10,-0x18(%rdi)
    0.00 :   54dfe:  add    $0xffffffffffffffe0,%rsi
    0.00 :   54e02:  lea    -0x20(%rdi),%rdi
    0.00 :   54e06:  sub    $0x4,%rdx
    0.00 :   54e0a:  jae    54dd0 <__mpn_lshift+0xc0>
    0.00 :   54e0c:  shld   %cl,%r8,%r11
    0.00 :   54e10:  mov    %r11,(%rdi)
    0.00 :   54e13:  shld   %cl,%r9,%r8
    0.00 :   54e17:  mov    %r8,-0x8(%rdi)
    0.00 :   54e1b:  shl    %cl,%r9
    0.00 :   54e1e:  mov    %r9,-0x10(%rdi)
    0.00 :   54e22:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b76a <bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&)>:
    0.00 :   b76a:   endbr64
    0.00 :   b76e:   push   %rbp
    0.00 :   b76f:   mov    %rsp,%rbp
    0.00 :   b772:   push   %rbx
    5.69 :   b773:   sub    $0x18,%rsp
    0.00 :   b777:   mov    %rdi,-0x18(%rbp)
    5.68 :   b77b:   mov    %rsi,-0x20(%rbp)
    0.00 :   b77f:   mov    -0x18(%rbp),%rax
    0.00 :   b783:   mov    %rax,%rdi
    0.00 :   b786:   call   b960 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
   11.45 :   b78b:   mov    (%rax),%rbx
   44.36 :   b78e:   mov    -0x20(%rbp),%rax
    0.00 :   b792:   mov    %rax,%rdi
    0.00 :   b795:   call   b960 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
    0.00 :   b79a:   mov    (%rax),%rax
    4.20 :   b79d:   cmp    %rax,%rbx
    5.72 :   b7a0:   setne  %al
    5.68 :   b7a3:   mov    -0x8(%rbp),%rbx
   17.23 :   b7a7:   leave
    0.00 :   b7a8:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (17 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003fb6 <std::__detail::_Prime_rehash_policy::_M_state() const>:
    6.12 :   3fb6:   endbr64
    0.00 :   3fba:   push   %rbp
    6.09 :   3fbb:   mov    %rsp,%rbp
    0.00 :   3fbe:   mov    %rdi,-0x8(%rbp)
    0.00 :   3fc2:   mov    -0x8(%rbp),%rax
   45.00 :   3fc6:   mov    0x8(%rax),%rax
   42.79 :   3fca:   pop    %rbp
    0.00 :   3fcb:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004a68 <std::vector<float, std::allocator<float> >::operator[](unsigned long)>:
    6.26 :   4a68:   endbr64
    0.00 :   4a6c:   push   %rbp
   18.74 :   4a6d:   mov    %rsp,%rbp
    0.00 :   4a70:   mov    %rdi,-0x8(%rbp)
    0.00 :   4a74:   mov    %rsi,-0x10(%rbp)
    0.00 :   4a78:   mov    -0x8(%rbp),%rax
   18.67 :   4a7c:   mov    (%rax),%rdx
   50.08 :   4a7f:   mov    -0x10(%rbp),%rax
    0.00 :   4a83:   shl    $0x2,%rax
    0.00 :   4a87:   add    %rdx,%rax
    6.24 :   4a8a:   pop    %rbp
    0.00 :   4a8b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009820 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&, unsigned long) const>:
    0.00 :   9820:   endbr64
    0.00 :   9824:   push   %rbp
    0.00 :   9825:   mov    %rsp,%rbp
    0.00 :   9828:   sub    $0x30,%rsp
    0.00 :   982c:   mov    %rdi,-0x18(%rbp)
    6.28 :   9830:   mov    %rsi,-0x20(%rbp)
    6.24 :   9834:   mov    %rdx,-0x28(%rbp)
    0.00 :   9838:   mov    %fs:0x28,%rax
    0.00 :   9841:   mov    %rax,-0x8(%rbp)
   12.45 :   9845:   xor    %eax,%eax
    6.26 :   9847:   mov    -0x20(%rbp),%rax
    6.23 :   984b:   mov    %rax,%rdi
    0.00 :   984e:   call   97b0 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v() const>
    6.24 :   9853:   mov    %rax,%rdx
    6.22 :   9856:   lea    -0x9(%rbp),%rax
    0.00 :   985a:   mov    %rdx,%rsi
    0.00 :   985d:   mov    %rax,%rdi
    0.00 :   9860:   call   97ce <decltype ((get<0>)((forward<std::pair<int const, float> const&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<int const, float> const&>(std::pair<int const, float> const&) const>
    6.23 :   9865:   mov    %rax,%rdx
    0.00 :   9868:   mov    -0x18(%rbp),%rax
    6.24 :   986c:   mov    %rdx,%rsi
    0.00 :   986f:   mov    %rax,%rdi
    0.00 :   9872:   call   6564 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(int const&) const>
    6.27 :   9877:   mov    %rax,%rcx
    0.00 :   987a:   mov    -0x28(%rbp),%rdx
   12.50 :   987e:   lea    -0xa(%rbp),%rax
   12.55 :   9882:   mov    %rcx,%rsi
    0.00 :   9885:   mov    %rax,%rdi
    6.28 :   9888:   call   3f62 <std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const>
    0.00 :   988d:   mov    -0x8(%rbp),%rdx
    0.00 :   9891:   sub    %fs:0x28,%rdx
    0.00 :   989a:   je     98a1 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&, unsigned long) const+0x81>
    0.00 :   989c:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   98a1:   leave
    0.00 :   98a2:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007d2a <std::__detail::_Node_iterator_base<std::pair<int const, float>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
   12.55 :   7d2a:   endbr64
    0.00 :   7d2e:   push   %rbp
    0.00 :   7d2f:   mov    %rsp,%rbp
    6.25 :   7d32:   mov    %rdi,-0x8(%rbp)
    0.00 :   7d36:   mov    %rsi,-0x10(%rbp)
   12.52 :   7d3a:   mov    -0x8(%rbp),%rax
   12.51 :   7d3e:   mov    -0x10(%rbp),%rdx
    6.23 :   7d42:   mov    %rdx,(%rax)
   12.53 :   7d45:   nop
   25.02 :   7d46:   pop    %rbp
   12.41 :   7d47:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a4e <std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&)>:
    0.00 :   7a4e:   endbr64
    0.00 :   7a52:   push   %rbp
   18.81 :   7a53:   mov    %rsp,%rbp
    0.00 :   7a56:   mov    %rdi,-0x8(%rbp)
   13.05 :   7a5a:   mov    -0x8(%rbp),%rax
   61.95 :   7a5e:   pop    %rbp
    6.20 :   7a5f:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (15 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>:
    0.00 :   9f61:   endbr64
    6.60 :   9f65:   push   %rbp
    6.60 :   9f66:   mov    %rsp,%rbp
    8.62 :   9f69:   push   %rbx
    0.00 :   9f6a:   sub    $0x18,%rsp
    0.00 :   9f6e:   mov    %rdi,-0x18(%rbp)
    0.00 :   9f72:   mov    %rsi,-0x20(%rbp)
    0.00 :   9f76:   lea    -0x20(%rbp),%rax
    0.00 :   9f7a:   mov    %rax,%rdi
   19.52 :   9f7d:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   9f82:   mov    %rax,%rbx
    0.00 :   9f85:   lea    -0x18(%rbp),%rax
    0.00 :   9f89:   mov    %rax,%rdi
    0.00 :   9f8c:   call   9382 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const>
    0.00 :   9f91:   mov    %rbx,%rsi
    0.00 :   9f94:   mov    %rax,%rdi
    0.00 :   9f97:   call   a538 <std::enable_if<std::__and_<std::__is_swappable<int>, std::__is_swappable<float> >::value, void>::type std::swap<int, float>(std::pair<int, float>&, std::pair<int, float>&)>
   26.04 :   9f9c:   nop
    0.00 :   9f9d:   mov    -0x8(%rbp),%rbx
   32.61 :   9fa1:   leave
    0.00 :   9fa2:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (15 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000088da <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&) const>:
   13.36 :   88da:   endbr64
    0.00 :   88de:   push   %rbp
    0.00 :   88df:   mov    %rsp,%rbp
    0.00 :   88e2:   sub    $0x10,%rsp
    0.00 :   88e6:   mov    %rdi,-0x8(%rbp)
    0.00 :   88ea:   mov    %rsi,-0x10(%rbp)
   13.27 :   88ee:   mov    -0x8(%rbp),%rax
   20.08 :   88f2:   mov    0x8(%rax),%rdx
   26.65 :   88f6:   mov    -0x10(%rbp),%rcx
    6.60 :   88fa:   mov    -0x8(%rbp),%rax
    6.71 :   88fe:   mov    %rcx,%rsi
    0.00 :   8901:   mov    %rax,%rdi
    0.00 :   8904:   call   9820 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&, unsigned long) const>
   13.32 :   8909:   leave
    0.00 :   890a:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (14 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000bb910 <std::codecvt<char, char, __mbstate_t>::do_always_noconv() const@@GLIBCXX_3.4>:
   64.64 :   bb910:  endbr64
   35.36 :   bb914:  mov    $0x1,%eax
    0.00 :   bb919:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (12 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000c07b0 <std::locale::facet::_S_get_c_locale()@@GLIBCXX_3.4>:
    0.00 :   c07b0:  endbr64
    0.00 :   c07b4:  sub    $0x8,%rsp
   16.60 :   c07b8:  lea    -0x56f(%rip),%rsi        # c0250 <std::locale::facet::~facet()@@GLIBCXX_3.4+0x30>
    0.00 :   c07bf:  lea    0x168fb6(%rip),%rdi        # 22977c <std::cin@@GLIBCXX_3.4+0x11c>
    6.81 :   c07c6:  call   9f630 <pthread_once@plt>
   57.23 :   c07cb:  lea    0x168fae(%rip),%rax        # 229780 <std::cin@@GLIBCXX_3.4+0x120>
    0.00 :   c07d2:  mov    (%rax),%rax
   19.36 :   c07d5:  add    $0x8,%rsp
    0.00 :   c07d9:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (16 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b7aa <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++()>:
    0.00 :   b7aa:   endbr64
    0.00 :   b7ae:   push   %rbp
    0.00 :   b7af:   mov    %rsp,%rbp
    0.00 :   b7b2:   mov    %rdi,-0x8(%rbp)
    0.00 :   b7b6:   mov    -0x8(%rbp),%rax
   22.21 :   b7ba:   mov    (%rax),%rax
   32.16 :   b7bd:   lea    0x4(%rax),%rdx
   26.31 :   b7c1:   mov    -0x8(%rbp),%rax
    0.00 :   b7c5:   mov    %rdx,(%rax)
   12.73 :   b7c8:   mov    -0x8(%rbp),%rax
    6.59 :   b7cc:   pop    %rbp
    0.00 :   b7cd:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (13 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a0cb <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>:
    7.73 :   a0cb:   endbr64
    0.00 :   a0cf:   push   %rbp
   15.35 :   a0d0:   mov    %rsp,%rbp
    7.72 :   a0d3:   sub    $0x10,%rsp
    7.69 :   a0d7:   mov    %rdi,-0x8(%rbp)
    0.00 :   a0db:   mov    -0x8(%rbp),%rax
   61.51 :   a0df:   mov    %rax,%rdi
    0.00 :   a0e2:   call   a628 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>
    0.00 :   a0e7:   leave
    0.00 :   a0e8:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (13 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000089da <std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>:
    0.00 :   89da:   endbr64
    0.00 :   89de:   push   %rbp
    0.00 :   89df:   mov    %rsp,%rbp
    7.64 :   89e2:   sub    $0x20,%rsp
    0.00 :   89e6:   mov    %rdi,-0x8(%rbp)
    0.00 :   89ea:   mov    %rsi,-0x10(%rbp)
    0.00 :   89ee:   mov    %rdx,-0x18(%rbp)
    7.71 :   89f2:   mov    -0x18(%rbp),%rdx
   15.36 :   89f6:   mov    -0x10(%rbp),%rcx
   23.14 :   89fa:   mov    -0x8(%rbp),%rax
    0.00 :   89fe:   mov    %rcx,%rsi
    0.00 :   8a01:   mov    %rax,%rdi
    0.00 :   8a04:   call   9a18 <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::deallocate(std::__detail::_Hash_node<std::pair<int const, float>, false>*, unsigned long)>
   23.09 :   8a09:   nop
    0.00 :   8a0a:   leave
   23.05 :   8a0b:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000054e30 <__mpn_rshift>:
    0.00 :   54e30:  endbr64
    0.00 :   54e34:  mov    %edx,%eax
    0.00 :   54e36:  and    $0x3,%eax
    0.00 :   54e39:  jne    54e5d <__mpn_rshift+0x2d>
    0.00 :   54e3b:  mov    (%rsi),%r10
    0.00 :   54e3e:  mov    0x8(%rsi),%r11
    0.00 :   54e42:  xor    %eax,%eax
    0.00 :   54e44:  shrd   %cl,%r10,%rax
    0.00 :   54e48:  mov    0x10(%rsi),%r8
    0.00 :   54e4c:  lea    0x8(%rsi),%rsi
    0.00 :   54e50:  lea    -0x18(%rdi),%rdi
    0.00 :   54e54:  sub    $0x4,%rdx
    0.00 :   54e58:  jmp    54f02 <__mpn_rshift+0xd2>
    0.00 :   54e5d:  cmp    $0x2,%eax
   11.06 :   54e60:  jae    54e8a <__mpn_rshift+0x5a>
    0.00 :   54e62:  mov    (%rsi),%r9
    0.00 :   54e65:  xor    %eax,%eax
    0.00 :   54e67:  shrd   %cl,%r9,%rax
    0.00 :   54e6b:  sub    $0x2,%rdx
    0.00 :   54e6f:  jb     54e83 <__mpn_rshift+0x53>
    0.00 :   54e71:  mov    0x8(%rsi),%r10
    0.00 :   54e75:  mov    0x10(%rsi),%r11
    0.00 :   54e79:  lea    0x10(%rsi),%rsi
    0.00 :   54e7d:  lea    -0x10(%rdi),%rdi
    0.00 :   54e81:  jmp    54ef6 <__mpn_rshift+0xc6>
    0.00 :   54e83:  shr    %cl,%r9
    0.00 :   54e86:  mov    %r9,(%rdi)
    0.00 :   54e89:  ret
    0.00 :   54e8a:  jne    54ec0 <__mpn_rshift+0x90>
    0.00 :   54e8c:  mov    (%rsi),%r8
    0.00 :   54e8f:  mov    0x8(%rsi),%r9
    0.00 :   54e93:  xor    %eax,%eax
    0.00 :   54e95:  shrd   %cl,%r8,%rax
   37.33 :   54e99:  sub    $0x3,%rdx
    0.00 :   54e9d:  jb     54ead <__mpn_rshift+0x7d>
    0.00 :   54e9f:  mov    0x10(%rsi),%r10
    0.00 :   54ea3:  lea    0x18(%rsi),%rsi
    0.00 :   54ea7:  lea    -0x8(%rdi),%rdi
    0.00 :   54eab:  jmp    54eeb <__mpn_rshift+0xbb>
    0.00 :   54ead:  shrd   %cl,%r9,%r8
   51.61 :   54eb1:  mov    %r8,(%rdi)
    0.00 :   54eb4:  shr    %cl,%r9
    0.00 :   54eb7:  mov    %r9,0x8(%rdi)
    0.00 :   54ebb:  ret
    0.00 :   54ebc:  nopl   0x0(%rax)
    0.00 :   54ec0:  mov    (%rsi),%r11
    0.00 :   54ec3:  mov    0x8(%rsi),%r8
    0.00 :   54ec7:  xor    %eax,%eax
    0.00 :   54ec9:  shrd   %cl,%r11,%rax
    0.00 :   54ecd:  mov    0x10(%rsi),%r9
    0.00 :   54ed1:  lea    0x20(%rsi),%rsi
    0.00 :   54ed5:  sub    $0x4,%rdx
    0.00 :   54ed9:  jb     54f1c <__mpn_rshift+0xec>
    0.00 :   54edb:  nopl   0x0(%rax,%rax,1)
    0.00 :   54ee0:  shrd   %cl,%r8,%r11
    0.00 :   54ee4:  mov    -0x8(%rsi),%r10
    0.00 :   54ee8:  mov    %r11,(%rdi)
    0.00 :   54eeb:  shrd   %cl,%r9,%r8
    0.00 :   54eef:  mov    (%rsi),%r11
    0.00 :   54ef2:  mov    %r8,0x8(%rdi)
    0.00 :   54ef6:  shrd   %cl,%r10,%r9
    0.00 :   54efa:  mov    0x8(%rsi),%r8
    0.00 :   54efe:  mov    %r9,0x10(%rdi)
    0.00 :   54f02:  shrd   %cl,%r11,%r10
    0.00 :   54f06:  mov    0x10(%rsi),%r9
    0.00 :   54f0a:  mov    %r10,0x18(%rdi)
    0.00 :   54f0e:  add    $0x20,%rsi
    0.00 :   54f12:  lea    0x20(%rdi),%rdi
    0.00 :   54f16:  sub    $0x4,%rdx
    0.00 :   54f1a:  jae    54ee0 <__mpn_rshift+0xb0>
    0.00 :   54f1c:  shrd   %cl,%r8,%r11
    0.00 :   54f20:  mov    %r11,(%rdi)
    0.00 :   54f23:  shrd   %cl,%r9,%r8
    0.00 :   54f27:  mov    %r8,0x8(%rdi)
    0.00 :   54f2b:  shr    %cl,%r9
    0.00 :   54f2e:  mov    %r9,0x10(%rdi)
    0.00 :   54f32:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (13 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000064cc <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    0.00 :   64cc:   endbr64
    0.00 :   64d0:   push   %rbp
    0.00 :   64d1:   mov    %rsp,%rbp
    0.00 :   64d4:   sub    $0x20,%rsp
    0.00 :   64d8:   mov    %rdi,-0x18(%rbp)
    0.00 :   64dc:   mov    %rsi,-0x20(%rbp)
    0.00 :   64e0:   jmp    650d <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, float>, false>*)+0x41>
    0.00 :   64e2:   mov    -0x20(%rbp),%rax
    0.00 :   64e6:   mov    %rax,-0x8(%rbp)
    0.00 :   64ea:   mov    -0x20(%rbp),%rax
    0.00 :   64ee:   mov    %rax,%rdi
    0.00 :   64f1:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    7.83 :   64f6:   mov    %rax,-0x20(%rbp)
    0.00 :   64fa:   mov    -0x8(%rbp),%rdx
   15.60 :   64fe:   mov    -0x18(%rbp),%rax
    0.00 :   6502:   mov    %rdx,%rsi
    7.82 :   6505:   mov    %rax,%rdi
    7.81 :   6508:   call   7778 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
   30.57 :   650d:   cmpq   $0x0,-0x20(%rbp)
   30.37 :   6512:   jne    64e2 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<int const, float>, false>*)+0x16>
    0.00 :   6514:   nop
    0.00 :   6515:   nop
    0.00 :   6516:   leave
    0.00 :   6517:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (12 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007778 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    8.38 :   7778:   endbr64
    0.00 :   777c:   push   %rbp
    8.36 :   777d:   mov    %rsp,%rbp
    8.23 :   7780:   push   %rbx
    0.00 :   7781:   sub    $0x18,%rsp
    8.33 :   7785:   mov    %rdi,-0x18(%rbp)
    0.00 :   7789:   mov    %rsi,-0x20(%rbp)
    0.00 :   778d:   mov    -0x20(%rbp),%rax
    0.00 :   7791:   add    $0x8,%rax
    0.00 :   7795:   mov    %rax,%rdi
    0.00 :   7798:   call   688e <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_valptr()>
    0.00 :   779d:   mov    %rax,%rbx
    0.00 :   77a0:   mov    -0x18(%rbp),%rax
    0.00 :   77a4:   mov    %rax,%rdi
    0.00 :   77a7:   call   86f6 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_node_allocator()>
    0.00 :   77ac:   mov    %rbx,%rsi
    8.45 :   77af:   mov    %rax,%rdi
    0.00 :   77b2:   call   8714 <void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::destroy<std::pair<int const, float> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::pair<int const, float>*)>
    8.19 :   77b7:   mov    -0x20(%rbp),%rdx
    0.00 :   77bb:   mov    -0x18(%rbp),%rax
    8.35 :   77bf:   mov    %rdx,%rsi
    0.00 :   77c2:   mov    %rax,%rdi
    0.00 :   77c5:   call   873e <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    8.33 :   77ca:   nop
    0.00 :   77cb:   mov    -0x8(%rbp),%rbx
   33.38 :   77cf:   leave
    0.00 :   77d0:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (12 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a538 <std::enable_if<std::__and_<std::__is_swappable<int>, std::__is_swappable<float> >::value, void>::type std::swap<int, float>(std::pair<int, float>&, std::pair<int, float>&)>:
    0.00 :   a538:   endbr64
    8.34 :   a53c:   push   %rbp
    0.00 :   a53d:   mov    %rsp,%rbp
    0.00 :   a540:   sub    $0x10,%rsp
    0.00 :   a544:   mov    %rdi,-0x8(%rbp)
    0.00 :   a548:   mov    %rsi,-0x10(%rbp)
    0.00 :   a54c:   mov    -0x10(%rbp),%rdx
   16.68 :   a550:   mov    -0x8(%rbp),%rax
   24.99 :   a554:   mov    %rdx,%rsi
   25.01 :   a557:   mov    %rax,%rdi
    0.00 :   a55a:   call   a89e <std::pair<int, float>::swap(std::pair<int, float>&)>
   24.98 :   a55f:   nop
    0.00 :   a560:   leave
    0.00 :   a561:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (12 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000890c <std::_Head_base<0ul, int const&, false>::_Head_base(int const&)>:
    8.29 :   890c:   endbr64
    0.00 :   8910:   push   %rbp
    0.00 :   8911:   mov    %rsp,%rbp
    0.00 :   8914:   mov    %rdi,-0x8(%rbp)
    0.00 :   8918:   mov    %rsi,-0x10(%rbp)
   24.89 :   891c:   mov    -0x8(%rbp),%rax
    8.30 :   8920:   mov    -0x10(%rbp),%rdx
   24.70 :   8924:   mov    %rdx,(%rax)
   33.81 :   8927:   nop
    0.00 :   8928:   pop    %rbp
    0.00 :   8929:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (12 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008958 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__to_address<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    8.27 :   8958:   endbr64
    0.00 :   895c:   push   %rbp
    0.00 :   895d:   mov    %rsp,%rbp
    0.00 :   8960:   mov    %rdi,-0x8(%rbp)
    0.00 :   8964:   mov    -0x8(%rbp),%rax
   91.73 :   8968:   pop    %rbp
    0.00 :   8969:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (12 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000130950 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4>:
   16.19 :   130950: endbr64
    0.00 :   130954: push   %rbp
    0.00 :   130955: mov    %rsp,%rbp
    0.00 :   130958: push   %r15
    0.00 :   13095a: push   %r14
    0.00 :   13095c: lea    -0x48(%rbp),%r15
    0.00 :   130960: push   %r13
    0.00 :   130962: mov    %rcx,%r13
    0.00 :   130965: push   %r12
    0.00 :   130967: mov    %rsi,%r12
    0.00 :   13096a: mov    $0x20,%esi
    0.00 :   13096f: push   %rbx
    0.00 :   130970: mov    %rdx,%rbx
    0.00 :   130973: sub    $0x68,%rsp
    0.00 :   130977: mov    0x18(%rbp),%rax
    0.00 :   13097b: mov    %rdi,-0x70(%rbp)
   16.93 :   13097f: mov    %r15,%rdi
    0.00 :   130982: mov    0xf4bbf(%rip),%rdx        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   130989: mov    0x10(%rbp),%r14
    0.00 :   13098d: mov    %r8,-0x68(%rbp)
    0.00 :   130991: mov    %r9,-0x78(%rbp)
    0.00 :   130995: mov    %rax,-0x80(%rbp)
    0.00 :   130999: mov    %fs:0x28,%rax
    0.00 :   1309a2: mov    %rax,-0x38(%rbp)
    0.00 :   1309a6: xor    %eax,%eax
    0.00 :   1309a8: lea    0x18(%rdx),%rax
    0.00 :   1309ac: mov    %rax,-0x48(%rbp)
    0.00 :   1309b0: call   9eb00 <std::string::reserve(unsigned long)@plt>
    8.21 :   1309b5: push   %r15
    0.00 :   1309b7: mov    -0x78(%rbp),%r9
    0.00 :   1309bb: mov    %r13,%rcx
    0.00 :   1309be: mov    %r12,%rsi
    0.00 :   1309c1: mov    -0x68(%rbp),%r8
    0.00 :   1309c5: mov    -0x70(%rbp),%rdi
    0.00 :   1309c9: push   %r14
    0.00 :   1309cb: mov    %rbx,%rdx
    0.00 :   1309ce: call   a2220 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const@plt>
    0.00 :   1309d3: mov    %rax,%rcx
    0.00 :   1309d6: mov    %rdx,%r12
    0.00 :   1309d9: pop    %rax
    0.00 :   1309da: pop    %rdx
    0.00 :   1309db: movabs $0xffffffff00000000,%rdx
    0.00 :   1309e5: mov    %r12d,%eax
    0.00 :   1309e8: mov    %rcx,-0x60(%rbp)
    0.00 :   1309ec: and    %rdx,%rbx
    0.00 :   1309ef: mov    %r12,-0x58(%rbp)
    0.00 :   1309f3: or     %rax,%rbx
    0.00 :   1309f6: mov    %rcx,-0x70(%rbp)
    0.00 :   1309fa: mov    %rbx,-0x88(%rbp)
    0.00 :   130a01: mov    %rcx,-0x78(%rbp)
    0.00 :   130a05: call   a12c0 <std::locale::facet::_S_get_c_locale()@plt>
    0.00 :   130a0a: mov    -0x80(%rbp),%rsi
    0.00 :   130a0e: mov    -0x48(%rbp),%rdi
    0.00 :   130a12: mov    %rax,-0x40(%rbp)
    0.00 :   130a16: lea    -0x40(%rbp),%rax
    0.00 :   130a1a: mov    %rax,%rcx
    0.00 :   130a1d: mov    %r14,%rdx
    0.00 :   130a20: mov    %rax,-0x90(%rbp)
    0.00 :   130a27: call   a0180 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@plt>
    8.40 :   130a2c: cmp    $0xffffffff,%r12d
    0.00 :   130a30: sete   %bl
    0.00 :   130a33: cmpq   $0x0,-0x70(%rbp)
    0.00 :   130a38: setne  %al
    0.00 :   130a3b: and    %bl,%al
   16.59 :   130a3d: mov    %eax,%r12d
    0.00 :   130a40: jne    130ac0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x170>
    0.00 :   130a42: cmpl   $0xffffffff,-0x68(%rbp)
    0.00 :   130a46: sete   %al
    0.00 :   130a49: test   %r13,%r13
    0.00 :   130a4c: je     130a52 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x102>
    0.00 :   130a4e: test   %al,%al
    0.00 :   130a50: jne    130aa0 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x150>
    0.00 :   130a52: cmp    %bl,%al
    0.00 :   130a54: jne    130a5a <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x10a>
    0.00 :   130a56: orl    $0x2,(%r14)
    0.00 :   130a5a: mov    -0x48(%rbp),%rax
    0.00 :   130a5e: lea    -0x18(%rax),%rdi
    0.00 :   130a62: cmp    0xf4adf(%rip),%rdi        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   130a69: jne    130b00 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x1b0>
    0.00 :   130a6f: mov    -0x38(%rbp),%rax
    0.00 :   130a73: sub    %fs:0x28,%rax
    0.00 :   130a7c: jne    130b3c <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x1ec>
    0.00 :   130a82: mov    -0x78(%rbp),%rax
    0.00 :   130a86: mov    -0x88(%rbp),%rdx
    0.00 :   130a8d: lea    -0x28(%rbp),%rsp
    8.46 :   130a91: pop    %rbx
    0.00 :   130a92: pop    %r12
    0.00 :   130a94: pop    %r13
    0.00 :   130a96: pop    %r14
    0.00 :   130a98: pop    %r15
    0.00 :   130a9a: pop    %rbp
    0.00 :   130a9b: ret
    0.00 :   130a9c: nopl   0x0(%rax)
    0.00 :   130aa0: mov    0x18(%r13),%rsi
    0.00 :   130aa4: xor    %eax,%eax
    0.00 :   130aa6: cmp    %rsi,0x10(%r13)
    0.00 :   130aaa: jb     130a52 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x102>
    0.00 :   130aac: mov    0x0(%r13),%rax
    0.00 :   130ab0: mov    %r13,%rdi
    0.00 :   130ab3: call   *0x48(%rax)
    0.00 :   130ab6: cmp    $0xffffffff,%eax
    0.00 :   130ab9: sete   %al
    0.00 :   130abc: jmp    130a52 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x102>
    0.00 :   130abe: xchg   %ax,%ax
    8.47 :   130ac0: mov    -0x70(%rbp),%rax
    0.00 :   130ac4: xor    %ebx,%ebx
    0.00 :   130ac6: mov    0x18(%rax),%rsi
    0.00 :   130aca: cmp    %rsi,0x10(%rax)
    0.00 :   130ace: jb     130a42 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0xf2>
    0.00 :   130ad4: mov    %rax,%rsi
    0.00 :   130ad7: mov    (%rax),%rax
    0.00 :   130ada: mov    %rsi,%rdi
    0.00 :   130add: call   *0x48(%rax)
    0.00 :   130ae0: cmp    $0xffffffff,%eax
    0.00 :   130ae3: mov    $0x0,%eax
    0.00 :   130ae8: cmovne -0x70(%rbp),%rax
    0.00 :   130aed: cmove  %r12d,%ebx
    0.00 :   130af1: mov    %rax,-0x78(%rbp)
    0.00 :   130af5: jmp    130a42 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0xf2>
    0.00 :   130afa: nopw   0x0(%rax,%rax,1)
    0.00 :   130b00: mov    0xf47d9(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   130b07: cmpb   $0x0,(%rdx)
   16.75 :   130b0a: je     130b30 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x1e0>
    0.00 :   130b0c: mov    -0x8(%rax),%edx
    0.00 :   130b0f: lea    -0x1(%rdx),%ecx
    0.00 :   130b12: mov    %ecx,-0x8(%rax)
    0.00 :   130b15: test   %edx,%edx
    0.00 :   130b17: jg     130a6f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x11f>
    0.00 :   130b1d: mov    -0x90(%rbp),%rsi
    0.00 :   130b24: call   9e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
    0.00 :   130b29: jmp    130a6f <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x11f>
    0.00 :   130b2e: xchg   %ax,%ax
    0.00 :   130b30: mov    $0xffffffff,%edx
    0.00 :   130b35: lock xadd %edx,-0x8(%rax)
    0.00 :   130b3a: jmp    130b15 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const@@GLIBCXX_3.4+0x1c5>
    0.00 :   130b3c: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   130b41: endbr64
    0.00 :   130b45: mov    %rax,%rbx
    0.00 :   130b48: mov    %r15,%rdi
    0.00 :   130b4b: call   9f920 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    0.00 :   130b50: mov    %rbx,%rdi
    0.00 :   130b53: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (12 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012ecf0 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4>:
   83.04 :   12ecf0: endbr64
   16.96 :   12ecf4: movsbl %r8b,%r8d
    0.00 :   12ecf8: jmp    a0ae0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005739 <void std::allocator_traits<std::allocator<float> >::construct<float, float const&>(std::allocator<float>&, float*, float const&)>:
   27.26 :   5739:   endbr64
    0.00 :   573d:   push   %rbp
    0.00 :   573e:   mov    %rsp,%rbp
    0.00 :   5741:   sub    $0x20,%rsp
    9.15 :   5745:   mov    %rdi,-0x8(%rbp)
    0.00 :   5749:   mov    %rsi,-0x10(%rbp)
    0.00 :   574d:   mov    %rdx,-0x18(%rbp)
    0.00 :   5751:   mov    -0x18(%rbp),%rax
    9.08 :   5755:   mov    %rax,%rdi
    9.10 :   5758:   call   6b22 <float const& std::forward<float const&>(std::remove_reference<float const&>::type&)>
    0.00 :   575d:   mov    %rax,%rdx
    9.09 :   5760:   mov    -0x10(%rbp),%rcx
   18.15 :   5764:   mov    -0x8(%rbp),%rax
    0.00 :   5768:   mov    %rcx,%rsi
    0.00 :   576b:   mov    %rax,%rdi
    0.00 :   576e:   call   6b34 <void __gnu_cxx::new_allocator<float>::construct<float, float const&>(float*, float const&)>
    0.00 :   5773:   nop
    0.00 :   5774:   leave
   18.16 :   5775:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007152 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   7152:   endbr64
    0.00 :   7156:   push   %rbp
    0.00 :   7157:   mov    %rsp,%rbp
    0.00 :   715a:   sub    $0x30,%rsp
    0.00 :   715e:   mov    %rdi,-0x18(%rbp)
    9.10 :   7162:   mov    %rsi,-0x20(%rbp)
    0.00 :   7166:   mov    %rdx,-0x28(%rbp)
    0.00 :   716a:   mov    %fs:0x28,%rax
    0.00 :   7173:   mov    %rax,-0x8(%rbp)
    0.00 :   7177:   xor    %eax,%eax
    0.00 :   7179:   jmp    71d6 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x84>
    0.00 :   717b:   cmpq   $0x0,-0x28(%rbp)
    9.11 :   7180:   jne    719b <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x49>
    0.00 :   7182:   mov    -0x20(%rbp),%rdx
    0.00 :   7186:   mov    -0x20(%rbp),%rcx
    0.00 :   718a:   mov    -0x18(%rbp),%rax
    0.00 :   718e:   mov    %rcx,%rsi
    0.00 :   7191:   mov    %rax,%rdi
    0.00 :   7194:   call   804c <void std::__partial_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   7199:   jmp    71f4 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xa2>
    0.00 :   719b:   subq   $0x1,-0x28(%rbp)
    0.00 :   71a0:   mov    -0x20(%rbp),%rdx
    0.00 :   71a4:   mov    -0x18(%rbp),%rax
    0.00 :   71a8:   mov    %rdx,%rsi
    9.09 :   71ab:   mov    %rax,%rdi
    0.00 :   71ae:   call   8095 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   71b3:   mov    %rax,-0x10(%rbp)
    0.00 :   71b7:   mov    -0x28(%rbp),%rdx
    0.00 :   71bb:   mov    -0x20(%rbp),%rcx
    0.00 :   71bf:   mov    -0x10(%rbp),%rax
    9.12 :   71c3:   mov    %rcx,%rsi
    0.00 :   71c6:   mov    %rax,%rdi
    0.00 :   71c9:   call   7152 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   71ce:   mov    -0x10(%rbp),%rax
    0.00 :   71d2:   mov    %rax,-0x20(%rbp)
    0.00 :   71d6:   lea    -0x18(%rbp),%rdx
    0.00 :   71da:   lea    -0x20(%rbp),%rax
    0.00 :   71de:   mov    %rdx,%rsi
    0.00 :   71e1:   mov    %rax,%rdi
    0.00 :   71e4:   call   710f <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::difference_type __gnu_cxx::operator-<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   71e9:   cmp    $0x10,%rax
    9.12 :   71ed:   setg   %al
    0.00 :   71f0:   test   %al,%al
    9.09 :   71f2:   jne    717b <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0x29>
    0.00 :   71f4:   mov    -0x8(%rbp),%rax
   36.29 :   71f8:   sub    %fs:0x28,%rax
    9.09 :   7201:   je     7208 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)+0xb6>
    0.00 :   7203:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   7208:   leave
    0.00 :   7209:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a628 <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>:
    0.00 :   a628:   endbr64
    0.00 :   a62c:   push   %rbp
    0.00 :   a62d:   mov    %rsp,%rbp
    0.00 :   a630:   mov    %rdi,-0x8(%rbp)
    0.00 :   a634:   mov    -0x8(%rbp),%rax
  100.00 :   a638:   pop    %rbp
    0.00 :   a639:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006b22 <float const& std::forward<float const&>(std::remove_reference<float const&>::type&)>:
    9.10 :   6b22:   endbr64
    0.00 :   6b26:   push   %rbp
    9.01 :   6b27:   mov    %rsp,%rbp
   18.23 :   6b2a:   mov    %rdi,-0x8(%rbp)
    0.00 :   6b2e:   mov    -0x8(%rbp),%rax
   54.55 :   6b32:   pop    %rbp
    9.10 :   6b33:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a17e <std::pair<int const, float>::pair<int const&>(std::piecewise_construct_t, std::tuple<int const&>, std::tuple<>)>:
    9.09 :   a17e:   endbr64
    9.15 :   a182:   push   %rbp
    0.00 :   a183:   mov    %rsp,%rbp
    0.00 :   a186:   sub    $0x20,%rsp
    9.14 :   a18a:   mov    %rdi,-0x8(%rbp)
    9.14 :   a18e:   mov    %rsi,-0x10(%rbp)
    9.09 :   a192:   lea    -0x11(%rbp),%rdx
    0.00 :   a196:   mov    -0x10(%rbp),%rcx
   36.24 :   a19a:   mov    -0x8(%rbp),%rax
   18.14 :   a19e:   mov    %rcx,%rsi
    0.00 :   a1a1:   mov    %rax,%rdi
    0.00 :   a1a4:   call   a66a <std::pair<int const, float>::pair<int const&, 0ul>(std::tuple<int const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)>
    0.00 :   a1a9:   nop
    0.00 :   a1aa:   leave
    0.00 :   a1ab:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000054f2 <void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>:
    9.21 :   54f2:   endbr64
    0.00 :   54f6:   push   %rbp
    9.17 :   54f7:   mov    %rsp,%rbp
    0.00 :   54fa:   sub    $0x20,%rsp
    0.00 :   54fe:   mov    %rdi,-0x8(%rbp)
    0.00 :   5502:   mov    %rsi,-0x10(%rbp)
    0.00 :   5506:   mov    %rdx,-0x18(%rbp)
    0.00 :   550a:   mov    -0x18(%rbp),%rax
    9.08 :   550e:   mov    %rax,%rdi
    0.00 :   5511:   call   68ac <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :   5516:   mov    %rax,%rdx
    9.14 :   5519:   mov    -0x10(%rbp),%rcx
   45.59 :   551d:   mov    -0x8(%rbp),%rax
    0.00 :   5521:   mov    %rcx,%rsi
    0.00 :   5524:   mov    %rax,%rdi
    0.00 :   5527:   call   68be <void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)>
    8.65 :   552c:   nop
    0.00 :   552d:   leave
    9.15 :   552e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000896a <void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>:
    0.00 :   896a:   endbr64
    0.00 :   896e:   push   %rbp
   28.62 :   896f:   mov    %rsp,%rbp
    0.00 :   8972:   push   %r12
    9.47 :   8974:   push   %rbx
    0.00 :   8975:   sub    $0x30,%rsp
    0.00 :   8979:   mov    %rdi,-0x18(%rbp)
    0.00 :   897d:   mov    %rsi,-0x20(%rbp)
    0.00 :   8981:   mov    %rdx,-0x28(%rbp)
    0.00 :   8985:   mov    %rcx,-0x30(%rbp)
    9.55 :   8989:   mov    %r8,-0x38(%rbp)
    0.00 :   898d:   mov    -0x38(%rbp),%rax
   19.06 :   8991:   mov    %rax,%rdi
    0.00 :   8994:   call   7a4e <std::tuple<>&& std::forward<std::tuple<> >(std::remove_reference<std::tuple<> >::type&)>
    0.00 :   8999:   mov    %rax,%r12
    0.00 :   899c:   mov    -0x30(%rbp),%rax
    0.00 :   89a0:   mov    %rax,%rdi
    0.00 :   89a3:   call   7a3c <std::tuple<int const&>&& std::forward<std::tuple<int const&> >(std::remove_reference<std::tuple<int const&> >::type&)>
    0.00 :   89a8:   mov    %rax,%rbx
    0.00 :   89ab:   mov    -0x28(%rbp),%rax
    0.00 :   89af:   mov    %rax,%rdi
    0.00 :   89b2:   call   7a2a <std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)>
    0.00 :   89b7:   mov    %rax,%rdx
    0.00 :   89ba:   mov    -0x20(%rbp),%rsi
    0.00 :   89be:   mov    -0x18(%rbp),%rax
    0.00 :   89c2:   mov    %r12,%r8
    0.00 :   89c5:   mov    %rbx,%rcx
    9.53 :   89c8:   mov    %rax,%rdi
    0.00 :   89cb:   call   994c <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::construct<std::pair<int const, float>, std::piecewise_construct_t const&, std::tuple<int const&>, std::tuple<> >(std::pair<int const, float>*, std::piecewise_construct_t const&, std::tuple<int const&>&&, std::tuple<>&&)>
   14.29 :   89d0:   nop
    0.00 :   89d1:   add    $0x30,%rsp
    0.00 :   89d5:   pop    %rbx
    0.00 :   89d6:   pop    %r12
    9.48 :   89d8:   pop    %rbp
    0.00 :   89d9:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a00 <std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&)>:
    0.00 :   7a00:   endbr64
    0.00 :   7a04:   push   %rbp
   19.15 :   7a05:   mov    %rsp,%rbp
    0.00 :   7a08:   sub    $0x10,%rsp
   14.23 :   7a0c:   mov    %rdi,-0x8(%rbp)
    0.00 :   7a10:   mov    %rsi,-0x10(%rbp)
   19.21 :   7a14:   mov    -0x8(%rbp),%rax
    9.55 :   7a18:   mov    -0x10(%rbp),%rdx
   28.56 :   7a1c:   mov    %rdx,%rsi
    9.30 :   7a1f:   mov    %rax,%rdi
    0.00 :   7a22:   call   890c <std::_Head_base<0ul, int const&, false>::_Head_base(int const&)>
    0.00 :   7a27:   nop
    0.00 :   7a28:   leave
    0.00 :   7a29:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (11 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0730 <__memcpy_avx_unaligned>:
   68.87 :   1a0730: endbr64
    0.00 :   1a0734: mov    %rdi,%rax
   21.61 :   1a0737: cmp    $0x20,%rdx
    9.52 :   1a073b: jb     1a07f0 <__memcpy_avx_unaligned_erms+0x30>
    0.00 :   1a0741: vmovdqu (%rsi),%ymm0
    0.00 :   1a0745: cmp    $0x40,%rdx
    0.00 :   1a0749: ja     1a088d <__memcpy_avx_unaligned_erms+0xcd>
    0.00 :   1a074f: vmovdqu -0x20(%rsi,%rdx,1),%ymm1
    0.00 :   1a0755: vmovdqu %ymm0,(%rdi)
    0.00 :   1a0759: vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
    0.00 :   1a075f: vzeroupper
    0.00 :   1a0762: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008714 <void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::destroy<std::pair<int const, float> >(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, std::pair<int const, float>*)>:
    0.00 :   8714:   endbr64
    0.00 :   8718:   push   %rbp
    0.00 :   8719:   mov    %rsp,%rbp
    0.00 :   871c:   sub    $0x10,%rsp
    9.95 :   8720:   mov    %rdi,-0x8(%rbp)
    0.00 :   8724:   mov    %rsi,-0x10(%rbp)
    9.97 :   8728:   mov    -0x10(%rbp),%rdx
   70.10 :   872c:   mov    -0x8(%rbp),%rax
    9.99 :   8730:   mov    %rdx,%rsi
    0.00 :   8733:   mov    %rax,%rdi
    0.00 :   8736:   call   96d6 <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::destroy<std::pair<int const, float> >(std::pair<int const, float>*)>
    0.00 :   873b:   nop
    0.00 :   873c:   leave
    0.00 :   873d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000460e <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator*() const>:
   10.04 :   460e:   endbr64
    0.00 :   4612:   push   %rbp
    0.00 :   4613:   mov    %rsp,%rbp
    0.00 :   4616:   sub    $0x10,%rsp
   20.00 :   461a:   mov    %rdi,-0x8(%rbp)
    0.00 :   461e:   mov    -0x8(%rbp),%rax
   20.00 :   4622:   mov    (%rax),%rax
    0.00 :   4625:   add    $0x8,%rax
    0.00 :   4629:   mov    %rax,%rdi
    0.00 :   462c:   call   54d4 <std::__detail::_Hash_node_value_base<std::pair<int const, float> >::_M_v()>
   19.97 :   4631:   leave
   29.99 :   4632:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004a44 <std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long)>:
    0.00 :   4a44:   endbr64
    0.00 :   4a48:   push   %rbp
    0.00 :   4a49:   mov    %rsp,%rbp
    0.00 :   4a4c:   mov    %rdi,-0x8(%rbp)
   20.20 :   4a50:   mov    %rsi,-0x10(%rbp)
   20.14 :   4a54:   mov    -0x8(%rbp),%rax
   10.08 :   4a58:   mov    (%rax),%rdx
    9.27 :   4a5b:   mov    -0x10(%rbp),%rax
   20.13 :   4a5f:   shl    $0x3,%rax
   20.18 :   4a63:   add    %rdx,%rax
    0.00 :   4a66:   pop    %rbp
    0.00 :   4a67:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (8 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b880 <bool __gnu_cxx::operator!=<float const*, std::vector<float, std::allocator<float> > >(__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&, __gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&)>:
    0.00 :   b880:   endbr64
    0.00 :   b884:   push   %rbp
    0.00 :   b885:   mov    %rsp,%rbp
    0.00 :   b888:   push   %rbx
    0.00 :   b889:   sub    $0x18,%rsp
    0.00 :   b88d:   mov    %rdi,-0x18(%rbp)
    0.00 :   b891:   mov    %rsi,-0x20(%rbp)
    0.00 :   b895:   mov    -0x18(%rbp),%rax
    0.00 :   b899:   mov    %rax,%rdi
    0.00 :   b89c:   call   b994 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::base() const>
   14.21 :   b8a1:   mov    (%rax),%rbx
   56.86 :   b8a4:   mov    -0x20(%rbp),%rax
    0.00 :   b8a8:   mov    %rax,%rdi
    0.00 :   b8ab:   call   b994 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::base() const>
    0.00 :   b8b0:   mov    (%rax),%rax
   14.22 :   b8b3:   cmp    %rax,%rbx
    0.00 :   b8b6:   setne  %al
   14.70 :   b8b9:   mov    -0x8(%rbp),%rbx
    0.00 :   b8bd:   leave
    0.00 :   b8be:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000482a0 <round_and_return>:
    0.00 :   482a0:  push   %r15
    9.50 :   482a2:  push   %r14
    0.00 :   482a4:  mov    %edx,%r14d
    0.00 :   482a7:  mov    %rcx,%rdx
    0.00 :   482aa:  mov    %r8,%rcx
    0.00 :   482ad:  push   %r13
    0.00 :   482af:  mov    %r9d,%r13d
    0.00 :   482b2:  push   %r12
    0.00 :   482b4:  push   %rbp
    0.00 :   482b5:  mov    %rdi,%rbp
    0.00 :   482b8:  push   %rbx
    0.00 :   482b9:  mov    %rsi,%rbx
    0.00 :   482bc:  sub    $0x28,%rsp
    0.00 :   482c0:  mov    %fs:0x28,%rax
    0.00 :   482c9:  mov    %rax,0x18(%rsp)
    0.00 :   482ce:  xor    %eax,%eax
    0.00 :   482d0:  fnstcw 0x16(%rsp)
    0.00 :   482d4:  movzwl 0x16(%rsp),%eax
    0.00 :   482d9:  and    $0xc00,%ax
    0.00 :   482dd:  cmp    $0x800,%ax
    0.00 :   482e1:  je     48600 <round_and_return+0x360>
    0.00 :   482e7:  ja     48450 <round_and_return+0x1b0>
    0.00 :   482ed:  test   %ax,%ax
    0.00 :   482f0:  jne    48530 <round_and_return+0x290>
    0.00 :   482f6:  xor    %r12d,%r12d
    0.00 :   482f9:  cmp    $0xffffffffffffff82,%rbx
    0.00 :   482fd:  jge    4846a <round_and_return+0x1ca>
    0.00 :   48303:  nopl   0x0(%rax,%rax,1)
    0.00 :   48308:  cmp    $0xffffffffffffff6a,%rbx
    0.00 :   4830f:  jl     48610 <round_and_return+0x370>
    0.00 :   48315:  mov    $0xffffffffffffffff,%rax
    0.00 :   4831c:  mov    $0xffffffffffffff82,%rsi
    0.00 :   48323:  mov    0x0(%rbp),%r8
    0.00 :   48327:  shl    %cl,%rax
    0.00 :   4832a:  sub    %rbx,%rsi
    0.00 :   4832d:  not    %rax
    0.00 :   48330:  test   %rdx,%rax
    0.00 :   48333:  setne  %al
    0.00 :   48336:  movzbl %al,%eax
    0.00 :   48339:  or     %eax,%r13d
    0.00 :   4833c:  cmp    $0x18,%rsi
    0.00 :   48340:  je     486b8 <round_and_return+0x418>
    0.00 :   48346:  cmp    $0x1,%rsi
    0.00 :   4834a:  jne    48731 <round_and_return+0x491>
    0.00 :   48350:  shr    %cl,%rdx
    0.00 :   48353:  mov    %r8d,%r15d
    0.00 :   48356:  mov    %r13d,%eax
    0.00 :   48359:  and    $0x1,%edx
    0.00 :   4835c:  and    $0x1,%r15d
    0.00 :   48360:  and    $0x1,%eax
    0.00 :   48363:  cmp    $0x800,%r12d
    0.00 :   4836a:  je     48790 <round_and_return+0x4f0>
    0.00 :   48370:  jg     48728 <round_and_return+0x488>
    0.00 :   48376:  test   %r12d,%r12d
    0.00 :   48379:  jne    48690 <round_and_return+0x3f0>
    0.00 :   4837f:  test   %dl,%dl
    0.00 :   48381:  je     48731 <round_and_return+0x491>
    0.00 :   48387:  test   %r15b,%r15b
    0.00 :   4838a:  jne    48394 <round_and_return+0xf4>
    0.00 :   4838c:  test   %al,%al
    0.00 :   4838e:  je     48731 <round_and_return+0x491>
    0.00 :   48394:  lea    0x1(%r8),%rax
    0.00 :   48398:  test   $0x1000000,%eax
    0.00 :   4839d:  je     48731 <round_and_return+0x491>
    0.00 :   483a3:  mov    %rbp,%rsi
    0.00 :   483a6:  mov    %rbp,%rdi
    0.00 :   483a9:  mov    $0x1,%ecx
    0.00 :   483ae:  mov    $0x1,%edx
    0.00 :   483b3:  mov    %r8,0x8(%rsp)
    0.00 :   483b8:  mov    $0xffffffffffffff81,%rbx
    0.00 :   483bf:  call   54e30 <__mpn_rshift>
    0.00 :   483c4:  mov    0x0(%rbp),%rsi
    0.00 :   483c8:  mov    0x8(%rsp),%r8
    0.00 :   483cd:  xor    %r9d,%r9d
    0.00 :   483d0:  mov    %esi,%edi
    0.00 :   483d2:  and    $0x1,%edi
    0.00 :   483d5:  test   %r13d,%r13d
    0.00 :   483d8:  je     48496 <round_and_return+0x1f6>
    0.00 :   483de:  cmp    $0x800,%r12d
    0.00 :   483e5:  je     48670 <round_and_return+0x3d0>
    0.00 :   483eb:  jg     485c0 <round_and_return+0x320>
    0.00 :   483f1:  test   %r12d,%r12d
    0.00 :   483f4:  jne    485a8 <round_and_return+0x308>
    0.00 :   483fa:  mov    $0x1,%r13d
    0.00 :   48400:  or     %r13d,%edi
    0.00 :   48403:  test   %r15b,%r15b
    0.00 :   48406:  je     484e8 <round_and_return+0x248>
    0.00 :   4840c:  test   %dil,%dil
   30.06 :   4840f:  je     484e8 <round_and_return+0x248>
    0.00 :   48415:  add    $0x1,%rsi
    0.00 :   48419:  mov    %rsi,0x0(%rbp)
    0.00 :   4841d:  test   $0x1000000,%esi
    0.00 :   48423:  jne    48548 <round_and_return+0x2a8>
    0.00 :   48429:  cmp    $0xffffffffffffff81,%rbx
    0.00 :   4842d:  jne    484e8 <round_and_return+0x248>
    0.00 :   48433:  test   $0x800000,%esi
    0.00 :   48439:  setne  %sil
    0.00 :   4843d:  movzbl %sil,%esi
    0.00 :   48441:  sub    $0x7f,%esi
    0.00 :   48444:  jmp    484ea <round_and_return+0x24a>
    0.00 :   48449:  nopl   0x0(%rax)
    0.00 :   48450:  cmp    $0xc00,%ax
    0.00 :   48454:  jne    28929 <round_and_return.cold>
    0.00 :   4845a:  mov    $0xc00,%r12d
    0.00 :   48460:  cmp    $0xffffffffffffff82,%rbx
    0.00 :   48464:  jl     48308 <round_and_return+0x68>
    0.00 :   4846a:  cmp    $0x7f,%rbx
    0.00 :   4846e:  jg     48576 <round_and_return+0x2d6>
    0.00 :   48474:  mov    0x0(%rbp),%rsi
    0.00 :   48478:  mov    %rdx,%r15
    0.00 :   4847b:  mov    %ecx,%r9d
    0.00 :   4847e:  mov    %rdx,%r8
    0.00 :   48481:  shr    %cl,%r15
    0.00 :   48484:  mov    %esi,%edi
    0.00 :   48486:  and    $0x1,%r15d
    0.00 :   4848a:  and    $0x1,%edi
    0.00 :   4848d:  test   %r13d,%r13d
    0.00 :   48490:  jne    483de <round_and_return+0x13e>
    0.00 :   48496:  mov    $0xffffffffffffffff,%rax
    0.00 :   4849d:  mov    %r9d,%ecx
    0.00 :   484a0:  shl    %cl,%rax
    0.00 :   484a3:  not    %rax
    0.00 :   484a6:  and    %r8,%rax
    0.00 :   484a9:  test   %rax,%rax
    0.00 :   484ac:  setne  %r13b
    0.00 :   484b0:  cmp    $0x800,%r12d
    0.00 :   484b7:  je     48676 <round_and_return+0x3d6>
    0.00 :   484bd:  jg     485e8 <round_and_return+0x348>
    0.00 :   484c3:  test   %r12d,%r12d
    0.00 :   484c6:  je     48400 <round_and_return+0x160>
    0.00 :   484cc:  cmp    $0x400,%r12d
    0.00 :   484d3:  jne    4879f <round_and_return+0x4ff>
    0.00 :   484d9:  test   %r14d,%r14d
    0.00 :   484dc:  jne    4867f <round_and_return+0x3df>
    0.00 :   484e2:  nopw   0x0(%rax,%rax,1)
    0.00 :   484e8:  mov    %ebx,%esi
   30.28 :   484ea:  test   %r13b,%r13b
    0.00 :   484ed:  jne    485cf <round_and_return+0x32f>
    0.00 :   484f3:  test   %r15b,%r15b
    0.00 :   484f6:  jne    485cf <round_and_return+0x32f>
    0.00 :   484fc:  mov    0x18(%rsp),%rax
    0.00 :   48501:  sub    %fs:0x28,%rax
    0.00 :   4850a:  jne    4879a <round_and_return+0x4fa>
    0.00 :   48510:  add    $0x28,%rsp
    0.00 :   48514:  mov    %r14d,%edx
    0.00 :   48517:  mov    %rbp,%rdi
    0.00 :   4851a:  pop    %rbx
    0.00 :   4851b:  pop    %rbp
    0.00 :   4851c:  pop    %r12
    0.00 :   4851e:  pop    %r13
    0.00 :   48520:  pop    %r14
    0.00 :   48522:  pop    %r15
    0.00 :   48524:  jmp    56610 <__mpn_construct_float>
    0.00 :   48529:  nopl   0x0(%rax)
    0.00 :   48530:  cmp    $0x400,%ax
    0.00 :   48534:  jne    487a4 <round_and_return+0x504>
    0.00 :   4853a:  mov    $0x400,%r12d
    0.00 :   48540:  jmp    482f9 <round_and_return+0x59>
    0.00 :   48545:  nopl   (%rax)
    0.00 :   48548:  mov    $0x1,%ecx
    0.00 :   4854d:  mov    $0x1,%edx
    0.00 :   48552:  mov    %rbp,%rsi
    0.00 :   48555:  mov    %rbp,%rdi
    0.00 :   48558:  call   54e30 <__mpn_rshift>
    0.00 :   4855d:  add    $0x1,%rbx
    0.00 :   48561:  orq    $0x800000,0x0(%rbp)
    0.00 :   48569:  cmp    $0x80,%rbx
    0.00 :   48570:  jne    484e8 <round_and_return+0x248>
    0.00 :   48576:  mov    0x1d1893(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   4857d:  movl   $0x22,%fs:(%rax)
    0.00 :   48584:  test   %r14d,%r14d
    0.00 :   48587:  je     48660 <round_and_return+0x3c0>
    0.00 :   4858d:  movss  0x19a843(%rip),%xmm0        # 1e2dd8 <default_rwlockattr+0x700>
    0.00 :   48595:  movss  0x19a82f(%rip),%xmm1        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   4859d:  jmp    48638 <round_and_return+0x398>
    0.00 :   485a2:  nopw   0x0(%rax,%rax,1)
    0.00 :   485a8:  cmp    $0x400,%r12d
    0.00 :   485af:  jne    487a9 <round_and_return+0x509>
    0.00 :   485b5:  mov    $0x1,%r13d
    0.00 :   485bb:  jmp    484d9 <round_and_return+0x239>
    0.00 :   485c0:  cmp    $0xc00,%r12d
    0.00 :   485c7:  jne    28929 <round_and_return.cold>
    0.00 :   485cd:  mov    %ebx,%esi
    0.00 :   485cf:  movss  0x19a7fd(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
   30.15 :   485d7:  addss  0x19a7e1(%rip),%xmm0        # 1e2dc0 <default_rwlockattr+0x6e8>
    0.00 :   485df:  jmp    484fc <round_and_return+0x25c>
    0.00 :   485e4:  nopl   0x0(%rax)
    0.00 :   485e8:  cmp    $0xc00,%r12d
    0.00 :   485ef:  je     484e8 <round_and_return+0x248>
    0.00 :   485f5:  jmp    28929 <round_and_return.cold>
    0.00 :   485fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   48600:  mov    $0x800,%r12d
    0.00 :   48606:  jmp    482f9 <round_and_return+0x59>
    0.00 :   4860b:  nopl   0x0(%rax,%rax,1)
    0.00 :   48610:  mov    0x1d17f9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   48617:  movl   $0x22,%fs:(%rax)
    0.00 :   4861e:  test   %r14d,%r14d
    0.00 :   48621:  jne    48710 <round_and_return+0x470>
    0.00 :   48627:  movss  0x19a7a5(%rip),%xmm1        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   4862f:  movaps %xmm1,%xmm0
    0.00 :   48632:  nopw   0x0(%rax,%rax,1)
    0.00 :   48638:  mulss  %xmm1,%xmm0
    0.00 :   4863c:  mov    0x18(%rsp),%rax
    0.00 :   48641:  sub    %fs:0x28,%rax
    0.00 :   4864a:  jne    4879a <round_and_return+0x4fa>
    0.00 :   48650:  add    $0x28,%rsp
    0.00 :   48654:  pop    %rbx
    0.00 :   48655:  pop    %rbp
    0.00 :   48656:  pop    %r12
    0.00 :   48658:  pop    %r13
    0.00 :   4865a:  pop    %r14
    0.00 :   4865c:  pop    %r15
    0.00 :   4865e:  ret
    0.00 :   4865f:  nop
    0.00 :   48660:  movss  0x19a764(%rip),%xmm1        # 1e2dcc <default_rwlockattr+0x6f4>
    0.00 :   48668:  movaps %xmm1,%xmm0
    0.00 :   4866b:  jmp    48638 <round_and_return+0x398>
    0.00 :   4866d:  nopl   (%rax)
    0.00 :   48670:  mov    $0x1,%r13d
    0.00 :   48676:  test   %r14d,%r14d
    0.00 :   48679:  jne    484e8 <round_and_return+0x248>
    0.00 :   4867f:  mov    %r13d,%edi
    0.00 :   48682:  or     %r15d,%edi
    0.00 :   48685:  jmp    4840c <round_and_return+0x16c>
    0.00 :   4868a:  nopw   0x0(%rax,%rax,1)
    0.00 :   48690:  cmp    $0x400,%r12d
    0.00 :   48697:  jne    487b3 <round_and_return+0x513>
    0.00 :   4869d:  test   %r14d,%r14d
    0.00 :   486a0:  je     48731 <round_and_return+0x491>
    0.00 :   486a6:  test   %dl,%dl
    0.00 :   486a8:  je     4838c <round_and_return+0xec>
    0.00 :   486ae:  jmp    48394 <round_and_return+0xf4>
    0.00 :   486b3:  nopl   0x0(%rax,%rax,1)
    0.00 :   486b8:  movq   $0x0,0x0(%rbp)
    0.00 :   486c0:  xor    %edi,%edi
    0.00 :   486c2:  xor    %esi,%esi
    0.00 :   486c4:  mov    $0x17,%r9d
    0.00 :   486ca:  mov    %r8,%rdx
    0.00 :   486cd:  mov    %r9d,%ecx
    0.00 :   486d0:  shr    %cl,%rdx
    0.00 :   486d3:  mov    %edx,%r15d
    0.00 :   486d6:  and    $0x1,%r15d
    0.00 :   486da:  test   %r13d,%r13d
    0.00 :   486dd:  je     48768 <round_and_return+0x4c8>
    0.00 :   486e3:  mov    0x1d1726(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   486ea:  movss  0x19a6e2(%rip),%xmm0        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   486f2:  movl   $0x22,%fs:(%rax)
    0.00 :   486f9:  mulss  %xmm0,%xmm0
    0.00 :   486fd:  mov    $0xffffffffffffff81,%rbx
    0.00 :   48704:  jmp    4848d <round_and_return+0x1ed>
    0.00 :   48709:  nopl   0x0(%rax)
    0.00 :   48710:  movss  0x19a6b8(%rip),%xmm0        # 1e2dd0 <default_rwlockattr+0x6f8>
    0.00 :   48718:  movss  0x19a6b4(%rip),%xmm1        # 1e2dd4 <default_rwlockattr+0x6fc>
    0.00 :   48720:  jmp    48638 <round_and_return+0x398>
    0.00 :   48725:  nopl   (%rax)
    0.00 :   48728:  cmp    $0xc00,%r12d
    0.00 :   4872f:  jne    487ae <round_and_return+0x50e>
    0.00 :   48731:  mov    %esi,%ecx
    0.00 :   48733:  mov    %rbp,%rdi
    0.00 :   48736:  mov    %rbp,%rsi
    0.00 :   48739:  mov    $0x1,%edx
    0.00 :   4873e:  mov    %r8,0x8(%rsp)
    0.00 :   48743:  call   54e30 <__mpn_rshift>
    0.00 :   48748:  mov    0x0(%rbp),%rsi
    0.00 :   4874c:  mov    0x8(%rsp),%r8
    0.00 :   48751:  mov    $0xffffffffffffff81,%r9
    0.00 :   48758:  sub    %ebx,%r9d
    0.00 :   4875b:  mov    %esi,%edi
    0.00 :   4875d:  and    $0x1,%edi
    0.00 :   48760:  jmp    486ca <round_and_return+0x42a>
    0.00 :   48765:  nopl   (%rax)
    0.00 :   48768:  mov    $0xffffffffffffffff,%rax
    0.00 :   4876f:  and    $0x1,%edx
    0.00 :   48772:  shl    %cl,%rax
    0.00 :   48775:  not    %rax
    0.00 :   48778:  and    %r8,%rax
    0.00 :   4877b:  or     %rdx,%rax
    0.00 :   4877e:  jne    486e3 <round_and_return+0x443>
    0.00 :   48784:  mov    $0xffffffffffffff81,%rbx
    0.00 :   4878b:  jmp    484a9 <round_and_return+0x209>
    0.00 :   48790:  test   %r14d,%r14d
    0.00 :   48793:  jne    48731 <round_and_return+0x491>
    0.00 :   48795:  jmp    486a6 <round_and_return+0x406>
    0.00 :   4879a:  call   136550 <__stack_chk_fail>
    0.00 :   4879f:  jmp    28929 <round_and_return.cold>
    0.00 :   487a4:  jmp    28929 <round_and_return.cold>
    0.00 :   487a9:  jmp    28929 <round_and_return.cold>
    0.00 :   487ae:  jmp    28929 <round_and_return.cold>
    0.00 :   487b3:  jmp    28929 <round_and_return.cold>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ac10 <std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&)>:
    0.00 :   ac10:   endbr64
    0.00 :   ac14:   push   %rbp
   10.43 :   ac15:   mov    %rsp,%rbp
   16.28 :   ac18:   sub    $0x10,%rsp
   10.44 :   ac1c:   mov    %rdi,-0x8(%rbp)
    0.00 :   ac20:   mov    -0x8(%rbp),%rax
   62.86 :   ac24:   mov    %rax,%rdi
    0.00 :   ac27:   call   ac2e <std::_Head_base<0ul, int const&, false>::_M_head(std::_Head_base<0ul, int const&, false>&)>
    0.00 :   ac2c:   leave
    0.00 :   ac2d:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (9 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012a620 <std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)@@GLIBCXX_3.4>:
    0.92 :   12a620: endbr64
   15.29 :   12a624: push   %rbx
    0.00 :   12a625: mov    %rdi,%rbx
    0.00 :   12a628: mov    0xfb8e9(%rip),%rdi        # 225f18 <std::ctype<char>::id@@GLIBCXX_3.4-0x5108>
    0.00 :   12a62f: call   9f6b0 <std::locale::id::_M_id() const@plt>
    0.00 :   12a634: mov    %rax,%rdx
    0.00 :   12a637: mov    (%rbx),%rax
    0.00 :   12a63a: pop    %rbx
    0.00 :   12a63b: mov    0x8(%rax),%rax
   15.02 :   12a63f: mov    (%rax,%rdx,8),%rax
   68.78 :   12a643: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (10 samples, percent: local period)
--------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000098bc <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::allocate(unsigned long, void const*)>:
    0.00 :   98bc:   endbr64
   11.11 :   98c0:   push   %rbp
    0.00 :   98c1:   mov    %rsp,%rbp
    0.00 :   98c4:   sub    $0x20,%rsp
    0.00 :   98c8:   mov    %rdi,-0x8(%rbp)
    0.00 :   98cc:   mov    %rsi,-0x10(%rbp)
   11.14 :   98d0:   mov    %rdx,-0x18(%rbp)
    0.00 :   98d4:   mov    -0x8(%rbp),%rax
   44.35 :   98d8:   mov    %rax,%rdi
    0.00 :   98db:   call   98a4 <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::_M_max_size() const>
    0.00 :   98e0:   cmp    %rax,-0x10(%rbp)
   11.11 :   98e4:   seta   %al
    0.00 :   98e7:   movzbl %al,%eax
    0.00 :   98ea:   test   %rax,%rax
    0.00 :   98ed:   setne  %al
    0.00 :   98f0:   test   %al,%al
   22.29 :   98f2:   je     990e <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::allocate(unsigned long, void const*)+0x52>
    0.00 :   98f4:   movabs $0xfffffffffffffff,%rax
    0.00 :   98fe:   cmp    %rax,-0x10(%rbp)
    0.00 :   9902:   jbe    9909 <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::allocate(unsigned long, void const*)+0x4d>
    0.00 :   9904:   call   2400 <std::__throw_bad_array_new_length()@plt>
    0.00 :   9909:   call   2350 <std::__throw_bad_alloc()@plt>
    0.00 :   990e:   mov    -0x10(%rbp),%rax
    0.00 :   9912:   shl    $0x4,%rax
    0.00 :   9916:   mov    %rax,%rdi
    0.00 :   9919:   call   2450 <operator new(unsigned long)@plt>
    0.00 :   991e:   nop
    0.00 :   991f:   leave
    0.01 :   9920:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (9 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000710f <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::difference_type __gnu_cxx::operator-<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>:
    0.00 :   710f:   endbr64
    0.00 :   7113:   push   %rbp
    0.00 :   7114:   mov    %rsp,%rbp
    0.00 :   7117:   push   %rbx
    0.00 :   7118:   sub    $0x18,%rsp
    0.00 :   711c:   mov    %rdi,-0x18(%rbp)
    0.00 :   7120:   mov    %rsi,-0x20(%rbp)
   11.11 :   7124:   mov    -0x18(%rbp),%rax
   55.57 :   7128:   mov    %rax,%rdi
    0.00 :   712b:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   7130:   mov    (%rax),%rbx
    0.00 :   7133:   mov    -0x20(%rbp),%rax
    0.00 :   7137:   mov    %rax,%rdi
    0.00 :   713a:   call   803a <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::base() const>
    0.00 :   713f:   mov    (%rax),%rdx
   33.32 :   7142:   mov    %rbx,%rax
    0.00 :   7145:   sub    %rdx,%rax
    0.00 :   7148:   sar    $0x3,%rax
    0.00 :   714c:   mov    -0x8(%rbp),%rbx
    0.00 :   7150:   leave
    0.00 :   7151:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (9 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000045c6 <std::__detail::operator!=(std::__detail::_Node_iterator_base<std::pair<int const, float>, false> const&, std::__detail::_Node_iterator_base<std::pair<int const, float>, false> const&)>:
    0.00 :   45c6:   endbr64
    0.00 :   45ca:   push   %rbp
   11.10 :   45cb:   mov    %rsp,%rbp
    0.00 :   45ce:   mov    %rdi,-0x8(%rbp)
    0.00 :   45d2:   mov    %rsi,-0x10(%rbp)
    0.00 :   45d6:   mov    -0x8(%rbp),%rax
    0.00 :   45da:   mov    (%rax),%rdx
   66.82 :   45dd:   mov    -0x10(%rbp),%rax
    0.00 :   45e1:   mov    (%rax),%rax
    0.00 :   45e4:   cmp    %rax,%rdx
    0.00 :   45e7:   setne  %al
   22.08 :   45ea:   pop    %rbp
    0.00 :   45eb:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (9 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000661c <std::tuple<int const&>::tuple<true, true>(int const&)>:
   33.33 :   661c:   endbr64
    0.00 :   6620:   push   %rbp
    0.00 :   6621:   mov    %rsp,%rbp
    0.00 :   6624:   sub    $0x10,%rsp
    0.00 :   6628:   mov    %rdi,-0x8(%rbp)
    0.00 :   662c:   mov    %rsi,-0x10(%rbp)
   33.39 :   6630:   mov    -0x8(%rbp),%rax
    0.00 :   6634:   mov    -0x10(%rbp),%rdx
   11.10 :   6638:   mov    %rdx,%rsi
    0.00 :   663b:   mov    %rax,%rdi
    0.00 :   663e:   call   7a00 <std::_Tuple_impl<0ul, int const&>::_Tuple_impl(int const&)>
   22.18 :   6643:   nop
    0.00 :   6644:   leave
    0.00 :   6645:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (9 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008305 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   8305:   endbr64
    0.00 :   8309:   push   %rbp
    0.00 :   830a:   mov    %rsp,%rbp
    0.00 :   830d:   sub    $0x30,%rsp
    0.00 :   8311:   mov    %rdi,-0x18(%rbp)
    0.00 :   8315:   mov    %rsi,-0x20(%rbp)
    0.00 :   8319:   mov    %fs:0x28,%rax
    0.00 :   8322:   mov    %rax,-0x8(%rbp)
    0.00 :   8326:   xor    %eax,%eax
    0.00 :   8328:   mov    -0x18(%rbp),%rax
    0.00 :   832c:   mov    %rax,-0x10(%rbp)
    0.00 :   8330:   jmp    834f <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x4a>
    0.00 :   8332:   call   3ec7 <__gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter)>
   22.65 :   8337:   mov    -0x10(%rbp),%rax
    0.00 :   833b:   mov    %rax,%rdi
   11.32 :   833e:   call   93f8 <void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Val_less_iter)>
    0.00 :   8343:   lea    -0x10(%rbp),%rax
    0.00 :   8347:   mov    %rax,%rdi
    0.00 :   834a:   call   935e <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator++()>
    0.00 :   834f:   lea    -0x20(%rbp),%rdx
   20.72 :   8353:   lea    -0x10(%rbp),%rax
    0.00 :   8357:   mov    %rdx,%rsi
    0.00 :   835a:   mov    %rax,%rdi
   22.66 :   835d:   call   70d0 <bool __gnu_cxx::operator!=<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   8362:   test   %al,%al
   22.65 :   8364:   jne    8332 <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x2d>
    0.00 :   8366:   nop
    0.00 :   8367:   mov    -0x8(%rbp),%rax
    0.00 :   836b:   sub    %fs:0x28,%rax
    0.00 :   8374:   je     837b <void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x76>
    0.00 :   8376:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   837b:   leave
    0.00 :   837c:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (9 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000c0cb0 <std::locale::id::_M_id() const@@GLIBCXX_3.4>:
    0.00 :   c0cb0:  endbr64
    0.00 :   c0cb4:  mov    (%rdi),%rax
   68.99 :   c0cb7:  test   %rax,%rax
   31.01 :   c0cba:  jne    c0cdb <std::locale::id::_M_id() const@@GLIBCXX_3.4+0x2b>
    0.00 :   c0cbc:  mov    0x16461d(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   c0cc3:  cmpb   $0x0,(%rdx)
    0.00 :   c0cc6:  je     c0ce0 <std::locale::id::_M_id() const@@GLIBCXX_3.4+0x30>
    0.00 :   c0cc8:  lea    0x168aa9(%rip),%rdx        # 229778 <std::cin@@GLIBCXX_3.4+0x118>
    0.00 :   c0ccf:  mov    (%rdx),%eax
    0.00 :   c0cd1:  add    $0x1,%eax
    0.00 :   c0cd4:  mov    %eax,(%rdx)
    0.00 :   c0cd6:  cltq
    0.00 :   c0cd8:  mov    %rax,(%rdi)
    0.00 :   c0cdb:  sub    $0x1,%rax
    0.00 :   c0cdf:  ret
    0.00 :   c0ce0:  lea    0x168a91(%rip),%rcx        # 229778 <std::cin@@GLIBCXX_3.4+0x118>
    0.00 :   c0ce7:  mov    $0x1,%edx
    0.00 :   c0cec:  lock xadd %edx,(%rcx)
    0.00 :   c0cf0:  add    $0x1,%edx
    0.00 :   c0cf3:  movslq %edx,%rdx
    0.00 :   c0cf6:  lock cmpxchg %rdx,(%rdi)
    0.00 :   c0cfb:  mov    (%rdi),%rax
    0.00 :   c0cfe:  sub    $0x1,%rax
    0.00 :   c0d02:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (7 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008e5e0 <_IO_old_init>:
   45.53 :   8e5e0:  endbr64
    0.00 :   8e5e4:  mov    0x18e452(%rip),%edx        # 21ca3c <stdio_needs_locking>
    0.00 :   8e5ea:  or     $0xfbad0000,%esi
    0.00 :   8e5f0:  xor    %eax,%eax
    0.00 :   8e5f2:  pxor   %xmm0,%xmm0
    0.00 :   8e5f6:  mov    %esi,(%rdi)
    0.00 :   8e5f8:  test   %edx,%edx
    0.00 :   8e5fa:  movq   $0x0,0x68(%rdi)
    0.00 :   8e602:  setne  %al
    0.00 :   8e605:  xor    %ecx,%ecx
    0.00 :   8e607:  movups %xmm0,0x8(%rdi)
    0.00 :   8e60b:  shl    $0x7,%eax
    0.00 :   8e60e:  mov    %cx,0x80(%rdi)
    0.00 :   8e615:  mov    %eax,0x74(%rdi)
    0.00 :   8e618:  mov    0x88(%rdi),%rax
    0.00 :   8e61f:  movups %xmm0,0x18(%rdi)
   54.47 :   8e623:  movups %xmm0,0x28(%rdi)
    0.00 :   8e627:  movups %xmm0,0x38(%rdi)
    0.00 :   8e62b:  movups %xmm0,0x48(%rdi)
    0.00 :   8e62f:  movups %xmm0,0x58(%rdi)
    0.00 :   8e633:  test   %rax,%rax
    0.00 :   8e636:  je     8e647 <_IO_old_init+0x67>
    0.00 :   8e638:  movq   $0x0,(%rax)
    0.00 :   8e63f:  movq   $0x0,0x8(%rax)
    0.00 :   8e647:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b8c0 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator++()>:
   32.76 :   b8c0:   endbr64
    0.00 :   b8c4:   push   %rbp
    0.00 :   b8c5:   mov    %rsp,%rbp
    0.00 :   b8c8:   mov    %rdi,-0x8(%rbp)
    0.00 :   b8cc:   mov    -0x8(%rbp),%rax
    0.00 :   b8d0:   mov    (%rax),%rax
   16.73 :   b8d3:   lea    0x4(%rax),%rdx
   17.00 :   b8d7:   mov    -0x8(%rbp),%rax
    0.00 :   b8db:   mov    %rdx,(%rax)
   16.56 :   b8de:   mov    -0x8(%rbp),%rax
   16.95 :   b8e2:   pop    %rbp
    0.00 :   b8e3:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (8 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000096e9 <std::pointer_traits<std::__detail::_Hash_node<std::pair<int const, float>, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>:
    0.00 :   96e9:   endbr64
    0.00 :   96ed:   push   %rbp
    0.00 :   96ee:   mov    %rsp,%rbp
    0.00 :   96f1:   sub    $0x10,%rsp
   12.47 :   96f5:   mov    %rdi,-0x8(%rbp)
   12.49 :   96f9:   mov    -0x8(%rbp),%rax
   62.49 :   96fd:   mov    %rax,%rdi
    0.00 :   9700:   call   a0cb <std::__detail::_Hash_node<std::pair<int const, float>, false>* std::addressof<std::__detail::_Hash_node<std::pair<int const, float>, false> >(std::__detail::_Hash_node<std::pair<int const, float>, false>&)>
    0.00 :   9705:   leave
   12.55 :   9706:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000019d400 <__strchrnul_avx2>:
    0.00 :   19d400: endbr64
    0.00 :   19d404: vmovd  %esi,%xmm0
    0.00 :   19d408: mov    %edi,%eax
    0.00 :   19d40a: and    $0xfff,%eax
    0.00 :   19d40f: vpbroadcastb %xmm0,%ymm0
   17.45 :   19d414: vpxor  %xmm9,%xmm9,%xmm9
    0.00 :   19d419: cmp    $0xfe0,%eax
    0.00 :   19d41e: ja     19d5d0 <__strchrnul_avx2+0x1d0>
    0.00 :   19d424: vmovdqu (%rdi),%ymm8
    0.00 :   19d428: vpcmpeqb %ymm8,%ymm0,%ymm1
   29.90 :   19d42d: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d432: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d436: vpmovmskb %ymm1,%eax
    0.00 :   19d43a: test   %eax,%eax
   35.19 :   19d43c: je     19d4a0 <__strchrnul_avx2+0xa0>
    0.00 :   19d43e: tzcnt  %eax,%eax
   17.46 :   19d442: add    %rdi,%rax
    0.00 :   19d445: vzeroupper
    0.00 :   19d448: ret
    0.00 :   19d449: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d454: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d45f: nop
    0.00 :   19d460: tzcnt  %eax,%eax
    0.00 :   19d464: add    $0x61,%rdi
    0.00 :   19d468: add    %rdi,%rax
    0.00 :   19d46b: vzeroupper
    0.00 :   19d46e: ret
    0.00 :   19d46f: nop
    0.00 :   19d470: tzcnt  %eax,%eax
    0.00 :   19d474: inc    %rdi
    0.00 :   19d477: add    %rdi,%rax
    0.00 :   19d47a: vzeroupper
    0.00 :   19d47d: ret
    0.00 :   19d47e: xchg   %ax,%ax
    0.00 :   19d480: tzcnt  %eax,%eax
    0.00 :   19d484: add    $0x21,%rdi
    0.00 :   19d488: add    %rdi,%rax
    0.00 :   19d48b: vzeroupper
    0.00 :   19d48e: ret
    0.00 :   19d48f: nop
    0.00 :   19d490: tzcnt  %eax,%eax
    0.00 :   19d494: add    $0x41,%rdi
    0.00 :   19d498: add    %rdi,%rax
    0.00 :   19d49b: vzeroupper
    0.00 :   19d49e: ret
    0.00 :   19d49f: nop
    0.00 :   19d4a0: or     $0x1f,%rdi
    0.00 :   19d4a4: vmovdqa 0x1(%rdi),%ymm8
    0.00 :   19d4a9: vpcmpeqb %ymm8,%ymm0,%ymm1
    0.00 :   19d4ae: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d4b3: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d4b7: vpmovmskb %ymm1,%eax
    0.00 :   19d4bb: test   %eax,%eax
    0.00 :   19d4bd: jne    19d470 <__strchrnul_avx2+0x70>
    0.00 :   19d4bf: vmovdqa 0x21(%rdi),%ymm8
    0.00 :   19d4c4: vpcmpeqb %ymm8,%ymm0,%ymm1
    0.00 :   19d4c9: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d4ce: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d4d2: vpmovmskb %ymm1,%eax
    0.00 :   19d4d6: test   %eax,%eax
    0.00 :   19d4d8: jne    19d480 <__strchrnul_avx2+0x80>
    0.00 :   19d4da: vmovdqa 0x41(%rdi),%ymm8
    0.00 :   19d4df: vpcmpeqb %ymm8,%ymm0,%ymm1
    0.00 :   19d4e4: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d4e9: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d4ed: vpmovmskb %ymm1,%eax
    0.00 :   19d4f1: test   %eax,%eax
    0.00 :   19d4f3: jne    19d490 <__strchrnul_avx2+0x90>
    0.00 :   19d4f5: vmovdqa 0x61(%rdi),%ymm8
    0.00 :   19d4fa: vpcmpeqb %ymm8,%ymm0,%ymm1
    0.00 :   19d4ff: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d504: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d508: vpmovmskb %ymm1,%eax
    0.00 :   19d50c: test   %eax,%eax
    0.00 :   19d50e: jne    19d460 <__strchrnul_avx2+0x60>
    0.00 :   19d514: add    $0x81,%rdi
    0.00 :   19d51b: and    $0xffffffffffffff80,%rdi
    0.00 :   19d51f: nop
    0.00 :   19d520: vmovdqa (%rdi),%ymm5
    0.00 :   19d524: vmovdqa 0x20(%rdi),%ymm6
    0.00 :   19d529: vmovdqa 0x40(%rdi),%ymm7
    0.00 :   19d52e: vmovdqa 0x60(%rdi),%ymm8
    0.00 :   19d533: vpxor  %ymm5,%ymm0,%ymm1
    0.00 :   19d537: vpxor  %ymm6,%ymm0,%ymm2
    0.00 :   19d53b: vpxor  %ymm7,%ymm0,%ymm3
    0.00 :   19d53f: vpxor  %ymm8,%ymm0,%ymm4
    0.00 :   19d544: vpminub %ymm1,%ymm5,%ymm1
    0.00 :   19d548: vpminub %ymm2,%ymm6,%ymm2
    0.00 :   19d54c: vpminub %ymm3,%ymm7,%ymm3
    0.00 :   19d550: vpminub %ymm4,%ymm8,%ymm4
    0.00 :   19d554: vpminub %ymm1,%ymm2,%ymm5
    0.00 :   19d558: vpminub %ymm3,%ymm4,%ymm6
    0.00 :   19d55c: vpminub %ymm5,%ymm6,%ymm6
    0.00 :   19d560: vpcmpeqb %ymm6,%ymm9,%ymm6
    0.00 :   19d564: vpmovmskb %ymm6,%ecx
    0.00 :   19d568: sub    $0xffffffffffffff80,%rdi
    0.00 :   19d56c: test   %ecx,%ecx
    0.00 :   19d56e: je     19d520 <__strchrnul_avx2+0x120>
    0.00 :   19d570: vpcmpeqb %ymm1,%ymm9,%ymm1
    0.00 :   19d574: vpmovmskb %ymm1,%eax
    0.00 :   19d578: test   %eax,%eax
    0.00 :   19d57a: jne    19d5b0 <__strchrnul_avx2+0x1b0>
    0.00 :   19d57c: vpcmpeqb %ymm5,%ymm9,%ymm2
    0.00 :   19d580: vpmovmskb %ymm2,%eax
    0.00 :   19d584: test   %eax,%eax
    0.00 :   19d586: jne    19d5c0 <__strchrnul_avx2+0x1c0>
    0.00 :   19d588: vpcmpeqb %ymm3,%ymm9,%ymm3
    0.00 :   19d58c: vpmovmskb %ymm3,%eax
    0.00 :   19d590: shl    $0x20,%rcx
    0.00 :   19d594: or     %rcx,%rax
    0.00 :   19d597: tzcnt  %rax,%rax
    0.00 :   19d59c: sub    $0x40,%rdi
    0.00 :   19d5a0: add    %rdi,%rax
    0.00 :   19d5a3: vzeroupper
    0.00 :   19d5a6: ret
    0.00 :   19d5a7: nopw   0x0(%rax,%rax,1)
    0.00 :   19d5b0: tzcnt  %eax,%eax
    0.00 :   19d5b4: add    $0xffffffffffffff80,%rdi
    0.00 :   19d5b8: add    %rdi,%rax
    0.00 :   19d5bb: vzeroupper
    0.00 :   19d5be: ret
    0.00 :   19d5bf: nop
    0.00 :   19d5c0: tzcnt  %eax,%eax
    0.00 :   19d5c4: sub    $0x60,%rdi
    0.00 :   19d5c8: add    %rdi,%rax
    0.00 :   19d5cb: vzeroupper
    0.00 :   19d5ce: ret
    0.00 :   19d5cf: nop
    0.00 :   19d5d0: mov    %rdi,%rdx
    0.00 :   19d5d3: or     $0x1f,%rdi
    0.00 :   19d5d7: vmovdqa -0x1f(%rdi),%ymm8
    0.00 :   19d5dc: vpcmpeqb %ymm8,%ymm0,%ymm1
    0.00 :   19d5e1: vpcmpeqb %ymm8,%ymm9,%ymm2
    0.00 :   19d5e6: vpor   %ymm1,%ymm2,%ymm1
    0.00 :   19d5ea: vpmovmskb %ymm1,%eax
    0.00 :   19d5ee: sarx   %edx,%eax,%eax
    0.00 :   19d5f3: test   %eax,%eax
    0.00 :   19d5f5: je     19d4a4 <__strchrnul_avx2+0xa4>
    0.00 :   19d5fb: tzcnt  %eax,%eax
    0.00 :   19d5ff: add    %rdx,%rax
    0.00 :   19d602: vzeroupper
    0.00 :   19d605: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (8 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009922 <std::tuple<int const&>::tuple(std::tuple<int const&>&&)>:
   25.02 :   9922:   endbr64
    0.00 :   9926:   push   %rbp
   12.55 :   9927:   mov    %rsp,%rbp
    0.00 :   992a:   sub    $0x10,%rsp
    0.00 :   992e:   mov    %rdi,-0x8(%rbp)
    0.00 :   9932:   mov    %rsi,-0x10(%rbp)
   12.50 :   9936:   mov    -0x8(%rbp),%rax
   24.96 :   993a:   mov    -0x10(%rbp),%rdx
   12.46 :   993e:   mov    %rdx,%rsi
    0.00 :   9941:   mov    %rax,%rdi
    0.00 :   9944:   call   a15c <std::_Tuple_impl<0ul, int const&>::_Tuple_impl(std::_Tuple_impl<0ul, int const&>&&)>
    0.00 :   9949:   nop
    0.00 :   994a:   leave
   12.51 :   994b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (8 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000abf2 <int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&)>:
    0.00 :   abf2:   endbr64
    0.00 :   abf6:   push   %rbp
    0.00 :   abf7:   mov    %rsp,%rbp
    0.00 :   abfa:   sub    $0x10,%rsp
   12.45 :   abfe:   mov    %rdi,-0x8(%rbp)
    0.00 :   ac02:   mov    -0x8(%rbp),%rax
   37.36 :   ac06:   mov    %rax,%rdi
    0.00 :   ac09:   call   ac10 <std::_Tuple_impl<0ul, int const&>::_M_head(std::_Tuple_impl<0ul, int const&>&)>
    0.00 :   ac0e:   leave
   50.19 :   ac0f:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (8 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000f5920 <std::string::reserve(unsigned long)@@GLIBCXX_3.4>:
    0.00 :   f5920:  endbr64
   12.74 :   f5924:  push   %rbp
    0.00 :   f5925:  push   %rbx
    0.00 :   f5926:  mov    %rdi,%rbx
    0.00 :   f5929:  sub    $0x28,%rsp
    0.00 :   f592d:  mov    (%rdi),%rdi
   12.61 :   f5930:  mov    %fs:0x28,%rax
    0.00 :   f5939:  mov    %rax,0x18(%rsp)
    0.00 :   f593e:  xor    %eax,%eax
    0.00 :   f5940:  mov    -0x10(%rdi),%rax
   37.29 :   f5944:  cmp    %rsi,%rax
   11.91 :   f5947:  jb     f595f <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x3f>
    0.00 :   f5949:  mov    0x12f990(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   f5950:  cmpb   $0x0,(%rdx)
    0.00 :   f5953:  je     f59a0 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x80>
    0.00 :   f5955:  mov    -0x8(%rdi),%edx
    0.00 :   f5958:  test   %edx,%edx
    0.00 :   f595a:  jle    f5989 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x69>
    0.00 :   f595c:  mov    %rax,%rsi
    0.00 :   f595f:  lea    0x17(%rsp),%rbp
    0.00 :   f5964:  sub    $0x18,%rdi
    0.00 :   f5968:  mov    %rsi,%rdx
    0.00 :   f596b:  sub    (%rdi),%rdx
    0.00 :   f596e:  mov    %rbp,%rsi
    0.00 :   f5971:  call   a05b0 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@plt>
    0.00 :   f5976:  mov    (%rbx),%rdx
    0.00 :   f5979:  lea    -0x18(%rdx),%rdi
    0.00 :   f597d:  cmp    0x12fbc4(%rip),%rdi        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   f5984:  jne    f59b0 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x90>
   25.46 :   f5986:  mov    %rax,(%rbx)
    0.00 :   f5989:  mov    0x18(%rsp),%rax
    0.00 :   f598e:  sub    %fs:0x28,%rax
    0.00 :   f5997:  jne    f59ec <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0xcc>
    0.00 :   f5999:  add    $0x28,%rsp
    0.00 :   f599d:  pop    %rbx
    0.00 :   f599e:  pop    %rbp
    0.00 :   f599f:  ret
    0.00 :   f59a0:  mov    -0x8(%rdi),%edx
    0.00 :   f59a3:  test   %edx,%edx
    0.00 :   f59a5:  jle    f5989 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x69>
    0.00 :   f59a7:  mov    (%rbx),%rdi
    0.00 :   f59aa:  mov    %rax,%rsi
    0.00 :   f59ad:  jmp    f595f <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x3f>
    0.00 :   f59af:  nop
    0.00 :   f59b0:  mov    0x12f929(%rip),%rcx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   f59b7:  cmpb   $0x0,(%rcx)
    0.00 :   f59ba:  je     f59e0 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0xc0>
    0.00 :   f59bc:  mov    -0x8(%rdx),%ecx
    0.00 :   f59bf:  lea    -0x1(%rcx),%esi
    0.00 :   f59c2:  mov    %esi,-0x8(%rdx)
    0.00 :   f59c5:  test   %ecx,%ecx
    0.00 :   f59c7:  jg     f5986 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x66>
    0.00 :   f59c9:  mov    %rbp,%rsi
    0.00 :   f59cc:  mov    %rax,0x8(%rsp)
    0.00 :   f59d1:  call   9e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>
    0.00 :   f59d6:  mov    0x8(%rsp),%rax
    0.00 :   f59db:  jmp    f5986 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0x66>
    0.00 :   f59dd:  nopl   (%rax)
    0.00 :   f59e0:  mov    $0xffffffff,%ecx
    0.00 :   f59e5:  lock xadd %ecx,-0x8(%rdx)
    0.00 :   f59ea:  jmp    f59c5 <std::string::reserve(unsigned long)@@GLIBCXX_3.4+0xa5>
    0.00 :   f59ec:  call   a0ef0 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (7 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000066ca <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()>:
    0.00 :   66ca:   endbr64
    0.00 :   66ce:   push   %rbp
    0.00 :   66cf:   mov    %rsp,%rbp
    0.00 :   66d2:   sub    $0x10,%rsp
   43.37 :   66d6:   mov    %rdi,-0x8(%rbp)
    0.00 :   66da:   mov    -0x8(%rbp),%rax
   42.23 :   66de:   mov    0x8(%rax),%rax
    0.00 :   66e2:   test   %rax,%rax
   14.40 :   66e5:   je     6701 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()+0x37>
    0.00 :   66e7:   mov    -0x8(%rbp),%rax
    0.00 :   66eb:   mov    (%rax),%rax
    0.00 :   66ee:   mov    -0x8(%rbp),%rdx
    0.00 :   66f2:   mov    0x8(%rdx),%rdx
    0.00 :   66f6:   mov    %rdx,%rsi
    0.00 :   66f9:   mov    %rax,%rdi
    0.00 :   66fc:   call   7778 <std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    0.00 :   6701:   nop
    0.00 :   6702:   leave
    0.00 :   6703:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (7 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000054f90 <__mpn_mul>:
    0.00 :   54f90:  endbr64
    0.00 :   54f94:  push   %rbp
   14.49 :   54f95:  mov    %rsp,%rbp
    0.00 :   54f98:  push   %r15
    0.00 :   54f9a:  mov    %rsi,%r15
    0.00 :   54f9d:  push   %r14
    0.00 :   54f9f:  push   %r13
    0.00 :   54fa1:  mov    %rdx,%r13
    0.00 :   54fa4:  push   %r12
    0.00 :   54fa6:  push   %rbx
    0.00 :   54fa7:  mov    %r8,%rbx
    0.00 :   54faa:  sub    $0x58,%rsp
    0.00 :   54fae:  mov    %rdi,-0x58(%rbp)
    0.00 :   54fb2:  mov    %rcx,-0x50(%rbp)
    0.00 :   54fb6:  mov    %fs:0x28,%rax
    0.00 :   54fbf:  mov    %rax,-0x38(%rbp)
   14.52 :   54fc3:  xor    %eax,%eax
    0.00 :   54fc5:  cmp    $0x1f,%r8
    0.00 :   54fc9:  jg     55030 <__mpn_mul+0xa0>
    0.00 :   54fcb:  test   %r8,%r8
    0.00 :   54fce:  jne    54ff8 <__mpn_mul+0x68>
    0.00 :   54fd0:  mov    -0x38(%rbp),%rdx
   42.26 :   54fd4:  sub    %fs:0x28,%rdx
    0.00 :   54fdd:  jne    5540f <__mpn_mul+0x47f>
    0.00 :   54fe3:  lea    -0x28(%rbp),%rsp
    0.00 :   54fe7:  pop    %rbx
    0.00 :   54fe8:  pop    %r12
    0.00 :   54fea:  pop    %r13
    0.00 :   54fec:  pop    %r14
   14.17 :   54fee:  pop    %r15
    0.00 :   54ff0:  pop    %rbp
    0.00 :   54ff1:  ret
    0.00 :   54ff2:  nopw   0x0(%rax,%rax,1)
    0.00 :   54ff8:  mov    (%rcx),%rcx
    0.00 :   54ffb:  cmp    $0x1,%rcx
    0.00 :   54fff:  ja     551e8 <__mpn_mul+0x258>
    0.00 :   55005:  je     5532b <__mpn_mul+0x39b>
    0.00 :   5500b:  test   %rdx,%rdx
    0.00 :   5500e:  jle    5501f <__mpn_mul+0x8f>
    0.00 :   55010:  lea    0x0(,%rdx,8),%rdx
    0.00 :   55018:  xor    %esi,%esi
    0.00 :   5501a:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   5501f:  xor    %eax,%eax
    0.00 :   55021:  jmp    551ed <__mpn_mul+0x25d>
    0.00 :   55026:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   55030:  mov    %r8,%rdx
    0.00 :   55033:  mov    %rsp,%rcx
    0.00 :   55036:  shl    $0x4,%rdx
    0.00 :   5503a:  lea    0x17(%rdx),%rax
    0.00 :   5503e:  add    $0x10,%rdx
    0.00 :   55042:  mov    %rax,%rsi
    0.00 :   55045:  and    $0xfffffffffffff000,%rsi
    0.00 :   5504c:  sub    %rsi,%rcx
    0.00 :   5504f:  cmp    %rcx,%rsp
    0.00 :   55052:  je     55069 <__mpn_mul+0xd9>
    0.00 :   55054:  sub    $0x1000,%rsp
    0.00 :   5505b:  orq    $0x0,0xff8(%rsp)
    0.00 :   55064:  cmp    %rcx,%rsp
    0.00 :   55067:  jne    55054 <__mpn_mul+0xc4>
    0.00 :   55069:  and    $0xfff,%edx
    0.00 :   5506f:  sub    %rdx,%rsp
    0.00 :   55072:  test   %rdx,%rdx
    0.00 :   55075:  jne    5538f <__mpn_mul+0x3ff>
    0.00 :   5507b:  lea    0xf(%rsp),%rdx
    0.00 :   55080:  mov    -0x58(%rbp),%r12
    0.00 :   55084:  mov    %rbx,%rcx
    0.00 :   55087:  mov    %r15,%rsi
    0.00 :   5508a:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5508e:  mov    %r13,%r14
    0.00 :   55091:  mov    %rax,-0x68(%rbp)
    0.00 :   55095:  mov    %rdx,-0x60(%rbp)
    0.00 :   55099:  mov    %rdx,%r8
    0.00 :   5509c:  mov    -0x50(%rbp),%rdx
    0.00 :   550a0:  mov    %r12,%rdi
    0.00 :   550a3:  sub    %rbx,%r14
    0.00 :   550a6:  call   55690 <__mpn_impn_mul_n>
    0.00 :   550ab:  lea    0x0(,%rbx,8),%rax
    0.00 :   550b3:  mov    %rax,-0x48(%rbp)
    0.00 :   550b7:  add    %rax,%r12
    0.00 :   550ba:  lea    (%r15,%rax,1),%r9
    0.00 :   550be:  cmp    %r14,%rbx
    0.00 :   550c1:  jg     551cb <__mpn_mul+0x23b>
    0.00 :   550c7:  mov    -0x68(%rbp),%rax
    0.00 :   550cb:  mov    %rsp,%rcx
    0.00 :   550ce:  mov    %rax,%rdx
    0.00 :   550d1:  and    $0xfffffffffffff000,%rax
    0.00 :   550d7:  sub    %rax,%rcx
    0.00 :   550da:  and    $0xfffffffffffffff0,%rdx
    0.00 :   550de:  cmp    %rcx,%rsp
    0.00 :   550e1:  je     550f8 <__mpn_mul+0x168>
    0.00 :   550e3:  sub    $0x1000,%rsp
    0.00 :   550ea:  orq    $0x0,0xff8(%rsp)
    0.00 :   550f3:  cmp    %rcx,%rsp
    0.00 :   550f6:  jne    550e3 <__mpn_mul+0x153>
    0.00 :   550f8:  and    $0xfff,%edx
    0.00 :   550fe:  sub    %rdx,%rsp
    0.00 :   55101:  test   %rdx,%rdx
    0.00 :   55104:  je     5510c <__mpn_mul+0x17c>
    0.00 :   55106:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   5510c:  mov    -0x48(%rbp),%rax
    0.00 :   55110:  lea    0xf(%rsp),%r15
    0.00 :   55115:  mov    %r13,-0x80(%rbp)
    0.00 :   55119:  mov    %rbx,%r13
    0.00 :   5511c:  and    $0xfffffffffffffff0,%r15
    0.00 :   55120:  add    %r15,%rax
    0.00 :   55123:  mov    %rax,-0x68(%rbp)
    0.00 :   55127:  add    $0x8,%rax
    0.00 :   5512b:  mov    %rax,-0x70(%rbp)
    0.00 :   5512f:  lea    -0x1(%rbx),%rax
    0.00 :   55133:  mov    %r12,%rbx
    0.00 :   55136:  mov    %r9,%r12
    0.00 :   55139:  mov    %rax,-0x78(%rbp)
    0.00 :   5513d:  nopl   (%rax)
    0.00 :   55140:  mov    -0x60(%rbp),%r8
    0.00 :   55144:  mov    -0x50(%rbp),%rdx
    0.00 :   55148:  mov    %r13,%rcx
    0.00 :   5514b:  mov    %r12,%rsi
    0.00 :   5514e:  mov    %r15,%rdi
    0.00 :   55151:  call   55690 <__mpn_impn_mul_n>
    0.00 :   55156:  mov    %rbx,%rdi
    0.00 :   55159:  mov    %r13,%rcx
    0.00 :   5515c:  mov    %r15,%rdx
    0.00 :   5515f:  mov    %rbx,%rsi
    0.00 :   55162:  call   54480 <__mpn_add_n>
    0.00 :   55167:  mov    -0x68(%rbp),%rcx
    0.00 :   5516b:  add    -0x48(%rbp),%rbx
    0.00 :   5516f:  xor    %edx,%edx
    0.00 :   55171:  lea    0x8(%rbx),%rdi
    0.00 :   55175:  add    (%rcx),%rax
    0.00 :   55178:  setb   %dl
    0.00 :   5517b:  mov    %rax,(%rbx)
    0.00 :   5517e:  test   %rdx,%rdx
    0.00 :   55181:  je     553c0 <__mpn_mul+0x430>
    0.00 :   55187:  mov    -0x70(%rbp),%rsi
    0.00 :   5518b:  lea    -0x1(%r13),%rdx
    0.00 :   5518f:  nop
    0.00 :   55190:  mov    (%rsi),%rax
    0.00 :   55193:  add    $0x8,%rdi
    0.00 :   55197:  add    $0x8,%rsi
    0.00 :   5519b:  add    $0x1,%rax
    0.00 :   5519f:  mov    %rax,-0x8(%rdi)
    0.00 :   551a3:  test   %rax,%rax
    0.00 :   551a6:  jne    553f8 <__mpn_mul+0x468>
    0.00 :   551ac:  sub    $0x1,%rdx
    0.00 :   551b0:  jne    55190 <__mpn_mul+0x200>
    0.00 :   551b2:  sub    %r13,%r14
    0.00 :   551b5:  add    -0x48(%rbp),%r12
    0.00 :   551b9:  cmp    %r14,%r13
    0.00 :   551bc:  jle    55140 <__mpn_mul+0x1b0>
    0.00 :   551be:  mov    %r12,%r9
    0.00 :   551c1:  mov    %rbx,%r12
    0.00 :   551c4:  mov    %r13,%rbx
    0.00 :   551c7:  mov    -0x80(%rbp),%r13
    0.00 :   551cb:  test   %r14,%r14
    0.00 :   551ce:  jne    55288 <__mpn_mul+0x2f8>
    0.00 :   551d4:  mov    -0x58(%rbp),%rax
    0.00 :   551d8:  add    %r13,%rbx
    0.00 :   551db:  mov    -0x8(%rax,%rbx,8),%rax
    0.00 :   551e0:  jmp    54fd0 <__mpn_mul+0x40>
    0.00 :   551e5:  nopl   (%rax)
    0.00 :   551e8:  call   55420 <__mpn_mul_1>
    0.00 :   551ed:  mov    -0x58(%rbp),%rsi
   14.56 :   551f1:  lea    0x0(,%r13,8),%r14
    0.00 :   551f9:  mov    %rax,(%rsi,%r13,8)
    0.00 :   551fd:  lea    0x8(%rsi),%rdi
    0.00 :   55201:  cmp    $0x1,%rbx
    0.00 :   55205:  jle    54fd0 <__mpn_mul+0x40>
    0.00 :   5520b:  mov    -0x50(%rbp),%r12
    0.00 :   5520f:  lea    (%rsi,%rbx,8),%rbx
    0.00 :   55213:  mov    %rbx,-0x48(%rbp)
    0.00 :   55217:  mov    %rdi,%rbx
    0.00 :   5521a:  add    $0x8,%r12
    0.00 :   5521e:  mov    %r12,%rax
    0.00 :   55221:  mov    %r14,%r12
    0.00 :   55224:  mov    %rax,%r14
    0.00 :   55227:  jmp    5524d <__mpn_mul+0x2bd>
    0.00 :   55229:  nopl   0x0(%rax)
    0.00 :   55230:  mov    $0x0,%eax
    0.00 :   55235:  je     55270 <__mpn_mul+0x2e0>
    0.00 :   55237:  mov    %rax,(%rbx,%r12,1)
    0.00 :   5523b:  add    $0x8,%r14
    0.00 :   5523f:  add    $0x8,%rbx
    0.00 :   55243:  cmp    %rbx,-0x48(%rbp)
    0.00 :   55247:  je     54fd0 <__mpn_mul+0x40>
    0.00 :   5524d:  mov    (%r14),%rcx
    0.00 :   55250:  cmp    $0x1,%rcx
    0.00 :   55254:  jbe    55230 <__mpn_mul+0x2a0>
    0.00 :   55256:  mov    %r13,%rdx
    0.00 :   55259:  mov    %r15,%rsi
    0.00 :   5525c:  mov    %rbx,%rdi
    0.00 :   5525f:  call   54530 <__mpn_addmul_1>
    0.00 :   55264:  jmp    55237 <__mpn_mul+0x2a7>
    0.00 :   55266:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   55270:  mov    %r13,%rcx
    0.00 :   55273:  mov    %r15,%rdx
    0.00 :   55276:  mov    %rbx,%rsi
    0.00 :   55279:  mov    %rbx,%rdi
    0.00 :   5527c:  call   54480 <__mpn_add_n>
    0.00 :   55281:  jmp    55237 <__mpn_mul+0x2a7>
    0.00 :   55283:  nopl   0x0(%rax,%rax,1)
    0.00 :   55288:  mov    -0x60(%rbp),%r15
    0.00 :   5528c:  mov    -0x50(%rbp),%rsi
    0.00 :   55290:  mov    %r14,%r8
    0.00 :   55293:  mov    %r9,%rcx
    0.00 :   55296:  mov    %rbx,%rdx
    0.00 :   55299:  mov    %r15,%rdi
    0.00 :   5529c:  call   54f90 <__mpn_mul>
    0.00 :   552a1:  mov    %r12,%rsi
    0.00 :   552a4:  mov    %r12,%rdi
    0.00 :   552a7:  mov    %rbx,%rcx
    0.00 :   552aa:  mov    %r15,%rdx
    0.00 :   552ad:  call   54480 <__mpn_add_n>
    0.00 :   552b2:  mov    -0x48(%rbp),%rdi
    0.00 :   552b6:  mov    %rax,%r8
    0.00 :   552b9:  mov    %r15,%rax
    0.00 :   552bc:  add    %rdi,%rax
    0.00 :   552bf:  add    %r12,%rdi
    0.00 :   552c2:  add    (%rax),%r8
    0.00 :   552c5:  lea    0x8(%rax),%rsi
    0.00 :   552c9:  mov    %rdi,%r10
    0.00 :   552cc:  setb   %al
    0.00 :   552cf:  mov    %r8,(%r10)
    0.00 :   552d2:  lea    0x8(%rdi),%rdi
    0.00 :   552d6:  movzbl %al,%eax
    0.00 :   552d9:  test   %rax,%rax
    0.00 :   552dc:  jne    55320 <__mpn_mul+0x390>
    0.00 :   552de:  cmp    %rsi,%rdi
    0.00 :   552e1:  je     551d4 <__mpn_mul+0x244>
    0.00 :   552e7:  cmp    $0x1,%r14
    0.00 :   552eb:  jle    551d4 <__mpn_mul+0x244>
    0.00 :   552f1:  lea    -0x8(,%r14,8),%rdx
    0.00 :   552f9:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   552fe:  jmp    551d4 <__mpn_mul+0x244>
    0.00 :   55303:  nopl   0x0(%rax,%rax,1)
    0.00 :   55308:  mov    (%rsi),%rax
    0.00 :   5530b:  add    $0x8,%rdi
    0.00 :   5530f:  add    $0x8,%rsi
    0.00 :   55313:  add    $0x1,%rax
    0.00 :   55317:  mov    %rax,-0x8(%rdi)
    0.00 :   5531b:  test   %rax,%rax
    0.00 :   5531e:  jne    552de <__mpn_mul+0x34e>
    0.00 :   55320:  sub    $0x1,%r14
    0.00 :   55324:  jne    55308 <__mpn_mul+0x378>
    0.00 :   55326:  jmp    551d4 <__mpn_mul+0x244>
    0.00 :   5532b:  test   %rdx,%rdx
    0.00 :   5532e:  jle    5501f <__mpn_mul+0x8f>
    0.00 :   55334:  lea    -0x1(%rdx),%rax
    0.00 :   55338:  cmp    $0x2,%rax
    0.00 :   5533c:  jbe    5539a <__mpn_mul+0x40a>
    0.00 :   5533e:  lea    0x8(%rsi),%rax
    0.00 :   55342:  mov    %rdi,%rcx
    0.00 :   55345:  cmp    %rax,%rdi
    0.00 :   55348:  je     5539a <__mpn_mul+0x40a>
    0.00 :   5534a:  shr    %rdx
    0.00 :   5534d:  xor    %eax,%eax
    0.00 :   5534f:  shl    $0x4,%rdx
    0.00 :   55353:  nopl   0x0(%rax,%rax,1)
    0.00 :   55358:  movdqu (%r15,%rax,1),%xmm0
    0.00 :   5535e:  movups %xmm0,(%rcx,%rax,1)
    0.00 :   55362:  add    $0x10,%rax
    0.00 :   55366:  cmp    %rdx,%rax
    0.00 :   55369:  jne    55358 <__mpn_mul+0x3c8>
    0.00 :   5536b:  mov    %r13,%rax
    0.00 :   5536e:  and    $0xfffffffffffffffe,%rax
    0.00 :   55372:  test   $0x1,%r13b
    0.00 :   55376:  je     5501f <__mpn_mul+0x8f>
    0.00 :   5537c:  mov    (%r15,%rax,8),%rdx
    0.00 :   55380:  mov    -0x58(%rbp),%rdi
    0.00 :   55384:  mov    %rdx,(%rdi,%rax,8)
    0.00 :   55388:  xor    %eax,%eax
    0.00 :   5538a:  jmp    551ed <__mpn_mul+0x25d>
    0.00 :   5538f:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   55395:  jmp    5507b <__mpn_mul+0xeb>
    0.00 :   5539a:  mov    -0x58(%rbp),%rcx
    0.00 :   5539e:  xor    %eax,%eax
    0.00 :   553a0:  mov    (%r15,%rax,8),%rdx
    0.00 :   553a4:  mov    %rdx,(%rcx,%rax,8)
    0.00 :   553a8:  add    $0x1,%rax
    0.00 :   553ac:  cmp    %rax,%r13
    0.00 :   553af:  jne    553a0 <__mpn_mul+0x410>
    0.00 :   553b1:  xor    %eax,%eax
    0.00 :   553b3:  jmp    551ed <__mpn_mul+0x25d>
    0.00 :   553b8:  nopl   0x0(%rax,%rax,1)
    0.00 :   553c0:  mov    -0x70(%rbp),%rax
    0.00 :   553c4:  mov    -0x78(%rbp),%rdx
    0.00 :   553c8:  mov    %rax,%rsi
    0.00 :   553cb:  cmp    %rax,%rdi
    0.00 :   553ce:  je     551b2 <__mpn_mul+0x222>
    0.00 :   553d4:  test   %rdx,%rdx
    0.00 :   553d7:  lea    0x0(,%rdx,8),%r8
    0.00 :   553df:  mov    $0x8,%eax
    0.00 :   553e4:  cmovle %rax,%r8
    0.00 :   553e8:  mov    %r8,%rdx
    0.00 :   553eb:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   553f0:  jmp    551b2 <__mpn_mul+0x222>
    0.00 :   553f5:  nopl   (%rax)
    0.00 :   553f8:  cmp    %rdi,%rsi
    0.00 :   553fb:  je     551b2 <__mpn_mul+0x222>
    0.00 :   55401:  sub    $0x1,%rdx
    0.00 :   55405:  test   %rdx,%rdx
    0.00 :   55408:  jg     553d4 <__mpn_mul+0x444>
    0.00 :   5540a:  jmp    551b2 <__mpn_mul+0x222>
    0.00 :   5540f:  call   136550 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008dc20 <_IO_setb>:
    0.00 :   8dc20:  endbr64
   21.39 :   8dc24:  push   %rbp
    0.00 :   8dc25:  movq   %rsi,%xmm0
    0.00 :   8dc2a:  movq   %rdx,%xmm1
    0.00 :   8dc2f:  mov    %ecx,%ebp
    0.00 :   8dc31:  push   %rbx
    0.00 :   8dc32:  mov    %rdi,%rbx
    0.00 :   8dc35:  punpcklqdq %xmm1,%xmm0
    0.00 :   8dc39:  sub    $0x18,%rsp
   14.94 :   8dc3d:  mov    0x38(%rdi),%rdi
    0.00 :   8dc41:  mov    (%rbx),%eax
   42.16 :   8dc43:  test   %rdi,%rdi
    0.00 :   8dc46:  je     8dc4c <_IO_setb+0x2c>
    0.00 :   8dc48:  test   $0x1,%al
    0.00 :   8dc4a:  je     8dc70 <_IO_setb+0x50>
    0.00 :   8dc4c:  mov    %eax,%edx
    0.00 :   8dc4e:  or     $0x1,%eax
    0.00 :   8dc51:  movups %xmm0,0x38(%rbx)
    0.00 :   8dc55:  and    $0xfffffffe,%edx
   21.52 :   8dc58:  test   %ebp,%ebp
    0.00 :   8dc5a:  cmovne %edx,%eax
    0.00 :   8dc5d:  mov    %eax,(%rbx)
    0.00 :   8dc5f:  add    $0x18,%rsp
    0.00 :   8dc63:  pop    %rbx
    0.00 :   8dc64:  pop    %rbp
    0.00 :   8dc65:  ret
    0.00 :   8dc66:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   8dc70:  movaps %xmm0,(%rsp)
    0.00 :   8dc74:  call   28370 <free@plt>
    0.00 :   8dc79:  mov    (%rbx),%eax
    0.00 :   8dc7b:  movdqa (%rsp),%xmm0
    0.00 :   8dc80:  jmp    8dc4c <_IO_setb+0x2c>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013def0 <std::ostream::operator<<(float)@@GLIBCXX_3.4>:
    0.00 :   13def0: endbr64
   21.86 :   13def4: cvtss2sd %xmm0,%xmm0
   78.14 :   13def8: jmp    a2240 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (7 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000098a4 <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::_M_max_size() const>:
    6.37 :   98a4:   endbr64
    0.00 :   98a8:   push   %rbp
    0.00 :   98a9:   mov    %rsp,%rbp
   15.77 :   98ac:   mov    %rdi,-0x8(%rbp)
    0.00 :   98b0:   movabs $0x7ffffffffffffff,%rax
   30.98 :   98ba:   pop    %rbp
   46.89 :   98bb:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009f6b0 <std::locale::id::_M_id() const@plt>:
  100.00 :   9f6b0:  endbr64
    0.00 :   9f6b4:  bnd jmp *0x18733d(%rip)        # 2269f8 <std::locale::id::_M_id() const@@GLIBCXX_3.4+0x165d48>
    0.00 :   9f6bb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000892a <std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >&, unsigned long)>:
    0.00 :   892a:   endbr64
    0.00 :   892e:   push   %rbp
   16.64 :   892f:   mov    %rsp,%rbp
    0.00 :   8932:   sub    $0x10,%rsp
   16.80 :   8936:   mov    %rdi,-0x8(%rbp)
    0.00 :   893a:   mov    %rsi,-0x10(%rbp)
   16.66 :   893e:   mov    -0x10(%rbp),%rcx
   16.71 :   8942:   mov    -0x8(%rbp),%rax
   16.57 :   8946:   mov    $0x0,%edx
    0.00 :   894b:   mov    %rcx,%rsi
    0.00 :   894e:   mov    %rax,%rdi
    0.00 :   8951:   call   98bc <__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::allocate(unsigned long, void const*)>
    0.00 :   8956:   leave
   16.62 :   8957:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005d8a <float& std::forward<float&>(std::remove_reference<float&>::type&)>:
    0.00 :   5d8a:   endbr64
    0.00 :   5d8e:   push   %rbp
    0.00 :   5d8f:   mov    %rsp,%rbp
    0.00 :   5d92:   mov    %rdi,-0x8(%rbp)
    0.00 :   5d96:   mov    -0x8(%rbp),%rax
  100.00 :   5d9a:   pop    %rbp
    0.00 :   5d9b:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000012e250 <std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::do_put(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, double) const@@GLIBCXX_3.4>:
  100.00 :   12e250: endbr64
    0.00 :   12e254: xor    %r9d,%r9d
    0.00 :   12e257: movsbl %r8b,%r8d
    0.00 :   12e25b: jmp    a0440 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (7 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000ae970 <operator new(unsigned long)@@GLIBCXX_3.4>:
   27.50 :   ae970:  endbr64
   18.18 :   ae974:  test   %rdi,%rdi
    0.00 :   ae977:  mov    $0x1,%eax
    0.00 :   ae97c:  push   %rbx
   17.95 :   ae97d:  cmovne %rdi,%rax
    0.00 :   ae981:  mov    %rax,%rbx
    0.00 :   ae984:  mov    %rbx,%rdi
    0.00 :   ae987:  call   9f0d0 <malloc@plt>
   18.16 :   ae98c:  test   %rax,%rax
    0.00 :   ae98f:  je     ae993 <operator new(unsigned long)@@GLIBCXX_3.4+0x23>
    0.00 :   ae991:  pop    %rbx
   18.20 :   ae992:  ret
    0.00 :   ae993:  call   9f120 <std::get_new_handler()@plt>
    0.00 :   ae998:  test   %rax,%rax
    0.00 :   ae99b:  je     a277e <__cxa_throw_bad_array_new_length@@CXXABI_1.3.8+0x132>
    0.00 :   ae9a1:  call   *%rax
    0.00 :   ae9a3:  jmp    ae984 <operator new(unsigned long)@@GLIBCXX_3.4+0x14>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009ca9 <std::pair<int, float>* std::__addressof<std::pair<int, float> >(std::pair<int, float>&)>:
   79.98 :   9ca9:   endbr64
    0.00 :   9cad:   push   %rbp
    0.00 :   9cae:   mov    %rsp,%rbp
    0.00 :   9cb1:   mov    %rdi,-0x8(%rbp)
   20.02 :   9cb5:   mov    -0x8(%rbp),%rax
    0.00 :   9cb9:   pop    %rbp
    0.00 :   9cba:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008095 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   8095:   endbr64
    0.00 :   8099:   push   %rbp
    0.00 :   809a:   mov    %rsp,%rbp
    0.00 :   809d:   push   %rbx
    0.00 :   809e:   sub    $0x38,%rsp
    0.00 :   80a2:   mov    %rdi,-0x28(%rbp)
    0.00 :   80a6:   mov    %rsi,-0x30(%rbp)
    0.00 :   80aa:   mov    %fs:0x28,%rax
    0.00 :   80b3:   mov    %rax,-0x18(%rbp)
    0.00 :   80b7:   xor    %eax,%eax
    0.00 :   80b9:   lea    -0x28(%rbp),%rdx
    0.00 :   80bd:   lea    -0x30(%rbp),%rax
    0.00 :   80c1:   mov    %rdx,%rsi
    0.00 :   80c4:   mov    %rax,%rdi
    0.00 :   80c7:   call   710f <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::difference_type __gnu_cxx::operator-<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   80cc:   mov    %rax,%rdx
    0.00 :   80cf:   shr    $0x3f,%rdx
    0.00 :   80d3:   add    %rdx,%rax
    0.00 :   80d6:   sar    %rax
    0.00 :   80d9:   mov    %rax,%rdx
    0.00 :   80dc:   lea    -0x28(%rbp),%rax
    0.00 :   80e0:   mov    %rdx,%rsi
    0.00 :   80e3:   mov    %rax,%rdi
    0.00 :   80e6:   call   816c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator+(long) const>
    0.00 :   80eb:   mov    %rax,-0x20(%rbp)
   40.07 :   80ef:   lea    -0x30(%rbp),%rax
    0.00 :   80f3:   mov    $0x1,%esi
    0.00 :   80f8:   mov    %rax,%rdi
    0.00 :   80fb:   call   908c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator-(long) const>
    0.00 :   8100:   mov    %rax,%rbx
    0.00 :   8103:   lea    -0x28(%rbp),%rax
    0.00 :   8107:   mov    $0x1,%esi
    0.00 :   810c:   mov    %rax,%rdi
    0.00 :   810f:   call   816c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator+(long) const>
    0.00 :   8114:   mov    %rax,%rsi
    0.00 :   8117:   mov    -0x20(%rbp),%rdx
    0.00 :   811b:   mov    -0x28(%rbp),%rax
    0.00 :   811f:   mov    %rbx,%rcx
    0.00 :   8122:   mov    %rax,%rdi
    0.00 :   8125:   call   913b <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   812a:   lea    -0x28(%rbp),%rax
    0.00 :   812e:   mov    $0x1,%esi
    0.00 :   8133:   mov    %rax,%rdi
    0.00 :   8136:   call   816c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator+(long) const>
    0.00 :   813b:   mov    %rax,%rcx
    0.00 :   813e:   mov    -0x28(%rbp),%rdx
    0.00 :   8142:   mov    -0x30(%rbp),%rax
    0.00 :   8146:   mov    %rax,%rsi
    0.00 :   8149:   mov    %rcx,%rdi
    0.00 :   814c:   call   9263 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   8151:   mov    -0x18(%rbp),%rdx
    0.00 :   8155:   sub    %fs:0x28,%rdx
   59.93 :   815e:   je     8165 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0xd0>
    0.00 :   8160:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   8165:   mov    -0x8(%rbp),%rbx
    0.00 :   8169:   leave
    0.00 :   816a:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000684e <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>:
    0.00 :   684e:   endbr64
    0.00 :   6852:   push   %rbp
    0.00 :   6853:   mov    %rsp,%rbp
    0.00 :   6856:   sub    $0x10,%rsp
   40.02 :   685a:   mov    %rdi,-0x8(%rbp)
    0.00 :   685e:   mov    %rsi,-0x10(%rbp)
    0.00 :   6862:   mov    -0x8(%rbp),%rax
   39.99 :   6866:   mov    -0x10(%rbp),%rdx
    0.00 :   686a:   mov    %rdx,%rsi
    0.00 :   686d:   mov    %rax,%rdi
    0.00 :   6870:   call   7d2a <std::__detail::_Node_iterator_base<std::pair<int const, float>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<int const, float>, false>*)>
    0.00 :   6875:   nop
    0.00 :   6876:   leave
   19.99 :   6877:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007c1e <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node_code_cache<false>&, unsigned long) const>:
   40.11 :   7c1e:   endbr64
    0.00 :   7c22:   push   %rbp
    0.00 :   7c23:   mov    %rsp,%rbp
    0.00 :   7c26:   mov    %rdi,-0x8(%rbp)
   39.86 :   7c2a:   mov    %rsi,-0x10(%rbp)
    0.00 :   7c2e:   mov    %rdx,-0x18(%rbp)
   20.03 :   7c32:   nop
    0.00 :   7c33:   pop    %rbp
    0.00 :   7c34:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000d0fe0 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4>:
    0.00 :   d0fe0:  endbr64
    0.00 :   d0fe4:  push   %r12
    0.00 :   d0fe6:  mov    %rdx,%r12
    0.00 :   d0fe9:  push   %rbp
    0.00 :   d0fea:  mov    %rsi,%rbp
    0.00 :   d0fed:  push   %rbx
    0.00 :   d0fee:  mov    %rdi,%rbx
    0.00 :   d0ff1:  sub    $0x10,%rsp
    0.00 :   d0ff5:  mov    (%rcx),%rdx
    0.00 :   d0ff8:  mov    %fs:0x28,%rax
    0.00 :   d1001:  mov    %rax,0x8(%rsp)
    0.00 :   d1006:  xor    %eax,%eax
    0.00 :   d1008:  mov    %rsp,%rsi
    0.00 :   d100b:  call   9e390 <__strtof_l@plt>
   20.18 :   d1010:  mov    (%rsp),%rax
    0.00 :   d1014:  movss  %xmm0,0x0(%rbp)
    0.00 :   d1019:  cmp    %rbx,%rax
    0.00 :   d101c:  je     d1023 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x43>
    0.00 :   d101e:  cmpb   $0x0,(%rax)
   20.06 :   d1021:  je     d1050 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x70>
    0.00 :   d1023:  movl   $0x0,0x0(%rbp)
    0.00 :   d102a:  movl   $0x4,(%r12)
    0.00 :   d1032:  mov    0x8(%rsp),%rax
    0.00 :   d1037:  sub    %fs:0x28,%rax
    0.00 :   d1040:  jne    d108c <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0xac>
    0.00 :   d1042:  add    $0x10,%rsp
    0.00 :   d1046:  pop    %rbx
    0.00 :   d1047:  pop    %rbp
    0.00 :   d1048:  pop    %r12
    0.00 :   d104a:  ret
    0.00 :   d104b:  nopl   0x0(%rax,%rax,1)
    0.00 :   d1050:  ucomiss 0xdce51(%rip),%xmm0        # 1adea8 <typeinfo name for std::strstream@@GLIBCXX_3.4+0x9e0>
   20.20 :   d1057:  jp     d1070 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x90>
   39.57 :   d1059:  jne    d1070 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x90>
    0.00 :   d105b:  movl   $0x7f7fffff,0x0(%rbp)
    0.00 :   d1062:  movl   $0x4,(%r12)
    0.00 :   d106a:  jmp    d1032 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x52>
    0.00 :   d106c:  nopl   0x0(%rax)
    0.00 :   d1070:  ucomiss 0xdce35(%rip),%xmm0        # 1adeac <typeinfo name for std::strstream@@GLIBCXX_3.4+0x9e4>
    0.00 :   d1077:  jp     d1032 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x52>
    0.00 :   d1079:  jne    d1032 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x52>
    0.00 :   d107b:  movl   $0xff7fffff,0x0(%rbp)
    0.00 :   d1082:  movl   $0x4,(%r12)
    0.00 :   d108a:  jmp    d1032 <void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&)@@GLIBCXX_3.4+0x52>
    0.00 :   d108c:  call   a0ef0 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a962 <std::tuple_element<0ul, std::tuple<int const&> >::type& std::get<0ul, int const&>(std::tuple<int const&>&)>:
   39.31 :   a962:   endbr64
    0.00 :   a966:   push   %rbp
    0.00 :   a967:   mov    %rsp,%rbp
    0.00 :   a96a:   sub    $0x10,%rsp
    0.00 :   a96e:   mov    %rdi,-0x8(%rbp)
    0.00 :   a972:   mov    -0x8(%rbp),%rax
   60.69 :   a976:   mov    %rax,%rdi
    0.00 :   a979:   call   abf2 <int const& std::__get_helper<0ul, int const&>(std::_Tuple_impl<0ul, int const&>&)>
    0.00 :   a97e:   leave
    0.00 :   a97f:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009cbb <void std::_Construct<std::pair<int, float>>(std::pair<int, float>*)>:
    0.00 :   9cbb:   endbr64
    0.00 :   9cbf:   push   %rbp
    0.00 :   9cc0:   mov    %rsp,%rbp
    0.00 :   9cc3:   sub    $0x10,%rsp
    0.00 :   9cc7:   mov    %rdi,-0x8(%rbp)
    0.00 :   9ccb:   mov    -0x8(%rbp),%rax
   38.97 :   9ccf:   mov    %rax,%rsi
    0.00 :   9cd2:   mov    $0x8,%edi
    0.00 :   9cd7:   call   3f09 <operator new(unsigned long, void*)>
   61.03 :   9cdc:   mov    %rax,%rdi
    0.00 :   9cdf:   call   a2ee <std::pair<int, float>::pair<int, float, true>()>
    0.00 :   9ce4:   nop
    0.00 :   9ce5:   leave
    0.00 :   9ce6:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (6 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013ce90 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@@GLIBCXX_3.4>:
    0.00 :   13ce90: endbr64
    0.00 :   13ce94: push   %rbp
    0.00 :   13ce95: mov    %rdi,%rbp
   19.74 :   13ce98: push   %rbx
    0.00 :   13ce99: sub    $0x8,%rsp
    0.00 :   13ce9d: test   %rsi,%rsi
    0.00 :   13cea0: je     13cec8 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@@GLIBCXX_3.4+0x38>
    0.00 :   13cea2: mov    %rsi,%rdi
    0.00 :   13cea5: mov    %rsi,%rbx
    0.00 :   13cea8: call   9fbb0 <strlen@plt>
    0.00 :   13cead: mov    %rbx,%rsi
    0.00 :   13ceb0: mov    %rbp,%rdi
    0.00 :   13ceb3: mov    %rax,%rdx
    0.00 :   13ceb6: call   a09f0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
    0.00 :   13cebb: add    $0x8,%rsp
    0.00 :   13cebf: mov    %rbp,%rax
   79.28 :   13cec2: pop    %rbx
    0.98 :   13cec3: pop    %rbp
    0.00 :   13cec4: ret
    0.00 :   13cec5: nopl   (%rax)
    0.00 :   13cec8: mov    (%rdi),%rax
    0.00 :   13cecb: mov    -0x18(%rax),%rdi
    0.00 :   13cecf: add    %rbp,%rdi
    0.00 :   13ced2: mov    0x20(%rdi),%esi
    0.00 :   13ced5: or     $0x1,%esi
    0.00 :   13ced8: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   13cedd: add    $0x8,%rsp
    0.00 :   13cee1: mov    %rbp,%rax
    0.00 :   13cee4: pop    %rbx
    0.00 :   13cee5: pop    %rbp
    0.00 :   13cee6: ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a0eb0 <__uselocale@plt>:
  100.00 :   a0eb0:  endbr64
    0.00 :   a0eb4:  bnd jmp *0x18673d(%rip)        # 2275f8 <__uselocale@GLIBC_2.3>
    0.00 :   a0ebb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000c2700 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4>:
    0.00 :   c2700:  endbr64
    0.00 :   c2704:  mov    0x18(%rdi),%eax
    0.00 :   c2707:  lea    0x1(%rsi),%rcx
    0.00 :   c270b:  movb   $0x25,(%rsi)
    0.00 :   c270e:  test   $0x8,%ah
    0.00 :   c2711:  je     c271b <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x1b>
    0.00 :   c2713:  movb   $0x2b,0x1(%rsi)
    0.00 :   c2717:  lea    0x2(%rsi),%rcx
    0.00 :   c271b:  test   $0x4,%ah
    0.00 :   c271e:  je     c2727 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x27>
    0.00 :   c2720:  movb   $0x23,(%rcx)
    0.00 :   c2723:  add    $0x1,%rcx
    0.00 :   c2727:  mov    %eax,%esi
    0.00 :   c2729:  and    $0x104,%esi
    0.00 :   c272f:  cmp    $0x104,%esi
   32.97 :   c2735:  je     c2798 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x98>
    0.00 :   c2737:  movzwl 0xeac16(%rip),%edi        # 1ad354 <std::money_base::_S_default_pattern@@GLIBCXX_3.4+0xdb>
    0.00 :   c273e:  mov    %di,(%rcx)
    0.00 :   c2741:  lea    0x2(%rcx),%rdi
    0.00 :   c2745:  test   %dl,%dl
    0.00 :   c2747:  jne    c2760 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x60>
    0.00 :   c2749:  cmp    $0x4,%esi
    0.00 :   c274c:  jne    c276c <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x6c>
    0.00 :   c274e:  mov    $0x66,%eax
    0.00 :   c2753:  lea    0x1(%rdi),%rdx
    0.00 :   c2757:  mov    %al,(%rdi)
    0.00 :   c2759:  movb   $0x0,(%rdx)
    0.00 :   c275c:  ret
    0.00 :   c275d:  nopl   (%rax)
    0.00 :   c2760:  mov    %dl,0x2(%rcx)
    0.00 :   c2763:  lea    0x3(%rcx),%rdi
    0.00 :   c2767:  cmp    $0x4,%esi
    0.00 :   c276a:  je     c274e <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x4e>
    0.00 :   c276c:  and    $0x4000,%eax
    0.00 :   c2771:  cmp    $0x1,%eax
    0.00 :   c2774:  sbb    %eax,%eax
   33.59 :   c2776:  and    $0x20,%eax
    0.00 :   c2779:  cmp    $0x100,%esi
   33.44 :   c277f:  jne    c2790 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x90>
    0.00 :   c2781:  add    $0x45,%eax
    0.00 :   c2784:  jmp    c2753 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x53>
    0.00 :   c2786:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   c2790:  add    $0x47,%eax
    0.00 :   c2793:  jmp    c2753 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0x53>
    0.00 :   c2795:  nopl   (%rax)
    0.00 :   c2798:  test   %dl,%dl
    0.00 :   c279a:  je     c27a2 <std::__num_base::_S_format_float(std::ios_base const&, char*, char)@@GLIBCXX_3.4+0xa2>
    0.00 :   c279c:  mov    %dl,(%rcx)
    0.00 :   c279e:  add    $0x1,%rcx
    0.00 :   c27a2:  and    $0x4000,%eax
    0.00 :   c27a7:  lea    0x1(%rcx),%rdx
    0.00 :   c27ab:  cmp    $0x1,%eax
    0.00 :   c27ae:  sbb    %eax,%eax
    0.00 :   c27b0:  and    $0x20,%eax
    0.00 :   c27b3:  add    $0x41,%eax
    0.00 :   c27b6:  mov    %al,(%rcx)
    0.00 :   c27b8:  movb   $0x0,(%rdx)
    0.00 :   c27bb:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a20f0 <memcpy@plt>:
   66.82 :   a20f0:  endbr64
   33.18 :   a20f4:  bnd jmp *0x185e1d(%rip)        # 227f18 <memcpy@GLIBC_2.14>
    0.00 :   a20fb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000f4910 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4>:
    0.00 :   f4910:  endbr64
    0.00 :   f4914:  movabs $0x3ffffffffffffff9,%rax
   46.04 :   f491e:  push   %rbx
    0.00 :   f491f:  cmp    %rdi,%rax
    0.00 :   f4922:  jb     f4986 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4+0x76>
    0.00 :   f4924:  mov    %rdi,%rbx
    0.00 :   f4927:  cmp    %rdi,%rsi
    0.00 :   f492a:  jae    f4970 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4+0x60>
    0.00 :   f492c:  lea    (%rsi,%rsi,1),%rax
    0.00 :   f4930:  cmp    %rax,%rdi
    0.00 :   f4933:  cmovb  %rax,%rbx
    0.00 :   f4937:  lea    0x39(%rbx),%rax
   23.85 :   f493b:  cmp    $0x1000,%rax
    0.00 :   f4941:  jbe    f4970 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4+0x60>
    0.00 :   f4943:  cmp    %rbx,%rsi
    0.00 :   f4946:  jae    f4970 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4+0x60>
    0.00 :   f4948:  and    $0xfff,%eax
    0.00 :   f494d:  add    $0x1000,%rbx
    0.00 :   f4954:  sub    %rax,%rbx
    0.00 :   f4957:  movabs $0x3ffffffffffffff9,%rax
    0.00 :   f4961:  cmp    %rax,%rbx
    0.00 :   f4964:  cmova  %rax,%rbx
    0.00 :   f4968:  lea    0x19(%rbx),%rdi
    0.00 :   f496c:  jmp    f4974 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@@GLIBCXX_3.4+0x64>
    0.00 :   f496e:  xchg   %ax,%ax
    0.00 :   f4970:  lea    0x19(%rbx),%rdi
    0.00 :   f4974:  call   9eba0 <operator new(unsigned long)@plt>
    0.00 :   f4979:  mov    %rbx,0x8(%rax)
    0.00 :   f497d:  movl   $0x0,0x10(%rax)
    0.00 :   f4984:  pop    %rbx
   30.11 :   f4985:  ret
    0.00 :   f4986:  lea    0xbd398(%rip),%rdi        # 1b1d25 <typeinfo name for std::basic_stringstream<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >@@GLIBCXX_3.4+0xa5>
    0.00 :   f498d:  call   9f190 <std::__throw_length_error(char const*)@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (4 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000045ec <std::__detail::_Node_iterator<std::pair<int const, float>, false, false>::operator++()>:
    0.00 :   45ec:   endbr64
    0.00 :   45f0:   push   %rbp
   24.93 :   45f1:   mov    %rsp,%rbp
    0.00 :   45f4:   sub    $0x10,%rsp
    0.00 :   45f8:   mov    %rdi,-0x8(%rbp)
    0.00 :   45fc:   mov    -0x8(%rbp),%rax
   75.07 :   4600:   mov    %rax,%rdi
    0.00 :   4603:   call   54aa <std::__detail::_Node_iterator_base<std::pair<int const, float>, false>::_M_incr()>
    0.00 :   4608:   mov    -0x8(%rbp),%rax
    0.00 :   460c:   leave
    0.00 :   460d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (4 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005d78 <int& std::forward<int&>(std::remove_reference<int&>::type&)>:
   49.98 :   5d78:   endbr64
    0.00 :   5d7c:   push   %rbp
    0.00 :   5d7d:   mov    %rsp,%rbp
   25.03 :   5d80:   mov    %rdi,-0x8(%rbp)
    0.00 :   5d84:   mov    -0x8(%rbp),%rax
   24.99 :   5d88:   pop    %rbp
    0.00 :   5d89:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000da4a0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18>:
    0.00 :   da4a0:  endbr64
    0.00 :   da4a4:  add    %rcx,%rdx
   25.13 :   da4a7:  mov    0x8(%rdi),%rcx
   24.99 :   da4ab:  cmp    %rdx,%rcx
   24.82 :   da4ae:  jb     da4c0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x20>
    0.00 :   da4b0:  xor    %eax,%eax
   25.05 :   da4b2:  xor    %edx,%edx
    0.00 :   da4b4:  and    $0x1,%eax
    0.00 :   da4b7:  ret
    0.00 :   da4b8:  nopl   0x0(%rax,%rax,1)
    0.00 :   da4c0:  mov    %rsi,%rax
    0.00 :   da4c3:  test   %rcx,%rcx
    0.00 :   da4c6:  jne    da570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0xd0>
    0.00 :   da4cc:  movsd  0xd5eb4(%rip),%xmm0        # 1b0388 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x9a8>
    0.00 :   da4d4:  cmp    $0xa,%rdx
    0.00 :   da4d8:  ja     da570 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0xd0>
    0.00 :   da4de:  pxor   %xmm1,%xmm1
    0.00 :   da4e2:  cvtss2sd (%rdi),%xmm1
    0.00 :   da4e6:  divsd  %xmm1,%xmm0
    0.00 :   da4ea:  test   %rax,%rax
    0.00 :   da4ed:  js     da597 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0xf7>
    0.00 :   da4f3:  pxor   %xmm2,%xmm2
    0.00 :   da4f7:  cvtsi2sd %rax,%xmm2
    0.00 :   da4fc:  comisd %xmm2,%xmm0
    0.00 :   da500:  jb     da5bd <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x11d>
    0.00 :   da506:  sub    $0x8,%rsp
    0.00 :   da50a:  movsd  0xd5e6e(%rip),%xmm2        # 1b0380 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x9a0>
    0.00 :   da512:  movapd %xmm0,%xmm1
    0.00 :   da516:  movsd  0xd5e4a(%rip),%xmm3        # 1b0368 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x988>
    0.00 :   da51e:  andpd  %xmm2,%xmm1
    0.00 :   da522:  ucomisd %xmm1,%xmm3
    0.00 :   da526:  movsd  0xd5e42(%rip),%xmm3        # 1b0370 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x990>
    0.00 :   da52e:  ja     da630 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x190>
    0.00 :   da534:  addsd  %xmm3,%xmm0
    0.00 :   da538:  movsd  0xd5e38(%rip),%xmm1        # 1b0378 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x998>
    0.00 :   da540:  comisd %xmm1,%xmm0
    0.00 :   da544:  jae    da6c0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x220>
    0.00 :   da54a:  cvttsd2si %xmm0,%rsi
    0.00 :   da54f:  add    %rax,%rax
    0.00 :   da552:  cmp    %rax,%rsi
    0.00 :   da555:  cmovb  %rax,%rsi
    0.00 :   da559:  call   9f4a0 <std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const@plt>
    0.00 :   da55e:  add    $0x8,%rsp
    0.00 :   da562:  mov    %rax,%rdx
    0.00 :   da565:  mov    $0x1,%eax
    0.00 :   da56a:  and    $0x1,%eax
    0.00 :   da56d:  ret
    0.00 :   da56e:  xchg   %ax,%ax
    0.00 :   da570:  test   %rdx,%rdx
    0.00 :   da573:  js     da610 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x170>
    0.00 :   da579:  pxor   %xmm0,%xmm0
    0.00 :   da57d:  pxor   %xmm1,%xmm1
    0.00 :   da581:  cvtsi2sd %rdx,%xmm0
    0.00 :   da586:  cvtss2sd (%rdi),%xmm1
    0.00 :   da58a:  divsd  %xmm1,%xmm0
    0.00 :   da58e:  test   %rax,%rax
    0.00 :   da591:  jns    da4f3 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x53>
    0.00 :   da597:  mov    %rax,%rdx
    0.00 :   da59a:  mov    %rax,%rcx
    0.00 :   da59d:  pxor   %xmm2,%xmm2
    0.00 :   da5a1:  shr    %rdx
    0.00 :   da5a4:  and    $0x1,%ecx
    0.00 :   da5a7:  or     %rcx,%rdx
    0.00 :   da5aa:  cvtsi2sd %rdx,%xmm2
    0.00 :   da5af:  addsd  %xmm2,%xmm2
    0.00 :   da5b3:  comisd %xmm2,%xmm0
    0.00 :   da5b7:  jae    da506 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x66>
    0.00 :   da5bd:  mulsd  %xmm2,%xmm1
    0.00 :   da5c1:  movsd  0xd5db7(%rip),%xmm2        # 1b0380 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x9a0>
    0.00 :   da5c9:  movsd  0xd5d97(%rip),%xmm3        # 1b0368 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x988>
    0.00 :   da5d1:  movapd %xmm1,%xmm0
    0.00 :   da5d5:  andpd  %xmm2,%xmm1
    0.00 :   da5d9:  ucomisd %xmm1,%xmm3
    0.00 :   da5dd:  ja     da678 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x1d8>
    0.00 :   da5e3:  movsd  0xd5d8d(%rip),%xmm1        # 1b0378 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x998>
    0.00 :   da5eb:  comisd %xmm1,%xmm0
    0.00 :   da5ef:  jb     da660 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x1c0>
    0.00 :   da5f1:  subsd  %xmm1,%xmm0
    0.00 :   da5f5:  xor    %edx,%edx
    0.00 :   da5f7:  cvttsd2si %xmm0,%rax
    0.00 :   da5fc:  mov    %rax,0x8(%rdi)
    0.00 :   da600:  xor    %eax,%eax
    0.00 :   da602:  and    $0x1,%eax
    0.00 :   da605:  btcq   $0x3f,0x8(%rdi)
    0.00 :   da60b:  ret
    0.00 :   da60c:  nopl   0x0(%rax)
    0.00 :   da610:  mov    %rdx,%rcx
    0.00 :   da613:  and    $0x1,%edx
    0.00 :   da616:  pxor   %xmm0,%xmm0
    0.00 :   da61a:  shr    %rcx
    0.00 :   da61d:  or     %rdx,%rcx
    0.00 :   da620:  cvtsi2sd %rcx,%xmm0
    0.00 :   da625:  addsd  %xmm0,%xmm0
    0.00 :   da629:  jmp    da4de <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x3e>
    0.00 :   da62e:  xchg   %ax,%ax
    0.00 :   da630:  cvttsd2si %xmm0,%rdx
    0.00 :   da635:  pxor   %xmm1,%xmm1
    0.00 :   da639:  andnpd %xmm0,%xmm2
    0.00 :   da63d:  cvtsi2sd %rdx,%xmm1
    0.00 :   da642:  movapd %xmm1,%xmm4
    0.00 :   da646:  cmpnlesd %xmm0,%xmm4
    0.00 :   da64b:  andpd  %xmm3,%xmm4
    0.00 :   da64f:  subsd  %xmm4,%xmm1
    0.00 :   da653:  movapd %xmm1,%xmm0
    0.00 :   da657:  orpd   %xmm2,%xmm0
    0.00 :   da65b:  jmp    da534 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x94>
    0.00 :   da660:  cvttsd2si %xmm0,%rax
    0.00 :   da665:  xor    %edx,%edx
    0.00 :   da667:  mov    %rax,0x8(%rdi)
    0.00 :   da66b:  xor    %eax,%eax
    0.00 :   da66d:  and    $0x1,%eax
    0.00 :   da670:  ret
    0.00 :   da671:  nopl   0x0(%rax)
    0.00 :   da678:  cvttsd2si %xmm0,%rax
    0.00 :   da67d:  pxor   %xmm1,%xmm1
    0.00 :   da681:  movsd  0xd5ce7(%rip),%xmm4        # 1b0370 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x990>
    0.00 :   da689:  andnpd %xmm0,%xmm2
    0.00 :   da68d:  cvtsi2sd %rax,%xmm1
    0.00 :   da692:  movapd %xmm1,%xmm3
    0.00 :   da696:  cmpnlesd %xmm0,%xmm3
    0.00 :   da69b:  andpd  %xmm4,%xmm3
    0.00 :   da69f:  subsd  %xmm3,%xmm1
    0.00 :   da6a3:  orpd   %xmm2,%xmm1
    0.00 :   da6a7:  movapd %xmm1,%xmm0
    0.00 :   da6ab:  movsd  0xd5cc5(%rip),%xmm1        # 1b0378 <std::__detail::__prime_list@@GLIBCXX_3.4.10+0x998>
    0.00 :   da6b3:  comisd %xmm1,%xmm0
    0.00 :   da6b7:  jae    da5f1 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x151>
    0.00 :   da6bd:  jmp    da660 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0x1c0>
    0.00 :   da6bf:  nop
    0.00 :   da6c0:  subsd  %xmm1,%xmm0
    0.00 :   da6c4:  cvttsd2si %xmm0,%rsi
    0.00 :   da6c9:  btc    $0x3f,%rsi
    0.00 :   da6ce:  jmp    da54f <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@@GLIBCXX_3.4.18+0xaf>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (4 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007a60 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_Hash_node()>:
   25.09 :   7a60:   endbr64
    0.00 :   7a64:   push   %rbp
    0.00 :   7a65:   mov    %rsp,%rbp
    0.00 :   7a68:   sub    $0x10,%rsp
    0.00 :   7a6c:   mov    %rdi,-0x8(%rbp)
    0.00 :   7a70:   mov    -0x8(%rbp),%rax
   74.91 :   7a74:   mov    %rax,%rdi
    0.00 :   7a77:   call   3f48 <std::__detail::_Hash_node_base::_Hash_node_base()>
    0.00 :   7a7c:   nop
    0.00 :   7a7d:   leave
    0.00 :   7a7e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a914 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&)>:
    0.00 :   a914:   endbr64
    0.00 :   a918:   push   %rbp
    0.00 :   a919:   mov    %rsp,%rbp
    0.00 :   a91c:   mov    %rdi,-0x18(%rbp)
    0.00 :   a920:   mov    %rsi,-0x20(%rbp)
    0.00 :   a924:   mov    %rdx,-0x28(%rbp)
    0.00 :   a928:   mov    -0x28(%rbp),%rax
    0.00 :   a92c:   mov    (%rax),%eax
    0.00 :   a92e:   mov    %eax,-0x4(%rbp)
    0.00 :   a931:   jmp    a941 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&)+0x2d>
    0.00 :   a933:   mov    -0x18(%rbp),%rax
   48.35 :   a937:   mov    -0x4(%rbp),%edx
    0.00 :   a93a:   mov    %edx,(%rax)
    0.00 :   a93c:   addq   $0x4,-0x18(%rbp)
   16.22 :   a941:   mov    -0x18(%rbp),%rax
   35.43 :   a945:   cmp    -0x20(%rbp),%rax
    0.00 :   a949:   jne    a933 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&)+0x1f>
    0.00 :   a94b:   nop
    0.00 :   a94c:   nop
    0.00 :   a94d:   pop    %rbp
    0.00 :   a94e:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000011da90 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@@GLIBCXX_3.4.21>:
    0.00 :   11da90: endbr64
    0.00 :   11da94: testb  $0x5,0x20(%rdi)
   48.48 :   11da98: sete   %al
   51.52 :   11da9b: ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (5 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b960 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>:
   46.14 :   b960:   endbr64
    0.00 :   b964:   push   %rbp
    0.00 :   b965:   mov    %rsp,%rbp
    0.00 :   b968:   mov    %rdi,-0x8(%rbp)
   26.97 :   b96c:   mov    -0x8(%rbp),%rax
   26.89 :   b970:   pop    %rbp
    0.00 :   b971:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000909a0 <__libc_alloca_cutoff>:
    0.00 :   909a0:  endbr64
    0.00 :   909a4:  mov    %fs:0x698,%rax
    0.00 :   909ad:  shr    $0x2,%rax
    0.00 :   909b1:  mov    $0x10000,%edx
    0.00 :   909b6:  sub    $0x1,%rax
    0.00 :   909ba:  cmp    $0xffff,%rax
    0.00 :   909c0:  ja     909df <__libc_alloca_cutoff+0x3f>
    0.00 :   909c2:  mov    %fs:0x698,%rax
    0.00 :   909cb:  mov    %rax,%rdx
    0.00 :   909ce:  shr    $0x2,%rdx
    0.00 :   909d2:  cmp    $0x3,%rax
    0.00 :   909d6:  mov    $0x40000,%eax
    0.00 :   909db:  cmovbe %rax,%rdx
    0.00 :   909df:  xor    %eax,%eax
    0.00 :   909e1:  cmp    %rdi,%rdx
    0.00 :   909e4:  setae  %al
  100.00 :   909e7:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000131e90 <std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@@GLIBCXX_3.4>:
   53.00 :   131e90: endbr64
   47.00 :   131e94: jmp    a0140 <std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007e16 <std::vector<float, std::allocator<float> >::size() const>:
    0.00 :   7e16:   endbr64
    0.00 :   7e1a:   push   %rbp
    0.00 :   7e1b:   mov    %rsp,%rbp
    0.00 :   7e1e:   mov    %rdi,-0x8(%rbp)
   33.29 :   7e22:   mov    -0x8(%rbp),%rax
   33.37 :   7e26:   mov    0x8(%rax),%rdx
   33.34 :   7e2a:   mov    -0x8(%rbp),%rax
    0.00 :   7e2e:   mov    (%rax),%rcx
    0.00 :   7e31:   mov    %rdx,%rax
    0.00 :   7e34:   sub    %rcx,%rax
    0.00 :   7e37:   sar    $0x2,%rax
    0.00 :   7e3b:   pop    %rbp
    0.00 :   7e3c:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000913b <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   913b:   endbr64
    0.00 :   913f:   push   %rbp
    0.00 :   9140:   mov    %rsp,%rbp
    0.00 :   9143:   sub    $0x30,%rsp
    0.00 :   9147:   mov    %rdi,-0x8(%rbp)
    0.00 :   914b:   mov    %rsi,-0x10(%rbp)
    0.00 :   914f:   mov    %rdx,-0x18(%rbp)
    0.00 :   9153:   mov    %rcx,-0x20(%rbp)
    0.00 :   9157:   mov    -0x18(%rbp),%rdx
    0.00 :   915b:   mov    -0x10(%rbp),%rcx
    0.00 :   915f:   lea    -0x21(%rbp),%rax
    0.00 :   9163:   mov    %rcx,%rsi
    0.00 :   9166:   mov    %rax,%rdi
    0.00 :   9169:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    0.00 :   916e:   test   %al,%al
    0.00 :   9170:   je     91ed <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0xb2>
    0.00 :   9172:   mov    -0x20(%rbp),%rdx
    0.00 :   9176:   mov    -0x18(%rbp),%rcx
    0.00 :   917a:   lea    -0x21(%rbp),%rax
    0.00 :   917e:   mov    %rcx,%rsi
    0.00 :   9181:   mov    %rax,%rdi
    0.00 :   9184:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    0.00 :   9189:   test   %al,%al
    0.00 :   918b:   je     91a5 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x6a>
    0.00 :   918d:   mov    -0x18(%rbp),%rdx
    0.00 :   9191:   mov    -0x8(%rbp),%rax
    0.00 :   9195:   mov    %rdx,%rsi
    0.00 :   9198:   mov    %rax,%rdi
    0.00 :   919b:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   91a0:   jmp    9260 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
    0.00 :   91a5:   mov    -0x20(%rbp),%rdx
    0.00 :   91a9:   mov    -0x10(%rbp),%rcx
    0.00 :   91ad:   lea    -0x21(%rbp),%rax
    0.00 :   91b1:   mov    %rcx,%rsi
    0.00 :   91b4:   mov    %rax,%rdi
    0.00 :   91b7:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    0.00 :   91bc:   test   %al,%al
    0.00 :   91be:   je     91d8 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x9d>
    0.00 :   91c0:   mov    -0x20(%rbp),%rdx
    0.00 :   91c4:   mov    -0x8(%rbp),%rax
    0.00 :   91c8:   mov    %rdx,%rsi
    0.00 :   91cb:   mov    %rax,%rdi
    0.00 :   91ce:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   91d3:   jmp    9260 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
    0.00 :   91d8:   mov    -0x10(%rbp),%rdx
    0.00 :   91dc:   mov    -0x8(%rbp),%rax
    0.00 :   91e0:   mov    %rdx,%rsi
    0.00 :   91e3:   mov    %rax,%rdi
    0.00 :   91e6:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   91eb:   jmp    9260 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
    0.00 :   91ed:   mov    -0x20(%rbp),%rdx
   33.34 :   91f1:   mov    -0x10(%rbp),%rcx
   33.34 :   91f5:   lea    -0x21(%rbp),%rax
    0.00 :   91f9:   mov    %rcx,%rsi
    0.00 :   91fc:   mov    %rax,%rdi
    0.00 :   91ff:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    0.00 :   9204:   test   %al,%al
    0.00 :   9206:   je     921d <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0xe2>
    0.00 :   9208:   mov    -0x10(%rbp),%rdx
    0.00 :   920c:   mov    -0x8(%rbp),%rax
    0.00 :   9210:   mov    %rdx,%rsi
    0.00 :   9213:   mov    %rax,%rdi
    0.00 :   9216:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   921b:   jmp    9260 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
    0.00 :   921d:   mov    -0x20(%rbp),%rdx
    0.00 :   9221:   mov    -0x18(%rbp),%rcx
    0.00 :   9225:   lea    -0x21(%rbp),%rax
    0.00 :   9229:   mov    %rcx,%rsi
    0.00 :   922c:   mov    %rax,%rdi
    0.00 :   922f:   call   90f6 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >) const>
    0.00 :   9234:   test   %al,%al
    0.00 :   9236:   je     924d <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x112>
    0.00 :   9238:   mov    -0x20(%rbp),%rdx
    0.00 :   923c:   mov    -0x8(%rbp),%rax
    0.00 :   9240:   mov    %rdx,%rsi
    0.00 :   9243:   mov    %rax,%rdi
    0.00 :   9246:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   924b:   jmp    9260 <void std::__move_median_to_first<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x125>
    0.00 :   924d:   mov    -0x18(%rbp),%rdx
    0.00 :   9251:   mov    -0x8(%rbp),%rax
    0.00 :   9255:   mov    %rdx,%rsi
    0.00 :   9258:   mov    %rax,%rdi
    0.00 :   925b:   call   9f61 <void std::iter_swap<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >)>
    0.00 :   9260:   nop
    0.00 :   9261:   leave
   33.32 :   9262:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008eeb <std::pair<int, float>* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::pair<int, float>*, unsigned long>(std::pair<int, float>*, unsigned long)>:
    0.00 :   8eeb:   endbr64
    0.00 :   8eef:   push   %rbp
    0.00 :   8ef0:   mov    %rsp,%rbp
    0.00 :   8ef3:   push   %rbx
    0.00 :   8ef4:   sub    $0x28,%rsp
    0.00 :   8ef8:   mov    %rdi,-0x28(%rbp)
    0.00 :   8efc:   mov    %rsi,-0x30(%rbp)
    0.00 :   8f00:   mov    -0x28(%rbp),%rax
    0.00 :   8f04:   mov    %rax,-0x18(%rbp)
    0.00 :   8f08:   jmp    8f28 <std::pair<int, float>* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::pair<int, float>*, unsigned long>(std::pair<int, float>*, unsigned long)+0x3d>
    0.00 :   8f0a:   mov    -0x18(%rbp),%rax
    0.00 :   8f0e:   mov    %rax,%rdi
    0.00 :   8f11:   call   9ca9 <std::pair<int, float>* std::__addressof<std::pair<int, float> >(std::pair<int, float>&)>
   66.53 :   8f16:   mov    %rax,%rdi
    0.00 :   8f19:   call   9cbb <void std::_Construct<std::pair<int, float>>(std::pair<int, float>*)>
   33.47 :   8f1e:   subq   $0x1,-0x30(%rbp)
    0.00 :   8f23:   addq   $0x8,-0x18(%rbp)
    0.00 :   8f28:   cmpq   $0x0,-0x30(%rbp)
    0.00 :   8f2d:   jne    8f0a <std::pair<int, float>* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::pair<int, float>*, unsigned long>(std::pair<int, float>*, unsigned long)+0x1f>
    0.00 :   8f2f:   mov    -0x18(%rbp),%rax
    0.00 :   8f33:   jmp    8f70 <std::pair<int, float>* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::pair<int, float>*, unsigned long>(std::pair<int, float>*, unsigned long)+0x85>
    0.00 :   8f35:   endbr64
    0.00 :   8f39:   mov    %rax,%rdi
    0.00 :   8f3c:   call   2360 <__cxa_begin_catch@plt>
    0.00 :   8f41:   mov    -0x18(%rbp),%rdx
    0.00 :   8f45:   mov    -0x28(%rbp),%rax
    0.00 :   8f49:   mov    %rdx,%rsi
    0.00 :   8f4c:   mov    %rax,%rdi
    0.00 :   8f4f:   call   70a6 <void std::_Destroy<std::pair<int, float>*>(std::pair<int, float>*, std::pair<int, float>*)>
    0.00 :   8f54:   call   24f0 <__cxa_rethrow@plt>
    0.00 :   8f59:   endbr64
    0.00 :   8f5d:   mov    %rax,%rbx
    0.00 :   8f60:   call   2560 <__cxa_end_catch@plt>
    0.00 :   8f65:   mov    %rbx,%rax
    0.00 :   8f68:   mov    %rax,%rdi
    0.00 :   8f6b:   call   2580 <_Unwind_Resume@plt>
    0.00 :   8f70:   mov    -0x8(%rbp),%rbx
    0.00 :   8f74:   leave
    0.00 :   8f75:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0f80 <__memset_avx2_unaligned_erms>:
    0.00 :   1a0f80: endbr64
    0.00 :   1a0f84: vmovd  %esi,%xmm0
    0.00 :   1a0f88: mov    %rdi,%rax
    0.00 :   1a0f8b: vpbroadcastb %xmm0,%ymm0
    0.00 :   1a0f90: cmp    $0x20,%rdx
    0.00 :   1a0f94: jb     1a1060 <__memset_avx2_unaligned_erms+0xe0>
    0.00 :   1a0f9a: cmp    $0x40,%rdx
    0.00 :   1a0f9e: ja     1a0fc0 <__memset_avx2_unaligned_erms+0x40>
    0.00 :   1a0fa0: vmovdqu %ymm0,(%rax)
    0.00 :   1a0fa4: vmovdqu %ymm0,-0x20(%rax,%rdx,1)
    0.00 :   1a0faa: vzeroupper
    0.00 :   1a0fad: ret
    0.00 :   1a0fae: xchg   %ax,%ax
    0.00 :   1a0fb0: vmovdqu %ymm0,-0x40(%rdi)
    0.00 :   1a0fb5: vmovdqu %ymm0,-0x20(%rdi)
    0.00 :   1a0fba: vzeroupper
    0.00 :   1a0fbd: ret
    0.00 :   1a0fbe: xchg   %ax,%ax
    0.00 :   1a0fc0: cmp    0x79429(%rip),%rdx        # 21a3f0 <__x86_rep_stosb_threshold>
    0.00 :   1a0fc7: ja     1a1040 <__memset_avx2_unaligned_erms+0xc0>
    0.00 :   1a0fc9: vmovdqu %ymm0,(%rax)
    0.00 :   1a0fcd: vmovdqu %ymm0,0x20(%rax)
    0.00 :   1a0fd2: add    %rdx,%rdi
    0.00 :   1a0fd5: cmp    $0x80,%rdx
    0.00 :   1a0fdc: jbe    1a0fb0 <__memset_avx2_unaligned_erms+0x30>
    0.00 :   1a0fde: vmovdqu %ymm0,0x40(%rax)
   33.09 :   1a0fe3: vmovdqu %ymm0,0x60(%rax)
    0.00 :   1a0fe8: add    $0xffffffffffffff80,%rdi
    0.00 :   1a0fec: cmp    $0x100,%rdx
    0.00 :   1a0ff3: jbe    1a1020 <__memset_avx2_unaligned_erms+0xa0>
    0.00 :   1a0ff5: lea    0x80(%rax),%rdx
    0.00 :   1a0ffc: and    $0xffffffffffffffc0,%rdx
    0.00 :   1a1000: vmovdqa %ymm0,(%rdx)
    0.00 :   1a1004: vmovdqa %ymm0,0x20(%rdx)
    0.00 :   1a1009: vmovdqa %ymm0,0x40(%rdx)
   66.91 :   1a100e: vmovdqa %ymm0,0x60(%rdx)
    0.00 :   1a1013: sub    $0xffffffffffffff80,%rdx
    0.00 :   1a1017: cmp    %rdi,%rdx
    0.00 :   1a101a: jb     1a1000 <__memset_avx2_unaligned_erms+0x80>
    0.00 :   1a101c: nopl   0x0(%rax)
    0.00 :   1a1020: vmovdqu %ymm0,(%rdi)
    0.00 :   1a1024: vmovdqu %ymm0,0x20(%rdi)
    0.00 :   1a1029: vmovdqu %ymm0,0x40(%rdi)
    0.00 :   1a102e: vmovdqu %ymm0,0x60(%rdi)
    0.00 :   1a1033: vzeroupper
    0.00 :   1a1036: ret
    0.00 :   1a1037: nopw   0x0(%rax,%rax,1)
    0.00 :   1a1040: movzbl %sil,%eax
    0.00 :   1a1044: mov    %rdx,%rcx
    0.00 :   1a1047: mov    %rdi,%rdx
    0.00 :   1a104a: rep stos %al,%es:(%rdi)
    0.00 :   1a104c: mov    %rdx,%rax
    0.00 :   1a104f: vzeroupper
    0.00 :   1a1052: ret
    0.00 :   1a1053: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a105e: xchg   %ax,%ax
    0.00 :   1a1060: cmp    $0x10,%edx
    0.00 :   1a1063: jae    1a1082 <__memset_avx2_unaligned_erms+0x102>
    0.00 :   1a1065: vmovq  %xmm0,%rdi
    0.00 :   1a106a: cmp    $0x8,%edx
    0.00 :   1a106d: jae    1a1090 <__memset_avx2_unaligned_erms+0x110>
    0.00 :   1a106f: cmp    $0x4,%edx
    0.00 :   1a1072: jae    1a10a0 <__memset_avx2_unaligned_erms+0x120>
    0.00 :   1a1074: cmp    $0x1,%edx
    0.00 :   1a1077: ja     1a10b0 <__memset_avx2_unaligned_erms+0x130>
    0.00 :   1a1079: jb     1a1033 <__memset_avx2_unaligned_erms+0xb3>
    0.00 :   1a107b: mov    %sil,(%rax)
    0.00 :   1a107e: vzeroupper
    0.00 :   1a1081: ret
    0.00 :   1a1082: vmovdqu %xmm0,(%rax)
    0.00 :   1a1086: vmovdqu %xmm0,-0x10(%rax,%rdx,1)
    0.00 :   1a108c: vzeroupper
    0.00 :   1a108f: ret
    0.00 :   1a1090: mov    %rdi,(%rax)
    0.00 :   1a1093: mov    %rdi,-0x8(%rax,%rdx,1)
    0.00 :   1a1098: vzeroupper
    0.00 :   1a109b: ret
    0.00 :   1a109c: nopl   0x0(%rax)
    0.00 :   1a10a0: mov    %edi,(%rax)
    0.00 :   1a10a2: mov    %edi,-0x4(%rax,%rdx,1)
    0.00 :   1a10a6: vzeroupper
    0.00 :   1a10a9: ret
    0.00 :   1a10aa: nopw   0x0(%rax,%rax,1)
    0.00 :   1a10b0: mov    %di,(%rax)
    0.00 :   1a10b3: mov    %dil,-0x1(%rax,%rdx,1)
    0.00 :   1a10b8: vzeroupper
    0.00 :   1a10bb: ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000acc10 <operator delete(void*)@@GLIBCXX_3.4>:
    0.00 :   acc10:  endbr64
  100.00 :   acc14:  jmp    9fb30 <free@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009f0d0 <malloc@plt>:
  100.00 :   9f0d0:  endbr64
    0.00 :   9f0d4:  bnd jmp *0x18762d(%rip)        # 226708 <malloc@GLIBC_2.2.5>
    0.00 :   9f0db:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000123080 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9>:
    0.00 :   123080: endbr64
    0.00 :   123084: push   %rbp
    0.00 :   123085: xor    %edx,%edx
    0.00 :   123087: mov    %rsp,%rbp
    0.00 :   12308a: push   %r14
    0.00 :   12308c: mov    %rsi,%r14
    0.00 :   12308f: push   %rbx
    0.00 :   123090: mov    %rdi,%rbx
    0.00 :   123093: lea    -0x1d(%rbp),%rdi
    0.00 :   123097: mov    %rbx,%rsi
    0.00 :   12309a: sub    $0x10,%rsp
    0.00 :   12309e: mov    %fs:0x28,%rax
    0.00 :   1230a7: mov    %rax,-0x18(%rbp)
    0.00 :   1230ab: xor    %eax,%eax
    0.00 :   1230ad: call   a1990 <std::istream::sentry::sentry(std::istream&, bool)@plt>
    0.00 :   1230b2: cmpb   $0x0,-0x1d(%rbp)
    0.00 :   1230b6: je     1230fc <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0x7c>
    0.00 :   1230b8: mov    (%rbx),%rax
    0.00 :   1230bb: movl   $0x0,-0x1c(%rbp)
    0.00 :   1230c2: mov    -0x18(%rax),%r9
    0.00 :   1230c6: add    %rbx,%r9
    0.00 :   1230c9: mov    0x100(%r9),%rdi
   33.43 :   1230d0: test   %rdi,%rdi
    0.00 :   1230d3: je     123134 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0xb4>
    0.00 :   1230d5: mov    (%rdi),%rax
   33.18 :   1230d8: lea    -0x1c(%rbp),%rcx
    0.00 :   1230dc: mov    $0xffffffff,%edx
    0.00 :   1230e1: mov    0xe8(%r9),%rsi
    0.00 :   1230e8: mov    %rdx,%r8
    0.00 :   1230eb: push   %r14
    0.00 :   1230ed: push   %rcx
    0.00 :   1230ee: xor    %ecx,%ecx
    0.00 :   1230f0: call   *0x48(%rax)
   33.39 :   1230f3: pop    %rax
    0.00 :   1230f4: pop    %rdx
    0.00 :   1230f5: mov    -0x1c(%rbp),%esi
    0.00 :   1230f8: test   %esi,%esi
    0.00 :   1230fa: jne    123120 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0xa0>
    0.00 :   1230fc: mov    -0x18(%rbp),%rax
    0.00 :   123100: sub    %fs:0x28,%rax
    0.00 :   123109: jne    123139 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0xb9>
    0.00 :   12310b: lea    -0x10(%rbp),%rsp
    0.00 :   12310f: mov    %rbx,%rax
    0.00 :   123112: pop    %rbx
    0.00 :   123113: pop    %r14
    0.00 :   123115: pop    %rbp
    0.00 :   123116: ret
    0.00 :   123117: nopw   0x0(%rax,%rax,1)
    0.00 :   123120: mov    (%rbx),%rax
    0.00 :   123123: mov    -0x18(%rax),%rdi
    0.00 :   123127: add    %rbx,%rdi
    0.00 :   12312a: or     0x20(%rdi),%esi
    0.00 :   12312d: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   123132: jmp    1230fc <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0x7c>
    0.00 :   123134: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   123139: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   12313e: endbr64
    0.00 :   123142: mov    %rax,%rdi
    0.00 :   123145: mov    %rdx,%rax
    0.00 :   123148: sub    $0x1,%rax
    0.00 :   12314c: jne    12316c <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0xec>
    0.00 :   12314e: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   123153: mov    (%rbx),%rax
    0.00 :   123156: mov    $0x1,%esi
    0.00 :   12315b: add    -0x18(%rax),%rbx
    0.00 :   12315f: mov    %rbx,%rdi
    0.00 :   123162: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   123167: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   12316c: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   123171: mov    (%rbx),%rax
    0.00 :   123174: mov    $0x1,%esi
    0.00 :   123179: mov    -0x18(%rax),%rdi
    0.00 :   12317d: add    %rbx,%rdi
    0.00 :   123180: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   123185: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   12318a: jmp    1230f5 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0x75>
    0.00 :   12318f: endbr64
    0.00 :   123193: mov    %rax,%rbx
    0.00 :   123196: jmp    1231a1 <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0x121>
    0.00 :   123198: endbr64
    0.00 :   12319c: mov    %rax,%rbx
    0.00 :   12319f: jmp    1231ae <std::istream& std::istream::_M_extract<float>(float&)@@GLIBCXX_3.4.9+0x12e>
    0.00 :   1231a1: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   1231a6: mov    %rbx,%rdi
    0.00 :   1231a9: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   1231ae: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   1231b3: mov    %rbx,%rdi
    0.00 :   1231b6: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000f5890 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@@GLIBCXX_3.4>:
    0.00 :   f5890:  endbr64
    0.00 :   f5894:  push   %rbp
    0.00 :   f5895:  push   %rbx
    0.00 :   f5896:  mov    %rdi,%rbx
    0.00 :   f5899:  sub    $0x8,%rsp
    0.00 :   f589d:  mov    (%rdi),%rdi
    0.00 :   f58a0:  add    %rdx,%rdi
    0.00 :   f58a3:  mov    %rsi,%rdx
    0.00 :   f58a6:  mov    0x8(%rbx),%rsi
    0.00 :   f58aa:  call   9e530 <std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)@plt>
    0.00 :   f58af:  mov    (%rbx),%rdx
    0.00 :   f58b2:  mov    %rax,%rbp
    0.00 :   f58b5:  lea    0x18(%rax),%rcx
    0.00 :   f58b9:  test   %rdx,%rdx
    0.00 :   f58bc:  je     f58d6 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@@GLIBCXX_3.4+0x46>
    0.00 :   f58be:  cmp    $0x1,%rdx
    0.00 :   f58c2:  je     f58f0 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@@GLIBCXX_3.4+0x60>
    0.00 :   f58c4:  mov    %rcx,%rdi
    0.00 :   f58c7:  lea    0x18(%rbx),%rsi
    0.00 :   f58cb:  call   a20f0 <memcpy@plt>
    0.00 :   f58d0:  mov    (%rbx),%rdx
    0.00 :   f58d3:  mov    %rax,%rcx
    0.00 :   f58d6:  cmp    0x12fc6b(%rip),%rbp        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   f58dd:  jne    f5903 <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@@GLIBCXX_3.4+0x73>
    0.00 :   f58df:  add    $0x8,%rsp
    0.00 :   f58e3:  mov    %rcx,%rax
    0.00 :   f58e6:  pop    %rbx
    0.00 :   f58e7:  pop    %rbp
    0.00 :   f58e8:  ret
    0.00 :   f58e9:  nopl   0x0(%rax)
    0.00 :   f58f0:  movzbl 0x18(%rbx),%eax
    0.00 :   f58f4:  cmp    0x12fc4d(%rip),%rbp        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   f58fb:  mov    %al,0x18(%rbp)
    0.00 :   f58fe:  mov    (%rbx),%rdx
    0.00 :   f5901:  je     f58df <std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long)@@GLIBCXX_3.4+0x4f>
   66.01 :   f5903:  movl   $0x0,0x10(%rbp)
   33.99 :   f590a:  mov    %rcx,%rax
    0.00 :   f590d:  mov    %rdx,0x0(%rbp)
    0.00 :   f5911:  movb   $0x0,0x18(%rbp,%rdx,1)
    0.00 :   f5916:  add    $0x8,%rsp
    0.00 :   f591a:  pop    %rbx
    0.00 :   f591b:  pop    %rbp
    0.00 :   f591c:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a21f0 <std::ostream::sentry::sentry(std::ostream&)@plt>:
   32.75 :   a21f0:  endbr64
   67.25 :   a21f4:  bnd jmp *0x185d9d(%rip)        # 227f98 <std::ostream::sentry::sentry(std::ostream&)@@GLIBCXX_3.4+0xec028>
    0.00 :   a21fb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000564c0 <__mpn_extract_double>:
    0.00 :   564c0:  endbr64
   50.56 :   564c4:  mov    %rdi,%rsi
    0.00 :   564c7:  mov    %rdx,%rdi
    0.00 :   564ca:  movq   %xmm0,%rdx
    0.00 :   564cf:  shr    $0x3f,%rdx
    0.00 :   564d3:  movq   %xmm0,%rax
    0.00 :   564d8:  mov    %edx,(%rcx)
    0.00 :   564da:  movq   %xmm0,%rdx
    0.00 :   564df:  shr    $0x34,%rdx
   49.44 :   564e3:  and    $0x7ff,%edx
    0.00 :   564e9:  sub    $0x3ff,%edx
    0.00 :   564ef:  mov    %edx,(%rdi)
    0.00 :   564f1:  movabs $0xfffffffffffff,%rdx
    0.00 :   564fb:  and    %rax,%rdx
    0.00 :   564fe:  shr    $0x30,%rax
    0.00 :   56502:  mov    %rdx,(%rsi)
    0.00 :   56505:  test   $0x7ff0,%eax
    0.00 :   5650a:  jne    56520 <__mpn_extract_double+0x60>
    0.00 :   5650c:  test   %rdx,%rdx
    0.00 :   5650f:  jne    56530 <__mpn_extract_double+0x70>
    0.00 :   56511:  movl   $0x0,(%rdi)
    0.00 :   56517:  mov    $0x1,%eax
    0.00 :   5651c:  ret
    0.00 :   5651d:  nopl   (%rax)
    0.00 :   56520:  bts    $0x34,%rdx
    0.00 :   56525:  mov    $0x1,%eax
    0.00 :   5652a:  mov    %rdx,(%rsi)
    0.00 :   5652d:  ret
    0.00 :   5652e:  xchg   %ax,%ax
    0.00 :   56530:  bsr    %rdx,%rcx
    0.00 :   56534:  mov    $0xfffffc02,%eax
    0.00 :   56539:  xor    $0x3f,%rcx
    0.00 :   5653d:  sub    $0xb,%ecx
    0.00 :   56540:  sub    %ecx,%eax
    0.00 :   56542:  shl    %cl,%rdx
    0.00 :   56545:  mov    %rdx,(%rsi)
    0.00 :   56548:  mov    %eax,(%rdi)
    0.00 :   5654a:  mov    $0x1,%eax
    0.00 :   5654f:  ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b994 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::base() const>:
    0.00 :   b994:   endbr64
    0.00 :   b998:   push   %rbp
    0.00 :   b999:   mov    %rsp,%rbp
    0.00 :   b99c:   mov    %rdi,-0x8(%rbp)
    0.00 :   b9a0:   mov    -0x8(%rbp),%rax
   50.00 :   b9a4:   pop    %rbp
   50.00 :   b9a5:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000013d310 <std::ostream::operator<<(int)@@GLIBCXX_3.4>:
    0.00 :   13d310: endbr64
    0.00 :   13d314: mov    (%rdi),%rax
    0.00 :   13d317: mov    -0x18(%rax),%rax
    0.00 :   13d31b: mov    0x18(%rdi,%rax,1),%eax
  100.00 :   13d31f: and    $0x4a,%eax
    0.00 :   13d322: cmp    $0x40,%eax
    0.00 :   13d325: je     13d338 <std::ostream::operator<<(int)@@GLIBCXX_3.4+0x28>
    0.00 :   13d327: cmp    $0x8,%eax
    0.00 :   13d32a: je     13d338 <std::ostream::operator<<(int)@@GLIBCXX_3.4+0x28>
    0.00 :   13d32c: movslq %esi,%rsi
    0.00 :   13d32f: jmp    9f360 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
    0.00 :   13d334: nopl   0x0(%rax)
    0.00 :   13d338: mov    %esi,%esi
    0.00 :   13d33a: jmp    9f360 <std::ostream& std::ostream::_M_insert<long>(long)@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ae59 <write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&)>:
    0.00 :   ae59:   endbr64
    0.00 :   ae5d:   push   %rbp
    0.00 :   ae5e:   mov    %rsp,%rbp
    0.00 :   ae61:   push   %rbx
    0.00 :   ae62:   sub    $0x248,%rsp
    0.00 :   ae69:   mov    %rdi,-0x248(%rbp)
    0.00 :   ae70:   mov    %rsi,-0x250(%rbp)
    0.00 :   ae77:   mov    %fs:0x28,%rax
    0.00 :   ae80:   mov    %rax,-0x18(%rbp)
    0.00 :   ae84:   xor    %eax,%eax
    0.00 :   ae86:   mov    -0x248(%rbp),%rcx
    0.00 :   ae8d:   lea    -0x220(%rbp),%rax
    0.00 :   ae94:   mov    $0x10,%edx
    0.00 :   ae99:   mov    %rcx,%rsi
    0.00 :   ae9c:   mov    %rax,%rdi
    0.00 :   ae9f:   call   25e0 <std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    0.00 :   aea4:   mov    -0x250(%rbp),%rax
    0.00 :   aeab:   mov    %rax,-0x228(%rbp)
    0.00 :   aeb2:   mov    -0x228(%rbp),%rax
    0.00 :   aeb9:   mov    %rax,%rdi
    0.00 :   aebc:   call   b6ce <std::vector<int, std::allocator<int> >::begin() const>
    0.00 :   aec1:   mov    %rax,-0x238(%rbp)
    0.00 :   aec8:   mov    -0x228(%rbp),%rax
    0.00 :   aecf:   mov    %rax,%rdi
    0.00 :   aed2:   call   b71a <std::vector<int, std::allocator<int> >::end() const>
    0.00 :   aed7:   mov    %rax,-0x230(%rbp)
    0.00 :   aede:   jmp    af32 <write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&)+0xd9>
    0.00 :   aee0:   lea    -0x238(%rbp),%rax
    0.00 :   aee7:   mov    %rax,%rdi
    0.00 :   aeea:   call   b7ce <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const>
    0.00 :   aeef:   mov    (%rax),%eax
    0.00 :   aef1:   mov    %eax,-0x23c(%rbp)
    0.00 :   aef7:   mov    -0x23c(%rbp),%edx
    0.00 :   aefd:   lea    -0x220(%rbp),%rax
    0.00 :   af04:   mov    %edx,%esi
    0.00 :   af06:   mov    %rax,%rdi
    0.00 :   af09:   call   2570 <std::ostream::operator<<(int)@plt>
    0.00 :   af0e:   mov    %rax,%rdx
    0.00 :   af11:   lea    0x11d8(%rip),%rax        # c0f0 <__pstl::execution::v1::unseq+0x55>
    0.00 :   af18:   mov    %rax,%rsi
   33.47 :   af1b:   mov    %rdx,%rdi
    0.00 :   af1e:   call   2440 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    0.00 :   af23:   lea    -0x238(%rbp),%rax
    0.00 :   af2a:   mov    %rax,%rdi
    0.00 :   af2d:   call   b7aa <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++()>
    0.00 :   af32:   lea    -0x230(%rbp),%rdx
    0.00 :   af39:   lea    -0x238(%rbp),%rax
    0.00 :   af40:   mov    %rdx,%rsi
    0.00 :   af43:   mov    %rax,%rdi
    0.00 :   af46:   call   b76a <bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&)>
    0.00 :   af4b:   test   %al,%al
   66.53 :   af4d:   jne    aee0 <write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&)+0x87>
    0.00 :   af4f:   lea    -0x220(%rbp),%rax
    0.00 :   af56:   mov    %rax,%rdi
    0.00 :   af59:   call   2500 <std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()@plt>
    0.00 :   af5e:   mov    -0x18(%rbp),%rax
    0.00 :   af62:   sub    %fs:0x28,%rax
    0.00 :   af6b:   je     af95 <write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&)+0x13c>
    0.00 :   af6d:   jmp    af90 <write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&)+0x137>
    0.00 :   af6f:   endbr64
    0.00 :   af73:   mov    %rax,%rbx
    0.00 :   af76:   lea    -0x220(%rbp),%rax
    0.00 :   af7d:   mov    %rax,%rdi
    0.00 :   af80:   call   2500 <std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()@plt>
    0.00 :   af85:   mov    %rbx,%rax
    0.00 :   af88:   mov    %rax,%rdi
    0.00 :   af8b:   call   2580 <_Unwind_Resume@plt>
    0.00 :   af90:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   af95:   mov    -0x8(%rbp),%rbx
    0.00 :   af99:   leave
    0.00 :   af9a:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000099fc0 <__pthread_once@GLIBC_2.2.5>:
   48.80 :   99fc0:  endbr64
    0.00 :   99fc4:  mov    (%rdi),%eax
   51.20 :   99fc6:  test   $0x2,%al
    0.00 :   99fc8:  je     99fd0 <__pthread_once@GLIBC_2.2.5+0x10>
    0.00 :   99fca:  xor    %eax,%eax
    0.00 :   99fcc:  ret
    0.00 :   99fcd:  nopl   (%rax)
    0.00 :   99fd0:  jmp    99e00 <__pthread_once_slow>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (6 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000a9fd <__gnu_cxx::__enable_if<std::__is_scalar<float>::__value, void>::__type std::__fill_a1<float*, float>(float*, float*, float const&)>:
    0.00 :   a9fd:   endbr64
    0.00 :   aa01:   push   %rbp
    0.00 :   aa02:   mov    %rsp,%rbp
    0.00 :   aa05:   mov    %rdi,-0x18(%rbp)
    0.00 :   aa09:   mov    %rsi,-0x20(%rbp)
    0.00 :   aa0d:   mov    %rdx,-0x28(%rbp)
    0.00 :   aa11:   mov    -0x28(%rbp),%rax
    0.00 :   aa15:   movss  (%rax),%xmm0
    0.00 :   aa19:   movss  %xmm0,-0x4(%rbp)
    0.00 :   aa1e:   jmp    aa32 <__gnu_cxx::__enable_if<std::__is_scalar<float>::__value, void>::__type std::__fill_a1<float*, float>(float*, float*, float const&)+0x35>
    0.00 :   aa20:   mov    -0x18(%rbp),%rax
    0.00 :   aa24:   movss  -0x4(%rbp),%xmm0
    0.00 :   aa29:   movss  %xmm0,(%rax)
   16.20 :   aa2d:   addq   $0x4,-0x18(%rbp)
   17.65 :   aa32:   mov    -0x18(%rbp),%rax
   66.15 :   aa36:   cmp    -0x20(%rbp),%rax
    0.00 :   aa3a:   jne    aa20 <__gnu_cxx::__enable_if<std::__is_scalar<float>::__value, void>::__type std::__fill_a1<float*, float>(float*, float*, float const&)+0x23>
    0.00 :   aa3c:   nop
    0.00 :   aa3d:   nop
    0.00 :   aa3e:   pop    %rbp
    0.00 :   aa3f:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000120c00 <std::istream::operator>>(int&)@@GLIBCXX_3.4>:
    0.00 :   120c00: endbr64
    0.00 :   120c04: push   %rbp
    0.00 :   120c05: xor    %edx,%edx
    0.00 :   120c07: mov    %rsp,%rbp
    0.00 :   120c0a: push   %r14
    0.00 :   120c0c: mov    %rsi,%r14
    0.00 :   120c0f: push   %rbx
    0.00 :   120c10: mov    %rdi,%rbx
    0.00 :   120c13: lea    -0x25(%rbp),%rdi
    0.00 :   120c17: mov    %rbx,%rsi
    0.00 :   120c1a: sub    $0x20,%rsp
    0.00 :   120c1e: mov    %fs:0x28,%rax
    0.00 :   120c27: mov    %rax,-0x18(%rbp)
    0.00 :   120c2b: xor    %eax,%eax
    0.00 :   120c2d: call   a1990 <std::istream::sentry::sentry(std::istream&, bool)@plt>
    0.00 :   120c32: cmpb   $0x0,-0x25(%rbp)
    0.00 :   120c36: je     120caa <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xaa>
    0.00 :   120c38: mov    (%rbx),%rax
    0.00 :   120c3b: movl   $0x0,-0x24(%rbp)
    0.00 :   120c42: mov    -0x18(%rax),%r9
    0.00 :   120c46: add    %rbx,%r9
    0.00 :   120c49: mov    0x100(%r9),%rdi
    0.00 :   120c50: test   %rdi,%rdi
    0.00 :   120c53: je     120cef <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xef>
    0.00 :   120c59: mov    (%rdi),%rax
   33.45 :   120c5c: lea    -0x20(%rbp),%rcx
   66.55 :   120c60: mov    $0xffffffff,%edx
    0.00 :   120c65: mov    0xe8(%r9),%rsi
    0.00 :   120c6c: push   %rcx
    0.00 :   120c6d: lea    -0x24(%rbp),%rcx
    0.00 :   120c71: mov    %rdx,%r8
    0.00 :   120c74: push   %rcx
    0.00 :   120c75: xor    %ecx,%ecx
    0.00 :   120c77: call   *0x18(%rax)
    0.00 :   120c7a: pop    %rax
    0.00 :   120c7b: mov    -0x20(%rbp),%rax
    0.00 :   120c7f: mov    -0x24(%rbp),%esi
    0.00 :   120c82: pop    %rdx
    0.00 :   120c83: cmp    $0xffffffff80000000,%rax
    0.00 :   120c89: jge    120cc8 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xc8>
    0.00 :   120c8b: or     $0x4,%esi
    0.00 :   120c8e: movl   $0x80000000,(%r14)
    0.00 :   120c95: mov    %esi,-0x24(%rbp)
    0.00 :   120c98: mov    (%rbx),%rax
    0.00 :   120c9b: mov    -0x18(%rax),%rdi
    0.00 :   120c9f: add    %rbx,%rdi
    0.00 :   120ca2: or     0x20(%rdi),%esi
    0.00 :   120ca5: call   a1d10 <std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@plt>
    0.00 :   120caa: mov    -0x18(%rbp),%rax
    0.00 :   120cae: sub    %fs:0x28,%rax
    0.00 :   120cb7: jne    120cf4 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xf4>
    0.00 :   120cb9: lea    -0x10(%rbp),%rsp
    0.00 :   120cbd: mov    %rbx,%rax
    0.00 :   120cc0: pop    %rbx
    0.00 :   120cc1: pop    %r14
    0.00 :   120cc3: pop    %rbp
    0.00 :   120cc4: ret
    0.00 :   120cc5: nopl   (%rax)
    0.00 :   120cc8: cmp    $0x7fffffff,%rax
    0.00 :   120cce: jg     120ce0 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xe0>
    0.00 :   120cd0: mov    %eax,(%r14)
    0.00 :   120cd3: test   %esi,%esi
    0.00 :   120cd5: je     120caa <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xaa>
    0.00 :   120cd7: jmp    120c98 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0x98>
    0.00 :   120cd9: nopl   0x0(%rax)
    0.00 :   120ce0: or     $0x4,%esi
    0.00 :   120ce3: movl   $0x7fffffff,(%r14)
    0.00 :   120cea: mov    %esi,-0x24(%rbp)
    0.00 :   120ced: jmp    120c98 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0x98>
    0.00 :   120cef: call   9f540 <std::__throw_bad_cast()@plt>
    0.00 :   120cf4: call   a0ef0 <__stack_chk_fail@plt>
    0.00 :   120cf9: endbr64
    0.00 :   120cfd: mov    %rax,%rdi
    0.00 :   120d00: mov    %rdx,%rax
    0.00 :   120d03: sub    $0x1,%rax
    0.00 :   120d07: jne    120d27 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0x127>
    0.00 :   120d09: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   120d0e: mov    (%rbx),%rax
    0.00 :   120d11: mov    $0x1,%esi
    0.00 :   120d16: add    -0x18(%rax),%rbx
    0.00 :   120d1a: mov    %rbx,%rdi
    0.00 :   120d1d: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   120d22: call   a1ec0 <__cxa_rethrow@plt>
    0.00 :   120d27: call   9e830 <__cxa_begin_catch@plt>
    0.00 :   120d2c: mov    (%rbx),%rax
    0.00 :   120d2f: mov    $0x1,%esi
    0.00 :   120d34: mov    -0x18(%rax),%rdi
    0.00 :   120d38: add    %rbx,%rdi
    0.00 :   120d3b: call   9fed0 <std::basic_ios<char, std::char_traits<char> >::_M_setstate(std::_Ios_Iostate)@plt>
    0.00 :   120d40: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120d45: mov    -0x24(%rbp),%esi
    0.00 :   120d48: jmp    120cd3 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0xd3>
    0.00 :   120d4a: endbr64
    0.00 :   120d4e: mov    %rax,%rbx
    0.00 :   120d51: jmp    120d5c <std::istream::operator>>(int&)@@GLIBCXX_3.4+0x15c>
    0.00 :   120d53: endbr64
    0.00 :   120d57: mov    %rax,%rbx
    0.00 :   120d5a: jmp    120d69 <std::istream::operator>>(int&)@@GLIBCXX_3.4+0x169>
    0.00 :   120d5c: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120d61: mov    %rbx,%rdi
    0.00 :   120d64: call   a1f70 <_Unwind_Resume@plt>
    0.00 :   120d69: call   a0a70 <__cxa_end_catch@plt>
    0.00 :   120d6e: mov    %rbx,%rdi
    0.00 :   120d71: call   a1f70 <_Unwind_Resume@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     0000000000028620 <*ABS*+0xa9c10@plt>:
  100.00 :   28620:  endbr64
    0.00 :   28624:  bnd jmp *0x1f1b35(%rip)        # 21a160 <_GLOBAL_OFFSET_TABLE_+0x160>
    0.00 :   2862b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008ddc0 <_IO_default_xsputn>:
  100.00 :   8ddc0:  endbr64
    0.00 :   8ddc4:  test   %rdx,%rdx
    0.00 :   8ddc7:  je     8dfa0 <_IO_default_xsputn+0x1e0>
    0.00 :   8ddcd:  push   %r15
    0.00 :   8ddcf:  mov    %rsi,%rcx
    0.00 :   8ddd2:  mov    %rdi,%r15
    0.00 :   8ddd5:  push   %r14
    0.00 :   8ddd7:  mov    %rdx,%r14
    0.00 :   8ddda:  push   %r13
    0.00 :   8dddc:  mov    %rdx,%r13
    0.00 :   8dddf:  push   %r12
    0.00 :   8dde1:  lea    0x188c18(%rip),%r12        # 216a00 <_IO_helper_jumps>
    0.00 :   8dde8:  push   %rbp
    0.00 :   8dde9:  lea    0x189978(%rip),%rbp        # 217768 <__stop___libc_IO_vtables>
    0.00 :   8ddf0:  push   %rbx
    0.00 :   8ddf1:  sub    %r12,%rbp
    0.00 :   8ddf4:  sub    $0x18,%rsp
    0.00 :   8ddf8:  jmp    8de40 <_IO_default_xsputn+0x80>
    0.00 :   8ddfa:  nopw   0x0(%rax,%rax,1)
    0.00 :   8de00:  test   %rbx,%rbx
    0.00 :   8de03:  jne    8dec8 <_IO_default_xsputn+0x108>
    0.00 :   8de09:  sub    %rbx,%r14
    0.00 :   8de0c:  test   %r14,%r14
    0.00 :   8de0f:  je     8deb3 <_IO_default_xsputn+0xf3>
    0.00 :   8de15:  mov    0xd8(%r15),%rax
    0.00 :   8de1c:  mov    %rax,%rdx
    0.00 :   8de1f:  sub    %r12,%rdx
    0.00 :   8de22:  cmp    %rdx,%rbp
    0.00 :   8de25:  jbe    8de80 <_IO_default_xsputn+0xc0>
    0.00 :   8de27:  movzbl (%rcx),%esi
    0.00 :   8de2a:  lea    0x1(%rcx),%rbx
    0.00 :   8de2e:  mov    %r15,%rdi
    0.00 :   8de31:  call   *0x18(%rax)
    0.00 :   8de34:  cmp    $0xffffffff,%eax
    0.00 :   8de37:  je     8deb0 <_IO_default_xsputn+0xf0>
    0.00 :   8de39:  sub    $0x1,%r14
    0.00 :   8de3d:  mov    %rbx,%rcx
    0.00 :   8de40:  mov    0x28(%r15),%rdi
    0.00 :   8de44:  mov    0x30(%r15),%rbx
    0.00 :   8de48:  cmp    %rbx,%rdi
    0.00 :   8de4b:  jae    8de0c <_IO_default_xsputn+0x4c>
    0.00 :   8de4d:  sub    %rdi,%rbx
    0.00 :   8de50:  cmp    %r14,%rbx
    0.00 :   8de53:  cmova  %r14,%rbx
    0.00 :   8de57:  cmp    $0x14,%rbx
    0.00 :   8de5b:  jbe    8de00 <_IO_default_xsputn+0x40>
    0.00 :   8de5d:  mov    %rcx,%rsi
    0.00 :   8de60:  mov    %rbx,%rdx
    0.00 :   8de63:  mov    %rcx,(%rsp)
    0.00 :   8de67:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   8de6c:  mov    (%rsp),%rcx
    0.00 :   8de70:  mov    %rax,0x28(%r15)
    0.00 :   8de74:  add    %rbx,%rcx
    0.00 :   8de77:  jmp    8de09 <_IO_default_xsputn+0x49>
    0.00 :   8de79:  nopl   0x0(%rax)
    0.00 :   8de80:  mov    %rcx,0x8(%rsp)
    0.00 :   8de85:  mov    %rax,(%rsp)
    0.00 :   8de89:  call   89ef0 <_IO_vtable_check>
    0.00 :   8de8e:  mov    0x8(%rsp),%rcx
    0.00 :   8de93:  mov    (%rsp),%rax
    0.00 :   8de97:  mov    %r15,%rdi
    0.00 :   8de9a:  movzbl (%rcx),%esi
    0.00 :   8de9d:  lea    0x1(%rcx),%rbx
    0.00 :   8dea1:  call   *0x18(%rax)
    0.00 :   8dea4:  cmp    $0xffffffff,%eax
    0.00 :   8dea7:  jne    8de39 <_IO_default_xsputn+0x79>
    0.00 :   8dea9:  nopl   0x0(%rax)
    0.00 :   8deb0:  sub    %r14,%r13
    0.00 :   8deb3:  add    $0x18,%rsp
    0.00 :   8deb7:  mov    %r13,%rax
    0.00 :   8deba:  pop    %rbx
    0.00 :   8debb:  pop    %rbp
    0.00 :   8debc:  pop    %r12
    0.00 :   8debe:  pop    %r13
    0.00 :   8dec0:  pop    %r14
    0.00 :   8dec2:  pop    %r15
    0.00 :   8dec4:  ret
    0.00 :   8dec5:  nopl   (%rax)
    0.00 :   8dec8:  lea    0x1(%rcx),%rsi
    0.00 :   8decc:  mov    %rdi,%rdx
    0.00 :   8decf:  lea    -0x1(%rbx),%rax
    0.00 :   8ded3:  sub    %rsi,%rdx
    0.00 :   8ded6:  cmp    $0xe,%rdx
    0.00 :   8deda:  jbe    8dfa8 <_IO_default_xsputn+0x1e8>
    0.00 :   8dee0:  cmp    $0x6,%rax
    0.00 :   8dee4:  jbe    8dfa8 <_IO_default_xsputn+0x1e8>
    0.00 :   8deea:  cmp    $0xe,%rax
    0.00 :   8deee:  jbe    8df7a <_IO_default_xsputn+0x1ba>
    0.00 :   8def4:  movdqu (%rcx),%xmm0
    0.00 :   8def8:  lea    0x10(%rcx),%rdx
    0.00 :   8defc:  lea    0x10(%rdi),%rax
    0.00 :   8df00:  lea    -0x11(%rbx),%rsi
    0.00 :   8df04:  movups %xmm0,(%rdi)
    0.00 :   8df07:  cmp    $0x10,%rbx
    0.00 :   8df0b:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df0d:  movzbl (%rdx),%r8d
    0.00 :   8df11:  mov    %r8b,(%rax)
    0.00 :   8df14:  test   %rsi,%rsi
    0.00 :   8df17:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df19:  movzbl 0x1(%rdx),%r8d
    0.00 :   8df1e:  mov    %r8b,0x1(%rax)
    0.00 :   8df22:  cmp    $0x1,%rsi
    0.00 :   8df26:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df28:  movzbl 0x2(%rdx),%r8d
    0.00 :   8df2d:  mov    %r8b,0x2(%rax)
    0.00 :   8df31:  cmp    $0x2,%rsi
    0.00 :   8df35:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df37:  movzbl 0x3(%rdx),%r8d
    0.00 :   8df3c:  mov    %r8b,0x3(%rax)
    0.00 :   8df40:  cmp    $0x3,%rsi
    0.00 :   8df44:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df46:  movzbl 0x4(%rdx),%r8d
    0.00 :   8df4b:  mov    %r8b,0x4(%rax)
    0.00 :   8df4f:  cmp    $0x4,%rsi
    0.00 :   8df53:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df55:  movzbl 0x5(%rdx),%r8d
    0.00 :   8df5a:  mov    %r8b,0x5(%rax)
    0.00 :   8df5e:  cmp    $0x5,%rsi
    0.00 :   8df62:  je     8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df64:  movzbl 0x6(%rdx),%edx
    0.00 :   8df68:  mov    %dl,0x6(%rax)
    0.00 :   8df6b:  add    %rbx,%rdi
    0.00 :   8df6e:  add    %rbx,%rcx
    0.00 :   8df71:  mov    %rdi,0x28(%r15)
    0.00 :   8df75:  jmp    8de09 <_IO_default_xsputn+0x49>
    0.00 :   8df7a:  mov    (%rcx),%rax
    0.00 :   8df7d:  lea    0x8(%rcx),%rdx
    0.00 :   8df81:  lea    -0x9(%rbx),%rsi
    0.00 :   8df85:  mov    %rax,(%rdi)
    0.00 :   8df88:  lea    0x8(%rdi),%rax
    0.00 :   8df8c:  cmp    $0x8,%rbx
    0.00 :   8df90:  jne    8df0d <_IO_default_xsputn+0x14d>
    0.00 :   8df96:  jmp    8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df98:  nopl   0x0(%rax,%rax,1)
    0.00 :   8dfa0:  xor    %eax,%eax
    0.00 :   8dfa2:  ret
    0.00 :   8dfa3:  nopl   0x0(%rax,%rax,1)
    0.00 :   8dfa8:  xor    %eax,%eax
    0.00 :   8dfaa:  nopw   0x0(%rax,%rax,1)
    0.00 :   8dfb0:  movzbl (%rcx,%rax,1),%edx
    0.00 :   8dfb4:  mov    %dl,(%rdi,%rax,1)
    0.00 :   8dfb7:  add    $0x1,%rax
    0.00 :   8dfbb:  cmp    %rbx,%rax
    0.00 :   8dfbe:  jne    8dfb0 <_IO_default_xsputn+0x1f0>
    0.00 :   8dfc0:  jmp    8df6b <_IO_default_xsputn+0x1ab>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000908c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator-(long) const>:
    0.00 :   908c:   endbr64
    0.00 :   9090:   push   %rbp
    0.00 :   9091:   mov    %rsp,%rbp
    0.00 :   9094:   sub    $0x30,%rsp
    0.00 :   9098:   mov    %rdi,-0x28(%rbp)
    0.00 :   909c:   mov    %rsi,-0x30(%rbp)
   49.95 :   90a0:   mov    %fs:0x28,%rax
    0.00 :   90a9:   mov    %rax,-0x8(%rbp)
    0.00 :   90ad:   xor    %eax,%eax
    0.00 :   90af:   mov    -0x28(%rbp),%rax
    0.00 :   90b3:   mov    (%rax),%rdx
   50.05 :   90b6:   mov    -0x30(%rbp),%rax
    0.00 :   90ba:   shl    $0x3,%rax
    0.00 :   90be:   neg    %rax
    0.00 :   90c1:   add    %rdx,%rax
    0.00 :   90c4:   mov    %rax,-0x18(%rbp)
    0.00 :   90c8:   lea    -0x18(%rbp),%rdx
    0.00 :   90cc:   lea    -0x10(%rbp),%rax
    0.00 :   90d0:   mov    %rdx,%rsi
    0.00 :   90d3:   mov    %rax,%rdi
    0.00 :   90d6:   call   5dae <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::__normal_iterator(std::pair<int, float>* const&)>
    0.00 :   90db:   mov    -0x10(%rbp),%rax
    0.00 :   90df:   mov    -0x8(%rbp),%rdx
    0.00 :   90e3:   sub    %fs:0x28,%rdx
    0.00 :   90ec:   je     90f3 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator-(long) const+0x67>
    0.00 :   90ee:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   90f3:   leave
    0.00 :   90f4:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (2 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000acc20 <operator delete(void*, unsigned long)@@CXXABI_1.3.9>:
   49.99 :   acc20:  endbr64
   50.01 :   acc24:  jmp    9f2e0 <operator delete(void*)@plt>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005580 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>:
    0.00 :   5580:   endbr64
    0.00 :   5584:   push   %rbp
    0.00 :   5585:   mov    %rsp,%rbp
    0.00 :   5588:   push   %rbx
    0.00 :   5589:   sub    $0x68,%rsp
    0.00 :   558d:   mov    %rdi,-0x58(%rbp)
    0.00 :   5591:   mov    %rsi,-0x60(%rbp)
    0.00 :   5595:   mov    %rdx,-0x68(%rbp)
    0.00 :   5599:   mov    %fs:0x28,%rax
    0.00 :   55a2:   mov    %rax,-0x18(%rbp)
    0.00 :   55a6:   xor    %eax,%eax
    0.00 :   55a8:   mov    -0x58(%rbp),%rax
    0.00 :   55ac:   lea    0x6b1e(%rip),%rdx        # c0d1 <__pstl::execution::v1::unseq+0x36>
    0.00 :   55b3:   mov    $0x1,%esi
    0.00 :   55b8:   mov    %rax,%rdi
    0.00 :   55bb:   call   6922 <std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const>
    0.00 :   55c0:   mov    %rax,-0x48(%rbp)
    0.00 :   55c4:   mov    -0x58(%rbp),%rax
    0.00 :   55c8:   mov    (%rax),%rax
    0.00 :   55cb:   mov    %rax,-0x40(%rbp)
    0.00 :   55cf:   mov    -0x58(%rbp),%rax
    0.00 :   55d3:   mov    0x8(%rax),%rax
    0.00 :   55d7:   mov    %rax,-0x38(%rbp)
    0.00 :   55db:   mov    -0x58(%rbp),%rax
    0.00 :   55df:   mov    %rax,%rdi
    0.00 :   55e2:   call   6a12 <std::vector<int, std::allocator<int> >::begin()>
   50.04 :   55e7:   mov    %rax,-0x50(%rbp)
    0.00 :   55eb:   lea    -0x50(%rbp),%rdx
    0.00 :   55ef:   lea    -0x60(%rbp),%rax
    0.00 :   55f3:   mov    %rdx,%rsi
    0.00 :   55f6:   mov    %rax,%rdi
    0.00 :   55f9:   call   6a5e <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)>
    0.00 :   55fe:   mov    %rax,-0x30(%rbp)
    0.00 :   5602:   mov    -0x58(%rbp),%rax
    0.00 :   5606:   mov    -0x48(%rbp),%rdx
    0.00 :   560a:   mov    %rdx,%rsi
    0.00 :   560d:   mov    %rax,%rdi
    0.00 :   5610:   call   6aa2 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    0.00 :   5615:   mov    %rax,-0x28(%rbp)
    0.00 :   5619:   mov    -0x28(%rbp),%rax
    0.00 :   561d:   mov    %rax,-0x20(%rbp)
    0.00 :   5621:   mov    -0x68(%rbp),%rax
    0.00 :   5625:   mov    %rax,%rdi
    0.00 :   5628:   call   68ac <int const& std::forward<int const&>(std::remove_reference<int const&>::type&)>
    0.00 :   562d:   mov    %rax,%rdx
    0.00 :   5630:   mov    -0x30(%rbp),%rax
    0.00 :   5634:   lea    0x0(,%rax,4),%rcx
    0.00 :   563c:   mov    -0x28(%rbp),%rax
    0.00 :   5640:   add    %rax,%rcx
    0.00 :   5643:   mov    -0x58(%rbp),%rax
    0.00 :   5647:   mov    %rcx,%rsi
    0.00 :   564a:   mov    %rax,%rdi
    0.00 :   564d:   call   54f2 <void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)>
    0.00 :   5652:   movq   $0x0,-0x20(%rbp)
    0.00 :   565a:   mov    -0x58(%rbp),%rax
    0.00 :   565e:   mov    %rax,%rdi
    0.00 :   5661:   call   30ac <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :   5666:   mov    %rax,%rbx
    0.00 :   5669:   lea    -0x60(%rbp),%rax
    0.00 :   566d:   mov    %rax,%rdi
    0.00 :   5670:   call   6b10 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const>
    0.00 :   5675:   mov    (%rax),%rsi
    0.00 :   5678:   mov    -0x28(%rbp),%rdx
    0.00 :   567c:   mov    -0x40(%rbp),%rax
    0.00 :   5680:   mov    %rbx,%rcx
    0.00 :   5683:   mov    %rax,%rdi
    0.00 :   5686:   call   6ad9 <std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&)>
    0.00 :   568b:   mov    %rax,-0x20(%rbp)
    0.00 :   568f:   addq   $0x4,-0x20(%rbp)
    0.00 :   5694:   mov    -0x58(%rbp),%rax
    0.00 :   5698:   mov    %rax,%rdi
    0.00 :   569b:   call   30ac <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    0.00 :   56a0:   mov    %rax,%rbx
    0.00 :   56a3:   lea    -0x60(%rbp),%rax
    0.00 :   56a7:   mov    %rax,%rdi
    0.00 :   56aa:   call   6b10 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const>
    0.00 :   56af:   mov    (%rax),%rax
    0.00 :   56b2:   mov    -0x20(%rbp),%rdx
    0.00 :   56b6:   mov    -0x38(%rbp),%rsi
    0.00 :   56ba:   mov    %rbx,%rcx
    0.00 :   56bd:   mov    %rax,%rdi
    0.00 :   56c0:   call   6ad9 <std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&)>
    0.00 :   56c5:   mov    %rax,-0x20(%rbp)
    0.00 :   56c9:   mov    -0x58(%rbp),%rax
    0.00 :   56cd:   mov    -0x58(%rbp),%rdx
    0.00 :   56d1:   mov    0x10(%rdx),%rdx
    0.00 :   56d5:   sub    -0x40(%rbp),%rdx
    0.00 :   56d9:   sar    $0x2,%rdx
    0.00 :   56dd:   mov    -0x40(%rbp),%rcx
    0.00 :   56e1:   mov    %rcx,%rsi
    0.00 :   56e4:   mov    %rax,%rdi
    0.00 :   56e7:   call   318e <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
    0.00 :   56ec:   mov    -0x58(%rbp),%rax
   49.96 :   56f0:   mov    -0x28(%rbp),%rdx
    0.00 :   56f4:   mov    %rdx,(%rax)
    0.00 :   56f7:   mov    -0x58(%rbp),%rax
    0.00 :   56fb:   mov    -0x20(%rbp),%rdx
    0.00 :   56ff:   mov    %rdx,0x8(%rax)
    0.00 :   5703:   mov    -0x48(%rbp),%rax
    0.00 :   5707:   lea    0x0(,%rax,4),%rdx
    0.00 :   570f:   mov    -0x28(%rbp),%rax
    0.00 :   5713:   add    %rax,%rdx
    0.00 :   5716:   mov    -0x58(%rbp),%rax
    0.00 :   571a:   mov    %rdx,0x10(%rax)
    0.00 :   571e:   nop
    0.00 :   571f:   mov    -0x18(%rbp),%rax
    0.00 :   5723:   sub    %fs:0x28,%rax
    0.00 :   572c:   je     5733 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x1b3>
    0.00 :   572e:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   5733:   mov    -0x8(%rbp),%rbx
    0.00 :   5737:   leave
    0.00 :   5738:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009b27 <std::enable_if<std::__is_bitwise_relocatable<float, void>::value, float*>::type std::__relocate_a_1<float, float>(float*, float*, float*, std::allocator<float>&)>:
    0.00 :   9b27:   endbr64
    0.00 :   9b2b:   push   %rbp
    0.00 :   9b2c:   mov    %rsp,%rbp
    0.00 :   9b2f:   sub    $0x30,%rsp
    0.00 :   9b33:   mov    %rdi,-0x18(%rbp)
    0.00 :   9b37:   mov    %rsi,-0x20(%rbp)
    0.00 :   9b3b:   mov    %rdx,-0x28(%rbp)
    0.00 :   9b3f:   mov    %rcx,-0x30(%rbp)
    0.00 :   9b43:   mov    -0x20(%rbp),%rax
   49.95 :   9b47:   sub    -0x18(%rbp),%rax
    0.00 :   9b4b:   sar    $0x2,%rax
    0.00 :   9b4f:   mov    %rax,-0x8(%rbp)
    0.00 :   9b53:   cmpq   $0x0,-0x8(%rbp)
    0.00 :   9b58:   jle    9b79 <std::enable_if<std::__is_bitwise_relocatable<float, void>::value, float*>::type std::__relocate_a_1<float, float>(float*, float*, float*, std::allocator<float>&)+0x52>
    0.00 :   9b5a:   mov    -0x8(%rbp),%rax
    0.00 :   9b5e:   lea    0x0(,%rax,4),%rdx
    0.00 :   9b66:   mov    -0x18(%rbp),%rcx
    0.00 :   9b6a:   mov    -0x28(%rbp),%rax
    0.00 :   9b6e:   mov    %rcx,%rsi
    0.00 :   9b71:   mov    %rax,%rdi
    0.00 :   9b74:   call   2550 <memmove@plt>
    0.00 :   9b79:   mov    -0x8(%rbp),%rax
    0.00 :   9b7d:   lea    0x0(,%rax,4),%rdx
    0.00 :   9b85:   mov    -0x28(%rbp),%rax
    0.00 :   9b89:   add    %rdx,%rax
    0.00 :   9b8c:   leave
   50.05 :   9b8d:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006b7e <__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >::__normal_iterator(float* const&)>:
    0.00 :   6b7e:   endbr64
    0.00 :   6b82:   push   %rbp
    0.00 :   6b83:   mov    %rsp,%rbp
    0.00 :   6b86:   mov    %rdi,-0x8(%rbp)
    0.00 :   6b8a:   mov    %rsi,-0x10(%rbp)
    0.00 :   6b8e:   mov    -0x10(%rbp),%rax
   50.06 :   6b92:   mov    (%rax),%rdx
    0.00 :   6b95:   mov    -0x8(%rbp),%rax
    0.00 :   6b99:   mov    %rdx,(%rax)
    0.00 :   6b9c:   nop
   49.94 :   6b9d:   pop    %rbp
    0.00 :   6b9e:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000096d6 <void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<int const, float>, false> >::destroy<std::pair<int const, float> >(std::pair<int const, float>*)>:
    0.00 :   96d6:   endbr64
    0.00 :   96da:   push   %rbp
    0.00 :   96db:   mov    %rsp,%rbp
    0.00 :   96de:   mov    %rdi,-0x8(%rbp)
    0.00 :   96e2:   mov    %rsi,-0x10(%rbp)
    0.00 :   96e6:   nop
    0.00 :   96e7:   pop    %rbp
  100.00 :   96e8:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000816c <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator+(long) const>:
   49.05 :   816c:   endbr64
    0.00 :   8170:   push   %rbp
   50.95 :   8171:   mov    %rsp,%rbp
    0.00 :   8174:   sub    $0x30,%rsp
    0.00 :   8178:   mov    %rdi,-0x28(%rbp)
    0.00 :   817c:   mov    %rsi,-0x30(%rbp)
    0.00 :   8180:   mov    %fs:0x28,%rax
    0.00 :   8189:   mov    %rax,-0x8(%rbp)
    0.00 :   818d:   xor    %eax,%eax
    0.00 :   818f:   mov    -0x28(%rbp),%rax
    0.00 :   8193:   mov    (%rax),%rdx
    0.00 :   8196:   mov    -0x30(%rbp),%rax
    0.00 :   819a:   shl    $0x3,%rax
    0.00 :   819e:   add    %rdx,%rax
    0.00 :   81a1:   mov    %rax,-0x18(%rbp)
    0.00 :   81a5:   lea    -0x18(%rbp),%rdx
    0.00 :   81a9:   lea    -0x10(%rbp),%rax
    0.00 :   81ad:   mov    %rdx,%rsi
    0.00 :   81b0:   mov    %rax,%rdi
    0.00 :   81b3:   call   5dae <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::__normal_iterator(std::pair<int, float>* const&)>
    0.00 :   81b8:   mov    -0x10(%rbp),%rax
    0.00 :   81bc:   mov    -0x8(%rbp),%rdx
    0.00 :   81c0:   sub    %fs:0x28,%rdx
    0.00 :   81c9:   je     81d0 <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator+(long) const+0x64>
    0.00 :   81cb:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   81d0:   leave
    0.00 :   81d1:   ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000056610 <__mpn_construct_float>:
    0.00 :   56610:  endbr64
    0.00 :   56614:  mov    (%rdi),%rax
    0.00 :   56617:  add    $0x7f,%esi
    0.00 :   5661a:  shl    $0x1f,%edx
    0.00 :   5661d:  movzbl %sil,%esi
    0.00 :   56621:  shl    $0x17,%esi
    0.00 :   56624:  and    $0x7fffff,%eax
   50.56 :   56629:  or     %eax,%esi
    0.00 :   5662b:  or     %edx,%esi
    0.00 :   5662d:  movd   %esi,%xmm0
   49.44 :   56631:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (2 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000f5ec0 <std::string::push_back(char)@@GLIBCXX_3.4>:
    0.00 :   f5ec0:  endbr64
    0.00 :   f5ec4:  push   %r13
    0.00 :   f5ec6:  push   %r12
    0.00 :   f5ec8:  push   %rbp
    0.00 :   f5ec9:  mov    %esi,%ebp
    0.00 :   f5ecb:  push   %rbx
    0.00 :   f5ecc:  mov    %rdi,%rbx
    0.00 :   f5ecf:  sub    $0x8,%rsp
    0.00 :   f5ed3:  mov    (%rdi),%rax
    0.00 :   f5ed6:  mov    -0x18(%rax),%r13
   51.09 :   f5eda:  lea    0x1(%r13),%r12
    0.00 :   f5ede:  cmp    %r12,-0x10(%rax)
    0.00 :   f5ee2:  jb     f5ef7 <std::string::push_back(char)@@GLIBCXX_3.4+0x37>
    0.00 :   f5ee4:  mov    0x12f3f5(%rip),%rdx        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   f5eeb:  cmpb   $0x0,(%rdx)
    0.00 :   f5eee:  je     f5f38 <std::string::push_back(char)@@GLIBCXX_3.4+0x78>
    0.00 :   f5ef0:  mov    -0x8(%rax),%edx
    0.00 :   f5ef3:  test   %edx,%edx
   48.91 :   f5ef5:  jle    f5f30 <std::string::push_back(char)@@GLIBCXX_3.4+0x70>
    0.00 :   f5ef7:  mov    %r12,%rsi
    0.00 :   f5efa:  mov    %rbx,%rdi
    0.00 :   f5efd:  call   9eb00 <std::string::reserve(unsigned long)@plt>
    0.00 :   f5f02:  mov    (%rbx),%rax
    0.00 :   f5f05:  mov    -0x18(%rax),%rdx
    0.00 :   f5f09:  mov    %bpl,(%rax,%rdx,1)
    0.00 :   f5f0d:  mov    (%rbx),%rax
    0.00 :   f5f10:  lea    -0x18(%rax),%rdx
    0.00 :   f5f14:  cmp    0x12f62d(%rip),%rdx        # 225548 <std::string::_Rep::_S_empty_rep_storage@@GLIBCXX_3.4-0x60b8>
    0.00 :   f5f1b:  jne    f5f50 <std::string::push_back(char)@@GLIBCXX_3.4+0x90>
    0.00 :   f5f1d:  add    $0x8,%rsp
    0.00 :   f5f21:  pop    %rbx
    0.00 :   f5f22:  pop    %rbp
    0.00 :   f5f23:  pop    %r12
    0.00 :   f5f25:  pop    %r13
    0.00 :   f5f27:  ret
    0.00 :   f5f28:  nopl   0x0(%rax,%rax,1)
    0.00 :   f5f30:  mov    %r13,%rdx
    0.00 :   f5f33:  jmp    f5f09 <std::string::push_back(char)@@GLIBCXX_3.4+0x49>
    0.00 :   f5f35:  nopl   (%rax)
    0.00 :   f5f38:  mov    -0x8(%rax),%eax
    0.00 :   f5f3b:  test   %eax,%eax
    0.00 :   f5f3d:  jg     f5ef7 <std::string::push_back(char)@@GLIBCXX_3.4+0x37>
    0.00 :   f5f3f:  mov    (%rdi),%rax
    0.00 :   f5f42:  mov    -0x18(%rax),%rdx
    0.00 :   f5f46:  jmp    f5f09 <std::string::push_back(char)@@GLIBCXX_3.4+0x49>
    0.00 :   f5f48:  nopl   0x0(%rax,%rax,1)
    0.00 :   f5f50:  movl   $0x0,-0x8(%rax)
    0.00 :   f5f57:  mov    %r12,-0x18(%rax)
    0.00 :   f5f5b:  movb   $0x0,0x1(%rax,%r13,1)
    0.00 :   f5f61:  add    $0x8,%rsp
    0.00 :   f5f65:  pop    %rbx
    0.00 :   f5f66:  pop    %rbp
    0.00 :   f5f67:  pop    %r12
    0.00 :   f5f69:  pop    %r13
    0.00 :   f5f6b:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (2 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a08d0 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@plt>:
  100.00 :   a08d0:  endbr64
    0.00 :   a08d4:  bnd jmp *0x186a2d(%rip)        # 227308 <std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)@@GLIBCXX_3.4+0xdcb18>
    0.00 :   a08db:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ac43 <read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    0.00 :   ac43:   endbr64
    0.00 :   ac47:   push   %rbp
    0.00 :   ac48:   mov    %rsp,%rbp
    0.00 :   ac4b:   push   %rbx
    0.00 :   ac4c:   sub    $0x238,%rsp
    0.00 :   ac53:   mov    %rdi,-0x238(%rbp)
    0.00 :   ac5a:   mov    %rsi,-0x240(%rbp)
    0.00 :   ac61:   mov    %fs:0x28,%rax
    0.00 :   ac6a:   mov    %rax,-0x18(%rbp)
    0.00 :   ac6e:   xor    %eax,%eax
    0.00 :   ac70:   mov    -0x240(%rbp),%rcx
    0.00 :   ac77:   lea    -0x220(%rbp),%rax
    0.00 :   ac7e:   mov    $0x8,%edx
    0.00 :   ac83:   mov    %rcx,%rsi
    0.00 :   ac86:   mov    %rax,%rdi
    0.00 :   ac89:   call   2540 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    0.00 :   ac8e:   mov    -0x238(%rbp),%rax
    0.00 :   ac95:   mov    %rax,%rdi
    0.00 :   ac98:   call   2ac8 <std::vector<int, std::allocator<int> >::vector()>
    0.00 :   ac9d:   jmp    acb8 <read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x75>
    0.00 :   ac9f:   lea    -0x224(%rbp),%rdx
    0.00 :   aca6:   mov    -0x238(%rbp),%rax
    0.00 :   acad:   mov    %rdx,%rsi
    0.00 :   acb0:   mov    %rax,%rdi
    0.00 :   acb3:   call   4662 <std::vector<int, std::allocator<int> >::push_back(int const&)>
    0.00 :   acb8:   lea    -0x224(%rbp),%rdx
    0.00 :   acbf:   lea    -0x220(%rbp),%rax
    0.00 :   acc6:   mov    %rdx,%rsi
    0.00 :   acc9:   mov    %rax,%rdi
    0.00 :   accc:   call   23b0 <std::istream::operator>>(int&)@plt>
   50.40 :   acd1:   mov    (%rax),%rdx
    0.00 :   acd4:   sub    $0x18,%rdx
    0.00 :   acd8:   mov    (%rdx),%rdx
    0.00 :   acdb:   add    %rdx,%rax
    0.00 :   acde:   mov    %rax,%rdi
    0.00 :   ace1:   call   24d0 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
   49.60 :   ace6:   test   %al,%al
    0.00 :   ace8:   jne    ac9f <read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
    0.00 :   acea:   nop
    0.00 :   aceb:   lea    -0x220(%rbp),%rax
    0.00 :   acf2:   mov    %rax,%rdi
    0.00 :   acf5:   call   2340 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
    0.00 :   acfa:   nop
    0.00 :   acfb:   mov    -0x18(%rbp),%rax
    0.00 :   acff:   sub    %fs:0x28,%rax
    0.00 :   ad08:   je     ad41 <read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfe>
    0.00 :   ad0a:   jmp    ad3c <read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf9>
    0.00 :   ad0c:   endbr64
    0.00 :   ad10:   mov    %rax,%rbx
    0.00 :   ad13:   mov    -0x238(%rbp),%rax
    0.00 :   ad1a:   mov    %rax,%rdi
    0.00 :   ad1d:   call   2d66 <std::vector<int, std::allocator<int> >::~vector()>
    0.00 :   ad22:   lea    -0x220(%rbp),%rax
    0.00 :   ad29:   mov    %rax,%rdi
    0.00 :   ad2c:   call   2340 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
    0.00 :   ad31:   mov    %rbx,%rax
    0.00 :   ad34:   mov    %rax,%rdi
    0.00 :   ad37:   call   2580 <_Unwind_Resume@plt>
    0.00 :   ad3c:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   ad41:   mov    -0x238(%rbp),%rax
    0.00 :   ad48:   mov    -0x8(%rbp),%rbx
    0.00 :   ad4c:   leave
    0.00 :   ad4d:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009f630 <pthread_once@plt>:
    0.00 :   9f630:  endbr64
  100.00 :   9f634:  bnd jmp *0x18737d(%rip)        # 2269b8 <pthread_once@GLIBC_2.34>
    0.00 :   9f63b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0710 <__mempcpy_avx_unaligned>:
   96.84 :   1a0710: endbr64
    3.16 :   1a0714: mov    %rdi,%rax
    0.00 :   1a0717: add    %rdx,%rax
    0.00 :   1a071a: jmp    1a0737 <__memcpy_avx_unaligned+0x7>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009fbb0 <strlen@plt>:
  100.00 :   9fbb0:  endbr64
    0.00 :   9fbb4:  bnd jmp *0x1870bd(%rip)        # 226c78 <strlen@GLIBC_2.2.5>
    0.00 :   9fbbb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005d520 <__printf_fp>:
    0.00 :   5d520:  endbr64
    0.00 :   5d524:  mov    0x1bca45(%rip),%rax        # 219f70 <_DYNAMIC+0x3b0>
    0.00 :   5d52b:  mov    %rsi,%r8
    0.00 :   5d52e:  mov    %rdx,%rcx
    0.00 :   5d531:  mov    %r8,%rdx
    0.00 :   5d534:  mov    %fs:(%rax),%rsi
  100.00 :   5d538:  jmp    5a930 <__GI___printf_fp_l>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b8e4 <__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator*() const>:
    0.00 :   b8e4:   endbr64
    0.00 :   b8e8:   push   %rbp
    0.00 :   b8e9:   mov    %rsp,%rbp
    0.00 :   b8ec:   mov    %rdi,-0x8(%rbp)
    0.00 :   b8f0:   mov    -0x8(%rbp),%rax
    0.00 :   b8f4:   mov    (%rax),%rax
  100.00 :   b8f7:   pop    %rbp
    0.00 :   b8f8:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000837e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>:
    0.00 :   837e:   endbr64
    0.00 :   8382:   push   %rbp
    0.00 :   8383:   mov    %rsp,%rbp
    0.00 :   8386:   mov    %rdi,-0x8(%rbp)
    0.00 :   838a:   mov    -0x8(%rbp),%rax
  100.00 :   838e:   pop    %rbp
    0.00 :   838f:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006d57 <std::vector<float, std::allocator<float> >::_S_relocate(float*, float*, float*, std::allocator<float>&)>:
    0.00 :   6d57:   endbr64
    0.00 :   6d5b:   push   %rbp
    0.00 :   6d5c:   mov    %rsp,%rbp
    0.00 :   6d5f:   sub    $0x20,%rsp
    0.00 :   6d63:   mov    %rdi,-0x8(%rbp)
    0.00 :   6d67:   mov    %rsi,-0x10(%rbp)
    0.00 :   6d6b:   mov    %rdx,-0x18(%rbp)
    0.00 :   6d6f:   mov    %rcx,-0x20(%rbp)
    0.00 :   6d73:   mov    -0x20(%rbp),%rcx
  100.00 :   6d77:   mov    -0x18(%rbp),%rdx
    0.00 :   6d7b:   mov    -0x10(%rbp),%rsi
    0.00 :   6d7f:   mov    -0x8(%rbp),%rax
    0.00 :   6d83:   mov    %rax,%rdi
    0.00 :   6d86:   call   7e6b <std::vector<float, std::allocator<float> >::_S_do_relocate(float*, float*, float*, std::allocator<float>&, std::integral_constant<bool, true>)>
    0.00 :   6d8b:   leave
    0.00 :   6d8c:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000418d <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)>:
    0.00 :   418d:   endbr64
    0.00 :   4191:   push   %rbp
    0.00 :   4192:   mov    %rsp,%rbp
    0.00 :   4195:   mov    %rdi,-0x8(%rbp)
    0.00 :   4199:   mov    %rsi,-0x10(%rbp)
    0.00 :   419d:   mov    -0x8(%rbp),%rax
    0.00 :   41a1:   mov    (%rax),%rdx
  100.00 :   41a4:   mov    -0x10(%rbp),%rax
    0.00 :   41a8:   mov    (%rax),%rax
    0.00 :   41ab:   cmp    %rax,%rdx
    0.00 :   41ae:   jae    41b6 <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x29>
    0.00 :   41b0:   mov    -0x10(%rbp),%rax
    0.00 :   41b4:   jmp    41ba <unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)+0x2d>
    0.00 :   41b6:   mov    -0x8(%rbp),%rax
    0.00 :   41ba:   pop    %rbp
    0.00 :   41bb:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006dcd <std::vector<float, std::allocator<float> >::_S_max_size(std::allocator<float> const&)>:
    0.00 :   6dcd:   endbr64
    0.00 :   6dd1:   push   %rbp
    0.00 :   6dd2:   mov    %rsp,%rbp
    0.00 :   6dd5:   sub    $0x30,%rsp
    0.00 :   6dd9:   mov    %rdi,-0x28(%rbp)
    0.00 :   6ddd:   mov    %fs:0x28,%rax
    0.00 :   6de6:   mov    %rax,-0x8(%rbp)
    0.00 :   6dea:   xor    %eax,%eax
    0.00 :   6dec:   movabs $0x1fffffffffffffff,%rax
    0.00 :   6df6:   mov    %rax,-0x18(%rbp)
    0.00 :   6dfa:   mov    -0x28(%rbp),%rax
  100.00 :   6dfe:   mov    %rax,%rdi
    0.00 :   6e01:   call   7ece <std::allocator_traits<std::allocator<float> >::max_size(std::allocator<float> const&)>
    0.00 :   6e06:   mov    %rax,-0x10(%rbp)
    0.00 :   6e0a:   lea    -0x10(%rbp),%rdx
    0.00 :   6e0e:   lea    -0x18(%rbp),%rax
    0.00 :   6e12:   mov    %rdx,%rsi
    0.00 :   6e15:   mov    %rax,%rdi
    0.00 :   6e18:   call   3feb <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :   6e1d:   mov    (%rax),%rax
    0.00 :   6e20:   mov    -0x8(%rbp),%rdx
    0.00 :   6e24:   sub    %fs:0x28,%rdx
    0.00 :   6e2d:   je     6e34 <std::vector<float, std::allocator<float> >::_S_max_size(std::allocator<float> const&)+0x67>
    0.00 :   6e2f:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   6e34:   leave
    0.00 :   6e35:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005c3c <std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_Vector_base(unsigned long, std::allocator<std::pair<int, float> > const&)>:
  100.00 :   5c3c:   endbr64
    0.00 :   5c40:   push   %rbp
    0.00 :   5c41:   mov    %rsp,%rbp
    0.00 :   5c44:   push   %rbx
    0.00 :   5c45:   sub    $0x28,%rsp
    0.00 :   5c49:   mov    %rdi,-0x18(%rbp)
    0.00 :   5c4d:   mov    %rsi,-0x20(%rbp)
    0.00 :   5c51:   mov    %rdx,-0x28(%rbp)
    0.00 :   5c55:   mov    -0x18(%rbp),%rax
    0.00 :   5c59:   mov    -0x28(%rbp),%rdx
    0.00 :   5c5d:   mov    %rdx,%rsi
    0.00 :   5c60:   mov    %rax,%rdi
    0.00 :   5c63:   call   6fb0 <std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_Vector_impl::_Vector_impl(std::allocator<std::pair<int, float> > const&)>
    0.00 :   5c68:   mov    -0x20(%rbp),%rdx
    0.00 :   5c6c:   mov    -0x18(%rbp),%rax
    0.00 :   5c70:   mov    %rdx,%rsi
    0.00 :   5c73:   mov    %rax,%rdi
    0.00 :   5c76:   call   6fe6 <std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_create_storage(unsigned long)>
    0.00 :   5c7b:   jmp    5c9b <std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_Vector_base(unsigned long, std::allocator<std::pair<int, float> > const&)+0x5f>
    0.00 :   5c7d:   endbr64
    0.00 :   5c81:   mov    %rax,%rbx
    0.00 :   5c84:   mov    -0x18(%rbp),%rax
    0.00 :   5c88:   mov    %rax,%rdi
    0.00 :   5c8b:   call   5c1c <std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_Vector_impl::~_Vector_impl()>
    0.00 :   5c90:   mov    %rbx,%rax
    0.00 :   5c93:   mov    %rax,%rdi
    0.00 :   5c96:   call   2580 <_Unwind_Resume@plt>
    0.00 :   5c9b:   mov    -0x8(%rbp),%rbx
    0.00 :   5c9f:   leave
    0.00 :   5ca0:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005fd2 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&)>:
    0.00 :   5fd2:   endbr64
    0.00 :   5fd6:   push   %rbp
    0.00 :   5fd7:   mov    %rsp,%rbp
    0.00 :   5fda:   sub    $0x30,%rsp
    0.00 :   5fde:   mov    %rdi,-0x28(%rbp)
    0.00 :   5fe2:   mov    %fs:0x28,%rax
    0.00 :   5feb:   mov    %rax,-0x8(%rbp)
    0.00 :   5fef:   xor    %eax,%eax
    0.00 :   5ff1:   movabs $0x1fffffffffffffff,%rax
    0.00 :   5ffb:   mov    %rax,-0x18(%rbp)
    0.00 :   5fff:   mov    -0x28(%rbp),%rax
  100.00 :   6003:   mov    %rax,%rdi
    0.00 :   6006:   call   74a2 <std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&)>
    0.00 :   600b:   mov    %rax,-0x10(%rbp)
    0.00 :   600f:   lea    -0x10(%rbp),%rdx
    0.00 :   6013:   lea    -0x18(%rbp),%rax
    0.00 :   6017:   mov    %rdx,%rsi
    0.00 :   601a:   mov    %rax,%rdi
    0.00 :   601d:   call   3feb <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    0.00 :   6022:   mov    (%rax),%rax
    0.00 :   6025:   mov    -0x8(%rbp),%rdx
    0.00 :   6029:   sub    %fs:0x28,%rdx
    0.00 :   6032:   je     6039 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&)+0x67>
    0.00 :   6034:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   6039:   leave
    0.00 :   603a:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009b15 <float* std::__niter_base<float*>(float*)>:
    0.00 :   9b15:   endbr64
    0.00 :   9b19:   push   %rbp
  100.00 :   9b1a:   mov    %rsp,%rbp
    0.00 :   9b1d:   mov    %rdi,-0x8(%rbp)
    0.00 :   9b21:   mov    -0x8(%rbp),%rax
    0.00 :   9b25:   pop    %rbp
    0.00 :   9b26:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005dcf <void std::__sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>:
    0.00 :   5dcf:   endbr64
    0.00 :   5dd3:   push   %rbp
    0.00 :   5dd4:   mov    %rsp,%rbp
    0.00 :   5dd7:   sub    $0x20,%rsp
    0.00 :   5ddb:   mov    %rdi,-0x8(%rbp)
    0.00 :   5ddf:   mov    %rsi,-0x10(%rbp)
    0.00 :   5de3:   lea    -0x10(%rbp),%rdx
    0.00 :   5de7:   lea    -0x8(%rbp),%rax
    0.00 :   5deb:   mov    %rdx,%rsi
    0.00 :   5dee:   mov    %rax,%rdi
    0.00 :   5df1:   call   70d0 <bool __gnu_cxx::operator!=<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   5df6:   test   %al,%al
    0.00 :   5df8:   je     5e3f <void std::__sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)+0x70>
    0.00 :   5dfa:   lea    -0x8(%rbp),%rdx
    0.00 :   5dfe:   lea    -0x10(%rbp),%rax
    0.00 :   5e02:   mov    %rdx,%rsi
    0.00 :   5e05:   mov    %rax,%rdi
    0.00 :   5e08:   call   710f <__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::difference_type __gnu_cxx::operator-<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&)>
    0.00 :   5e0d:   mov    %rax,%rdi
    0.00 :   5e10:   call   3ee4 <std::__lg(long)>
    0.00 :   5e15:   lea    (%rax,%rax,1),%rdx
    0.00 :   5e19:   mov    -0x10(%rbp),%rcx
    0.00 :   5e1d:   mov    -0x8(%rbp),%rax
    0.00 :   5e21:   mov    %rcx,%rsi
    0.00 :   5e24:   mov    %rax,%rdi
    0.00 :   5e27:   call   7152 <void std::__introsort_loop<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, long, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   5e2c:   mov    -0x10(%rbp),%rdx
  100.00 :   5e30:   mov    -0x8(%rbp),%rax
    0.00 :   5e34:   mov    %rdx,%rsi
    0.00 :   5e37:   mov    %rax,%rdi
    0.00 :   5e3a:   call   720a <void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >, __gnu_cxx::__ops::_Iter_less_iter)>
    0.00 :   5e3f:   nop
    0.00 :   5e40:   leave
    0.00 :   5e41:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008cfd <float* std::__relocate_a<float*, float*, std::allocator<float> >(float*, float*, float*, std::allocator<float>&)>:
    0.00 :   8cfd:   endbr64
    0.00 :   8d01:   push   %rbp
    0.00 :   8d02:   mov    %rsp,%rbp
    0.00 :   8d05:   push   %r12
    0.00 :   8d07:   push   %rbx
    0.00 :   8d08:   sub    $0x20,%rsp
    0.00 :   8d0c:   mov    %rdi,-0x18(%rbp)
    0.00 :   8d10:   mov    %rsi,-0x20(%rbp)
    0.00 :   8d14:   mov    %rdx,-0x28(%rbp)
    0.00 :   8d18:   mov    %rcx,-0x30(%rbp)
    0.00 :   8d1c:   mov    -0x28(%rbp),%rax
    0.00 :   8d20:   mov    %rax,%rdi
    0.00 :   8d23:   call   9b15 <float* std::__niter_base<float*>(float*)>
    0.00 :   8d28:   mov    %rax,%r12
    0.00 :   8d2b:   mov    -0x20(%rbp),%rax
    0.00 :   8d2f:   mov    %rax,%rdi
    0.00 :   8d32:   call   9b15 <float* std::__niter_base<float*>(float*)>
  100.00 :   8d37:   mov    %rax,%rbx
    0.00 :   8d3a:   mov    -0x18(%rbp),%rax
    0.00 :   8d3e:   mov    %rax,%rdi
    0.00 :   8d41:   call   9b15 <float* std::__niter_base<float*>(float*)>
    0.00 :   8d46:   mov    %rax,%rdi
    0.00 :   8d49:   mov    -0x30(%rbp),%rax
    0.00 :   8d4d:   mov    %rax,%rcx
    0.00 :   8d50:   mov    %r12,%rdx
    0.00 :   8d53:   mov    %rbx,%rsi
    0.00 :   8d56:   call   9b27 <std::enable_if<std::__is_bitwise_relocatable<float, void>::value, float*>::type std::__relocate_a_1<float, float>(float*, float*, float*, std::allocator<float>&)>
    0.00 :   8d5b:   add    $0x20,%rsp
    0.00 :   8d5f:   pop    %rbx
    0.00 :   8d60:   pop    %r12
    0.00 :   8d62:   pop    %rbp
    0.00 :   8d63:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .plt.sec:
         :
         : 5    0000000000002460 <operator delete(void*, unsigned long)@plt>:
  100.00 :   2460:   endbr64
    0.00 :   2464:   bnd jmp *0x10a95(%rip)        # 12f00 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    0.00 :   246b:   nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007d8c <std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long)>:
    0.00 :   7d8c:   endbr64
    0.00 :   7d90:   push   %rbp
    0.00 :   7d91:   mov    %rsp,%rbp
    0.00 :   7d94:   sub    $0x10,%rsp
    0.00 :   7d98:   mov    %rdi,-0x8(%rbp)
    0.00 :   7d9c:   mov    %rsi,-0x10(%rbp)
  100.00 :   7da0:   mov    -0x10(%rbp),%rcx
    0.00 :   7da4:   mov    -0x8(%rbp),%rax
    0.00 :   7da8:   mov    $0x0,%edx
    0.00 :   7dad:   mov    %rcx,%rsi
    0.00 :   7db0:   mov    %rax,%rdi
    0.00 :   7db3:   call   8bb4 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>
    0.00 :   7db8:   leave
    0.00 :   7db9:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003ee4 <std::__lg(long)>:
    0.00 :   3ee4:   endbr64
    0.00 :   3ee8:   push   %rbp
    0.00 :   3ee9:   mov    %rsp,%rbp
    0.00 :   3eec:   mov    %rdi,-0x8(%rbp)
    0.00 :   3ef0:   mov    -0x8(%rbp),%rax
  100.00 :   3ef4:   bsr    %rax,%rax
    0.00 :   3ef8:   xor    $0x3f,%rax
    0.00 :   3efc:   mov    %eax,%edx
    0.00 :   3efe:   mov    $0x3f,%eax
    0.00 :   3f03:   sub    %edx,%eax
    0.00 :   3f05:   cltq
    0.00 :   3f07:   pop    %rbp
    0.00 :   3f08:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000495e <std::allocator<std::pair<int, float> >::~allocator()>:
    0.00 :   495e:   endbr64
    0.00 :   4962:   push   %rbp
    0.00 :   4963:   mov    %rsp,%rbp
    0.00 :   4966:   sub    $0x10,%rsp
    0.00 :   496a:   mov    %rdi,-0x8(%rbp)
    0.00 :   496e:   mov    -0x8(%rbp),%rax
  100.00 :   4972:   mov    %rax,%rdi
    0.00 :   4975:   call   5b86 <__gnu_cxx::new_allocator<std::pair<int, float> >::~new_allocator()>
    0.00 :   497a:   nop
    0.00 :   497b:   leave
    0.00 :   497c:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008c19 <int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)>:
    0.00 :   8c19:   endbr64
    0.00 :   8c1d:   push   %rbp
    0.00 :   8c1e:   mov    %rsp,%rbp
    0.00 :   8c21:   push   %r12
    0.00 :   8c23:   push   %rbx
    0.00 :   8c24:   sub    $0x20,%rsp
    0.00 :   8c28:   mov    %rdi,-0x18(%rbp)
    0.00 :   8c2c:   mov    %rsi,-0x20(%rbp)
    0.00 :   8c30:   mov    %rdx,-0x28(%rbp)
    0.00 :   8c34:   mov    %rcx,-0x30(%rbp)
    0.00 :   8c38:   mov    -0x28(%rbp),%rax
  100.00 :   8c3c:   mov    %rax,%rdi
    0.00 :   8c3f:   call   9a9c <int* std::__niter_base<int*>(int*)>
    0.00 :   8c44:   mov    %rax,%r12
    0.00 :   8c47:   mov    -0x20(%rbp),%rax
    0.00 :   8c4b:   mov    %rax,%rdi
    0.00 :   8c4e:   call   9a9c <int* std::__niter_base<int*>(int*)>
    0.00 :   8c53:   mov    %rax,%rbx
    0.00 :   8c56:   mov    -0x18(%rbp),%rax
    0.00 :   8c5a:   mov    %rax,%rdi
    0.00 :   8c5d:   call   9a9c <int* std::__niter_base<int*>(int*)>
    0.00 :   8c62:   mov    %rax,%rdi
    0.00 :   8c65:   mov    -0x30(%rbp),%rax
    0.00 :   8c69:   mov    %rax,%rcx
    0.00 :   8c6c:   mov    %r12,%rdx
    0.00 :   8c6f:   mov    %rbx,%rsi
    0.00 :   8c72:   call   9aae <std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&)>
    0.00 :   8c77:   add    $0x20,%rsp
    0.00 :   8c7b:   pop    %rbx
    0.00 :   8c7c:   pop    %r12
    0.00 :   8c7e:   pop    %rbp
    0.00 :   8c7f:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007d66 <std::vector<int, std::allocator<int> >::max_size() const>:
    0.00 :   7d66:   endbr64
    0.00 :   7d6a:   push   %rbp
    0.00 :   7d6b:   mov    %rsp,%rbp
    0.00 :   7d6e:   sub    $0x10,%rsp
    0.00 :   7d72:   mov    %rdi,-0x8(%rbp)
    0.00 :   7d76:   mov    -0x8(%rbp),%rax
  100.00 :   7d7a:   mov    %rax,%rdi
    0.00 :   7d7d:   call   837e <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>
    0.00 :   7d82:   mov    %rax,%rdi
    0.00 :   7d85:   call   5fd2 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&)>
    0.00 :   7d8a:   leave
    0.00 :   7d8b:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000003ec7 <__gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter)>:
  100.00 :   3ec7:   endbr64
    0.00 :   3ecb:   push   %rbp
    0.00 :   3ecc:   mov    %rsp,%rbp
    0.00 :   3ecf:   nop
    0.00 :   3ed0:   pop    %rbp
    0.00 :   3ed1:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009aae <std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&)>:
  100.00 :   9aae:   endbr64
    0.00 :   9ab2:   push   %rbp
    0.00 :   9ab3:   mov    %rsp,%rbp
    0.00 :   9ab6:   sub    $0x30,%rsp
    0.00 :   9aba:   mov    %rdi,-0x18(%rbp)
    0.00 :   9abe:   mov    %rsi,-0x20(%rbp)
    0.00 :   9ac2:   mov    %rdx,-0x28(%rbp)
    0.00 :   9ac6:   mov    %rcx,-0x30(%rbp)
    0.00 :   9aca:   mov    -0x20(%rbp),%rax
    0.00 :   9ace:   sub    -0x18(%rbp),%rax
    0.00 :   9ad2:   sar    $0x2,%rax
    0.00 :   9ad6:   mov    %rax,-0x8(%rbp)
    0.00 :   9ada:   cmpq   $0x0,-0x8(%rbp)
    0.00 :   9adf:   jle    9b00 <std::enable_if<std::__is_bitwise_relocatable<int, void>::value, int*>::type std::__relocate_a_1<int, int>(int*, int*, int*, std::allocator<int>&)+0x52>
    0.00 :   9ae1:   mov    -0x8(%rbp),%rax
    0.00 :   9ae5:   lea    0x0(,%rax,4),%rdx
    0.00 :   9aed:   mov    -0x18(%rbp),%rcx
    0.00 :   9af1:   mov    -0x28(%rbp),%rax
    0.00 :   9af5:   mov    %rcx,%rsi
    0.00 :   9af8:   mov    %rax,%rdi
    0.00 :   9afb:   call   2550 <memmove@plt>
    0.00 :   9b00:   mov    -0x8(%rbp),%rax
    0.00 :   9b04:   lea    0x0(,%rax,4),%rdx
    0.00 :   9b0c:   mov    -0x28(%rbp),%rax
    0.00 :   9b10:   add    %rdx,%rax
    0.00 :   9b13:   leave
    0.00 :   9b14:   ret
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000002ec0 <std::allocator<float>::~allocator()>:
    0.00 :   2ec0:   endbr64
  100.00 :   2ec4:   push   %rbp
    0.00 :   2ec5:   mov    %rsp,%rbp
    0.00 :   2ec8:   sub    $0x10,%rsp
    0.00 :   2ecc:   mov    %rdi,-0x8(%rbp)
    0.00 :   2ed0:   mov    -0x8(%rbp),%rax
    0.00 :   2ed4:   mov    %rax,%rdi
    0.00 :   2ed7:   call   321a <__gnu_cxx::new_allocator<float>::~new_allocator()>
    0.00 :   2edc:   nop
    0.00 :   2edd:   leave
    0.00 :   2ede:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009f2e0 <operator delete(void*)@plt>:
  100.00 :   9f2e0:  endbr64
    0.00 :   9f2e4:  bnd jmp *0x187525(%rip)        # 226810 <operator delete(void*)@@GLIBCXX_3.4+0x179c00>
    0.00 :   9f2eb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a1990 <std::istream::sentry::sentry(std::istream&, bool)@plt>:
  100.00 :   a1990:  endbr64
    0.00 :   a1994:  bnd jmp *0x1861cd(%rip)        # 227b68 <std::istream::sentry::sentry(std::istream&, bool)@@GLIBCXX_3.4+0x1072e8>
    0.00 :   a199b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (10 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b3f0 <do_lookup_x>:
    0.00 :   b3f0:   push   %r15
    0.00 :   b3f2:   mov    %rdi,%r11
    0.00 :   b3f5:   push   %r14
    0.00 :   b3f7:   push   %r13
    0.00 :   b3f9:   push   %r12
    0.00 :   b3fb:   push   %rbp
    0.00 :   b3fc:   push   %rbx
    0.00 :   b3fd:   sub    $0x98,%rsp
    0.00 :   b404:   mov    0x8(%r9),%r12d
    0.00 :   b408:   mov    %r8,0x48(%rsp)
    0.00 :   b40d:   mov    0xd0(%rsp),%rbp
    0.00 :   b415:   mov    %rdx,0x50(%rsp)
    0.00 :   b41a:   mov    0xf0(%rsp),%r8d
    0.00 :   b422:   mov    %rcx,0x40(%rsp)
    0.00 :   b427:   mov    %rsi,%rdi
    0.00 :   b42a:   mov    %r8d,%eax
    0.00 :   b42d:   mov    %r11,0x38(%rsp)
    0.00 :   b432:   mov    (%r9),%r14
    0.00 :   b435:   shr    $0x6,%rdi
    0.00 :   b439:   and    $0x2,%eax
    0.00 :   b43c:   mov    %rsi,0x8(%rsp)
    0.00 :   b441:   mov    0xe8(%rsp),%r11
    0.00 :   b449:   mov    %rdi,0x18(%rsp)
    0.00 :   b44e:   mov    %r8d,%edi
    0.00 :   b451:   mov    %eax,%r15d
    0.00 :   b454:   and    $0x1,%edi
    0.00 :   b457:   mov    %eax,0x5c(%rsp)
    0.00 :   b45b:   mov    %edi,0x60(%rsp)
    0.00 :   b45f:   lea    0x84(%rsp),%rdi
    0.00 :   b467:   mov    %rdi,0x10(%rsp)
    0.00 :   b46c:   jmp    b518 <do_lookup_x+0x128>
    0.00 :   b471:   nopl   0x0(%rax)
    0.00 :   b478:   mov    0x2f4(%rbx),%edx
    0.00 :   b47e:   test   %edx,%edx
    0.00 :   b480:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b486:   movl   $0x0,0x84(%rsp)
    0.00 :   b491:   mov    0x70(%rbx),%rax
    0.00 :   b495:   movq   $0x0,0x88(%rsp)
    0.00 :   b4a1:   mov    0x8(%rax),%r10
    0.00 :   b4a5:   xor    %eax,%eax
    0.00 :   b4a7:   testb  $0x20,0x31e(%rbx)
    0.00 :   b4ae:   je     b4b6 <do_lookup_x+0xc6>
    0.00 :   b4b0:   mov    (%rbx),%rax
    0.00 :   b4b3:   add    %rax,%r10
    0.00 :   b4b6:   mov    0x68(%rbx),%rcx
    0.00 :   b4ba:   add    0x8(%rcx),%rax
    0.00 :   b4be:   mov    %rax,(%rsp)
    0.00 :   b4c2:   mov    0x300(%rbx),%rax
    0.00 :   b4c9:   test   %rax,%rax
    0.00 :   b4cc:   je     b5a0 <do_lookup_x+0x1b0>
    0.00 :   b4d2:   mov    0x8(%rsp),%rdi
    0.00 :   b4d7:   mov    0x18(%rsp),%ecx
    0.00 :   b4db:   and    0x2f8(%rbx),%ecx
    0.00 :   b4e1:   mov    (%rax,%rcx,8),%rax
    0.03 :   b4e5:   mov    0x2fc(%rbx),%ecx
    0.00 :   b4eb:   mov    %rdi,%rsi
    0.00 :   b4ee:   shr    %cl,%rsi
    0.00 :   b4f1:   mov    %rsi,%rcx
    0.00 :   b4f4:   mov    %rax,%rsi
    0.00 :   b4f7:   shr    %cl,%rsi
    0.00 :   b4fa:   mov    %edi,%ecx
    0.00 :   b4fc:   shr    %cl,%rax
    0.00 :   b4ff:   and    %rax,%rsi
    0.00 :   b502:   and    $0x1,%esi
    0.00 :   b505:   jne    b720 <do_lookup_x+0x330>
    0.00 :   b50b:   add    $0x1,%rbp
    0.00 :   b50f:   cmp    %rbp,%r12
    0.00 :   b512:   jbe    b800 <do_lookup_x+0x410>
    0.00 :   b518:   mov    (%r14,%rbp,8),%rax
    0.00 :   b51c:   mov    0x28(%rax),%rbx
    0.00 :   b520:   cmp    %r11,%rbx
    0.00 :   b523:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b525:   test   %r15d,%r15d
    0.00 :   b528:   je     b533 <do_lookup_x+0x143>
    0.00 :   b52a:   testb  $0x3,0x31c(%rbx)
    0.00 :   b531:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b533:   testb  $0x2,0x31e(%rbx)
    0.00 :   b53a:   jne    b50b <do_lookup_x+0x11b>
    0.00 :   b53c:   testb  $0x8,0x2e59d(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   b543:   je     b478 <do_lookup_x+0x88>
    0.00 :   b549:   mov    0x8(%rbx),%rdx
    0.00 :   b54d:   mov    0x30(%rbx),%rcx
    0.00 :   b551:   cmpb   $0x0,(%rdx)
    0.00 :   b554:   je     b580 <do_lookup_x+0x190>
    0.00 :   b556:   mov    0x38(%rsp),%rsi
    0.00 :   b55b:   lea    0x25396(%rip),%rdi        # 308f8 <__PRETTY_FUNCTION__.10+0x60>
    0.00 :   b562:   xor    %eax,%eax
    0.00 :   b564:   mov    %r11,0xe8(%rsp)
    0.00 :   b56c:   call   fbc0 <_dl_debug_printf>
    0.00 :   b571:   mov    0xe8(%rsp),%r11
    0.00 :   b579:   jmp    b478 <do_lookup_x+0x88>
    0.00 :   b57e:   xchg   %ax,%ax
    0.00 :   b580:   mov    0x2e539(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   b587:   mov    (%rax),%rdx
    0.00 :   b58a:   lea    0x22592(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   b591:   test   %rdx,%rdx
    0.00 :   b594:   cmove  %rax,%rdx
    0.00 :   b598:   jmp    b556 <do_lookup_x+0x166>
    0.00 :   b59a:   nopw   0x0(%rax,%rax,1)
    0.00 :   b5a0:   mov    0x50(%rsp),%rax
    0.00 :   b5a5:   mov    $0xffffffff,%edi
    0.00 :   b5aa:   mov    %edx,%esi
    0.00 :   b5ac:   mov    (%rax),%rax
    0.00 :   b5af:   cmp    %rdi,%rax
    0.00 :   b5b2:   je     bbf0 <do_lookup_x+0x800>
    0.00 :   b5b8:   xor    %edx,%edx
    0.00 :   b5ba:   div    %rsi
    0.00 :   b5bd:   lea    0x0(,%rdx,4),%rax
    0.00 :   b5c5:   mov    0x310(%rbx),%rdx
    0.00 :   b5cc:   mov    (%rdx,%rax,1),%eax
    0.00 :   b5cf:   test   %eax,%eax
    0.00 :   b5d1:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b5d7:   lea    0x88(%rsp),%rdi
    0.00 :   b5df:   mov    %r15d,0x68(%rsp)
    0.00 :   b5e4:   mov    0x40(%rsp),%r13
    0.00 :   b5e9:   mov    %r14,0x70(%rsp)
    0.00 :   b5ee:   mov    0xe0(%rsp),%r15d
    0.00 :   b5f6:   mov    %rbp,0xd0(%rsp)
    0.00 :   b5fe:   mov    0xd8(%rsp),%r14
    0.00 :   b606:   mov    %rbx,%rbp
    0.00 :   b609:   mov    %r12,0x78(%rsp)
    0.00 :   b60e:   mov    0x38(%rsp),%r12
    0.00 :   b613:   mov    %rdi,0x20(%rsp)
    0.00 :   b618:   mov    %r10,0x30(%rsp)
    0.00 :   b61d:   mov    %r11,0xe8(%rsp)
    0.00 :   b625:   jmp    b642 <do_lookup_x+0x252>
    0.00 :   b627:   nopw   0x0(%rax,%rax,1)
    0.00 :   b630:   mov    0x308(%rbp),%rax
    0.00 :   b637:   mov    (%rax,%rbx,4),%eax
    0.00 :   b63a:   test   %eax,%eax
    0.00 :   b63c:   je     ba30 <do_lookup_x+0x640>
    0.00 :   b642:   sub    $0x8,%rsp
    0.00 :   b646:   mov    %eax,%ebx
    0.00 :   b648:   mov    %r15d,%ecx
    0.00 :   b64b:   mov    %r13,%rsi
    0.00 :   b64e:   push   0x18(%rsp)
    0.00 :   b652:   lea    (%rbx,%rbx,2),%rdx
    0.00 :   b656:   mov    %r12,%rdi
    0.00 :   b659:   push   0x30(%rsp)
    0.00 :   b65d:   push   %rbp
    0.00 :   b65e:   push   0x20(%rsp)
    0.00 :   b662:   push   %rax
    0.00 :   b663:   mov    0x60(%rsp),%rax
    0.00 :   b668:   mov    0x120(%rsp),%r8d
    0.00 :   b670:   lea    (%rax,%rdx,8),%r9
    0.00 :   b674:   mov    %r14,%rdx
    0.00 :   b677:   call   b240 <check_match>
    0.00 :   b67c:   add    $0x30,%rsp
    0.00 :   b680:   test   %rax,%rax
    0.00 :   b683:   je     b630 <do_lookup_x+0x240>
    0.00 :   b685:   mov    %rbp,%rbx
    0.00 :   b688:   mov    0x68(%rsp),%r15d
    0.00 :   b68d:   mov    0x30(%rsp),%r10
    0.00 :   b692:   mov    %rax,%r8
    0.00 :   b695:   mov    0x70(%rsp),%r14
    0.00 :   b69a:   mov    0xd0(%rsp),%rbp
    0.00 :   b6a2:   mov    0xe8(%rsp),%r11
    0.00 :   b6aa:   mov    0x78(%rsp),%r12
    0.00 :   b6af:   nop
    0.00 :   b6b0:   cmpq   $0x0,0xf8(%rsp)
    0.00 :   b6b9:   je     b818 <do_lookup_x+0x428>
    0.00 :   b6bf:   movzbl 0x5(%r8),%eax
    0.00 :   b6c4:   mov    %eax,%edx
    0.00 :   b6c6:   and    $0x3,%eax
    0.00 :   b6c9:   sub    $0x1,%eax
    0.00 :   b6cc:   and    $0x3,%edx
    0.00 :   b6cf:   cmp    $0x1,%eax
    0.00 :   b6d2:   jbe    b50b <do_lookup_x+0x11b>
    0.00 :   b6d8:   cmp    $0x3,%dl
    0.00 :   b6db:   je     b9b0 <do_lookup_x+0x5c0>
    0.00 :   b6e1:   movzbl 0x4(%r8),%eax
    0.00 :   b6e6:   shr    $0x4,%al
    0.00 :   b6e9:   cmp    $0x2,%al
    0.00 :   b6eb:   je     b853 <do_lookup_x+0x463>
    0.00 :   b6f1:   cmp    $0xa,%al
    0.00 :   b6f3:   je     b880 <do_lookup_x+0x490>
    0.00 :   b6f9:   cmp    $0x1,%al
    0.00 :   b6fb:   jne    b50b <do_lookup_x+0x11b>
    0.00 :   b701:   mov    0x48(%rsp),%rax
    0.00 :   b706:   mov    %r8,(%rax)
    0.00 :   b709:   mov    %rbx,0x8(%rax)
    0.00 :   b70d:   mov    $0x1,%eax
    0.00 :   b712:   jmp    b802 <do_lookup_x+0x412>
    0.00 :   b717:   nopw   0x0(%rax,%rax,1)
    0.00 :   b720:   mov    %edx,%ecx
   28.99 :   b722:   mov    %rdi,%rax
    0.00 :   b725:   xor    %edx,%edx
    0.00 :   b727:   div    %rcx
    0.00 :   b72a:   mov    0x308(%rbx),%rax
    0.00 :   b731:   mov    (%rax,%rdx,4),%eax
    0.00 :   b734:   test   %eax,%eax
    0.00 :   b736:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b73c:   mov    0x310(%rbx),%rdx
    0.00 :   b743:   mov    %r15d,0x30(%rsp)
    0.00 :   b748:   mov    %r14,0x20(%rsp)
    0.00 :   b74d:   mov    0xe0(%rsp),%r15d
    0.00 :   b755:   mov    %rbp,0xd0(%rsp)
    0.00 :   b75d:   lea    (%rdx,%rax,4),%r13
    0.00 :   b761:   mov    %r10,%rbp
    0.00 :   b764:   mov    0xd8(%rsp),%r14
    0.00 :   b76c:   mov    %r12,0x68(%rsp)
    0.00 :   b771:   mov    %rdi,%r12
    0.00 :   b774:   mov    %r11,0xe8(%rsp)
    0.00 :   b77c:   jmp    b78d <do_lookup_x+0x39d>
    0.00 :   b77e:   xchg   %ax,%ax
    0.00 :   b780:   add    $0x4,%r13
    0.00 :   b784:   and    $0x1,%edx
    0.00 :   b787:   jne    bd70 <do_lookup_x+0x980>
    0.00 :   b78d:   mov    0x0(%r13),%eax
    0.00 :   b791:   mov    %rax,%rdx
    0.00 :   b794:   xor    %r12,%rax
   23.87 :   b797:   shr    %rax
   26.88 :   b79a:   jne    b780 <do_lookup_x+0x390>
    0.00 :   b79c:   sub    $0x8,%rsp
    0.00 :   b7a0:   mov    %r13,%rax
    0.00 :   b7a3:   sub    0x310(%rbx),%rax
    0.00 :   b7aa:   push   0x18(%rsp)
    0.00 :   b7ae:   sar    $0x2,%rax
    0.00 :   b7b2:   mov    %eax,%edx
    0.00 :   b7b4:   lea    (%rdx,%rdx,2),%rdx
    0.00 :   b7b8:   lea    0x98(%rsp),%rcx
    0.00 :   b7c0:   lea    0x0(%rbp,%rdx,8),%r9
    0.00 :   b7c5:   mov    %r14,%rdx
    0.00 :   b7c8:   push   %rcx
    0.00 :   b7c9:   mov    %r15d,%ecx
    0.00 :   b7cc:   push   %rbx
    0.00 :   b7cd:   push   0x20(%rsp)
    0.00 :   b7d1:   push   %rax
    0.00 :   b7d2:   mov    0x120(%rsp),%r8d
    0.00 :   b7da:   mov    0x70(%rsp),%rsi
    0.00 :   b7df:   mov    0x68(%rsp),%rdi
    0.00 :   b7e4:   call   b240 <check_match>
    0.00 :   b7e9:   add    $0x30,%rsp
    0.00 :   b7ed:   test   %rax,%rax
    0.00 :   b7f0:   jne    bfd1 <do_lookup_x+0xbe1>
    0.00 :   b7f6:   mov    0x0(%r13),%edx
    0.00 :   b7fa:   jmp    b780 <do_lookup_x+0x390>
    0.00 :   b7fc:   nopl   0x0(%rax)
    0.00 :   b800:   xor    %eax,%eax
    0.00 :   b802:   add    $0x98,%rsp
    0.00 :   b809:   pop    %rbx
    0.00 :   b80a:   pop    %rbp
    0.00 :   b80b:   pop    %r12
    0.00 :   b80d:   pop    %r13
    0.00 :   b80f:   pop    %r14
    0.00 :   b811:   pop    %r15
    0.00 :   b813:   ret
    0.00 :   b814:   nopl   0x0(%rax)
    0.00 :   b818:   testb  $0x3,0x31c(%rbx)
    0.00 :   b81f:   jne    b82f <do_lookup_x+0x43f>
    0.00 :   b821:   cmpl   $0x4,0xf0(%rsp)
    0.00 :   b829:   je     bd97 <do_lookup_x+0x9a7>
    0.00 :   b82f:   movzbl 0x5(%r8),%eax
    0.00 :   b834:   and    $0x3,%eax
    0.00 :   b837:   sub    $0x1,%eax
    0.00 :   b83a:   cmp    $0x1,%eax
    0.00 :   b83d:   jbe    b50b <do_lookup_x+0x11b>
    0.00 :   b843:   movzbl 0x4(%r8),%eax
    0.00 :   b848:   shr    $0x4,%al
    0.00 :   b84b:   cmp    $0x2,%al
    0.00 :   b84d:   jne    b6f1 <do_lookup_x+0x301>
    0.00 :   b853:   mov    0x2e2db(%rip),%ecx        # 39b34 <_rtld_global_ro+0x54>
    0.00 :   b859:   test   %ecx,%ecx
    0.00 :   b85b:   je     b701 <do_lookup_x+0x311>
    0.00 :   b861:   mov    0x48(%rsp),%rax
    0.00 :   b866:   cmpq   $0x0,(%rax)
    0.00 :   b86a:   jne    b50b <do_lookup_x+0x11b>
    0.00 :   b870:   mov    %r8,(%rax)
    0.00 :   b873:   mov    %rbx,0x8(%rax)
    0.00 :   b877:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   b87c:   nopl   0x0(%rax)
    0.00 :   b880:   mov    0x30(%rbx),%rax
    0.00 :   b884:   movq   %r8,%xmm2
    0.00 :   b889:   movq   %rbx,%xmm3
    0.00 :   b88e:   lea    0x2e7ab(%rip),%r14        # 3a040 <_rtld_global>
    0.00 :   b895:   punpcklqdq %xmm3,%xmm2
    0.00 :   b899:   mov    0x8(%rsp),%r15
    0.00 :   b89e:   mov    %r8,0x8(%rsp)
    0.00 :   b8a3:   lea    (%rax,%rax,4),%rbp
    0.00 :   b8a7:   mov    %rax,0x18(%rsp)
    0.00 :   b8ac:   shl    $0x5,%rbp
    0.00 :   b8b0:   movaps %xmm2,0x20(%rsp)
    0.00 :   b8b5:   lea    0x28(%r14,%rbp,1),%rax
    0.00 :   b8ba:   add    %r14,%rbp
    0.00 :   b8bd:   mov    %rax,0x30(%rsp)
    0.00 :   b8c2:   mov    %rax,%rdi
    0.00 :   b8c5:   call   *0x2e1b5(%rip)        # 39a80 <___rtld_mutex_lock>
    0.00 :   b8cb:   mov    0x50(%rbp),%rax
    0.03 :   b8cf:   mov    0x58(%rbp),%r14
    0.00 :   b8d3:   mov    0x8(%rsp),%rcx
    0.00 :   b8d8:   test   %rax,%rax
    0.00 :   b8db:   mov    %rax,0x10(%rsp)
    0.00 :   b8e0:   je     bcb2 <do_lookup_x+0x8c2>
    0.00 :   b8e6:   mov    %r15,%rax
    0.00 :   b8e9:   xor    %edx,%edx
    0.00 :   b8eb:   lea    -0x2(%r14),%rsi
    0.00 :   b8ef:   mov    0x38(%rsp),%r11
    0.00 :   b8f4:   div    %r14
    0.00 :   b8f7:   mov    %rcx,0x60(%rsp)
    0.00 :   b8fc:   mov    %r11,0x8(%rsp)
    0.00 :   b901:   mov    %rbx,0x50(%rsp)
    0.00 :   b906:   mov    %r15,%rax
    0.00 :   b909:   mov    %rdx,%r12
    0.00 :   b90c:   xor    %edx,%edx
    0.00 :   b90e:   div    %rsi
    0.00 :   b911:   mov    %r12,0x68(%rsp)
    0.00 :   b916:   mov    %r12,%r13
    0.00 :   b919:   mov    %r15,%rax
    0.00 :   b91c:   mov    %r13,%r15
    0.00 :   b91f:   mov    %rax,%r13
    0.00 :   b922:   lea    0x1(%rdx),%r8
    0.00 :   b926:   mov    %r8,%rdx
    0.00 :   b929:   mov    %r8,%rbx
    0.00 :   b92c:   shl    $0x5,%rdx
    0.00 :   b930:   mov    %rdx,%r12
    0.00 :   b933:   mov    %r15,%rbp
    0.00 :   b936:   shl    $0x5,%rbp
    0.00 :   b93a:   add    0x10(%rsp),%rbp
    0.00 :   b93f:   jmp    b960 <do_lookup_x+0x570>
    0.00 :   b941:   nopl   0x0(%rax)
    0.00 :   b948:   test   %rdi,%rdi
    0.00 :   b94b:   je     ba80 <do_lookup_x+0x690>
    0.00 :   b951:   add    %rbx,%r15
    0.00 :   b954:   add    %r12,%rbp
    0.00 :   b957:   cmp    %r15,%r14
    0.00 :   b95a:   jbe    bbe0 <do_lookup_x+0x7f0>
    0.00 :   b960:   mov    0x0(%rbp),%eax
    0.00 :   b963:   mov    0x8(%rbp),%rdi
    0.00 :   b967:   cmp    %rax,%r13
    0.00 :   b96a:   jne    b948 <do_lookup_x+0x558>
    0.00 :   b96c:   mov    0x8(%rsp),%rsi
    0.00 :   b971:   call   27220 <strcmp>
    0.00 :   b976:   test   %eax,%eax
    0.00 :   b978:   jne    b951 <do_lookup_x+0x561>
    0.00 :   b97a:   mov    0x5c(%rsp),%edx
    0.00 :   b97e:   mov    0x50(%rsp),%rbx
    0.00 :   b983:   mov    0x60(%rsp),%rcx
    0.00 :   b988:   test   %edx,%edx
    0.00 :   b98a:   jne    b994 <do_lookup_x+0x5a4>
    0.00 :   b98c:   mov    0x10(%rbp),%rcx
    0.00 :   b990:   mov    0x18(%rbp),%rbx
    0.00 :   b994:   mov    0x48(%rsp),%rax
    0.00 :   b999:   mov    0x30(%rsp),%rdi
    0.00 :   b99e:   mov    %rbx,0x8(%rax)
    0.00 :   b9a2:   mov    %rcx,(%rax)
    0.00 :   b9a5:   call   *0x2e0cd(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   b9ab:   jmp    b70d <do_lookup_x+0x31d>
    0.00 :   b9b0:   mov    0xf8(%rsp),%rax
    0.00 :   b9b8:   testb  $0x3,0x31c(%rax)
    0.00 :   b9bf:   jne    b6e1 <do_lookup_x+0x2f1>
    0.00 :   b9c5:   testb  $0x1,0x32c(%rax)
    0.00 :   b9cc:   jne    b6e1 <do_lookup_x+0x2f1>
    0.00 :   b9d2:   testb  $0x1,0x32c(%rbx)
    0.00 :   b9d9:   je     b6e1 <do_lookup_x+0x2f1>
    0.00 :   b9df:   test   %r15d,%r15d
    0.00 :   b9e2:   jne    c095 <do_lookup_x+0xca5>
    0.00 :   b9e8:   mov    0x40(%rsp),%rax
    0.00 :   b9ed:   cmpq   $0x0,0x8(%rax)
    0.00 :   b9f2:   je     b6e1 <do_lookup_x+0x2f1>
    0.00 :   b9f8:   cmpw   $0x0,0x6(%rax)
    0.00 :   b9fd:   jne    b6e1 <do_lookup_x+0x2f1>
    0.00 :   ba03:   mov    0x60(%rsp),%esi
    0.00 :   ba07:   test   %esi,%esi
    0.00 :   ba09:   je     b6e1 <do_lookup_x+0x2f1>
    0.00 :   ba0f:   mov    0x38(%rsp),%r11
    0.00 :   ba14:   mov    0x8(%rbx),%rsi
    0.00 :   ba18:   lea    0x24f39(%rip),%rcx        # 30958 <__PRETTY_FUNCTION__.10+0xc0>
    0.00 :   ba1f:   xor    %edi,%edi
    0.00 :   ba21:   mov    %r11,%rdx
    0.00 :   ba24:   call   2070 <_dl_signal_error@plt>
    0.00 :   ba29:   nopl   0x0(%rax)
    0.00 :   ba30:   mov    %rbp,%rbx
    0.00 :   ba33:   mov    0x68(%rsp),%r15d
    0.00 :   ba38:   mov    0x30(%rsp),%r10
    0.00 :   ba3d:   mov    0x70(%rsp),%r14
    0.00 :   ba42:   mov    0xd0(%rsp),%rbp
    0.00 :   ba4a:   mov    0xe8(%rsp),%r11
    0.00 :   ba52:   mov    0x78(%rsp),%r12
    0.00 :   ba57:   cmpl   $0x1,0x84(%rsp)
    0.00 :   ba5f:   jne    b50b <do_lookup_x+0x11b>
    0.00 :   ba65:   mov    0x88(%rsp),%r8
    0.00 :   ba6d:   test   %r8,%r8
    0.00 :   ba70:   jne    b6b0 <do_lookup_x+0x2c0>
    0.00 :   ba76:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   ba7b:   nopl   0x0(%rax,%rax,1)
    0.00 :   ba80:   mov    0x18(%rsp),%rax
    0.00 :   ba85:   lea    (%r14,%r14,2),%rdx
    0.00 :   ba89:   mov    %rbx,%r8
    0.00 :   ba8c:   mov    %r13,%r15
    0.00 :   ba8f:   lea    0x2e5aa(%rip),%rdi        # 3a040 <_rtld_global>
    0.00 :   ba96:   mov    0x60(%rsp),%rcx
    0.00 :   ba9b:   mov    0x50(%rsp),%rbx
    0.00 :   baa0:   lea    (%rax,%rax,4),%rax
    0.00 :   baa4:   mov    0x68(%rsp),%r12
    0.00 :   baa9:   shl    $0x5,%rax
    0.00 :   baad:   mov    0x60(%rdi,%rax,1),%rax
    0.00 :   bab2:   shl    $0x2,%rax
    0.00 :   bab6:   cmp    %rax,%rdx
    0.00 :   bab9:   jbe    be88 <do_lookup_x+0xa98>
    0.00 :   babf:   mov    (%rcx),%eax
    0.00 :   bac1:   add    (%rsp),%rax
    0.00 :   bac5:   movq   %rcx,%xmm5
    0.00 :   baca:   mov    %r8,%rdx
    0.00 :   bacd:   movq   %rax,%xmm0
    0.00 :   bad2:   movq   %rax,%xmm1
    0.00 :   bad7:   mov    0x5c(%rsp),%eax
    0.00 :   badb:   shl    $0x5,%rdx
    0.00 :   badf:   mov    0x10(%rsp),%rcx
    0.00 :   bae4:   movhps 0x40(%rsp),%xmm1
    0.00 :   bae9:   punpcklqdq %xmm5,%xmm0
    0.00 :   baed:   test   %eax,%eax
    0.00 :   baef:   je     bb64 <do_lookup_x+0x774>
    0.00 :   baf1:   mov    %r12,%rax
    0.00 :   baf4:   shl    $0x5,%rax
    0.00 :   baf8:   add    %rcx,%rax
    0.00 :   bafb:   jmp    bb0f <do_lookup_x+0x71f>
    0.00 :   bafd:   nopl   (%rax)
    0.00 :   bb00:   add    %r8,%r12
    0.00 :   bb03:   add    %rdx,%rax
    0.00 :   bb06:   cmp    %r12,%r14
    0.00 :   bb09:   jbe    bbe8 <do_lookup_x+0x7f8>
    0.00 :   bb0f:   cmpq   $0x0,0x8(%rax)
    0.00 :   bb14:   jne    bb00 <do_lookup_x+0x710>
    0.00 :   bb16:   mov    0xf8(%rsp),%rdi
    0.00 :   bb1e:   mov    %r15d,(%rax)
    0.00 :   bb21:   movups %xmm1,0x8(%rax)
    0.00 :   bb25:   mov    %rdi,0x18(%rax)
    0.00 :   bb29:   mov    0x18(%rsp),%rax
    0.00 :   bb2e:   lea    0x2e50b(%rip),%rdi        # 3a040 <_rtld_global>
    0.00 :   bb35:   lea    (%rax,%rax,4),%rax
    0.00 :   bb39:   shl    $0x5,%rax
    0.00 :   bb3d:   addq   $0x1,0x60(%rdi,%rax,1)
    0.00 :   bb43:   mov    0x30(%rsp),%rdi
    0.00 :   bb48:   call   *0x2df2a(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   bb4e:   mov    0x48(%rsp),%rax
    0.00 :   bb53:   movdqa 0x20(%rsp),%xmm4
    0.00 :   bb59:   movups %xmm4,(%rax)
    0.00 :   bb5c:   jmp    b70d <do_lookup_x+0x31d>
    0.00 :   bb61:   sub    %r14,%r12
    0.00 :   bb64:   mov    %r12,%rax
    0.00 :   bb67:   shl    $0x5,%rax
    0.00 :   bb6b:   add    %rcx,%rax
    0.00 :   bb6e:   jmp    bb7b <do_lookup_x+0x78b>
    0.00 :   bb70:   add    %r8,%r12
    0.00 :   bb73:   add    %rdx,%rax
    0.00 :   bb76:   cmp    %r12,%r14
    0.00 :   bb79:   jbe    bb61 <do_lookup_x+0x771>
    0.00 :   bb7b:   cmpq   $0x0,0x8(%rax)
    0.00 :   bb80:   jne    bb70 <do_lookup_x+0x780>
    0.00 :   bb82:   mov    %r15d,(%rax)
    0.00 :   bb85:   mov    %rbx,0x18(%rax)
    0.00 :   bb89:   movups %xmm0,0x8(%rax)
    0.00 :   bb8d:   movzbl 0x31c(%rbx),%eax
    0.00 :   bb94:   and    $0x3,%eax
    0.00 :   bb97:   cmp    $0x2,%al
    0.00 :   bb99:   jne    bb29 <do_lookup_x+0x739>
    0.00 :   bb9b:   cmpb   $0x0,0x31f(%rbx)
    0.00 :   bba2:   jne    bb29 <do_lookup_x+0x739>
    0.00 :   bba4:   testb  $0x8,0xe0(%rsp)
    0.00 :   bbac:   je     bffb <do_lookup_x+0xc0b>
    0.00 :   bbb2:   cmpb   $0x0,0x320(%rbx)
    0.00 :   bbb9:   jne    bb29 <do_lookup_x+0x739>
    0.00 :   bbbf:   testb  $0x4,0x2df1a(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   bbc6:   jne    c07a <do_lookup_x+0xc8a>
    0.00 :   bbcc:   movb   $0x1,0x320(%rbx)
    0.00 :   bbd3:   jmp    bb29 <do_lookup_x+0x739>
    0.00 :   bbd8:   nopl   0x0(%rax,%rax,1)
    0.00 :   bbe0:   sub    %r14,%r15
    0.00 :   bbe3:   jmp    b933 <do_lookup_x+0x543>
    0.00 :   bbe8:   sub    %r14,%r12
    0.00 :   bbeb:   jmp    baf1 <do_lookup_x+0x701>
    0.00 :   bbf0:   mov    0x38(%rsp),%rdx
    0.00 :   bbf5:   xor    %eax,%eax
    0.00 :   bbf7:   movzbl (%rdx),%edi
    0.00 :   bbfa:   test   %rdi,%rdi
    0.00 :   bbfd:   je     bca5 <do_lookup_x+0x8b5>
    0.00 :   bc03:   movzbl 0x1(%rdx),%eax
    0.00 :   bc07:   test   %al,%al
    0.00 :   bc09:   je     bfbc <do_lookup_x+0xbcc>
    0.00 :   bc0f:   shl    $0x4,%rdi
    0.00 :   bc13:   add    %rax,%rdi
    0.00 :   bc16:   mov    0x38(%rsp),%rax
    0.00 :   bc1b:   movzbl 0x2(%rax),%eax
    0.00 :   bc1f:   test   %al,%al
    0.00 :   bc21:   je     bfbc <do_lookup_x+0xbcc>
    0.00 :   bc27:   shl    $0x4,%rdi
    0.00 :   bc2b:   add    %rax,%rdi
    0.00 :   bc2e:   mov    0x38(%rsp),%rax
    0.00 :   bc33:   movzbl 0x3(%rax),%eax
    0.00 :   bc37:   test   %al,%al
    0.00 :   bc39:   je     bfbc <do_lookup_x+0xbcc>
    0.00 :   bc3f:   shl    $0x4,%rdi
    0.00 :   bc43:   add    %rax,%rdi
    0.00 :   bc46:   mov    0x38(%rsp),%rax
    0.00 :   bc4b:   movzbl 0x4(%rax),%eax
    0.00 :   bc4f:   test   %al,%al
    0.00 :   bc51:   je     bfbc <do_lookup_x+0xbcc>
    0.00 :   bc57:   shl    $0x4,%rdi
    0.00 :   bc5b:   add    %rdi,%rax
    0.00 :   bc5e:   mov    0x38(%rsp),%rdi
    0.00 :   bc63:   movzbl 0x5(%rdi),%ecx
    0.00 :   bc67:   lea    0x5(%rdi),%rdx
    0.00 :   bc6b:   test   %cl,%cl
    0.00 :   bc6d:   je     bc90 <do_lookup_x+0x8a0>
    0.00 :   bc6f:   shl    $0x4,%rax
    0.00 :   bc73:   add    $0x1,%rdx
    0.00 :   bc77:   add    %rax,%rcx
    0.00 :   bc7a:   mov    %rcx,%rax
    0.00 :   bc7d:   shr    $0x18,%rax
    0.00 :   bc81:   and    $0xf0,%eax
    0.00 :   bc86:   xor    %rcx,%rax
    0.00 :   bc89:   movzbl (%rdx),%ecx
    0.00 :   bc8c:   test   %cl,%cl
    0.00 :   bc8e:   jne    bc6f <do_lookup_x+0x87f>
    0.00 :   bc90:   and    $0xfffffff,%eax
    0.00 :   bc95:   xor    %edx,%edx
    0.00 :   bc97:   mov    %rax,%rdi
    0.00 :   bc9a:   div    %rsi
    0.00 :   bc9d:   lea    0x0(,%rdx,4),%rax
    0.00 :   bca5:   mov    0x50(%rsp),%rsi
    0.00 :   bcaa:   mov    %rdi,(%rsi)
    0.00 :   bcad:   jmp    b5c5 <do_lookup_x+0x1d5>
    0.00 :   bcb2:   test   %r14,%r14
    0.00 :   bcb5:   jne    c010 <do_lookup_x+0xc20>
    0.00 :   bcbb:   mov    %rcx,0x8(%rsp)
    0.00 :   bcc0:   mov    $0x1f,%esi
    0.00 :   bcc5:   mov    $0x20,%edi
    0.00 :   bcca:   call   *0x2dda0(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   bcd0:   mov    %rax,0x10(%rsp)
    0.00 :   bcd5:   test   %rax,%rax
    0.00 :   bcd8:   je     c0af <do_lookup_x+0xcbf>
    0.00 :   bcde:   mov    %rax,0x50(%rbp)
    0.00 :   bce2:   mov    0x8(%rsp),%rcx
    0.00 :   bce7:   movabs $0x842108421084211,%rdx
    0.00 :   bcf1:   mov    $0x1f,%r14d
    0.00 :   bcf7:   mov    0x2dd6a(%rip),%rax        # 39a68 <__rtld_free>
    0.00 :   bcfe:   movq   $0x1f,0x58(%rbp)
    0.00 :   bd06:   mov    %rax,0x68(%rbp)
    0.00 :   bd0a:   mov    %r15,%rax
    0.00 :   bd0d:   mul    %rdx
    0.00 :   bd10:   mov    %r15,%rax
    0.00 :   bd13:   sub    %rdx,%rax
    0.00 :   bd16:   shr    %rax
    0.00 :   bd19:   lea    (%rdx,%rax,1),%r12
    0.00 :   bd1d:   movabs $0x469ee58469ee5847,%rdx
    0.00 :   bd27:   shr    $0x4,%r12
    0.00 :   bd2b:   mov    %r12,%rax
    0.00 :   bd2e:   shl    $0x5,%rax
    0.00 :   bd32:   sub    %r12,%rax
    0.00 :   bd35:   mov    %r15,%r12
    0.00 :   bd38:   sub    %rax,%r12
    0.00 :   bd3b:   mov    %r15,%rax
    0.00 :   bd3e:   imul   %rdx
    0.00 :   bd41:   mov    %rdx,%rax
    0.00 :   bd44:   mov    %r15,%rdx
    0.00 :   bd47:   sar    $0x3f,%rdx
    0.00 :   bd4b:   sar    $0x3,%rax
    0.00 :   bd4f:   sub    %rdx,%rax
    0.00 :   bd52:   lea    0x0(,%rax,8),%rdx
    0.00 :   bd5a:   sub    %rax,%rdx
    0.00 :   bd5d:   lea    (%rax,%rdx,4),%rax
    0.00 :   bd61:   mov    %r15,%rdx
    0.00 :   bd64:   sub    %rax,%rdx
    0.00 :   bd67:   lea    0x1(%rdx),%r8
    0.00 :   bd6b:   jmp    babf <do_lookup_x+0x6cf>
    0.00 :   bd70:   mov    %rbp,%r10
    0.00 :   bd73:   mov    0x30(%rsp),%r15d
    0.00 :   bd78:   mov    0x20(%rsp),%r14
    0.00 :   bd7d:   mov    0xd0(%rsp),%rbp
    0.00 :   bd85:   mov    0xe8(%rsp),%r11
    0.00 :   bd8d:   mov    0x68(%rsp),%r12
    0.00 :   bd92:   jmp    ba57 <do_lookup_x+0x667>
    0.00 :   bd97:   mov    0x78(%rbx),%rdx
    0.00 :   bd9b:   test   %rdx,%rdx
    0.00 :   bd9e:   je     b82f <do_lookup_x+0x43f>
    0.00 :   bda4:   mov    0x80(%rbx),%rax
    0.00 :   bdab:   test   %rax,%rax
    0.00 :   bdae:   je     b82f <do_lookup_x+0x43f>
    0.00 :   bdb4:   mov    0x8(%rax),%rax
    0.00 :   bdb8:   test   %rax,%rax
    0.00 :   bdbb:   je     b82f <do_lookup_x+0x43f>
    0.00 :   bdc1:   mov    0x8(%rdx),%r13
    0.00 :   bdc5:   testb  $0x20,0x31e(%rbx)
    0.00 :   bdcc:   je     bdd1 <do_lookup_x+0x9e1>
    0.00 :   bdce:   add    (%rbx),%r13
    0.00 :   bdd1:   movabs $0xaaaaaaaaaaaaaaab,%rdi
    0.00 :   bddb:   mul    %rdi
    0.00 :   bdde:   mov    %rdx,%rax
    0.00 :   bde1:   shr    $0x4,%rax
    0.00 :   bde5:   test   %eax,%eax
    0.00 :   bde7:   je     b82f <do_lookup_x+0x43f>
    0.00 :   bded:   mov    %eax,%eax
    0.00 :   bdef:   mov    %rbx,0x30(%rsp)
    0.00 :   bdf4:   mov    %r10,%rbx
    0.00 :   bdf7:   lea    (%rax,%rax,2),%rax
    0.00 :   bdfb:   mov    %rbp,0xd0(%rsp)
    0.00 :   be03:   mov    %r13,%rbp
    0.00 :   be06:   lea    0x0(%r13,%rax,8),%rcx
    0.00 :   be0b:   mov    %r8,0x20(%rsp)
    0.00 :   be10:   mov    %r12,%r13
    0.00 :   be13:   mov    %r11,0xe8(%rsp)
    0.00 :   be1b:   mov    %rcx,%r12
    0.00 :   be1e:   jmp    be2d <do_lookup_x+0xa3d>
    0.00 :   be20:   add    $0x18,%rbp
    0.00 :   be24:   cmp    %r12,%rbp
    0.00 :   be27:   je     c040 <do_lookup_x+0xc50>
    0.00 :   be2d:   mov    0x8(%rbp),%rax
    0.00 :   be31:   mov    %eax,%esi
    0.00 :   be33:   cmp    $0x7,%eax
    0.00 :   be36:   je     be20 <do_lookup_x+0xa30>
    0.00 :   be38:   cmp    $0x10,%rsi
    0.00 :   be3c:   je     be20 <do_lookup_x+0xa30>
    0.00 :   be3e:   lea    -0x11(%rsi),%rdi
    0.00 :   be42:   cmp    $0x13,%rdi
    0.00 :   be46:   jbe    be20 <do_lookup_x+0xa30>
    0.00 :   be48:   cmp    $0x5,%rsi
    0.00 :   be4c:   jne    be20 <do_lookup_x+0xa30>
    0.00 :   be4e:   shr    $0x20,%rax
    0.00 :   be52:   mov    0x38(%rsp),%rsi
    0.00 :   be57:   lea    (%rax,%rax,2),%rax
    0.00 :   be5b:   mov    (%rbx,%rax,8),%edi
    0.00 :   be5e:   add    (%rsp),%rdi
    0.00 :   be62:   call   27220 <strcmp>
    0.00 :   be67:   test   %eax,%eax
    0.00 :   be69:   jne    be20 <do_lookup_x+0xa30>
    0.00 :   be6b:   mov    0xd0(%rsp),%rbp
    0.00 :   be73:   mov    0xe8(%rsp),%r11
    0.00 :   be7b:   mov    %r13,%r12
    0.00 :   be7e:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   be83:   nopl   0x0(%rax,%rax,1)
    0.00 :   be88:   lea    0x1(%r14),%rdi
    0.00 :   be8c:   mov    %rcx,0x38(%rsp)
    0.00 :   be91:   call   d700 <_dl_higher_prime_number>
    0.00 :   be96:   mov    $0x20,%edi
    0.00 :   be9b:   mov    %rax,%rbp
    0.00 :   be9e:   mov    %rax,%rsi
    0.00 :   bea1:   call   *0x2dbc9(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   bea7:   mov    %rax,%r13
    0.00 :   beaa:   test   %rax,%rax
    0.00 :   bead:   je     c0af <do_lookup_x+0xcbf>
    0.00 :   beb3:   lea    -0x2(%rbp),%rax
    0.00 :   beb7:   mov    0x10(%rsp),%rsi
    0.00 :   bebc:   mov    0x38(%rsp),%rcx
    0.00 :   bec1:   mov    %rax,0x8(%rsp)
    0.00 :   bec6:   mov    %r14,%rax
    0.00 :   bec9:   mov    0x8(%rsp),%r9
    0.00 :   bece:   shl    $0x5,%rax
    0.00 :   bed2:   test   %r14,%r14
    0.00 :   bed5:   mov    %rsi,%rdi
    0.00 :   bed8:   lea    (%rax,%rsi,1),%r11
    0.00 :   bedc:   jne    bee9 <do_lookup_x+0xaf9>
    0.00 :   bede:   jmp    bf55 <do_lookup_x+0xb65>
    0.00 :   bee0:   add    $0x20,%rdi
    0.00 :   bee4:   cmp    %rdi,%r11
    0.00 :   bee7:   je     bf55 <do_lookup_x+0xb65>
    0.00 :   bee9:   mov    0x8(%rdi),%rax
    0.00 :   beed:   test   %rax,%rax
    0.00 :   bef0:   je     bee0 <do_lookup_x+0xaf0>
    0.00 :   bef2:   mov    (%rdi),%r12d
    0.00 :   bef5:   movq   %rax,%xmm0
    0.00 :   befa:   xor    %edx,%edx
    0.00 :   befc:   mov    0x18(%rdi),%r10
    0.00 :   bf00:   movhps 0x10(%rdi),%xmm0
    0.00 :   bf04:   mov    %r12,%rax
    0.00 :   bf07:   mov    %r12,%r8
    0.00 :   bf0a:   div    %rbp
    0.00 :   bf0d:   mov    %r12,%rax
    0.00 :   bf10:   mov    %rdx,%rsi
    0.00 :   bf13:   xor    %edx,%edx
    0.00 :   bf15:   div    %r9
    0.00 :   bf18:   add    $0x1,%rdx
    0.00 :   bf1c:   mov    %rdx,%r12
    0.00 :   bf1f:   shl    $0x5,%r12
    0.00 :   bf23:   mov    %rsi,%rax
    0.00 :   bf26:   shl    $0x5,%rax
    0.00 :   bf2a:   add    %r13,%rax
    0.00 :   bf2d:   jmp    bf3b <do_lookup_x+0xb4b>
    0.00 :   bf2f:   nop
    0.00 :   bf30:   add    %rdx,%rsi
    0.00 :   bf33:   add    %r12,%rax
    0.00 :   bf36:   cmp    %rsi,%rbp
    0.00 :   bf39:   jbe    bf50 <do_lookup_x+0xb60>
    0.00 :   bf3b:   cmpq   $0x0,0x8(%rax)
    0.00 :   bf40:   jne    bf30 <do_lookup_x+0xb40>
    0.00 :   bf42:   mov    %r8d,(%rax)
    0.00 :   bf45:   mov    %r10,0x18(%rax)
    0.00 :   bf49:   movups %xmm0,0x8(%rax)
    0.00 :   bf4d:   jmp    bee0 <do_lookup_x+0xaf0>
    0.00 :   bf4f:   nop
    0.00 :   bf50:   sub    %rbp,%rsi
    0.00 :   bf53:   jmp    bf23 <do_lookup_x+0xb33>
    0.00 :   bf55:   mov    0x18(%rsp),%rax
    0.00 :   bf5a:   mov    0x10(%rsp),%rdi
    0.00 :   bf5f:   mov    %rcx,0x38(%rsp)
    0.00 :   bf64:   mov    %rbp,%r14
    0.00 :   bf67:   lea    (%rax,%rax,4),%r12
    0.00 :   bf6b:   lea    0x2e0ce(%rip),%rax        # 3a040 <_rtld_global>
    0.00 :   bf72:   shl    $0x5,%r12
    0.00 :   bf76:   add    %rax,%r12
    0.00 :   bf79:   call   *0x68(%r12)
    0.00 :   bf7e:   mov    0x2dae3(%rip),%rax        # 39a68 <__rtld_free>
    0.00 :   bf85:   xor    %edx,%edx
    0.00 :   bf87:   mov    %rbp,0x58(%r12)
    0.00 :   bf8c:   mov    %r13,0x50(%r12)
    0.00 :   bf91:   mov    0x38(%rsp),%rcx
    0.00 :   bf96:   mov    %rax,0x68(%r12)
    0.00 :   bf9b:   mov    %r15,%rax
    0.00 :   bf9e:   div    %rbp
    0.00 :   bfa1:   mov    %r13,0x10(%rsp)
    0.00 :   bfa6:   mov    %r15,%rax
    0.00 :   bfa9:   mov    %rdx,%r12
    0.00 :   bfac:   xor    %edx,%edx
    0.00 :   bfae:   divq   0x8(%rsp)
    0.00 :   bfb3:   lea    0x1(%rdx),%r8
    0.00 :   bfb7:   jmp    babf <do_lookup_x+0x6cf>
    0.00 :   bfbc:   mov    %rdi,%rax
    0.00 :   bfbf:   xor    %edx,%edx
    0.00 :   bfc1:   div    %rsi
    0.00 :   bfc4:   lea    0x0(,%rdx,4),%rax
    0.00 :   bfcc:   jmp    bca5 <do_lookup_x+0x8b5>
    0.00 :   bfd1:   mov    %rbp,%r10
    0.00 :   bfd4:   mov    0x30(%rsp),%r15d
    0.00 :   bfd9:   mov    0x20(%rsp),%r14
    0.00 :   bfde:   mov    %rax,%r8
   20.19 :   bfe1:   mov    0xd0(%rsp),%rbp
    0.00 :   bfe9:   mov    0xe8(%rsp),%r11
    0.00 :   bff1:   mov    0x68(%rsp),%r12
    0.00 :   bff6:   jmp    b6b0 <do_lookup_x+0x2c0>
    0.00 :   bffb:   testb  $0x4,0x2dade(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   c002:   jne    c062 <do_lookup_x+0xc72>
    0.00 :   c004:   movb   $0x1,0x31f(%rbx)
    0.00 :   c00b:   jmp    bb29 <do_lookup_x+0x739>
    0.00 :   c010:   testb  $0x8,0x2daca(%rip)        # 39ae1 <_rtld_global_ro+0x1>
    0.00 :   c017:   jne    bb43 <do_lookup_x+0x753>
    0.00 :   c01d:   lea    0x2398c(%rip),%rcx        # 2f9b0 <__PRETTY_FUNCTION__.1>
    0.00 :   c024:   mov    $0x133,%edx
    0.00 :   c029:   lea    0x21e4d(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   c030:   lea    0x24959(%rip),%rdi        # 30990 <__PRETTY_FUNCTION__.10+0xf8>
    0.00 :   c037:   call   1e460 <__GI___assert_fail>
    0.00 :   c03c:   nopl   0x0(%rax)
    0.00 :   c040:   mov    0x30(%rsp),%rbx
    0.00 :   c045:   mov    0x20(%rsp),%r8
    0.00 :   c04a:   mov    %r13,%r12
    0.00 :   c04d:   mov    0xd0(%rsp),%rbp
    0.00 :   c055:   mov    0xe8(%rsp),%r11
    0.00 :   c05d:   jmp    b82f <do_lookup_x+0x43f>
    0.00 :   c062:   mov    0x30(%rbx),%rdx
    0.00 :   c066:   mov    0x8(%rbx),%rsi
    0.00 :   c06a:   lea    0x24947(%rip),%rdi        # 309b8 <__PRETTY_FUNCTION__.10+0x120>
    0.00 :   c071:   xor    %eax,%eax
    0.00 :   c073:   call   fbc0 <_dl_debug_printf>
    0.00 :   c078:   jmp    c004 <do_lookup_x+0xc14>
    0.00 :   c07a:   mov    0x30(%rbx),%rdx
    0.00 :   c07e:   mov    0x8(%rbx),%rsi
    0.00 :   c082:   lea    0x2492f(%rip),%rdi        # 309b8 <__PRETTY_FUNCTION__.10+0x120>
    0.00 :   c089:   xor    %eax,%eax
    0.00 :   c08b:   call   fbc0 <_dl_debug_printf>
    0.00 :   c090:   jmp    bbcc <do_lookup_x+0x7dc>
    0.00 :   c095:   mov    0x38(%rsp),%r11
    0.00 :   c09a:   mov    0x8(%rbx),%rsi
    0.00 :   c09e:   lea    0x2487b(%rip),%rcx        # 30920 <__PRETTY_FUNCTION__.10+0x88>
    0.00 :   c0a5:   xor    %edi,%edi
    0.00 :   c0a7:   mov    %r11,%rdx
    0.00 :   c0aa:   call   2070 <_dl_signal_error@plt>
    0.00 :   c0af:   mov    0x30(%rsp),%rdi
    0.00 :   c0b4:   call   *0x2d9be(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   c0ba:   lea    0x21dc8(%rip),%rdi        # 2de89 <_sys_errnameidx+0x589>
    0.00 :   c0c1:   xor    %eax,%eax
    0.00 :   c0c3:   call   ff20 <_dl_fatal_printf>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ad4e <read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
    0.00 :   ad4e:   endbr64
    0.00 :   ad52:   push   %rbp
    0.00 :   ad53:   mov    %rsp,%rbp
    0.00 :   ad56:   push   %rbx
    0.00 :   ad57:   sub    $0x238,%rsp
    0.00 :   ad5e:   mov    %rdi,-0x238(%rbp)
    0.00 :   ad65:   mov    %rsi,-0x240(%rbp)
    0.00 :   ad6c:   mov    %fs:0x28,%rax
    0.00 :   ad75:   mov    %rax,-0x18(%rbp)
    0.00 :   ad79:   xor    %eax,%eax
    0.00 :   ad7b:   mov    -0x240(%rbp),%rcx
    0.00 :   ad82:   lea    -0x220(%rbp),%rax
    0.00 :   ad89:   mov    $0x8,%edx
    0.00 :   ad8e:   mov    %rcx,%rsi
    0.00 :   ad91:   mov    %rax,%rdi
    0.00 :   ad94:   call   2540 <std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    0.00 :   ad99:   mov    -0x238(%rbp),%rax
    0.00 :   ada0:   mov    %rax,%rdi
    0.00 :   ada3:   call   2b28 <std::vector<float, std::allocator<float> >::vector()>
    0.00 :   ada8:   jmp    adc3 <read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x75>
    0.00 :   adaa:   lea    -0x224(%rbp),%rdx
    0.00 :   adb1:   mov    -0x238(%rbp),%rax
    0.00 :   adb8:   mov    %rdx,%rsi
    0.00 :   adbb:   mov    %rax,%rdi
    0.00 :   adbe:   call   4710 <std::vector<float, std::allocator<float> >::push_back(float const&)>
    0.00 :   adc3:   lea    -0x224(%rbp),%rdx
    0.00 :   adca:   lea    -0x220(%rbp),%rax
    0.00 :   add1:   mov    %rdx,%rsi
    0.00 :   add4:   mov    %rax,%rdi
    0.00 :   add7:   call   2330 <std::istream::operator>>(float&)@plt>
    0.00 :   addc:   mov    (%rax),%rdx
    0.00 :   addf:   sub    $0x18,%rdx
    0.00 :   ade3:   mov    (%rdx),%rdx
    0.00 :   ade6:   add    %rdx,%rax
  100.00 :   ade9:   mov    %rax,%rdi
    0.00 :   adec:   call   24d0 <std::basic_ios<char, std::char_traits<char> >::operator bool() const@plt>
    0.00 :   adf1:   test   %al,%al
    0.00 :   adf3:   jne    adaa <read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
    0.00 :   adf5:   nop
    0.00 :   adf6:   lea    -0x220(%rbp),%rax
    0.00 :   adfd:   mov    %rax,%rdi
    0.00 :   ae00:   call   2340 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
    0.00 :   ae05:   nop
    0.00 :   ae06:   mov    -0x18(%rbp),%rax
    0.00 :   ae0a:   sub    %fs:0x28,%rax
    0.00 :   ae13:   je     ae4c <read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfe>
    0.00 :   ae15:   jmp    ae47 <read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf9>
    0.00 :   ae17:   endbr64
    0.00 :   ae1b:   mov    %rax,%rbx
    0.00 :   ae1e:   mov    -0x238(%rbp),%rax
    0.00 :   ae25:   mov    %rax,%rdi
    0.00 :   ae28:   call   2dae <std::vector<float, std::allocator<float> >::~vector()>
    0.00 :   ae2d:   lea    -0x220(%rbp),%rax
    0.00 :   ae34:   mov    %rax,%rdi
    0.00 :   ae37:   call   2340 <std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@plt>
    0.00 :   ae3c:   mov    %rbx,%rax
    0.00 :   ae3f:   mov    %rax,%rdi
    0.00 :   ae42:   call   2580 <_Unwind_Resume@plt>
    0.00 :   ae47:   call   24b0 <__stack_chk_fail@plt>
    0.00 :   ae4c:   mov    -0x238(%rbp),%rax
    0.00 :   ae53:   mov    -0x8(%rbp),%rbx
    0.00 :   ae57:   leave
    0.00 :   ae58:   ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     000000000009e8f0 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@plt>:
  100.00 :   9e8f0:  endbr64
    0.00 :   9e8f4:  bnd jmp *0x187a1d(%rip)        # 226318 <std::string::_Rep::_M_destroy(std::allocator<char> const&)@@GLIBCXX_3.4+0x131898>
    0.00 :   9e8fb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b7ce <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const>:
    0.00 :   b7ce:   endbr64
    0.00 :   b7d2:   push   %rbp
    0.00 :   b7d3:   mov    %rsp,%rbp
    0.00 :   b7d6:   mov    %rdi,-0x8(%rbp)
    0.00 :   b7da:   mov    -0x8(%rbp),%rax
  100.00 :   b7de:   mov    (%rax),%rax
    0.00 :   b7e1:   pop    %rbp
    0.00 :   b7e2:   ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (8 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000c0d0 <_dl_lookup_symbol_x>:
    0.00 :   c0d0:   endbr64
    0.00 :   c0d4:   push   %r15
    0.00 :   c0d6:   push   %r14
    0.00 :   c0d8:   push   %r13
    0.00 :   c0da:   push   %r12
    0.00 :   c0dc:   mov    %rdi,%r12
    0.00 :   c0df:   push   %rbp
    0.00 :   c0e0:   mov    %rdx,%rbp
    0.00 :   c0e3:   push   %rbx
    0.00 :   c0e4:   sub    $0x98,%rsp
    0.00 :   c0eb:   mov    0xd0(%rsp),%eax
    0.00 :   c0f2:   mov    %rsi,0x8(%rsp)
    0.00 :   c0f7:   mov    %rcx,0x18(%rsp)
    0.00 :   c0fc:   and    $0x2,%eax
    0.00 :   c0ff:   mov    %r8,(%rsp)
    0.00 :   c103:   mov    %eax,0x28(%rsp)
    0.00 :   c107:   mov    0xd0(%rsp),%eax
    0.00 :   c10e:   mov    %r9d,0x14(%rsp)
    0.00 :   c113:   and    $0x8,%eax
    0.00 :   c116:   mov    %eax,0x30(%rsp)
    0.00 :   c11a:   mov    0xd0(%rsp),%eax
    0.00 :   c121:   and    $0x4,%eax
    0.00 :   c124:   mov    %eax,0x38(%rsp)
    0.00 :   c128:   movzbl (%r12),%edx
    9.88 :   c12d:   test   %dl,%dl
    0.00 :   c12f:   je     c358 <_dl_lookup_symbol_x+0x288>
    0.00 :   c135:   mov    %r12,%rcx
    0.00 :   c138:   mov    $0x1505,%ebx
    0.00 :   c13d:   nopl   (%rax)
    0.00 :   c140:   mov    %rbx,%rax
    0.00 :   c143:   add    $0x1,%rcx
    0.00 :   c147:   shl    $0x5,%rax
    0.00 :   c14b:   add    %rax,%rbx
   33.57 :   c14e:   add    %rdx,%rbx
    0.00 :   c151:   movzbl (%rcx),%edx
    3.86 :   c154:   test   %dl,%dl
    0.00 :   c156:   jne    c140 <_dl_lookup_symbol_x+0x70>
    0.00 :   c158:   mov    %ebx,%ebx
    0.00 :   c15a:   addq   $0x1,0x2e976(%rip)        # 3aad8 <_rtld_global+0xa98>
    0.00 :   c162:   mov    $0xffffffff,%eax
    0.00 :   c167:   pxor   %xmm0,%xmm0
    0.00 :   c16b:   cmpq   $0x0,(%rsp)
    0.00 :   c170:   mov    %rax,0x40(%rsp)
    0.00 :   c175:   movaps %xmm0,0x50(%rsp)
    0.00 :   c17a:   je     c18a <_dl_lookup_symbol_x+0xba>
    0.00 :   c17c:   mov    0x28(%rsp),%r13d
    0.00 :   c181:   test   %r13d,%r13d
   52.47 :   c184:   jne    cdec <_dl_lookup_symbol_x+0xd1c>
    0.00 :   c18a:   cmpq   $0x0,0xd8(%rsp)
    0.00 :   c193:   mov    0x18(%rsp),%rax
    0.00 :   c198:   mov    (%rax),%r9
    0.00 :   c19b:   jne    c400 <_dl_lookup_symbol_x+0x330>
    0.00 :   c1a1:   test   %r9,%r9
    0.00 :   c1a4:   je     c362 <_dl_lookup_symbol_x+0x292>
    0.00 :   c1aa:   movq   $0x0,0x20(%rsp)
    0.00 :   c1b3:   mov    %rax,%r13
    0.00 :   c1b6:   mov    0x20(%rsp),%rax
    0.00 :   c1bb:   lea    0x50(%rsp),%r15
    0.00 :   c1c0:   lea    0x40(%rsp),%r14
    0.00 :   c1c5:   jmp    c1df <_dl_lookup_symbol_x+0x10f>
    0.00 :   c1c7:   nopw   0x0(%rax,%rax,1)
    0.00 :   c1d0:   mov    0x8(%r13),%r9
    0.00 :   c1d4:   add    $0x8,%r13
    0.00 :   c1d8:   xor    %eax,%eax
    0.00 :   c1da:   test   %r9,%r9
    0.00 :   c1dd:   je     c219 <_dl_lookup_symbol_x+0x149>
    0.00 :   c1df:   push   0x8(%rsp)
    0.00 :   c1e3:   mov    0x1c(%rsp),%edi
    0.00 :   c1e7:   mov    %r15,%r8
    0.00 :   c1ea:   mov    %r14,%rdx
    0.00 :   c1ed:   mov    0x0(%rbp),%rcx
    0.00 :   c1f1:   push   %rdi
    0.00 :   c1f2:   mov    %r12,%rdi
    0.00 :   c1f5:   push   0xe8(%rsp)
    0.00 :   c1fc:   mov    0xe8(%rsp),%esi
    0.00 :   c203:   push   %rsi
    0.00 :   c204:   mov    %rbx,%rsi
    0.00 :   c207:   push   0x20(%rsp)
    0.00 :   c20b:   push   %rax
    0.00 :   c20c:   call   b3f0 <do_lookup_x>
    0.00 :   c211:   add    $0x30,%rsp
    0.00 :   c215:   test   %eax,%eax
    0.00 :   c217:   je     c1d0 <_dl_lookup_symbol_x+0x100>
    0.00 :   c219:   mov    0x0(%rbp),%rcx
    0.22 :   c21d:   mov    0x50(%rsp),%rdx
    0.00 :   c222:   mov    %rcx,%rax
    0.00 :   c225:   test   %rdx,%rdx
    0.00 :   c228:   je     c366 <_dl_lookup_symbol_x+0x296>
    0.00 :   c22e:   test   %rcx,%rcx
    0.00 :   c231:   je     c23e <_dl_lookup_symbol_x+0x16e>
    0.00 :   c233:   movzbl 0x5(%rcx),%eax
    0.00 :   c237:   and    $0x3,%eax
    0.00 :   c23a:   cmp    $0x3,%al
    0.00 :   c23c:   je     c2a0 <_dl_lookup_symbol_x+0x1d0>
    0.00 :   c23e:   mov    0x58(%rsp),%r15
    0.00 :   c243:   xor    %ebx,%ebx
    0.00 :   c245:   movzbl 0x31c(%r15),%eax
    0.00 :   c24d:   and    $0x3,%eax
    0.00 :   c250:   cmp    $0x2,%al
    0.00 :   c252:   je     c624 <_dl_lookup_symbol_x+0x554>
    0.00 :   c258:   mov    0x50(%rsp),%r10
    0.00 :   c25d:   mov    %r15,%r13
    0.00 :   c260:   mov    0x3e4(%r15),%edi
    0.00 :   c267:   test   %edi,%edi
    0.00 :   c269:   je     c440 <_dl_lookup_symbol_x+0x370>
    0.00 :   c26f:   mov    0x2d86b(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c275:   test   $0x804,%eax
    0.00 :   c27a:   jne    c450 <_dl_lookup_symbol_x+0x380>
    0.00 :   c280:   mov    %r10,0x0(%rbp)
    0.00 :   c284:   add    $0x98,%rsp
    0.00 :   c28b:   mov    %r13,%rax
    0.00 :   c28e:   pop    %rbx
    0.00 :   c28f:   pop    %rbp
    0.00 :   c290:   pop    %r12
    0.00 :   c292:   pop    %r13
    0.00 :   c294:   pop    %r14
    0.00 :   c296:   pop    %r15
    0.00 :   c298:   ret
    0.00 :   c299:   nopl   0x0(%rax)
    0.00 :   c2a0:   cmpl   $0x1,0x14(%rsp)
    0.00 :   c2a5:   je     c6ff <_dl_lookup_symbol_x+0x62f>
    0.00 :   c2ab:   mov    0x18(%rsp),%rax
    0.00 :   c2b0:   pxor   %xmm0,%xmm0
    0.00 :   c2b4:   movaps %xmm0,0x70(%rsp)
    0.00 :   c2b9:   mov    (%rax),%r9
    0.00 :   c2bc:   test   %r9,%r9
    0.00 :   c2bf:   je     c6f8 <_dl_lookup_symbol_x+0x628>
    0.00 :   c2c5:   cmpl   $0x4,0x14(%rsp)
    0.00 :   c2ca:   lea    0x70(%rsp),%r8
    0.00 :   c2cf:   mov    0x20(%rsp),%rdx
    0.00 :   c2d4:   mov    %rax,%r15
    0.00 :   c2d7:   sete   0x3c(%rsp)
    0.00 :   c2dc:   mov    %r8,%r13
    0.00 :   c2df:   jmp    c333 <_dl_lookup_symbol_x+0x263>
    0.00 :   c2e1:   nopl   0x0(%rax)
    0.00 :   c2e8:   push   $0x0
    0.00 :   c2ea:   mov    %r13,%r8
    0.00 :   c2ed:   mov    %rbx,%rsi
    0.00 :   c2f0:   mov    %r12,%rdi
    0.00 :   c2f3:   push   %rax
    0.00 :   c2f4:   push   0xe8(%rsp)
    0.00 :   c2fb:   mov    0xe8(%rsp),%eax
    0.00 :   c302:   push   %rax
    0.00 :   c303:   push   0x20(%rsp)
    0.00 :   c307:   push   %rdx
    0.00 :   c308:   mov    %r14,%rdx
    0.00 :   c30b:   call   b3f0 <do_lookup_x>
    0.00 :   c310:   add    $0x30,%rsp
    0.00 :   c314:   test   %eax,%eax
    0.00 :   c316:   jne    c6c7 <_dl_lookup_symbol_x+0x5f7>
    0.00 :   c31c:   mov    0x8(%r15),%r9
    0.00 :   c320:   add    $0x8,%r15
    0.00 :   c324:   test   %r9,%r9
    0.00 :   c327:   je     c6c7 <_dl_lookup_symbol_x+0x5f7>
    0.00 :   c32d:   mov    0x0(%rbp),%rcx
    0.00 :   c331:   xor    %edx,%edx
    0.00 :   c333:   movzbl 0x4(%rcx),%eax
    0.00 :   c337:   and    $0xf,%eax
    0.00 :   c33a:   cmp    $0x1,%al
    0.00 :   c33c:   jne    c34a <_dl_lookup_symbol_x+0x27a>
    0.00 :   c33e:   cmpb   $0x0,0x3c(%rsp)
    0.00 :   c343:   mov    $0x4,%eax
    0.00 :   c348:   jne    c2e8 <_dl_lookup_symbol_x+0x218>
    0.00 :   c34a:   mov    $0x1,%eax
    0.00 :   c34f:   jmp    c2e8 <_dl_lookup_symbol_x+0x218>
    0.00 :   c351:   nopl   0x0(%rax)
    0.00 :   c358:   mov    $0x1505,%ebx
    0.00 :   c35d:   jmp    c15a <_dl_lookup_symbol_x+0x8a>
    0.00 :   c362:   mov    0x0(%rbp),%rax
    0.00 :   c366:   test   %rax,%rax
    0.00 :   c369:   je     c376 <_dl_lookup_symbol_x+0x2a6>
    0.00 :   c36b:   movzbl 0x4(%rax),%eax
    0.00 :   c36f:   shr    $0x4,%al
    0.00 :   c372:   cmp    $0x2,%al
    0.00 :   c374:   je     c3f5 <_dl_lookup_symbol_x+0x325>
    0.00 :   c376:   testb  $0x1,0x2d764(%rip)        # 39ae1 <_rtld_global_ro+0x1>
    0.00 :   c37d:   jne    c3f5 <_dl_lookup_symbol_x+0x325>
    0.00 :   c37f:   mov    0x8(%rsp),%rax
    0.00 :   c384:   test   %rax,%rax
    0.00 :   c387:   je     c81f <_dl_lookup_symbol_x+0x74f>
    0.00 :   c38d:   mov    0x8(%rax),%rsi
    0.00 :   c391:   cmpq   $0x0,(%rsp)
    0.00 :   c396:   movzbl (%rsi),%eax
    0.00 :   c399:   je     c947 <_dl_lookup_symbol_x+0x877>
    0.00 :   c39f:   mov    (%rsp),%rdi
    0.00 :   c3a3:   lea    0x22b3f(%rip),%rdx        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   c3aa:   lea    0x21ae7(%rip),%r8        # 2de98 <_sys_errnameidx+0x598>
    0.00 :   c3b1:   mov    (%rdi),%r9
    0.00 :   c3b4:   test   %r9,%r9
    0.00 :   c3b7:   cmove  %rdx,%r9
    0.00 :   c3bb:   test   %al,%al
    0.00 :   c3bd:   je     c84c <_dl_lookup_symbol_x+0x77c>
    0.00 :   c3c3:   lea    0x70(%rsp),%r13
    0.00 :   c3c8:   mov    %r12,%rcx
    0.00 :   c3cb:   lea    0x21ae2(%rip),%rdx        # 2deb4 <_sys_errnameidx+0x5b4>
    0.00 :   c3d2:   xor    %eax,%eax
    0.00 :   c3d4:   mov    %r13,%rdi
    0.00 :   c3d7:   call   4ba0 <_dl_exception_create_format>
    0.00 :   c3dc:   xor    %edi,%edi
    0.00 :   c3de:   lea    0x21ae8(%rip),%rdx        # 2decd <_sys_errnameidx+0x5cd>
    0.00 :   c3e5:   mov    %r13,%rsi
    0.00 :   c3e8:   call   1d1c0 <_dl_signal_cexception>
    0.00 :   c3ed:   mov    %r13,%rdi
    0.00 :   c3f0:   call   5010 <_dl_exception_free>
    0.00 :   c3f5:   xor    %r10d,%r10d
    0.00 :   c3f8:   xor    %r13d,%r13d
    0.00 :   c3fb:   jmp    c280 <_dl_lookup_symbol_x+0x1b0>
    0.00 :   c400:   mov    (%r9),%rax
    0.00 :   c403:   mov    (%rax),%rsi
    0.00 :   c406:   cmp    %rsi,0xd8(%rsp)
    0.00 :   c40e:   je     c905 <_dl_lookup_symbol_x+0x835>
    0.00 :   c414:   mov    0xd8(%rsp),%rcx
    0.00 :   c41c:   xor    %edx,%edx
    0.00 :   c41e:   xchg   %ax,%ax
    0.00 :   c420:   add    $0x1,%rdx
    0.00 :   c424:   cmp    %rcx,(%rax,%rdx,8)
    0.00 :   c428:   jne    c420 <_dl_lookup_symbol_x+0x350>
    0.00 :   c42a:   mov    %rdx,0x20(%rsp)
    0.00 :   c42f:   mov    0x18(%rsp),%r13
    0.00 :   c434:   jmp    c1b6 <_dl_lookup_symbol_x+0xe6>
    0.00 :   c439:   nopl   0x0(%rax)
    0.00 :   c440:   movl   $0x1,0x3e4(%r15)
    0.00 :   c44b:   jmp    c26f <_dl_lookup_symbol_x+0x19f>
    0.00 :   c450:   test   $0x4,%al
    0.00 :   c452:   je     c504 <_dl_lookup_symbol_x+0x434>
    0.00 :   c458:   mov    0x8(%r13),%rcx
    0.00 :   c45c:   test   %ebx,%ebx
    0.00 :   c45e:   mov    0x30(%r13),%r8
    0.00 :   c462:   lea    0x21a3a(%rip),%r9        # 2dea3 <_sys_errnameidx+0x5a3>
    0.00 :   c469:   lea    0x21a3d(%rip),%rax        # 2dead <_sys_errnameidx+0x5ad>
    0.00 :   c470:   cmove  %rax,%r9
    0.00 :   c474:   cmpb   $0x0,(%rcx)
    0.00 :   c477:   jne    c491 <_dl_lookup_symbol_x+0x3c1>
    0.00 :   c479:   mov    0x2d640(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c480:   mov    (%rax),%rcx
    0.00 :   c483:   lea    0x21699(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c48a:   test   %rcx,%rcx
    0.00 :   c48d:   cmove  %rax,%rcx
    0.00 :   c491:   mov    0x8(%rsp),%rax
    0.00 :   c496:   mov    0x8(%rax),%rsi
    0.00 :   c49a:   mov    0x30(%rax),%rdx
    0.00 :   c49e:   cmpb   $0x0,(%rsi)
    0.00 :   c4a1:   jne    c4bb <_dl_lookup_symbol_x+0x3eb>
    0.00 :   c4a3:   mov    0x2d616(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c4aa:   mov    (%rax),%rsi
    0.00 :   c4ad:   lea    0x2166f(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c4b4:   test   %rsi,%rsi
    0.00 :   c4b7:   cmove  %rax,%rsi
    0.00 :   c4bb:   mov    %r10,0x18(%rsp)
    0.00 :   c4c0:   sub    $0x8,%rsp
    0.00 :   c4c4:   xor    %eax,%eax
    0.00 :   c4c6:   push   %r12
    0.00 :   c4c8:   lea    0x24619(%rip),%rdi        # 30ae8 <__PRETTY_FUNCTION__.10+0x250>
    0.00 :   c4cf:   call   fbc0 <_dl_debug_printf>
    0.00 :   c4d4:   pop    %rcx
    0.00 :   c4d5:   pop    %rsi
    0.00 :   c4d6:   mov    (%rsp),%rax
    0.00 :   c4da:   mov    0x18(%rsp),%r10
    0.00 :   c4df:   test   %rax,%rax
    0.00 :   c4e2:   je     c8e2 <_dl_lookup_symbol_x+0x812>
    0.00 :   c4e8:   mov    (%rax),%rsi
    0.00 :   c4eb:   lea    0x219ef(%rip),%rdi        # 2dee1 <_sys_errnameidx+0x5e1>
    0.00 :   c4f2:   xor    %eax,%eax
    0.00 :   c4f4:   call   fc70 <_dl_debug_printf_c>
    0.00 :   c4f9:   mov    0x2d5e1(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c4ff:   mov    0x18(%rsp),%r10
    0.00 :   c504:   test   $0x8,%ah
    0.00 :   c507:   je     c280 <_dl_lookup_symbol_x+0x1b0>
    0.00 :   c50d:   mov    0x2d8a4(%rip),%rax        # 39db8 <_rtld_global_ro+0x2d8>
    0.00 :   c514:   pxor   %xmm0,%xmm0
    0.00 :   c518:   mov    0x2db21(%rip),%rdx        # 3a040 <_rtld_global>
    0.00 :   c51f:   movaps %xmm0,0x60(%rsp)
    0.00 :   c524:   test   %rax,%rax
    0.00 :   c527:   je     c735 <_dl_lookup_symbol_x+0x665>
    0.00 :   c52d:   cmp    %rdx,%rax
    0.00 :   c530:   je     c735 <_dl_lookup_symbol_x+0x665>
    0.00 :   c536:   test   %r10,%r10
    0.00 :   c539:   je     ca05 <_dl_lookup_symbol_x+0x935>
    0.00 :   c53f:   movzbl 0x4(%r10),%eax
    0.00 :   c544:   andl   $0x3,0x14(%rsp)
    0.00 :   c549:   and    $0xf,%eax
    0.00 :   c54c:   cmp    $0x6,%al
    0.00 :   c54e:   je     cac0 <_dl_lookup_symbol_x+0x9f0>
    0.00 :   c554:   xor    %edx,%edx
    0.00 :   c556:   mov    0x14(%rsp),%esi
    0.00 :   c55a:   mov    %esi,%ecx
    0.00 :   c55c:   or     $0x8,%ecx
    0.00 :   c55f:   cmp    $0xa,%al
    0.00 :   c561:   cmovne %esi,%ecx
    0.00 :   c564:   mov    %ecx,0x14(%rsp)
    0.00 :   c568:   test   %edx,%edx
    0.00 :   c56a:   je     c869 <_dl_lookup_symbol_x+0x799>
    0.00 :   c570:   mov    0x8(%rsp),%rsi
    0.00 :   c575:   mov    0x0(%rbp),%r9
    0.00 :   c579:   mov    0x8(%r10),%rdx
    0.00 :   c57d:   mov    0x358(%r13),%rax
    0.00 :   c584:   mov    0x358(%rsi),%rcx
    0.00 :   c58b:   sub    %rcx,%r9
    0.00 :   c58e:   mov    %r10,(%rsp)
    0.00 :   c592:   mov    $0x10,%r8d
    0.00 :   c598:   lea    0x2196b(%rip),%rsi        # 2df0a <_sys_errnameidx+0x60a>
    0.00 :   c59f:   lea    0x2457a(%rip),%rdi        # 30b20 <__PRETTY_FUNCTION__.10+0x288>
    0.00 :   c5a6:   push   %rdx
    0.00 :   c5a7:   mov    $0x10,%edx
    0.00 :   c5ac:   push   $0x10
    0.00 :   c5ae:   push   %rax
    0.00 :   c5af:   xor    %eax,%eax
    0.00 :   c5b1:   push   $0x10
    0.00 :   c5b3:   call   fdc0 <_dl_printf>
    0.00 :   c5b8:   mov    0x80(%rsp),%rax
    0.00 :   c5c0:   xor    %r8d,%r8d
    0.00 :   c5c3:   add    $0x20,%rsp
    0.00 :   c5c7:   xor    %edx,%edx
    0.00 :   c5c9:   mov    (%rsp),%r10
    0.00 :   c5cd:   test   %rax,%rax
    0.00 :   c5d0:   je     c5e2 <_dl_lookup_symbol_x+0x512>
    0.00 :   c5d2:   mov    0x8(%rax),%r8
    0.00 :   c5d6:   mov    0x68(%rsp),%rax
    0.00 :   c5db:   mov    0x358(%rax),%rdx
    0.00 :   c5e2:   mov    $0x10,%ecx
    0.00 :   c5e7:   mov    $0x10,%esi
    0.00 :   c5ec:   xor    %eax,%eax
    0.00 :   c5ee:   mov    %r10,(%rsp)
    0.00 :   c5f2:   lea    0x218ef(%rip),%rdi        # 2dee8 <_sys_errnameidx+0x5e8>
    0.00 :   c5f9:   call   fdc0 <_dl_printf>
    0.00 :   c5fe:   mov    (%rsp),%r10
    0.00 :   c602:   mov    0x14(%rsp),%esi
    0.00 :   c606:   mov    %r12,%rdx
    0.00 :   c609:   lea    0x218eb(%rip),%rdi        # 2defb <_sys_errnameidx+0x5fb>
    0.00 :   c610:   xor    %eax,%eax
    0.00 :   c612:   mov    %r10,(%rsp)
    0.00 :   c616:   call   fdc0 <_dl_printf>
    0.00 :   c61b:   mov    (%rsp),%r10
    0.00 :   c61f:   jmp    c280 <_dl_lookup_symbol_x+0x1b0>
    0.00 :   c624:   cmp    %r15,0x8(%rsp)
    0.00 :   c629:   je     c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c62f:   testb  $0x1,0xd0(%rsp)
    0.00 :   c637:   je     c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c63d:   cmpb   $0x0,0x31f(%r15)
    0.00 :   c645:   jne    c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c64b:   mov    0x30(%rsp),%r11d
    0.00 :   c650:   test   %r11d,%r11d
    0.00 :   c653:   je     c663 <_dl_lookup_symbol_x+0x593>
    0.00 :   c655:   cmpb   $0x0,0x320(%r15)
    0.00 :   c65d:   jne    c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c663:   mov    0x8(%rsp),%rax
    0.00 :   c668:   mov    0x3d8(%rax),%rsi
    0.00 :   c66f:   mov    %rsi,%r9
    0.00 :   c672:   mov    %rsi,0x20(%rsp)
    0.00 :   c677:   mov    0x3d0(%rax),%rax
    0.00 :   c67e:   mov    %rax,%r14
    0.00 :   c681:   mov    %rax,0x20(%rsp)
    0.00 :   c686:   test   %r14,%r14
    0.00 :   c689:   je     c918 <_dl_lookup_symbol_x+0x848>
    0.00 :   c68f:   mov    (%r14),%rax
    0.00 :   c692:   xor    %edx,%edx
    0.00 :   c694:   test   %rax,%rax
    0.00 :   c697:   jne    c6b3 <_dl_lookup_symbol_x+0x5e3>
    0.00 :   c699:   jmp    c918 <_dl_lookup_symbol_x+0x848>
    0.00 :   c69e:   xchg   %ax,%ax
    0.00 :   c6a0:   lea    0x1(%rdx),%eax
    0.00 :   c6a3:   mov    %rax,%rdx
    0.00 :   c6a6:   mov    (%r14,%rax,8),%rax
    0.00 :   c6aa:   test   %rax,%rax
    0.00 :   c6ad:   je     c918 <_dl_lookup_symbol_x+0x848>
    0.00 :   c6b3:   cmp    %rax,%r15
    0.00 :   c6b6:   jne    c6a0 <_dl_lookup_symbol_x+0x5d0>
    0.00 :   c6b8:   mov    0x58(%rsp),%r13
    0.00 :   c6bd:   mov    0x50(%rsp),%r10
    0.00 :   c6c2:   jmp    c260 <_dl_lookup_symbol_x+0x190>
    0.00 :   c6c7:   cmpq   $0x0,0x70(%rsp)
    0.00 :   c6cd:   je     c6f8 <_dl_lookup_symbol_x+0x628>
    0.00 :   c6cf:   mov    0x8(%rsp),%r15
    0.00 :   c6d4:   cmp    %r15,0x78(%rsp)
    0.00 :   c6d9:   je     c6f8 <_dl_lookup_symbol_x+0x628>
    0.00 :   c6db:   movq   0x0(%rbp),%xmm0
    0.00 :   c6e0:   movq   %r15,%xmm2
    0.00 :   c6e5:   punpcklqdq %xmm2,%xmm0
    0.00 :   c6e9:   movaps %xmm0,0x50(%rsp)
    0.00 :   c6ee:   mov    $0x1,%ebx
    0.00 :   c6f3:   jmp    c245 <_dl_lookup_symbol_x+0x175>
    0.00 :   c6f8:   mov    0x58(%rsp),%r15
    0.00 :   c6fd:   jmp    c6ee <_dl_lookup_symbol_x+0x61e>
    0.00 :   c6ff:   mov    0x8(%rsp),%rax
    0.00 :   c704:   movq   %rcx,%xmm0
    0.00 :   c709:   mov    %rcx,%r10
    0.00 :   c70c:   movq   %rax,%xmm3
    0.00 :   c711:   punpcklqdq %xmm3,%xmm0
    0.00 :   c715:   cmp    %rax,0x58(%rsp)
    0.00 :   c71a:   je     ca5a <_dl_lookup_symbol_x+0x98a>
    0.00 :   c720:   movaps %xmm0,0x50(%rsp)
    0.00 :   c725:   mov    %rax,%r15
    0.00 :   c728:   mov    %r15,%r13
    0.00 :   c72b:   mov    $0x1,%ebx
    0.00 :   c730:   jmp    c260 <_dl_lookup_symbol_x+0x190>
    0.00 :   c735:   cmp    %rdx,0x8(%rsp)
    0.00 :   c73a:   je     c536 <_dl_lookup_symbol_x+0x466>
    0.00 :   c740:   movzbl (%r12),%ecx
    0.00 :   c745:   test   %cl,%cl
    0.00 :   c747:   je     cb8e <_dl_lookup_symbol_x+0xabe>
    0.00 :   c74d:   mov    %r12,%rsi
    0.00 :   c750:   mov    $0x1505,%eax
    0.00 :   c755:   nopl   (%rax)
    0.00 :   c758:   mov    %rax,%rdx
    0.00 :   c75b:   add    $0x1,%rsi
    0.00 :   c75f:   shl    $0x5,%rdx
    0.00 :   c763:   add    %rdx,%rax
    0.00 :   c766:   add    %rcx,%rax
    0.00 :   c769:   movzbl (%rsi),%ecx
    0.00 :   c76c:   test   %cl,%cl
    0.00 :   c76e:   jne    c758 <_dl_lookup_symbol_x+0x688>
    0.00 :   c770:   mov    %eax,%esi
    0.00 :   c772:   mov    $0xffffffff,%eax
    0.00 :   c777:   lea    0x48(%rsp),%rdx
    0.00 :   c77c:   mov    %r10,0x28(%rsp)
    0.00 :   c781:   mov    0x0(%rbp),%rcx
    0.00 :   c785:   mov    %rax,0x48(%rsp)
    0.00 :   c78a:   mov    0x8(%rsp),%rax
    0.00 :   c78f:   mov    0x2d8fa(%rip),%r15        # 3a090 <_rtld_global+0x50>
    0.00 :   c796:   movq   $0x0,0x2d8ef(%rip)        # 3a090 <_rtld_global+0x50>
    0.00 :   c7a1:   push   %rax
    0.00 :   c7a2:   mov    0x1c(%rsp),%edi
    0.00 :   c7a6:   mov    0x3a0(%rax),%r9
    0.00 :   c7ad:   push   %rdi
    0.00 :   c7ae:   mov    %r12,%rdi
    0.00 :   c7b1:   push   $0x0
    0.00 :   c7b3:   push   $0x0
    0.00 :   c7b5:   push   0x20(%rsp)
    0.00 :   c7b9:   push   $0x0
    0.00 :   c7bb:   lea    0x90(%rsp),%r8
    0.00 :   c7c3:   mov    %rdx,0x50(%rsp)
    0.00 :   c7c8:   mov    %rsi,0x48(%rsp)
    0.00 :   c7cd:   call   b3f0 <do_lookup_x>
    0.00 :   c7d2:   add    $0x30,%rsp
    0.00 :   c7d6:   mov    0x28(%rsp),%r10
    0.00 :   c7db:   mov    0x18(%rsp),%rsi
    0.00 :   c7e0:   cmp    %r10,0x60(%rsp)
    0.00 :   c7e5:   mov    0x20(%rsp),%rdx
    0.00 :   c7ea:   je     ca65 <_dl_lookup_symbol_x+0x995>
    0.00 :   c7f0:   mov    %r15,0x2d899(%rip)        # 3a090 <_rtld_global+0x50>
    0.00 :   c7f7:   test   %r10,%r10
    0.00 :   c7fa:   je     ca3e <_dl_lookup_symbol_x+0x96e>
    0.00 :   c800:   movzbl 0x4(%r10),%eax
    0.00 :   c805:   andl   $0x3,0x14(%rsp)
    0.00 :   c80a:   and    $0xf,%eax
    0.00 :   c80d:   cmp    $0x6,%al
    0.00 :   c80f:   je     ce0b <_dl_lookup_symbol_x+0xd3b>
    0.00 :   c815:   mov    $0x1,%edx
    0.00 :   c81a:   jmp    c556 <_dl_lookup_symbol_x+0x486>
    0.00 :   c81f:   lea    0x226c3(%rip),%r8        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   c826:   cmpq   $0x0,(%rsp)
    0.00 :   c82b:   mov    %r8,%r9
    0.00 :   c82e:   je     c84c <_dl_lookup_symbol_x+0x77c>
    0.00 :   c830:   mov    (%rsp),%rax
    0.00 :   c834:   lea    0x2165d(%rip),%r8        # 2de98 <_sys_errnameidx+0x598>
    0.00 :   c83b:   mov    (%rax),%r9
    0.00 :   c83e:   lea    0x226a4(%rip),%rax        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   c845:   test   %r9,%r9
    0.00 :   c848:   cmove  %rax,%r9
    0.00 :   c84c:   mov    0x2d26d(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c853:   mov    (%rax),%rsi
    0.00 :   c856:   lea    0x212c6(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c85d:   test   %rsi,%rsi
    0.00 :   c860:   cmove  %rax,%rsi
    0.00 :   c864:   jmp    c3c3 <_dl_lookup_symbol_x+0x2f3>
    0.00 :   c869:   mov    0x2d548(%rip),%rdx        # 39db8 <_rtld_global_ro+0x2d8>
    0.00 :   c870:   test   %rdx,%rdx
    0.00 :   c873:   sete   %al
    0.00 :   c876:   cmp    %rdx,0x8(%rsp)
    0.00 :   c87b:   sete   %dl
    0.00 :   c87e:   or     %dl,%al
    0.00 :   c880:   jne    c88d <_dl_lookup_symbol_x+0x7bd>
    0.00 :   c882:   cmpl   $0x3,0x14(%rsp)
    0.00 :   c887:   jle    c280 <_dl_lookup_symbol_x+0x1b0>
    0.00 :   c88d:   mov    0x8(%rsp),%rsi
    0.00 :   c892:   mov    0x0(%rbp),%r9
    0.00 :   c896:   mov    0x8(%r10),%rdx
    0.00 :   c89a:   mov    0x358(%r13),%rax
    0.00 :   c8a1:   mov    0x358(%rsi),%rcx
    0.00 :   c8a8:   sub    %rcx,%r9
    0.00 :   c8ab:   mov    %r10,(%rsp)
    0.00 :   c8af:   mov    $0x10,%r8d
    0.00 :   c8b5:   lea    0x21647(%rip),%rsi        # 2df03 <_sys_errnameidx+0x603>
    0.00 :   c8bc:   lea    0x2425d(%rip),%rdi        # 30b20 <__PRETTY_FUNCTION__.10+0x288>
    0.00 :   c8c3:   push   %rdx
    0.00 :   c8c4:   mov    $0x10,%edx
    0.00 :   c8c9:   push   $0x10
    0.00 :   c8cb:   push   %rax
    0.00 :   c8cc:   xor    %eax,%eax
    0.00 :   c8ce:   push   $0x10
    0.00 :   c8d0:   call   fdc0 <_dl_printf>
    0.00 :   c8d5:   add    $0x20,%rsp
    0.00 :   c8d9:   mov    (%rsp),%r10
    0.00 :   c8dd:   jmp    c602 <_dl_lookup_symbol_x+0x532>
    0.00 :   c8e2:   xor    %eax,%eax
    0.00 :   c8e4:   lea    0x225fd(%rip),%rdi        # 2eee8 <__PRETTY_FUNCTION__.2+0x57a>
    0.00 :   c8eb:   mov    %r10,0x18(%rsp)
    0.00 :   c8f0:   call   fc70 <_dl_debug_printf_c>
    0.00 :   c8f5:   mov    0x2d1e5(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c8fb:   mov    0x18(%rsp),%r10
    0.00 :   c900:   jmp    c504 <_dl_lookup_symbol_x+0x434>
    0.00 :   c905:   movq   $0x0,0x20(%rsp)
    0.00 :   c90e:   mov    0x18(%rsp),%r13
    0.00 :   c913:   jmp    c1b6 <_dl_lookup_symbol_x+0xe6>
    0.00 :   c918:   test   %r9,%r9
    0.00 :   c91b:   je     c956 <_dl_lookup_symbol_x+0x886>
    0.00 :   c91d:   mov    (%r9),%r8d
    0.00 :   c920:   test   %r8d,%r8d
    0.00 :   c923:   je     c959 <_dl_lookup_symbol_x+0x889>
    0.00 :   c925:   lea    -0x1(%r8),%edx
    0.00 :   c929:   lea    0x8(%r9),%rax
    0.00 :   c92d:   lea    0x10(%r9,%rdx,8),%rdx
    0.00 :   c932:   jmp    c93d <_dl_lookup_symbol_x+0x86d>
    0.00 :   c934:   add    $0x8,%rax
    0.00 :   c938:   cmp    %rax,%rdx
    0.00 :   c93b:   je     c959 <_dl_lookup_symbol_x+0x889>
    0.00 :   c93d:   cmp    %r15,(%rax)
    0.00 :   c940:   jne    c934 <_dl_lookup_symbol_x+0x864>
    0.00 :   c942:   jmp    c6b8 <_dl_lookup_symbol_x+0x5e8>
    0.00 :   c947:   lea    0x2259b(%rip),%r8        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   c94e:   mov    %r8,%r9
    0.00 :   c951:   jmp    c3bb <_dl_lookup_symbol_x+0x2eb>
    0.00 :   c956:   xor    %r8d,%r8d
    0.00 :   c959:   mov    0x38(%rsp),%r10d
    0.00 :   c95e:   mov    0x480(%r15),%r13
    0.00 :   c965:   test   %r10d,%r10d
    0.00 :   c968:   jne    cb98 <_dl_lookup_symbol_x+0xac8>
    0.00 :   c96e:   mov    %r8d,0x20(%rsp)
    0.00 :   c973:   lea    0x2e0ce(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   c97a:   call   *0x2d100(%rip)        # 39a80 <___rtld_mutex_lock>
    0.00 :   c980:   mov    0x20(%rsp),%r8d
    0.00 :   c985:   mov    %r15,%r10
    0.00 :   c988:   mov    0x8(%rsp),%rax
    0.00 :   c98d:   lea    0x2d6ac(%rip),%rsi        # 3a040 <_rtld_global>
    0.00 :   c994:   mov    0x30(%rax),%rdx
    0.00 :   c998:   lea    (%rdx,%rdx,4),%rax
    0.00 :   c99c:   shl    $0x5,%rax
    0.00 :   c9a0:   mov    (%rsi,%rax,1),%rax
    0.00 :   c9a4:   cmp    %r10,%rax
    0.00 :   c9a7:   je     caeb <_dl_lookup_symbol_x+0xa1b>
    0.00 :   c9ad:   test   %rax,%rax
    0.00 :   c9b0:   jne    c9c1 <_dl_lookup_symbol_x+0x8f1>
    0.00 :   c9b2:   jmp    c9ca <_dl_lookup_symbol_x+0x8fa>
    0.00 :   c9b4:   nopl   0x0(%rax)
    0.00 :   c9b8:   cmp    %r10,%rax
    0.00 :   c9bb:   je     caeb <_dl_lookup_symbol_x+0xa1b>
    0.00 :   c9c1:   mov    0x18(%rax),%rax
    0.00 :   c9c5:   test   %rax,%rax
    0.00 :   c9c8:   jne    c9b8 <_dl_lookup_symbol_x+0x8e8>
    0.00 :   c9ca:   lea    0x2e077(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   c9d1:   call   *0x2d0a1(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   c9d7:   mov    0x38(%rsp),%edx
    0.00 :   c9db:   test   %edx,%edx
    0.00 :   c9dd:   je     c128 <_dl_lookup_symbol_x+0x58>
    0.00 :   c9e3:   movl   $0x1,%fs:0x1c
    0.00 :   c9ef:   mov    0x8(%rsp),%rax
    0.00 :   c9f4:   mov    0x398(%rax),%rax
    0.00 :   c9fb:   mov    %rax,0x18(%rsp)
    0.00 :   ca00:   jmp    c128 <_dl_lookup_symbol_x+0x58>
    0.00 :   ca05:   test   %rax,%rax
    0.00 :   ca08:   sete   %dl
    0.00 :   ca0b:   cmp    %rax,0x8(%rsp)
    0.00 :   ca10:   sete   %al
    0.00 :   ca13:   or     %al,%dl
    0.00 :   ca15:   jne    ca22 <_dl_lookup_symbol_x+0x952>
    0.00 :   ca17:   cmpl   $0x3,0x14(%rsp)
    0.00 :   ca1c:   jle    c280 <_dl_lookup_symbol_x+0x1b0>
    0.00 :   ca22:   mov    0x8(%rsp),%rax
    0.00 :   ca27:   mov    0x0(%rbp),%r9
    0.00 :   ca2b:   xor    %edx,%edx
    0.00 :   ca2d:   mov    0x358(%rax),%rcx
    0.00 :   ca34:   xor    %eax,%eax
    0.00 :   ca36:   sub    %rcx,%r9
    0.00 :   ca39:   jmp    c8ab <_dl_lookup_symbol_x+0x7db>
    0.00 :   ca3e:   mov    0x8(%rsp),%rax
    0.00 :   ca43:   mov    0x0(%rbp),%r9
    0.00 :   ca47:   xor    %edx,%edx
    0.00 :   ca49:   mov    0x358(%rax),%rcx
    0.00 :   ca50:   xor    %eax,%eax
    0.00 :   ca52:   sub    %rcx,%r9
    0.00 :   ca55:   jmp    c58e <_dl_lookup_symbol_x+0x4be>
    0.00 :   ca5a:   mov    %rdx,%r10
    0.00 :   ca5d:   mov    %rax,%r15
    0.00 :   ca60:   jmp    c728 <_dl_lookup_symbol_x+0x658>
    0.00 :   ca65:   cmp    %r13,0x68(%rsp)
    0.00 :   ca6a:   jne    c7f0 <_dl_lookup_symbol_x+0x720>
    0.00 :   ca70:   mov    0x8(%rsp),%rax
    0.00 :   ca75:   testb  $0x8,0x31e(%rax)
    0.00 :   ca7c:   je     ca87 <_dl_lookup_symbol_x+0x9b7>
    0.00 :   ca7e:   test   %r10,%r10
    0.00 :   ca81:   jne    ceca <_dl_lookup_symbol_x+0xdfa>
    0.00 :   ca87:   mov    %r15,0x2d602(%rip)        # 3a090 <_rtld_global+0x50>
    0.00 :   ca8e:   test   %r10,%r10
    0.00 :   ca91:   jne    c53f <_dl_lookup_symbol_x+0x46f>
    0.00 :   ca97:   mov    0x2d31a(%rip),%rdx        # 39db8 <_rtld_global_ro+0x2d8>
    0.00 :   ca9e:   test   %rdx,%rdx
    0.00 :   caa1:   sete   %al
    0.00 :   caa4:   cmp    %rdx,0x8(%rsp)
    0.00 :   caa9:   sete   %dl
    0.00 :   caac:   or     %dl,%al
    0.00 :   caae:   je     ca17 <_dl_lookup_symbol_x+0x947>
    0.00 :   cab4:   jmp    ca22 <_dl_lookup_symbol_x+0x952>
    0.00 :   cab9:   nopl   0x0(%rax)
    0.00 :   cac0:   mov    0x0(%rbp),%r9
    0.00 :   cac4:   mov    0x8(%r10),%rdx
    0.00 :   cac8:   movl   $0x4,0x14(%rsp)
    0.00 :   cad0:   mov    0x8(%rsp),%rsi
    0.00 :   cad5:   mov    0x358(%r13),%rax
    0.00 :   cadc:   mov    0x358(%rsi),%rcx
    0.00 :   cae3:   sub    %rcx,%r9
    0.00 :   cae6:   jmp    c8ab <_dl_lookup_symbol_x+0x7db>
    0.00 :   caeb:   test   %rax,%rax
    0.00 :   caee:   je     c9ca <_dl_lookup_symbol_x+0x8fa>
    0.00 :   caf4:   cmp    0x480(%r10),%r13
    0.00 :   cafb:   jne    c9ca <_dl_lookup_symbol_x+0x8fa>
    0.00 :   cb01:   cmpb   $0x0,0x31f(%r10)
    0.00 :   cb09:   jne    cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   cb0b:   mov    0x30(%rsp),%r9d
    0.00 :   cb10:   test   %r9d,%r9d
    0.00 :   cb13:   je     cb1f <_dl_lookup_symbol_x+0xa4f>
    0.00 :   cb15:   cmpb   $0x0,0x320(%r10)
    0.00 :   cb1d:   jne    cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   cb1f:   mov    0x8(%rsp),%rax
    0.00 :   cb24:   movzbl 0x31c(%rax),%eax
    0.00 :   cb2b:   mov    %al,0x18(%rsp)
    0.00 :   cb2f:   and    $0x3,%eax
    0.00 :   cb32:   cmp    $0x2,%al
    0.00 :   cb34:   je     cc6b <_dl_lookup_symbol_x+0xb9b>
    0.00 :   cb3a:   testb  $0x4,0x2cf9f(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   cb41:   jne    cee2 <_dl_lookup_symbol_x+0xe12>
    0.00 :   cb47:   cmpl   $0x0,0x30(%rsp)
    0.00 :   cb4c:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
    0.00 :   cb52:   movb   $0x1,0x31f(%r10)
    0.00 :   cb5a:   lea    0x2dee7(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cb61:   call   *0x2cf11(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   cb67:   mov    0x38(%rsp),%eax
    0.00 :   cb6b:   mov    0x58(%rsp),%r13
    0.00 :   cb70:   mov    0x50(%rsp),%r10
    0.00 :   cb75:   test   %eax,%eax
    0.00 :   cb77:   je     c260 <_dl_lookup_symbol_x+0x190>
    0.00 :   cb7d:   movl   $0x1,%fs:0x1c
    0.00 :   cb89:   jmp    c260 <_dl_lookup_symbol_x+0x190>
    0.00 :   cb8e:   mov    $0x1505,%esi
    0.00 :   cb93:   jmp    c772 <_dl_lookup_symbol_x+0x6a2>
    0.00 :   cb98:   xor    %eax,%eax
    0.00 :   cb9a:   xchg   %eax,%fs:0x1c
    0.00 :   cba2:   cmp    $0x2,%eax
    0.00 :   cba5:   jne    cbc8 <_dl_lookup_symbol_x+0xaf8>
    0.00 :   cba7:   xor    %r10d,%r10d
    0.00 :   cbaa:   mov    $0x1,%edx
    0.00 :   cbaf:   mov    $0x81,%esi
    0.00 :   cbb4:   mov    %fs:0x10,%rax
    0.00 :   cbbd:   lea    0x1c(%rax),%rdi
    0.00 :   cbc1:   mov    $0xca,%eax
    0.00 :   cbc6:   syscall
    0.00 :   cbc8:   mov    %r8d,0x3c(%rsp)
    0.00 :   cbcd:   lea    0x2de74(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cbd4:   mov    %r9,0x20(%rsp)
    0.00 :   cbd9:   call   *0x2cea1(%rip)        # 39a80 <___rtld_mutex_lock>
    0.00 :   cbdf:   mov    0x8(%rsp),%rax
    0.00 :   cbe4:   mov    %r15,%rcx
    0.00 :   cbe7:   mov    0x20(%rsp),%r9
    0.00 :   cbec:   mov    0x3d0(%rax),%rdx
    0.00 :   cbf3:   mov    0x3c(%rsp),%r8d
    0.00 :   cbf8:   mov    %rcx,%r10
    0.00 :   cbfb:   test   %rdx,%rdx
    0.00 :   cbfe:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc04:   cmp    %r14,%rdx
    0.00 :   cc07:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc0d:   mov    (%rdx),%rax
    0.00 :   cc10:   test   %rax,%rax
    0.00 :   cc13:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc19:   xor    %esi,%esi
    0.00 :   cc1b:   jmp    cc30 <_dl_lookup_symbol_x+0xb60>
    0.00 :   cc1d:   lea    0x1(%rsi),%eax
    0.00 :   cc20:   mov    %rax,%rsi
    0.00 :   cc23:   mov    (%rdx,%rax,8),%rax
    0.00 :   cc27:   test   %rax,%rax
    0.00 :   cc2a:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc30:   cmp    %rax,%rcx
    0.00 :   cc33:   jne    cc1d <_dl_lookup_symbol_x+0xb4d>
    0.00 :   cc35:   cmp    0x480(%rax),%r13
    0.00 :   cc3c:   jne    d04c <_dl_lookup_symbol_x+0xf7c>
    0.00 :   cc42:   lea    0x2ddff(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cc49:   call   *0x2ce29(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   cc4f:   mov    0x58(%rsp),%r13
    0.00 :   cc54:   mov    0x50(%rsp),%r10
    0.00 :   cc59:   jmp    cb7d <_dl_lookup_symbol_x+0xaad>
    0.00 :   cc5e:   movb   $0x1,0x320(%r10)
    0.00 :   cc66:   jmp    cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   cc6b:   mov    0x8(%rsp),%rax
    0.00 :   cc70:   mov    0x3e0(%rax),%eax
    0.00 :   cc76:   cmp    %r8d,%eax
    0.00 :   cc79:   jbe    cd55 <_dl_lookup_symbol_x+0xc85>
    0.00 :   cc7f:   mov    0x8(%rsp),%rsi
    0.00 :   cc84:   mov    %r8d,%edx
    0.00 :   cc87:   mov    0x3d8(%rsi),%rax
    0.00 :   cc8e:   mov    %r10,0x8(%rax,%rdx,8)
    0.00 :   cc93:   mov    0x3d8(%rsi),%rax
    0.00 :   cc9a:   lea    0x1(%r8),%edx
    0.00 :   cc9e:   mov    %edx,(%rax)
    0.00 :   cca0:   testb  $0x40,0x2ce39(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   cca7:   je     cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   ccad:   mov    0x8(%rsp),%rax
    0.00 :   ccb2:   mov    0x8(%rax),%rcx
    0.00 :   ccb6:   mov    0x30(%rax),%r8
    0.00 :   ccba:   cmpb   $0x0,(%rcx)
    0.00 :   ccbd:   jne    ccd2 <_dl_lookup_symbol_x+0xc02>
    0.00 :   ccbf:   mov    0x2cdfa(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   ccc6:   mov    (%rax),%rcx
    0.00 :   ccc9:   test   %rcx,%rcx
    0.00 :   cccc:   je     d05e <_dl_lookup_symbol_x+0xf8e>
    0.00 :   ccd2:   mov    0x8(%r10),%rsi
    0.00 :   ccd6:   mov    0x30(%r10),%rdx
    0.00 :   ccda:   cmpb   $0x0,(%rsi)
    0.00 :   ccdd:   jne    ccf2 <_dl_lookup_symbol_x+0xc22>
    0.00 :   ccdf:   mov    0x2cdda(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   cce6:   mov    (%rax),%rsi
    0.00 :   cce9:   test   %rsi,%rsi
    0.00 :   ccec:   je     d040 <_dl_lookup_symbol_x+0xf70>
    0.00 :   ccf2:   lea    0x23daf(%rip),%rdi        # 30aa8 <__PRETTY_FUNCTION__.10+0x210>
    0.00 :   ccf9:   xor    %eax,%eax
    0.00 :   ccfb:   call   fbc0 <_dl_debug_printf>
    0.00 :   cd00:   jmp    cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   cd05:   mov    0x8(%rsp),%rax
    0.00 :   cd0a:   mov    0x3d8(%rax),%rax
    0.00 :   cd11:   test   %rax,%rax
    0.00 :   cd14:   je     c988 <_dl_lookup_symbol_x+0x8b8>
    0.00 :   cd1a:   mov    (%rax),%edx
    0.00 :   cd1c:   cmp    %rax,%r9
    0.00 :   cd1f:   je     d06a <_dl_lookup_symbol_x+0xf9a>
    0.00 :   cd25:   test   %edx,%edx
    0.00 :   cd27:   je     d09e <_dl_lookup_symbol_x+0xfce>
    0.00 :   cd2d:   lea    -0x1(%rdx),%edi
    0.00 :   cd30:   lea    0x8(%rax),%rsi
    0.00 :   cd34:   lea    0x10(%rax,%rdi,8),%rdi
    0.00 :   cd39:   jmp    cd48 <_dl_lookup_symbol_x+0xc78>
    0.00 :   cd3b:   add    $0x8,%rsi
    0.00 :   cd3f:   cmp    %rsi,%rdi
    0.00 :   cd42:   je     d096 <_dl_lookup_symbol_x+0xfc6>
    0.00 :   cd48:   mov    (%rsi),%rax
    0.00 :   cd4b:   cmp    %rax,%rcx
    0.00 :   cd4e:   jne    cd3b <_dl_lookup_symbol_x+0xc6b>
    0.00 :   cd50:   jmp    cc35 <_dl_lookup_symbol_x+0xb65>
    0.00 :   cd55:   movl   $0xa,0x18(%rsp)
    0.00 :   cd5d:   test   %eax,%eax
    0.00 :   cd5f:   je     cd67 <_dl_lookup_symbol_x+0xc97>
    0.00 :   cd61:   add    %eax,%eax
    0.00 :   cd63:   mov    %eax,0x18(%rsp)
    0.00 :   cd67:   mov    0x18(%rsp),%eax
    0.00 :   cd6b:   mov    %r8d,0x28(%rsp)
    0.00 :   cd70:   mov    %r10,0x20(%rsp)
    0.00 :   cd75:   lea    0x8(,%rax,8),%rdi
    0.00 :   cd7d:   call   *0x2ccdd(%rip)        # 39a60 <__rtld_malloc>
    0.00 :   cd83:   mov    0x20(%rsp),%r10
    0.00 :   cd88:   mov    0x28(%rsp),%r8d
    0.00 :   cd8d:   test   %rax,%rax
    0.00 :   cd90:   mov    %rax,%r13
    0.00 :   cd93:   je     ce75 <_dl_lookup_symbol_x+0xda5>
    0.00 :   cd99:   mov    %r8d,%r14d
    0.00 :   cd9c:   test   %r8d,%r8d
    0.00 :   cd9f:   jne    ce36 <_dl_lookup_symbol_x+0xd66>
    0.00 :   cda5:   lea    0x1(%r8),%eax
    0.00 :   cda9:   mov    %r10,0x8(%r13,%r14,8)
    0.00 :   cdae:   mov    %eax,0x0(%r13)
    0.00 :   cdb2:   mov    0x8(%rsp),%rax
    0.00 :   cdb7:   mov    0x18(%rsp),%esi
    0.00 :   cdbb:   mov    0x3d8(%rax),%rdi
    0.00 :   cdc2:   mov    %esi,0x3e0(%rax)
    0.00 :   cdc8:   mov    %r13,0x3d8(%rax)
    0.00 :   cdcf:   test   %rdi,%rdi
    0.00 :   cdd2:   je     cca0 <_dl_lookup_symbol_x+0xbd0>
    0.00 :   cdd8:   mov    %r10,0x18(%rsp)
    0.00 :   cddd:   call   13430 <_dl_scope_free>
    0.00 :   cde2:   mov    0x18(%rsp),%r10
    0.00 :   cde7:   jmp    cca0 <_dl_lookup_symbol_x+0xbd0>
    0.00 :   cdec:   lea    0x22bdd(%rip),%rcx        # 2f9d0 <__PRETTY_FUNCTION__.3>
    0.00 :   cdf3:   mov    $0x352,%edx
    0.00 :   cdf8:   lea    0x2107e(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   cdff:   lea    0x23bea(%rip),%rdi        # 309f0 <__PRETTY_FUNCTION__.10+0x158>
    0.00 :   ce06:   call   1e460 <__GI___assert_fail>
    0.00 :   ce0b:   mov    0x0(%rbp),%r9
    0.00 :   ce0f:   mov    0x8(%r10),%rdx
    0.00 :   ce13:   movl   $0x4,0x14(%rsp)
    0.00 :   ce1b:   mov    0x8(%rsp),%rsi
    0.00 :   ce20:   mov    0x358(%r13),%rax
    0.00 :   ce27:   mov    0x358(%rsi),%rcx
    0.00 :   ce2e:   sub    %rcx,%r9
    0.00 :   ce31:   jmp    c58e <_dl_lookup_symbol_x+0x4be>
    0.00 :   ce36:   lea    0x8(%rax),%rdi
    0.00 :   ce3a:   mov    0x8(%rsp),%rax
    0.00 :   ce3f:   mov    %r8d,0x30(%rsp)
    0.00 :   ce44:   lea    0x0(,%r14,8),%rdx
    0.00 :   ce4c:   mov    %r10,0x28(%rsp)
    0.00 :   ce51:   mov    0x3d8(%rax),%rax
    0.00 :   ce58:   lea    0x8(%rax),%rsi
    0.00 :   ce5c:   mov    %rax,0x20(%rsp)
    0.00 :   ce61:   call   2afb0 <memcpy>
    0.00 :   ce66:   mov    0x30(%rsp),%r8d
    0.00 :   ce6b:   mov    0x28(%rsp),%r10
    0.00 :   ce70:   jmp    cda5 <_dl_lookup_symbol_x+0xcd5>
    0.00 :   ce75:   testb  $0x4,0x2cc64(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   ce7c:   je     cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   ce82:   cmpb   $0x0,0x31f(%r10)
    0.00 :   ce8a:   jne    cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   ce90:   cmpl   $0x0,0x30(%rsp)
    0.00 :   ce95:   je     cea5 <_dl_lookup_symbol_x+0xdd5>
    0.00 :   ce97:   cmpb   $0x0,0x320(%r10)
    0.00 :   ce9f:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
    0.00 :   cea5:   mov    0x30(%r10),%rdx
    0.00 :   cea9:   mov    0x8(%r10),%rsi
    0.00 :   cead:   xor    %eax,%eax
    0.00 :   ceaf:   mov    %r10,0x18(%rsp)
    0.00 :   ceb4:   lea    0x23c8d(%rip),%rdi        # 30b48 <__PRETTY_FUNCTION__.10+0x2b0>
    0.00 :   cebb:   call   fbc0 <_dl_debug_printf>
    0.00 :   cec0:   mov    0x18(%rsp),%r10
    0.00 :   cec5:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   ceca:   movzbl 0x4(%r10),%eax
    0.00 :   cecf:   shr    $0x4,%al
    0.00 :   ced2:   cmp    $0xa,%al
    0.00 :   ced4:   je     cf31 <_dl_lookup_symbol_x+0xe61>
    0.00 :   ced6:   mov    %r15,0x2d1b3(%rip)        # 3a090 <_rtld_global+0x50>
    0.00 :   cedd:   jmp    c53f <_dl_lookup_symbol_x+0x46f>
    0.00 :   cee2:   cmpl   $0x0,0x30(%rsp)
    0.00 :   cee7:   je     cef7 <_dl_lookup_symbol_x+0xe27>
    0.00 :   cee9:   cmpb   $0x0,0x320(%r10)
    0.00 :   cef1:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
    0.00 :   cef7:   mov    0x8(%rsp),%rax
    0.00 :   cefc:   mov    0x30(%r10),%r11
    0.00 :   cf00:   mov    0x8(%r10),%rsi
    0.00 :   cf04:   mov    0x8(%rax),%rcx
    0.00 :   cf08:   cmpb   $0x0,(%rcx)
    0.00 :   cf0b:   jne    cff4 <_dl_lookup_symbol_x+0xf24>
    0.00 :   cf11:   mov    %r11,%rdx
    0.00 :   cf14:   lea    0x23b0d(%rip),%rdi        # 30a28 <__PRETTY_FUNCTION__.10+0x190>
    0.00 :   cf1b:   xor    %eax,%eax
    0.00 :   cf1d:   mov    %r10,0x18(%rsp)
    0.00 :   cf22:   call   fbc0 <_dl_debug_printf>
    0.00 :   cf27:   mov    0x18(%rsp),%r10
    0.00 :   cf2c:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   cf31:   mov    0x8(%rsp),%rax
    0.00 :   cf36:   pxor   %xmm0,%xmm0
    0.00 :   cf3a:   xor    %r14d,%r14d
    0.00 :   cf3d:   movaps %xmm0,0x70(%rsp)
    0.00 :   cf42:   mov    0x3a0(%rax),%rbx
    0.00 :   cf49:   mov    0x8(%rbx),%eax
    0.00 :   cf4c:   jmp    cf57 <_dl_lookup_symbol_x+0xe87>
    0.00 :   cf4e:   mov    (%rbx),%rdi
    0.00 :   cf51:   cmp    %r13,(%rdi,%rcx,8)
    0.00 :   cf55:   je     cf63 <_dl_lookup_symbol_x+0xe93>
    0.00 :   cf57:   mov    %r14,%rcx
    0.00 :   cf5a:   add    $0x1,%r14
    0.00 :   cf5e:   cmp    %rcx,%rax
    0.00 :   cf61:   ja     cf4e <_dl_lookup_symbol_x+0xe7e>
    0.00 :   cf63:   mov    %r15,0x18(%rsp)
    0.00 :   cf68:   lea    0x70(%rsp),%r8
    0.00 :   cf6d:   mov    %rdx,%r15
    0.00 :   cf70:   mov    %r13,0x28(%rsp)
    0.00 :   cf75:   mov    %rbp,%r13
    0.00 :   cf78:   mov    %rsi,%rbp
    0.00 :   cf7b:   mov    %r10,0x20(%rsp)
    0.00 :   cf80:   jmp    cfd8 <_dl_lookup_symbol_x+0xf08>
    0.00 :   cf82:   mov    (%rbx),%rdx
    0.00 :   cf85:   mov    (%rdx,%r14,8),%rdx
    0.00 :   cf89:   cmpq   $0x0,0xc0(%rdx)
    0.00 :   cf91:   je     cfd4 <_dl_lookup_symbol_x+0xf04>
    0.00 :   cf93:   push   0x8(%rsp)
    0.00 :   cf97:   mov    0x1c(%rsp),%eax
    0.00 :   cf9b:   mov    %rbp,%rsi
    0.00 :   cf9e:   mov    %r12,%rdi
    0.00 :   cfa1:   mov    0x0(%r13),%rcx
    0.00 :   cfa5:   lea    0x2d0(%rdx),%r9
    0.00 :   cfac:   mov    %r15,%rdx
    0.00 :   cfaf:   push   %rax
    0.00 :   cfb0:   push   $0x0
    0.00 :   cfb2:   push   $0x0
    0.00 :   cfb4:   push   0x20(%rsp)
    0.00 :   cfb8:   push   $0x0
    0.00 :   cfba:   mov    %r8,0x60(%rsp)
    0.00 :   cfbf:   call   b3f0 <do_lookup_x>
    0.00 :   cfc4:   add    $0x30,%rsp
    0.00 :   cfc8:   test   %eax,%eax
    0.00 :   cfca:   jg     d017 <_dl_lookup_symbol_x+0xf47>
    0.00 :   cfcc:   mov    0x8(%rbx),%eax
    0.00 :   cfcf:   mov    0x30(%rsp),%r8
    0.00 :   cfd4:   add    $0x1,%r14
    0.00 :   cfd8:   cmp    %rax,%r14
    0.00 :   cfdb:   jb     cf82 <_dl_lookup_symbol_x+0xeb2>
    0.00 :   cfdd:   mov    %r13,%rbp
    0.00 :   cfe0:   mov    0x18(%rsp),%r15
    0.00 :   cfe5:   mov    0x20(%rsp),%r10
    0.00 :   cfea:   mov    0x28(%rsp),%r13
    0.00 :   cfef:   jmp    ced6 <_dl_lookup_symbol_x+0xe06>
    0.00 :   cff4:   mov    %rdx,%r8
    0.00 :   cff7:   xor    %eax,%eax
    0.00 :   cff9:   mov    %r11,%rdx
    0.00 :   cffc:   mov    %r10,0x18(%rsp)
    0.00 :   d001:   lea    0x23a60(%rip),%rdi        # 30a68 <__PRETTY_FUNCTION__.10+0x1d0>
    0.00 :   d008:   call   fbc0 <_dl_debug_printf>
    0.00 :   d00d:   mov    0x18(%rsp),%r10
    0.00 :   d012:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   d017:   mov    0x18(%rsp),%r15
    0.00 :   d01c:   movdqa 0x70(%rsp),%xmm1
    0.00 :   d022:   mov    %r13,%rbp
    0.00 :   d025:   mov    0x20(%rsp),%r10
    0.00 :   d02a:   mov    0x28(%rsp),%r13
    0.00 :   d02f:   mov    %r15,0x2d05a(%rip)        # 3a090 <_rtld_global+0x50>
    0.00 :   d036:   movaps %xmm1,0x60(%rsp)
    0.00 :   d03b:   jmp    c800 <_dl_lookup_symbol_x+0x730>
    0.00 :   d040:   lea    0x20adc(%rip),%rsi        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   d047:   jmp    ccf2 <_dl_lookup_symbol_x+0xc22>
    0.00 :   d04c:   lea    0x2d9f5(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   d053:   call   *0x2ca1f(%rip)        # 39a78 <___rtld_mutex_unlock>
    0.00 :   d059:   jmp    c9e3 <_dl_lookup_symbol_x+0x913>
    0.00 :   d05e:   lea    0x20abe(%rip),%rcx        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   d065:   jmp    ccd2 <_dl_lookup_symbol_x+0xc02>
    0.00 :   d06a:   cmp    %edx,%r8d
    0.00 :   d06d:   jae    c988 <_dl_lookup_symbol_x+0x8b8>
    0.00 :   d073:   mov    %r8d,%eax
    0.00 :   d076:   xor    %esi,%esi
    0.00 :   d078:   lea    (%r9,%rax,8),%rdi
    0.00 :   d07c:   mov    0x8(%rdi,%rsi,8),%rax
    0.00 :   d081:   cmp    %rax,%rcx
    0.00 :   d084:   je     cc35 <_dl_lookup_symbol_x+0xb65>
    0.00 :   d08a:   add    $0x1,%rsi
    0.00 :   d08e:   lea    (%r8,%rsi,1),%eax
    0.00 :   d092:   cmp    %edx,%eax
    0.00 :   d094:   jb     d07c <_dl_lookup_symbol_x+0xfac>
    0.00 :   d096:   mov    %edx,%r8d
    0.00 :   d099:   jmp    c988 <_dl_lookup_symbol_x+0x8b8>
    0.00 :   d09e:   xor    %r8d,%r8d
    0.00 :   d0a1:   jmp    c988 <_dl_lookup_symbol_x+0x8b8>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a09f0 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
  100.00 :   a09f0:  endbr64
    0.00 :   a09f4:  bnd jmp *0x18699d(%rip)        # 227398 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@@GLIBCXX_3.4.9+0xea9c8>
    0.00 :   a09fb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008a0c <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)>:
    0.00 :   8a0c:   endbr64
    0.00 :   8a10:   push   %rbp
    0.00 :   8a11:   mov    %rsp,%rbp
    0.00 :   8a14:   sub    $0x40,%rsp
    0.00 :   8a18:   mov    %rdi,-0x38(%rbp)
    0.00 :   8a1c:   mov    %rsi,-0x40(%rbp)
    0.00 :   8a20:   mov    -0x40(%rbp),%rdx
    0.00 :   8a24:   mov    -0x38(%rbp),%rax
    0.00 :   8a28:   mov    %rdx,%rsi
    0.00 :   8a2b:   mov    %rax,%rdi
    0.00 :   8a2e:   call   9a4c <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_allocate_buckets(unsigned long)>
    0.00 :   8a33:   mov    %rax,-0x18(%rbp)
    0.00 :   8a37:   mov    -0x38(%rbp),%rax
    0.00 :   8a3b:   mov    %rax,%rdi
    0.00 :   8a3e:   call   64b6 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const>
    0.00 :   8a43:   mov    %rax,-0x28(%rbp)
    0.00 :   8a47:   mov    -0x38(%rbp),%rax
    0.00 :   8a4b:   movq   $0x0,0x10(%rax)
    0.00 :   8a53:   movq   $0x0,-0x20(%rbp)
    0.00 :   8a5b:   jmp    8b58 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x14c>
    0.00 :   8a60:   mov    -0x28(%rbp),%rax
    0.00 :   8a64:   mov    %rax,%rdi
    0.00 :   8a67:   call   6878 <std::__detail::_Hash_node<std::pair<int const, float>, false>::_M_next() const>
    0.00 :   8a6c:   mov    %rax,-0x10(%rbp)
    0.00 :   8a70:   mov    -0x28(%rbp),%rax
    0.00 :   8a74:   lea    0x8(%rax),%rcx
    0.00 :   8a78:   mov    -0x40(%rbp),%rdx
    0.00 :   8a7c:   mov    -0x38(%rbp),%rax
    0.00 :   8a80:   mov    %rcx,%rsi
    0.00 :   8a83:   mov    %rax,%rdi
    0.00 :   8a86:   call   9820 <std::__detail::_Hash_code_base<int, std::pair<int const, float>, std::__detail::_Select1st, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node_value<std::pair<int const, float>, false> const&, unsigned long) const>
    0.00 :   8a8b:   mov    %rax,-0x8(%rbp)
    0.00 :   8a8f:   mov    -0x8(%rbp),%rax
   93.80 :   8a93:   lea    0x0(,%rax,8),%rdx
    6.20 :   8a9b:   mov    -0x18(%rbp),%rax
    0.00 :   8a9f:   add    %rdx,%rax
    0.00 :   8aa2:   mov    (%rax),%rax
    0.00 :   8aa5:   test   %rax,%rax
    0.00 :   8aa8:   jne    8b13 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x107>
    0.00 :   8aaa:   mov    -0x38(%rbp),%rax
    0.00 :   8aae:   mov    0x10(%rax),%rdx
    0.00 :   8ab2:   mov    -0x28(%rbp),%rax
    0.00 :   8ab6:   mov    %rdx,(%rax)
    0.00 :   8ab9:   mov    -0x38(%rbp),%rax
    0.00 :   8abd:   mov    -0x28(%rbp),%rdx
    0.00 :   8ac1:   mov    %rdx,0x10(%rax)
    0.00 :   8ac5:   mov    -0x8(%rbp),%rax
    0.00 :   8ac9:   lea    0x0(,%rax,8),%rdx
    0.00 :   8ad1:   mov    -0x18(%rbp),%rax
    0.00 :   8ad5:   add    %rdx,%rax
    0.00 :   8ad8:   mov    -0x38(%rbp),%rdx
    0.00 :   8adc:   add    $0x10,%rdx
    0.00 :   8ae0:   mov    %rdx,(%rax)
    0.00 :   8ae3:   mov    -0x28(%rbp),%rax
    0.00 :   8ae7:   mov    (%rax),%rax
    0.00 :   8aea:   test   %rax,%rax
    0.00 :   8aed:   je     8b09 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0xfd>
    0.00 :   8aef:   mov    -0x20(%rbp),%rax
    0.00 :   8af3:   lea    0x0(,%rax,8),%rdx
    0.00 :   8afb:   mov    -0x18(%rbp),%rax
    0.00 :   8aff:   add    %rax,%rdx
    0.00 :   8b02:   mov    -0x28(%rbp),%rax
    0.00 :   8b06:   mov    %rax,(%rdx)
    0.00 :   8b09:   mov    -0x8(%rbp),%rax
    0.00 :   8b0d:   mov    %rax,-0x20(%rbp)
    0.00 :   8b11:   jmp    8b50 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x144>
    0.00 :   8b13:   mov    -0x8(%rbp),%rax
    0.00 :   8b17:   lea    0x0(,%rax,8),%rdx
    0.00 :   8b1f:   mov    -0x18(%rbp),%rax
    0.00 :   8b23:   add    %rdx,%rax
    0.00 :   8b26:   mov    (%rax),%rax
    0.00 :   8b29:   mov    (%rax),%rdx
    0.00 :   8b2c:   mov    -0x28(%rbp),%rax
    0.00 :   8b30:   mov    %rdx,(%rax)
    0.00 :   8b33:   mov    -0x8(%rbp),%rax
    0.00 :   8b37:   lea    0x0(,%rax,8),%rdx
    0.00 :   8b3f:   mov    -0x18(%rbp),%rax
    0.00 :   8b43:   add    %rdx,%rax
    0.00 :   8b46:   mov    (%rax),%rax
    0.00 :   8b49:   mov    -0x28(%rbp),%rdx
    0.00 :   8b4d:   mov    %rdx,(%rax)
    0.00 :   8b50:   mov    -0x10(%rbp),%rax
    0.00 :   8b54:   mov    %rax,-0x28(%rbp)
    0.00 :   8b58:   cmpq   $0x0,-0x28(%rbp)
    0.00 :   8b5d:   jne    8a60 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)+0x54>
    0.00 :   8b63:   mov    -0x38(%rbp),%rax
    0.00 :   8b67:   mov    %rax,%rdi
    0.00 :   8b6a:   call   5282 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()>
    0.00 :   8b6f:   mov    -0x38(%rbp),%rax
    0.00 :   8b73:   mov    -0x40(%rbp),%rdx
    0.00 :   8b77:   mov    %rdx,0x8(%rax)
    0.00 :   8b7b:   mov    -0x38(%rbp),%rax
    0.00 :   8b7f:   mov    -0x18(%rbp),%rdx
    0.00 :   8b83:   mov    %rdx,(%rax)
    0.00 :   8b86:   nop
    0.00 :   8b87:   leave
    0.00 :   8b88:   ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000014410 <_dl_allocate_tls_storage>:
    0.00 :   14410:  endbr64
  100.00 :   14414:  push   %r12
    0.00 :   14416:  mov    0x25973(%rip),%r12        # 39d90 <_rtld_global_ro+0x2b0>
    0.00 :   1441d:  push   %rbp
    0.00 :   1441e:  push   %rbx
    0.00 :   1441f:  mov    0x25962(%rip),%rbx        # 39d88 <_rtld_global_ro+0x2a8>
    0.00 :   14426:  lea    0x8(%rbx,%r12,1),%rdi
    0.00 :   1442b:  call   *0x2562f(%rip)        # 39a60 <__rtld_malloc>
    0.00 :   14431:  test   %rax,%rax
    0.00 :   14434:  je     144d8 <_dl_allocate_tls_storage+0xc8>
    0.00 :   1443a:  mov    %rax,%rbp
    0.00 :   1443d:  xor    %edx,%edx
    0.00 :   1443f:  lea    -0x1(%rax,%r12,1),%rax
    0.00 :   14444:  mov    $0x10,%esi
    0.00 :   14449:  div    %r12
    0.00 :   1444c:  imul   %r12,%rax
    0.00 :   14450:  lea    -0x9c0(%rbx,%rax,1),%r12
    0.00 :   14458:  xor    %eax,%eax
    0.00 :   1445a:  lea    0x8(%r12),%rdi
    0.00 :   1445f:  mov    %r12,%rcx
    0.00 :   14462:  movq   $0x0,(%r12)
    0.00 :   1446a:  movq   $0x0,0x9b8(%r12)
    0.00 :   14476:  and    $0xfffffffffffffff8,%rdi
    0.00 :   1447a:  sub    %rdi,%rcx
    0.00 :   1447d:  add    $0x9c0,%ecx
    0.00 :   14483:  shr    $0x3,%ecx
    0.00 :   14486:  rep stos %rax,%es:(%rdi)
    0.00 :   14489:  mov    %rbp,0x9c0(%r12)
    0.00 :   14491:  mov    0x26bf0(%rip),%rdi        # 3b088 <_rtld_global+0x1048>
    0.00 :   14498:  lea    0xe(%rdi),%rbx
    0.00 :   1449c:  add    $0x10,%rdi
    0.00 :   144a0:  call   *0x255ca(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   144a6:  test   %rax,%rax
    0.00 :   144a9:  je     144c0 <_dl_allocate_tls_storage+0xb0>
    0.00 :   144ab:  mov    %rbx,(%rax)
    0.00 :   144ae:  add    $0x10,%rax
    0.00 :   144b2:  mov    %rax,0x8(%r12)
    0.00 :   144b7:  mov    %r12,%rax
    0.00 :   144ba:  pop    %rbx
    0.00 :   144bb:  pop    %rbp
    0.00 :   144bc:  pop    %r12
    0.00 :   144be:  ret
    0.00 :   144bf:  nop
    0.00 :   144c0:  xor    %r12d,%r12d
    0.00 :   144c3:  mov    %rbp,%rdi
    0.00 :   144c6:  call   *0x2559c(%rip)        # 39a68 <__rtld_free>
    0.00 :   144cc:  mov    %r12,%rax
    0.00 :   144cf:  pop    %rbx
    0.00 :   144d0:  pop    %rbp
    0.00 :   144d1:  pop    %r12
    0.00 :   144d3:  ret
    0.00 :   144d4:  nopl   0x0(%rax)
    0.00 :   144d8:  xor    %r12d,%r12d
    0.00 :   144db:  pop    %rbx
    0.00 :   144dc:  pop    %rbp
    0.00 :   144dd:  mov    %r12,%rax
    0.00 :   144e0:  pop    %r12
    0.00 :   144e2:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a1ee0 <arena_get2.part.0>:
    0.00 :   a1ee0:  mov    0x17f5e9(%rip),%rax        # 2214d0 <narenas_limit.2>
  100.00 :   a1ee7:  mov    0x17845a(%rip),%rdx        # 21a348 <narenas>
    0.00 :   a1eee:  push   %r14
    0.00 :   a1ef0:  push   %r13
    0.00 :   a1ef2:  push   %r12
    0.00 :   a1ef4:  push   %rbp
    0.00 :   a1ef5:  mov    %rdi,%rbp
    0.00 :   a1ef8:  push   %rbx
    0.00 :   a1ef9:  mov    %rsi,%rbx
    0.00 :   a1efc:  test   %rax,%rax
    0.00 :   a1eff:  jne    a1f18 <arena_get2.part.0+0x38>
    0.00 :   a1f01:  mov    0x178478(%rip),%rax        # 21a380 <mp_+0x20>
    0.00 :   a1f08:  test   %rax,%rax
    0.00 :   a1f0b:  je     a2010 <arena_get2.part.0+0x130>
    0.00 :   a1f11:  mov    %rax,0x17f5b8(%rip)        # 2214d0 <narenas_limit.2>
    0.00 :   a1f18:  sub    $0x1,%rax
    0.00 :   a1f1c:  cmp    %rdx,%rax
    0.00 :   a1f1f:  jae    a20a0 <arena_get2.part.0+0x1c0>
    0.00 :   a1f25:  mov    0x17f59c(%rip),%r12        # 2214c8 <next_to_use.5>
    0.00 :   a1f2c:  test   %r12,%r12
    0.00 :   a1f2f:  je     a2048 <arena_get2.part.0+0x168>
    0.00 :   a1f35:  xor    %ecx,%ecx
    0.00 :   a1f37:  mov    $0x1,%edx
    0.00 :   a1f3c:  mov    %ecx,%eax
    0.00 :   a1f3e:  lock cmpxchg %edx,(%r12)
    0.00 :   a1f44:  jne    a205b <arena_get2.part.0+0x17b>
    0.00 :   a1f4a:  mov    0x177e4f(%rip),%r13        # 219da0 <_DYNAMIC+0x1e0>
    0.00 :   a1f51:  xor    %eax,%eax
    0.00 :   a1f53:  mov    $0x1,%edx
    0.00 :   a1f58:  mov    %fs:0x0(%r13),%rbp
    0.00 :   a1f5d:  lock cmpxchg %edx,0x17f593(%rip)        # 2214f8 <free_list_lock>
    0.00 :   a1f65:  jne    a20d3 <arena_get2.part.0+0x1f3>
    0.00 :   a1f6b:  test   %rbp,%rbp
    0.00 :   a1f6e:  je     a1f8b <arena_get2.part.0+0xab>
    0.00 :   a1f70:  mov    0x880(%rbp),%rax
    0.00 :   a1f77:  test   %rax,%rax
    0.00 :   a1f7a:  je     a2351 <arena_get2.part.0+0x471>
    0.00 :   a1f80:  sub    $0x1,%rax
    0.00 :   a1f84:  mov    %rax,0x880(%rbp)
    0.00 :   a1f8b:  mov    0x17f55e(%rip),%rax        # 2214f0 <free_list>
    0.00 :   a1f92:  lea    0x17f557(%rip),%rcx        # 2214f0 <free_list>
    0.00 :   a1f99:  test   %rax,%rax
    0.00 :   a1f9c:  jne    a1faf <arena_get2.part.0+0xcf>
    0.00 :   a1f9e:  jmp    a1fcc <arena_get2.part.0+0xec>
    0.00 :   a1fa0:  lea    0x878(%rax),%rcx
    0.00 :   a1fa7:  test   %rdx,%rdx
    0.00 :   a1faa:  je     a1fcc <arena_get2.part.0+0xec>
    0.00 :   a1fac:  mov    %rdx,%rax
    0.00 :   a1faf:  cmpq   $0x0,0x880(%rax)
    0.00 :   a1fb7:  jne    a2111 <arena_get2.part.0+0x231>
    0.00 :   a1fbd:  mov    0x878(%rax),%rdx
    0.00 :   a1fc4:  cmp    %rax,%r12
    0.00 :   a1fc7:  jne    a1fa0 <arena_get2.part.0+0xc0>
    0.00 :   a1fc9:  mov    %rdx,(%rcx)
    0.00 :   a1fcc:  addq   $0x1,0x880(%r12)
    0.00 :   a1fd5:  xor    %eax,%eax
    0.00 :   a1fd7:  xchg   %eax,0x17f51b(%rip)        # 2214f8 <free_list_lock>
    0.00 :   a1fdd:  cmp    $0x1,%eax
    0.00 :   a1fe0:  jg     a20e4 <arena_get2.part.0+0x204>
    0.00 :   a1fe6:  nop
    0.00 :   a1fe7:  mov    %r12,%fs:0x0(%r13)
    0.00 :   a1fec:  mov    0x870(%r12),%rax
    0.00 :   a1ff4:  mov    %rax,0x17f4cd(%rip)        # 2214c8 <next_to_use.5>
    0.00 :   a1ffb:  pop    %rbx
    0.00 :   a1ffc:  mov    %r12,%rax
    0.00 :   a1fff:  pop    %rbp
    0.00 :   a2000:  pop    %r12
    0.00 :   a2002:  pop    %r13
    0.00 :   a2004:  pop    %r14
    0.00 :   a2006:  ret
    0.00 :   a2007:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2010:  cmp    %rdx,0x178361(%rip)        # 21a378 <mp_+0x18>
    0.00 :   a2017:  jae    a1f18 <arena_get2.part.0+0x38>
    0.00 :   a201d:  call   121a30 <__get_nprocs_sched>
    0.00 :   a2022:  test   %eax,%eax
    0.00 :   a2024:  jle    a20f5 <arena_get2.part.0+0x215>
    0.00 :   a202a:  shl    $0x3,%eax
    0.00 :   a202d:  mov    0x178314(%rip),%rdx        # 21a348 <narenas>
    0.00 :   a2034:  cltq
    0.00 :   a2036:  mov    %rax,0x17f493(%rip)        # 2214d0 <narenas_limit.2>
    0.00 :   a203d:  jmp    a1f18 <arena_get2.part.0+0x38>
    0.00 :   a2042:  nopw   0x0(%rax,%rax,1)
    0.00 :   a2048:  lea    0x178c31(%rip),%r12        # 21ac80 <main_arena>
    0.00 :   a204f:  mov    %r12,0x17f472(%rip)        # 2214c8 <next_to_use.5>
    0.00 :   a2056:  jmp    a1f35 <arena_get2.part.0+0x55>
    0.00 :   a205b:  mov    0x870(%r12),%r12
    0.00 :   a2063:  cmp    0x17f45e(%rip),%r12        # 2214c8 <next_to_use.5>
    0.00 :   a206a:  jne    a1f3c <arena_get2.part.0+0x5c>
    0.00 :   a2070:  cmp    %r12,%rbx
    0.00 :   a2073:  je     a2323 <arena_get2.part.0+0x443>
    0.00 :   a2079:  nop
    0.00 :   a207a:  xor    %eax,%eax
    0.00 :   a207c:  mov    $0x1,%edx
    0.00 :   a2081:  lock cmpxchg %edx,(%r12)
    0.00 :   a2087:  je     a1f4a <arena_get2.part.0+0x6a>
    0.00 :   a208d:  mov    %r12,%rdi
    0.00 :   a2090:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2095:  jmp    a1f4a <arena_get2.part.0+0x6a>
    0.00 :   a209a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a20a0:  lea    0x1(%rdx),%rcx
    0.00 :   a20a4:  mov    %rdx,%rax
    0.00 :   a20a7:  cmpl   $0x0,%fs:0x18
    0.00 :   a20b0:  je     a20b3 <arena_get2.part.0+0x1d3>
    0.00 :   a20b2:  lock cmpxchg %rcx,0x17828d(%rip)        # 21a348 <narenas>
    0.00 :   a20bb:  cmp    %rdx,%rax
    0.00 :   a20be:  je     a2130 <arena_get2.part.0+0x250>
    0.00 :   a20c0:  mov    0x178281(%rip),%rdx        # 21a348 <narenas>
    0.00 :   a20c7:  mov    0x17f402(%rip),%rax        # 2214d0 <narenas_limit.2>
    0.00 :   a20ce:  jmp    a1f18 <arena_get2.part.0+0x38>
    0.00 :   a20d3:  lea    0x17f41e(%rip),%rdi        # 2214f8 <free_list_lock>
    0.00 :   a20da:  call   91230 <__lll_lock_wait_private>
    0.00 :   a20df:  jmp    a1f6b <arena_get2.part.0+0x8b>
    0.00 :   a20e4:  lea    0x17f40d(%rip),%rdi        # 2214f8 <free_list_lock>
    0.00 :   a20eb:  call   91300 <__lll_lock_wake_private>
    0.00 :   a20f0:  jmp    a1fe6 <arena_get2.part.0+0x106>
    0.00 :   a20f5:  movq   $0x10,0x17f3d0(%rip)        # 2214d0 <narenas_limit.2>
    0.00 :   a2100:  mov    0x178241(%rip),%rdx        # 21a348 <narenas>
    0.00 :   a2107:  mov    $0x10,%eax
    0.00 :   a210c:  jmp    a1f18 <arena_get2.part.0+0x38>
    0.00 :   a2111:  lea    0x13f848(%rip),%rcx        # 1e1960 <__PRETTY_FUNCTION__.6>
    0.00 :   a2118:  mov    $0x34f,%edx
    0.00 :   a211d:  lea    0x137586(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2124:  lea    0x137600(%rip),%rdi        # 1d972b <null+0xeb0>
    0.00 :   a212b:  call   a0e70 <__malloc_assert>
    0.00 :   a2130:  mov    0x178259(%rip),%rdx        # 21a390 <mp_+0x30>
    0.00 :   a2137:  mov    0x17822a(%rip),%r12        # 21a368 <mp_+0x8>
    0.00 :   a213e:  lea    0x8d8(%rbp),%r14
    0.00 :   a2145:  test   %rdx,%rdx
    0.00 :   a2148:  jne    a232f <arena_get2.part.0+0x44f>
    0.00 :   a214e:  mov    0x177d73(%rip),%rax        # 219ec8 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   a2155:  mov    $0x4000,%ecx
    0.00 :   a215a:  mov    %r12,%rsi
    0.00 :   a215d:  mov    %r14,%rdi
    0.00 :   a2160:  mov    0x18(%rax),%r13
    0.00 :   a2164:  mov    %r13,%rdx
    0.00 :   a2167:  call   a1bc0 <alloc_new_heap>
    0.00 :   a216c:  mov    %rax,%rbx
    0.00 :   a216f:  test   %rax,%rax
    0.00 :   a2172:  je     a22d4 <arena_get2.part.0+0x3f4>
    0.00 :   a2178:  lea    0x30(%rbx),%r12
    0.00 :   a217c:  lea    0x90(%rbx),%rax
    0.00 :   a2183:  mov    %r12,(%rbx)
    0.00 :   a2186:  lea    0x880(%rbx),%rdx
    0.00 :   a218d:  nopl   (%rax)
    0.00 :   a2190:  movq   %rax,%xmm0
    0.00 :   a2195:  add    $0x10,%rax
    0.00 :   a2199:  punpcklqdq %xmm0,%xmm0
    0.00 :   a219d:  movups %xmm0,(%rax)
    0.00 :   a21a0:  cmp    %rdx,%rax
    0.00 :   a21a3:  jne    a2190 <arena_get2.part.0+0x2b0>
    0.00 :   a21a5:  lea    0x178ad4(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a21ac:  cmp    %rax,%r12
    0.00 :   a21af:  je     a22c4 <arena_get2.part.0+0x3e4>
    0.00 :   a21b5:  orl    $0x2,0x34(%rbx)
    0.00 :   a21b9:  movl   $0x0,0x38(%rbx)
    0.00 :   a21c0:  lea    0x8d8(%rbx),%rcx
    0.00 :   a21c7:  lea    0x8c8(%rbx),%rdx
    0.00 :   a21ce:  movq   $0x1,0x8b0(%rbx)
    0.00 :   a21d9:  mov    0x10(%rbx),%rax
    0.00 :   a21dd:  mov    %rax,0x8c0(%rbx)
    0.00 :   a21e4:  mov    %rax,0x8b8(%rbx)
    0.00 :   a21eb:  and    $0xf,%ecx
    0.00 :   a21ee:  je     a21f7 <arena_get2.part.0+0x317>
    0.00 :   a21f0:  sub    %rcx,%rdx
    0.00 :   a21f3:  add    $0x10,%rdx
    0.00 :   a21f7:  add    %rbx,%rax
    0.00 :   a21fa:  mov    %rdx,0x90(%rbx)
    0.00 :   a2201:  sub    %rdx,%rax
    0.00 :   a2204:  or     $0x1,%rax
    0.00 :   a2208:  mov    %rax,0x8(%rdx)
    0.00 :   a220c:  nop
    0.00 :   a220d:  mov    0x177b8c(%rip),%rax        # 219da0 <_DYNAMIC+0x1e0>
    0.00 :   a2214:  mov    $0x1,%edx
    0.00 :   a2219:  mov    %fs:(%rax),%rbp
    0.00 :   a221d:  mov    %r12,%fs:(%rax)
    0.00 :   a2221:  xor    %eax,%eax
    0.00 :   a2223:  movl   $0x0,0x30(%rbx)
    0.00 :   a222a:  lock cmpxchg %edx,0x17f2ba(%rip)        # 2214ec <list_lock>
    0.00 :   a2232:  jne    a239c <arena_get2.part.0+0x4bc>
    0.00 :   a2238:  mov    0x1792b1(%rip),%rax        # 21b4f0 <main_arena+0x870>
    0.00 :   a223f:  mov    %rax,0x8a0(%rbx)
    0.00 :   a2246:  xor    %eax,%eax
    0.00 :   a2248:  mov    %r12,0x1792a1(%rip)        # 21b4f0 <main_arena+0x870>
    0.00 :   a224f:  xchg   %eax,0x17f297(%rip)        # 2214ec <list_lock>
    0.00 :   a2255:  cmp    $0x1,%eax
    0.00 :   a2258:  jg     a238b <arena_get2.part.0+0x4ab>
    0.00 :   a225e:  xor    %eax,%eax
    0.00 :   a2260:  mov    $0x1,%edx
    0.00 :   a2265:  lock cmpxchg %edx,0x17f28b(%rip)        # 2214f8 <free_list_lock>
    0.00 :   a226d:  jne    a237a <arena_get2.part.0+0x49a>
    0.00 :   a2273:  test   %rbp,%rbp
    0.00 :   a2276:  je     a2293 <arena_get2.part.0+0x3b3>
    0.00 :   a2278:  mov    0x880(%rbp),%rax
    0.00 :   a227f:  test   %rax,%rax
    0.00 :   a2282:  je     a2351 <arena_get2.part.0+0x471>
    0.00 :   a2288:  sub    $0x1,%rax
    0.00 :   a228c:  mov    %rax,0x880(%rbp)
    0.00 :   a2293:  xor    %eax,%eax
    0.00 :   a2295:  xchg   %eax,0x17f25d(%rip)        # 2214f8 <free_list_lock>
    0.00 :   a229b:  cmp    $0x1,%eax
    0.00 :   a229e:  jg     a23ad <arena_get2.part.0+0x4cd>
    0.00 :   a22a4:  xor    %eax,%eax
    0.00 :   a22a6:  mov    $0x1,%edx
    0.00 :   a22ab:  lock cmpxchg %edx,(%r12)
    0.00 :   a22b1:  je     a1ffb <arena_get2.part.0+0x11b>
    0.00 :   a22b7:  mov    %r12,%rdi
    0.00 :   a22ba:  call   91230 <__lll_lock_wait_private>
    0.00 :   a22bf:  jmp    a1ffb <arena_get2.part.0+0x11b>
    0.00 :   a22c4:  movq   $0x80,0x17f231(%rip)        # 221500 <global_max_fast>
    0.00 :   a22cf:  jmp    a21b9 <arena_get2.part.0+0x2d9>
    0.00 :   a22d4:  mov    0x1780b5(%rip),%rdx        # 21a390 <mp_+0x30>
    0.00 :   a22db:  mov    0x178086(%rip),%r12        # 21a368 <mp_+0x8>
    0.00 :   a22e2:  test   %rdx,%rdx
    0.00 :   a22e5:  jne    a2356 <arena_get2.part.0+0x476>
    0.00 :   a22e7:  mov    $0x4000,%ecx
    0.00 :   a22ec:  mov    %r13,%rdx
    0.00 :   a22ef:  mov    %r12,%rsi
    0.00 :   a22f2:  mov    $0x8d8,%edi
    0.00 :   a22f7:  call   a1bc0 <alloc_new_heap>
    0.00 :   a22fc:  mov    %rax,%rbx
    0.00 :   a22ff:  test   %rax,%rax
    0.00 :   a2302:  jne    a2178 <arena_get2.part.0+0x298>
    0.00 :   a2308:  cmpl   $0x0,%fs:0x18
    0.00 :   a2311:  je     a2314 <arena_get2.part.0+0x434>
    0.00 :   a2313:  lock decq 0x17802d(%rip)        # 21a348 <narenas>
    0.00 :   a231b:  xor    %r12d,%r12d
    0.00 :   a231e:  jmp    a1ffb <arena_get2.part.0+0x11b>
    0.00 :   a2323:  mov    0x870(%rbx),%r12
    0.00 :   a232a:  jmp    a2079 <arena_get2.part.0+0x199>
    0.00 :   a232f:  mov    0x178063(%rip),%ecx        # 21a398 <mp_+0x38>
    0.00 :   a2335:  mov    %r12,%rsi
    0.00 :   a2338:  mov    %r14,%rdi
    0.00 :   a233b:  call   a1bc0 <alloc_new_heap>
    0.00 :   a2340:  mov    %rax,%rbx
    0.00 :   a2343:  test   %rax,%rax
    0.00 :   a2346:  jne    a2178 <arena_get2.part.0+0x298>
    0.00 :   a234c:  jmp    a214e <arena_get2.part.0+0x26e>
    0.00 :   a2351:  call   a1060 <detach_arena.part.0>
    0.00 :   a2356:  mov    0x17803c(%rip),%ecx        # 21a398 <mp_+0x38>
    0.00 :   a235c:  mov    %r12,%rsi
    0.00 :   a235f:  mov    $0x8d8,%edi
    0.00 :   a2364:  call   a1bc0 <alloc_new_heap>
    0.00 :   a2369:  mov    %rax,%rbx
    0.00 :   a236c:  test   %rax,%rax
    0.00 :   a236f:  jne    a2178 <arena_get2.part.0+0x298>
    0.00 :   a2375:  jmp    a22e7 <arena_get2.part.0+0x407>
    0.00 :   a237a:  lea    0x17f177(%rip),%rdi        # 2214f8 <free_list_lock>
    0.00 :   a2381:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2386:  jmp    a2273 <arena_get2.part.0+0x393>
    0.00 :   a238b:  lea    0x17f15a(%rip),%rdi        # 2214ec <list_lock>
    0.00 :   a2392:  call   91300 <__lll_lock_wake_private>
    0.00 :   a2397:  jmp    a225e <arena_get2.part.0+0x37e>
    0.00 :   a239c:  lea    0x17f149(%rip),%rdi        # 2214ec <list_lock>
    0.00 :   a23a3:  call   91230 <__lll_lock_wait_private>
    0.00 :   a23a8:  jmp    a2238 <arena_get2.part.0+0x358>
    0.00 :   a23ad:  lea    0x17f144(%rip),%rdi        # 2214f8 <free_list_lock>
    0.00 :   a23b4:  call   91300 <__lll_lock_wake_private>
    0.00 :   a23b9:  jmp    a22a4 <arena_get2.part.0+0x3c4>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a1710 <unlink_chunk.constprop.0>:
  100.00 :   a1710:  sub    $0x8,%rsp
    0.00 :   a1714:  mov    0x8(%rdi),%rcx
    0.00 :   a1718:  mov    %rcx,%rax
    0.00 :   a171b:  and    $0xfffffffffffffff8,%rax
    0.00 :   a171f:  cmp    (%rdi,%rax,1),%rax
    0.00 :   a1723:  jne    a17d6 <unlink_chunk.constprop.0+0xc6>
    0.00 :   a1729:  movdqu 0x10(%rdi),%xmm0
    0.00 :   a172e:  mov    0x10(%rdi),%rsi
    0.00 :   a1732:  mov    0x18(%rdi),%rdx
    0.00 :   a1736:  movdqa %xmm0,%xmm1
    0.00 :   a173a:  movq   %xmm0,%rax
    0.00 :   a173f:  punpcklqdq %xmm0,%xmm1
    0.00 :   a1743:  cmp    0x18(%rax),%rdi
    0.00 :   a1747:  jne    a17c0 <unlink_chunk.constprop.0+0xb0>
    0.00 :   a1749:  cmp    0x10(%rdx),%rdi
    0.00 :   a174d:  jne    a17c0 <unlink_chunk.constprop.0+0xb0>
    0.00 :   a174f:  mov    %rdx,0x18(%rax)
    0.00 :   a1753:  movq   %xmm0,0x10(%rdx)
    0.00 :   a1758:  cmp    $0x3ff,%rcx
    0.00 :   a175f:  jbe    a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a1761:  mov    0x20(%rdi),%rdx
    0.00 :   a1765:  test   %rdx,%rdx
    0.00 :   a1768:  je     a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a176a:  cmp    0x28(%rdx),%rdi
    0.00 :   a176e:  jne    a17e2 <unlink_chunk.constprop.0+0xd2>
    0.00 :   a1770:  mov    0x28(%rdi),%rcx
    0.00 :   a1774:  movq   %rdx,%xmm0
    0.00 :   a1779:  movq   %rcx,%xmm2
    0.00 :   a177e:  punpcklqdq %xmm2,%xmm0
    0.00 :   a1782:  cmp    0x20(%rcx),%rdi
    0.00 :   a1786:  jne    a17e2 <unlink_chunk.constprop.0+0xd2>
    0.00 :   a1788:  cmpq   $0x0,0x20(%rax)
    0.00 :   a178d:  je     a17a0 <unlink_chunk.constprop.0+0x90>
    0.00 :   a178f:  mov    %rcx,0x28(%rdx)
    0.00 :   a1793:  mov    0x28(%rdi),%rax
    0.00 :   a1797:  mov    %rdx,0x20(%rax)
    0.00 :   a179b:  add    $0x8,%rsp
    0.00 :   a179f:  ret
    0.00 :   a17a0:  cmp    %rdx,%rdi
    0.00 :   a17a3:  je     a17d0 <unlink_chunk.constprop.0+0xc0>
    0.00 :   a17a5:  movups %xmm0,0x20(%rax)
    0.00 :   a17a9:  mov    0x20(%rdi),%rdx
    0.00 :   a17ad:  mov    %rax,0x28(%rdx)
    0.00 :   a17b1:  mov    0x28(%rdi),%rdx
    0.00 :   a17b5:  mov    %rax,0x20(%rdx)
    0.00 :   a17b9:  jmp    a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a17bb:  nopl   0x0(%rax,%rax,1)
    0.00 :   a17c0:  lea    0x137f47(%rip),%rdi        # 1d970e <null+0xe93>
    0.00 :   a17c7:  call   a0ce0 <malloc_printerr>
    0.00 :   a17cc:  nopl   0x0(%rax)
    0.00 :   a17d0:  movups %xmm1,0x20(%rsi)
    0.00 :   a17d4:  jmp    a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a17d6:  lea    0x137f14(%rip),%rdi        # 1d96f1 <null+0xe76>
    0.00 :   a17dd:  call   a0ce0 <malloc_printerr>
    0.00 :   a17e2:  lea    0x13cd9f(%rip),%rdi        # 1de588 <__PRETTY_FUNCTION__.1+0x448>
    0.00 :   a17e9:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .plt.sec:
         :
         : 5    00000000000024e0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@plt>:
  100.00 :   24e0:   endbr64
    0.00 :   24e4:   bnd jmp *0x10a55(%rip)        # 12f40 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const@GLIBCXX_3.4.18>
    0.00 :   24eb:   nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (6 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000010d60 <_dl_relocate_object>:
    0.00 :   10d60:  endbr64
    0.00 :   10d64:  push   %rbp
    0.00 :   10d65:  xor    %r8d,%r8d
    0.00 :   10d68:  mov    %rsp,%rbp
    0.00 :   10d6b:  push   %r15
    0.00 :   10d6d:  push   %r14
    0.00 :   10d6f:  mov    %rdi,%r14
    0.00 :   10d72:  push   %r13
    0.00 :   10d74:  push   %r12
    0.00 :   10d76:  push   %rbx
    0.00 :   10d77:  mov    %edx,%ebx
    0.00 :   10d79:  sub    $0xd8,%rsp
    0.00 :   10d80:  and    $0x8000000,%edx
    0.00 :   10d86:  mov    %rsi,-0xb0(%rbp)
    0.00 :   10d8d:  mov    %ecx,-0xd0(%rbp)
    0.00 :   10d93:  mov    %r8b,-0xd9(%rbp)
    0.00 :   10d9a:  jne    10dfe <_dl_relocate_object+0x9e>
    0.00 :   10d9c:  mov    %ecx,%r9d
    0.00 :   10d9f:  mov    0x290d3(%rip),%ecx        # 39e78 <_rtld_global_ro+0x398>
    0.00 :   10da5:  mov    0x290c4(%rip),%rax        # 39e70 <_rtld_global_ro+0x390>
    0.00 :   10dac:  test   %ecx,%ecx
    0.00 :   10dae:  je     10dfe <_dl_relocate_object+0x9e>
    0.00 :   10db0:  xor    %edx,%edx
    0.00 :   10db2:  mov    $0x1,%edi
    0.00 :   10db7:  mov    $0x1,%esi
    0.00 :   10dbc:  jmp    10dda <_dl_relocate_object+0x7a>
    0.00 :   10dbe:  xchg   %ax,%ax
    0.00 :   10dc0:  mov    $0x1,%r9d
    0.00 :   10dc6:  cmpq   $0x0,0x20(%rax)
    0.00 :   10dcb:  mov    0x40(%rax),%rax
    0.00 :   10dcf:  cmovne %esi,%r8d
    0.00 :   10dd3:  add    $0x1,%edx
    0.00 :   10dd6:  cmp    %edx,%ecx
    0.00 :   10dd8:  je     10df0 <_dl_relocate_object+0x90>
    0.00 :   10dda:  cmpq   $0x0,0x28(%rax)
    0.00 :   10ddf:  jne    10dc0 <_dl_relocate_object+0x60>
    0.00 :   10de1:  cmpq   $0x0,0x30(%rax)
    0.00 :   10de6:  cmovne %edi,%r9d
    0.00 :   10dea:  jmp    10dc6 <_dl_relocate_object+0x66>
    0.00 :   10dec:  nopl   0x0(%rax)
    0.00 :   10df0:  mov    %r8b,-0xd9(%rbp)
    0.00 :   10df7:  mov    %r9d,-0xd0(%rbp)
    0.00 :   10dfe:  testb  $0x4,0x31c(%r14)
    0.00 :   10e06:  jne    11105 <_dl_relocate_object+0x3a5>
    0.00 :   10e0c:  mov    0x28cce(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   10e12:  mov    -0xd0(%rbp),%r8d
    0.00 :   10e19:  and    $0x20,%eax
    0.00 :   10e1c:  test   %r8d,%r8d
    0.00 :   10e1f:  je     11118 <_dl_relocate_object+0x3b8>
    0.00 :   10e25:  mov    %ebx,%r13d
    0.00 :   10e28:  and    $0x1,%r13d
    0.00 :   10e2c:  test   %eax,%eax
    0.00 :   10e2e:  jne    128a6 <_dl_relocate_object+0x1b46>
    0.00 :   10e34:  mov    0xf0(%r14),%rax
    0.00 :   10e3b:  mov    %rax,-0xf0(%rbp)
    0.00 :   10e42:  test   %rax,%rax
    0.00 :   10e45:  jne    12762 <_dl_relocate_object+0x1a02>
    0.00 :   10e4b:  cmpq   $0x0,0xf8(%r14)
    0.00 :   10e53:  je     10ec0 <_dl_relocate_object+0x160>
    0.00 :   10e55:  test   %r13d,%r13d
    0.00 :   10e58:  je     10ec0 <_dl_relocate_object+0x160>
    0.00 :   10e5a:  mov    0x58(%r14),%rax
    0.00 :   10e5e:  mov    0x8(%rax),%rax
    0.00 :   10e62:  testb  $0x20,0x31e(%r14)
    0.00 :   10e6a:  je     10e6f <_dl_relocate_object+0x10f>
    0.00 :   10e6c:  add    (%r14),%rax
    0.00 :   10e6f:  mov    0x8(%rax),%rdx
    0.00 :   10e73:  test   %rdx,%rdx
    0.00 :   10e76:  jne    11e2f <_dl_relocate_object+0x10cf>
    0.00 :   10e7c:  mov    -0xd0(%rbp),%edi
    0.00 :   10e82:  mov    %r14,0x8(%rax)
    0.00 :   10e86:  test   %edi,%edi
    0.00 :   10e88:  jne    12c2a <_dl_relocate_object+0x1eca>
    0.00 :   10e8e:  cmpq   $0x0,0x28dfa(%rip)        # 39c90 <_rtld_global_ro+0x1b0>
    0.00 :   10e96:  je     11e51 <_dl_relocate_object+0x10f1>
    0.00 :   10e9c:  testb  $0x2,0x28d31(%rip)        # 39bd4 <_rtld_global_ro+0xf4>
    0.00 :   10ea3:  lea    0x4db6(%rip),%rdx        # 15c60 <_dl_runtime_resolve_xsave>
    0.00 :   10eaa:  lea    0x4e7f(%rip),%rcx        # 15d30 <_dl_runtime_resolve_xsavec>
    0.00 :   10eb1:  mov    $0x1,%r13d
    0.00 :   10eb7:  cmovne %rcx,%rdx
    0.00 :   10ebb:  mov    %rdx,0x10(%rax)
    0.00 :   10ebf:  nop
    0.00 :   10ec0:  mov    0x78(%r14),%rax
    0.00 :   10ec4:  pxor   %xmm0,%xmm0
    0.00 :   10ec8:  mov    (%r14),%r15
    0.00 :   10ecb:  movaps %xmm0,-0x70(%rbp)
    0.00 :   10ecf:  movaps %xmm0,-0x60(%rbp)
    0.00 :   10ed3:  movaps %xmm0,-0x50(%rbp)
    0.00 :   10ed7:  movaps %xmm0,-0x40(%rbp)
    0.00 :   10edb:  test   %rax,%rax
    0.00 :   10ede:  je     11d70 <_dl_relocate_object+0x1010>
    0.00 :   10ee4:  mov    0x8(%rax),%rdx
    0.00 :   10ee8:  testb  $0x20,0x31e(%r14)
    0.00 :   10ef0:  lea    (%rdx,%r15,1),%rax
    0.00 :   10ef4:  cmovne %rax,%rdx
    0.00 :   10ef8:  mov    0x80(%r14),%rax
    0.00 :   10eff:  mov    0x8(%rax),%rsi
    0.00 :   10f03:  movq   %rdx,%xmm0
    0.00 :   10f08:  mov    0x188(%r14),%rax
    0.00 :   10f0f:  movq   %rsi,%xmm5
    0.00 :   10f14:  lea    (%rsi,%rdx,1),%rdi
    0.00 :   10f18:  punpcklqdq %xmm5,%xmm0
    0.00 :   10f1c:  movaps %xmm0,-0x70(%rbp)
    0.00 :   10f20:  test   %rax,%rax
    0.00 :   10f23:  je     10f2d <_dl_relocate_object+0x1cd>
    0.00 :   10f25:  mov    0x8(%rax),%rax
    0.00 :   10f29:  mov    %rax,-0x60(%rbp)
    0.00 :   10f2d:  cmpq   $0x0,0xe0(%r14)
    0.00 :   10f35:  je     10f92 <_dl_relocate_object+0x232>
    0.00 :   10f37:  mov    0xf8(%r14),%rax
    0.00 :   10f3e:  testb  $0x20,0x31e(%r14)
    0.00 :   10f46:  mov    0x8(%rax),%rcx
    0.00 :   10f4a:  lea    (%rcx,%r15,1),%rax
    0.00 :   10f4e:  cmovne %rax,%rcx
    0.00 :   10f52:  mov    0x50(%r14),%rax
    0.00 :   10f56:  mov    0x8(%rax),%rax
    0.00 :   10f5a:  movq   %rcx,%xmm0
    0.00 :   10f5f:  movq   %rax,%xmm6
    0.00 :   10f64:  lea    (%rax,%rcx,1),%r8
    0.00 :   10f68:  punpcklqdq %xmm6,%xmm0
    0.00 :   10f6c:  cmp    %rdi,%r8
    0.00 :   10f6f:  jne    10f7c <_dl_relocate_object+0x21c>
    0.00 :   10f71:  sub    %rax,%rsi
    0.00 :   10f74:  mov    %rsi,-0x68(%rbp)
    0.00 :   10f78:  lea    (%rsi,%rdx,1),%rdi
    0.00 :   10f7c:  test   %r13d,%r13d
    0.00 :   10f7f:  jne    10f8a <_dl_relocate_object+0x22a>
    0.00 :   10f81:  cmp    %rdi,%rcx
    0.00 :   10f84:  je     11e67 <_dl_relocate_object+0x1107>
    0.00 :   10f8a:  mov    %r13d,-0x38(%rbp)
    0.00 :   10f8e:  movaps %xmm0,-0x50(%rbp)
    0.00 :   10f92:  lea    -0x70(%rbp),%rax
    0.00 :   10f96:  and    $0x2000000,%ebx
    0.00 :   10f9c:  mov    %r15,%r10
    0.00 :   10f9f:  mov    %r14,%r11
    0.00 :   10fa2:  mov    %rax,-0xc8(%rbp)
    0.00 :   10fa9:  lea    -0x30(%rbp),%rax
    0.00 :   10fad:  mov    %ebx,-0xcc(%rbp)
    0.00 :   10fb3:  mov    %rax,-0xe8(%rbp)
    0.00 :   10fba:  mov    -0xc8(%rbp),%rsi
    0.00 :   10fc1:  mov    (%rsi),%r12
    0.00 :   10fc4:  mov    0x8(%rsi),%rcx
    0.00 :   10fc8:  mov    0x10(%rsi),%rax
    0.00 :   10fcc:  mov    0x18(%rsi),%esi
    0.00 :   10fcf:  add    %r12,%rcx
    0.00 :   10fd2:  mov    %rcx,-0x98(%rbp)
    0.00 :   10fd9:  test   %esi,%esi
    0.00 :   10fdb:  je     112d0 <_dl_relocate_object+0x570>
    0.00 :   10fe1:  xor    %r15d,%r15d
    0.00 :   10fe4:  xor    %ebx,%ebx
    0.00 :   10fe6:  cmp    %rcx,%r12
    0.00 :   10fe9:  jae    110a5 <_dl_relocate_object+0x345>
    0.00 :   10fef:  mov    %r11,%rax
    0.00 :   10ff2:  mov    %r10,%r14
    0.00 :   10ff5:  mov    %r15,%r11
    0.00 :   10ff8:  mov    -0x98(%rbp),%r10
    0.00 :   10fff:  mov    %rax,%r15
    0.00 :   11002:  jmp    11036 <_dl_relocate_object+0x2d6>
    0.00 :   11004:  nopl   0x0(%rax)
    0.00 :   11008:  mov    (%r12),%r13
    0.00 :   1100c:  add    %r14,%r13
    0.00 :   1100f:  cmp    $0x7,%rax
    0.00 :   11013:  jne    11150 <_dl_relocate_object+0x3f0>
    0.00 :   11019:  mov    0x3f8(%r15),%rax
    0.00 :   11020:  test   %rax,%rax
    0.00 :   11023:  jne    112b0 <_dl_relocate_object+0x550>
    0.00 :   11029:  add    %r14,0x0(%r13)
    0.00 :   1102d:  add    $0x18,%r12
    0.00 :   11031:  cmp    %r12,%r10
    0.00 :   11034:  jbe    11055 <_dl_relocate_object+0x2f5>
    0.00 :   11036:  mov    0x8(%r12),%rsi
    0.00 :   1103b:  mov    %esi,%eax
    0.00 :   1103d:  cmp    $0x25,%esi
    0.00 :   11040:  jne    11008 <_dl_relocate_object+0x2a8>
    0.00 :   11042:  test   %rbx,%rbx
    0.00 :   11045:  mov    %r12,%r11
    0.00 :   11048:  cmove  %r12,%rbx
    0.00 :   1104c:  add    $0x18,%r12
    0.00 :   11050:  cmp    %r12,%r10
    0.00 :   11053:  ja     11036 <_dl_relocate_object+0x2d6>
    0.00 :   11055:  mov    %r15,%rax
    0.00 :   11058:  mov    %r14,%r10
    0.00 :   1105b:  mov    %r11,%r15
    0.00 :   1105e:  mov    %rax,%r11
    0.00 :   11061:  test   %rbx,%rbx
    0.00 :   11064:  je     110a5 <_dl_relocate_object+0x345>
    0.00 :   11066:  cmp    %r15,%rbx
    0.00 :   11069:  ja     110a5 <_dl_relocate_object+0x345>
    0.00 :   1106b:  mov    -0xcc(%rbp),%edi
    0.00 :   11071:  mov    %r14,%r12
    0.00 :   11074:  mov    %rax,%r13
    0.00 :   11077:  test   %edi,%edi
    0.00 :   11079:  jne    11c23 <_dl_relocate_object+0xec3>
    0.00 :   1107f:  nop
    0.00 :   11080:  cmpl   $0x25,0x8(%rbx)
    0.00 :   11084:  jne    11099 <_dl_relocate_object+0x339>
    0.00 :   11086:  mov    (%rbx),%r14
    0.00 :   11089:  mov    0x10(%rbx),%rax
    0.00 :   1108d:  add    0x0(%r13),%rax
    0.00 :   11091:  call   *%rax
    0.00 :   11093:  add    %r12,%r14
    0.00 :   11096:  mov    %rax,(%r14)
    0.00 :   11099:  add    $0x18,%rbx
    0.00 :   1109d:  cmp    %r15,%rbx
    0.00 :   110a0:  jbe    11080 <_dl_relocate_object+0x320>
    0.00 :   110a2:  mov    %r13,%r11
    0.00 :   110a5:  addq   $0x20,-0xc8(%rbp)
    0.00 :   110ad:  mov    -0xc8(%rbp),%rax
    0.00 :   110b4:  cmp    -0xe8(%rbp),%rax
    0.00 :   110bb:  jne    11c00 <_dl_relocate_object+0xea0>
    0.00 :   110c1:  mov    -0xd0(%rbp),%eax
    0.00 :   110c7:  mov    %r11,%r14
    0.00 :   110ca:  test   %eax,%eax
    0.00 :   110cc:  jne    11cb0 <_dl_relocate_object+0xf50>
    0.00 :   110d2:  cmpb   $0x0,-0xd9(%rbp)
    0.00 :   110d9:  jne    11cb0 <_dl_relocate_object+0xf50>
    0.00 :   110df:  orb    $0x4,0x31c(%r14)
    0.00 :   110e7:  cmpq   $0x0,-0xf0(%rbp)
    0.00 :   110ef:  jne    1292c <_dl_relocate_object+0x1bcc>
    0.00 :   110f5:  mov    0x478(%r14),%rax
    0.00 :   110fc:  test   %rax,%rax
    0.00 :   110ff:  jne    11db0 <_dl_relocate_object+0x1050>
    0.00 :   11105:  lea    -0x28(%rbp),%rsp
    0.00 :   11109:  pop    %rbx
    0.00 :   1110a:  pop    %r12
    0.00 :   1110c:  pop    %r13
    0.00 :   1110e:  pop    %r14
    0.00 :   11110:  pop    %r15
    0.00 :   11112:  pop    %rbp
    0.00 :   11113:  ret
    0.00 :   11114:  nopl   0x0(%rax)
    0.00 :   11118:  cmpq   $0x0,0x100(%r14)
    0.00 :   11120:  je     10e25 <_dl_relocate_object+0xc5>
    0.00 :   11126:  test   %eax,%eax
    0.00 :   11128:  jne    12da0 <_dl_relocate_object+0x2040>
    0.00 :   1112e:  mov    0xf0(%r14),%rax
    0.00 :   11135:  mov    %rax,-0xf0(%rbp)
    0.00 :   1113c:  test   %rax,%rax
    0.00 :   1113f:  jne    12d63 <_dl_relocate_object+0x2003>
    0.00 :   11145:  xor    %r13d,%r13d
    0.00 :   11148:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   1114d:  nopl   (%rax)
    0.00 :   11150:  cmp    $0x24,%rax
    0.00 :   11154:  jne    126c6 <_dl_relocate_object+0x1966>
    0.00 :   1115a:  mov    0x70(%r15),%rax
    0.00 :   1115e:  shr    $0x20,%rsi
    0.00 :   11162:  xor    %edx,%edx
    0.00 :   11164:  mov    0x8(%rax),%rcx
    0.00 :   11168:  testb  $0x20,0x31e(%r15)
    0.00 :   11170:  je     11178 <_dl_relocate_object+0x418>
    0.00 :   11172:  mov    (%r15),%rdx
    0.00 :   11175:  add    %rdx,%rcx
    0.00 :   11178:  lea    (%rsi,%rsi,1),%rax
    0.00 :   1117c:  mov    0x1d0(%r15),%r8
    0.00 :   11183:  add    %rax,%rsi
    0.00 :   11186:  lea    (%rcx,%rsi,8),%rcx
    0.00 :   1118a:  mov    %rcx,-0x88(%rbp)
    0.00 :   11191:  test   %r8,%r8
    0.00 :   11194:  je     111b4 <_dl_relocate_object+0x454>
    0.00 :   11196:  add    %rdx,%rax
    0.00 :   11199:  add    0x8(%r8),%rax
    0.00 :   1119d:  movzwl (%rax),%eax
    0.00 :   111a0:  and    $0x7fff,%eax
    0.00 :   111a5:  lea    (%rax,%rax,2),%rcx
    0.00 :   111a9:  mov    0x2e8(%r15),%rax
    0.00 :   111b0:  lea    (%rax,%rcx,8),%r8
    0.00 :   111b4:  mov    -0x88(%rbp),%rsi
    0.00 :   111bb:  mov    %rsi,-0x78(%rbp)
    0.00 :   111bf:  movzbl 0x4(%rsi),%eax
    0.00 :   111c3:  mov    %eax,%edi
    0.00 :   111c5:  shr    $0x4,%dil
    0.00 :   111c9:  je     11c40 <_dl_relocate_object+0xee0>
    0.00 :   111cf:  movzbl 0x5(%rsi),%ecx
    0.00 :   111d3:  and    $0x3,%ecx
    0.00 :   111d6:  sub    $0x1,%ecx
    0.00 :   111d9:  cmp    $0x1,%ecx
    0.00 :   111dc:  jbe    12b55 <_dl_relocate_object+0x1df5>
    0.00 :   111e2:  cmp    0x410(%r15),%rsi
    0.00 :   111e9:  je     12bd0 <_dl_relocate_object+0x1e70>
    0.00 :   111ef:  mov    -0x88(%rbp),%rax
    0.00 :   111f6:  movl   $0x1,0x418(%r15)
    0.00 :   11201:  mov    %rax,0x410(%r15)
    0.00 :   11208:  test   %r8,%r8
    0.00 :   1120b:  je     11219 <_dl_relocate_object+0x4b9>
    0.00 :   1120d:  mov    0x8(%r8),%ecx
    0.00 :   11211:  xor    %eax,%eax
    0.00 :   11213:  test   %ecx,%ecx
    0.00 :   11215:  cmove  %rax,%r8
    0.00 :   11219:  mov    0x68(%r15),%rcx
    0.00 :   1121d:  lea    -0x78(%rbp),%rax
    0.00 :   11221:  mov    $0x1,%r9d
    0.00 :   11227:  mov    %r15,%rsi
    0.00 :   1122a:  mov    %r11,-0x98(%rbp)
    0.00 :   11231:  add    0x8(%rcx),%rdx
    0.00 :   11235:  mov    -0x88(%rbp),%rcx
    0.00 :   1123c:  mov    %r10,-0x90(%rbp)
    0.00 :   11243:  mov    (%rcx),%ecx
    0.00 :   11245:  push   $0x0
    0.00 :   11247:  push   $0x9
    0.00 :   11249:  lea    (%rdx,%rcx,1),%rdi
    0.00 :   1124d:  mov    -0xb0(%rbp),%rcx
    0.00 :   11254:  mov    %rax,%rdx
    0.00 :   11257:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   1125c:  mov    -0x78(%rbp),%rdx
    0.00 :   11260:  movq   %rax,%xmm0
    0.00 :   11265:  mov    %rax,%r9
    0.00 :   11268:  movq   %rdx,%xmm7
    0.00 :   1126d:  punpcklqdq %xmm7,%xmm0
    0.00 :   11271:  movups %xmm0,0x420(%r15)
    0.00 :   11279:  pop    %r10
    0.00 :   1127b:  pop    %r11
    0.00 :   1127d:  mov    -0x90(%rbp),%r10
    0.00 :   11284:  mov    -0x98(%rbp),%r11
    0.00 :   1128b:  test   %rdx,%rdx
    0.00 :   1128e:  jne    12c89 <_dl_relocate_object+0x1f29>
    0.00 :   11294:  mov    0x10(%r12),%rax
    0.00 :   11299:  mov    %rax,0x8(%r13)
    0.00 :   1129d:  lea    0x6e6c(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   112a4:  mov    %rax,0x0(%r13)
    0.00 :   112a8:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   112ad:  nopl   (%rax)
    0.00 :   112b0:  mov    %r13,%rdx
    0.00 :   112b3:  sub    0x400(%r15),%rdx
    0.00 :   112ba:  lea    (%rax,%rdx,2),%rax
    0.00 :   112be:  mov    %rax,0x0(%r13)
    0.00 :   112c2:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   112c7:  nopw   0x0(%rax,%rax,1)
    0.00 :   112d0:  mov    0x70(%r11),%rdx
    0.00 :   112d4:  testb  $0x20,0x31e(%r11)
    0.00 :   112dc:  lea    (%rax,%rax,2),%rax
    0.00 :   112e0:  lea    (%r12,%rax,8),%rbx
    0.00 :   112e4:  lea    0x29805(%rip),%rax        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   112eb:  mov    0x8(%rdx),%rcx
    0.00 :   112ef:  lea    (%rcx,%r10,1),%rdx
    0.00 :   112f3:  cmove  %rcx,%rdx
    0.00 :   112f7:  mov    %rdx,-0x90(%rbp)
    0.00 :   112fe:  cmp    %rax,%r11
    0.00 :   11301:  je     11348 <_dl_relocate_object+0x5e8>
    0.00 :   11303:  test   %r10,%r10
    0.00 :   11306:  je     11d80 <_dl_relocate_object+0x1020>
    0.00 :   1130c:  cmp    %rbx,%r12
    0.00 :   1130f:  jae    11348 <_dl_relocate_object+0x5e8>
    0.00 :   11311:  nopl   0x0(%rax)
    0.00 :   11318:  mov    (%r12),%rdx
    0.00 :   1131c:  mov    0x8(%r12),%eax
    0.00 :   11321:  add    %r10,%rdx
    0.00 :   11324:  cmp    $0x26,%rax
    0.00 :   11328:  je     11334 <_dl_relocate_object+0x5d4>
    0.00 :   1132a:  cmp    $0x8,%rax
    0.00 :   1132e:  jne    12dfe <_dl_relocate_object+0x209e>
    0.00 :   11334:  mov    0x10(%r12),%rax
    0.00 :   11339:  add    $0x18,%r12
    0.00 :   1133d:  add    %r10,%rax
    0.00 :   11340:  mov    %rax,(%rdx)
    0.00 :   11343:  cmp    %r12,%rbx
    0.00 :   11346:  ja     11318 <_dl_relocate_object+0x5b8>
    0.00 :   11348:  mov    0x1d0(%r11),%rax
    0.00 :   1134f:  mov    %rax,-0xa0(%rbp)
    0.00 :   11356:  test   %rax,%rax
    0.00 :   11359:  je     11e78 <_dl_relocate_object+0x1118>
    0.00 :   1135f:  mov    0x8(%rax),%rax
    0.00 :   11363:  mov    %rax,-0xa0(%rbp)
    0.00 :   1136a:  testb  $0x20,0x31e(%r11)
    0.00 :   11372:  jne    11d98 <_dl_relocate_object+0x1038>
    0.00 :   11378:  cmp    %rbx,-0x98(%rbp)
    0.00 :   1137f:  jbe    110a5 <_dl_relocate_object+0x345>
    0.00 :   11385:  movq   $0x0,-0xd8(%rbp)
    0.00 :   11390:  mov    %r11,%r15
    0.00 :   11393:  movq   $0x0,-0xc0(%rbp)
    0.00 :   1139e:  mov    %r10,-0xa8(%rbp)
    0.00 :   113a5:  nopl   (%rax)
    0.00 :   113a8:  mov    0x8(%rbx),%r14
    0.00 :   113ac:  mov    -0xa0(%rbp),%rax
    0.00 :   113b3:  mov    -0x90(%rbp),%rcx
    0.00 :   113ba:  mov    -0xa8(%rbp),%rdi
    0.00 :   113c1:  mov    %r14,%rdx
    0.00 :   113c4:  add    (%rbx),%rdi
    0.00 :   113c7:  mov    %r14d,%r12d
    0.00 :   113ca:  shr    $0x20,%rdx
    0.00 :   113ce:  mov    %rdi,-0x88(%rbp)
    0.00 :   113d5:  movzwl (%rax,%rdx,2),%eax
   95.68 :   113d9:  lea    (%rdx,%rdx,2),%rdx
    0.00 :   113dd:  lea    (%rcx,%rdx,8),%r13
    0.00 :   113e1:  and    $0x7fff,%eax
    0.00 :   113e6:  mov    %r13,-0x80(%rbp)
    0.00 :   113ea:  lea    (%rax,%rax,2),%rdx
    0.00 :   113ee:  mov    0x2e8(%r15),%rax
    0.00 :   113f5:  lea    (%rax,%rdx,8),%r10
    0.00 :   113f9:  cmp    $0x25,%r14d
    0.00 :   113fd:  je     11ac0 <_dl_relocate_object+0xd60>
    0.00 :   11403:  mov    %r13,-0x78(%rbp)
    0.00 :   11407:  cmp    $0x8,%r12
    0.00 :   1140b:  je     11ae8 <_dl_relocate_object+0xd88>
    0.00 :   11411:  cmp    $0x26,%r12
    0.00 :   11415:  je     11ae8 <_dl_relocate_object+0xd88>
    0.00 :   1141b:  test   %r12,%r12
    0.00 :   1141e:  je     11558 <_dl_relocate_object+0x7f8>
    0.00 :   11424:  movzbl 0x4(%r13),%eax
    0.04 :   11429:  mov    %eax,%esi
    0.00 :   1142b:  shr    $0x4,%sil
    0.00 :   1142f:  je     119b0 <_dl_relocate_object+0xc50>
    0.00 :   11435:  movzbl 0x5(%r13),%edx
    0.00 :   1143a:  and    $0x3,%edx
    0.00 :   1143d:  sub    $0x1,%edx
    0.00 :   11440:  cmp    $0x1,%edx
    0.00 :   11443:  jbe    119b0 <_dl_relocate_object+0xc50>
    0.00 :   11449:  xor    %r9d,%r9d
    0.00 :   1144c:  cmp    $0x6,%r12
    0.00 :   11450:  sete   %r9b
    0.00 :   11454:  xor    %eax,%eax
    0.00 :   11456:  shl    $0x2,%r9d
    0.00 :   1145a:  cmp    $0x5,%r12
    0.00 :   1145e:  sete   %al
    0.00 :   11461:  add    %eax,%eax
    0.00 :   11463:  or     %eax,%r9d
    0.00 :   11466:  lea    -0x7(%r12),%rax
    0.00 :   1146b:  cmp    0x410(%r15),%r13
    0.00 :   11472:  je     11d28 <_dl_relocate_object+0xfc8>
    0.00 :   11478:  cmp    $0x1d,%rax
    0.00 :   1147c:  ja     11489 <_dl_relocate_object+0x729>
    0.00 :   1147e:  lea    0x1addb(%rip),%rdx        # 2c260 <CSWTCH.111>
    0.00 :   11485:  or     (%rdx,%rax,4),%r9d
    0.00 :   11489:  mov    %r9d,0x418(%r15)
    0.00 :   11490:  xor    %r8d,%r8d
    0.00 :   11493:  mov    %r13,0x410(%r15)
    0.00 :   1149a:  test   %r10,%r10
    0.00 :   1149d:  je     114a9 <_dl_relocate_object+0x749>
    0.00 :   1149f:  mov    0x8(%r10),%esi
    0.00 :   114a3:  test   %esi,%esi
    0.00 :   114a5:  cmovne %r10,%r8
    0.00 :   114a9:  mov    0x68(%r15),%rax
    0.00 :   114ad:  mov    0x0(%r13),%edi
    0.00 :   114b1:  mov    0x8(%rax),%rcx
    0.00 :   114b5:  xor    %eax,%eax
    0.00 :   114b7:  testb  $0x20,0x31e(%r15)
    0.00 :   114bf:  je     114c4 <_dl_relocate_object+0x764>
    0.00 :   114c1:  mov    (%r15),%rax
    0.00 :   114c4:  push   $0x0
    0.00 :   114c6:  add    %rcx,%rdi
    0.00 :   114c9:  mov    -0xb0(%rbp),%rcx
    0.00 :   114d0:  lea    -0x78(%rbp),%rdx
    0.00 :   114d4:  push   $0x9
    0.00 :   114d6:  add    %rax,%rdi
    0.00 :   114d9:  mov    %r15,%rsi
    0.00 :   114dc:  mov    %r10,-0xb8(%rbp)
    0.00 :   114e3:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   114e8:  mov    -0x78(%rbp),%rdx
    0.00 :   114ec:  mov    -0xb8(%rbp),%r10
    0.00 :   114f3:  movq   %rax,%xmm0
    0.00 :   114f8:  mov    %rax,%r11
    0.00 :   114fb:  movq   %rdx,%xmm1
    0.00 :   11500:  punpcklqdq %xmm1,%xmm0
    0.00 :   11504:  movups %xmm0,0x420(%r15)
    0.00 :   1150c:  pop    %rax
    0.00 :   1150d:  pop    %rcx
    0.00 :   1150e:  xor    %r9d,%r9d
    0.00 :   11511:  test   %rdx,%rdx
    0.00 :   11514:  jne    11b00 <_dl_relocate_object+0xda0>
    0.00 :   1151a:  cmp    $0x25,%r12
    0.00 :   1151e:  ja     11ab0 <_dl_relocate_object+0xd50>
    0.00 :   11524:  lea    0x1abf5(%rip),%rdi        # 2c120 <primes.0+0x80>
    0.00 :   1152b:  movslq (%rdi,%r12,4),%rax
    0.00 :   1152f:  add    %rdi,%rax
    0.00 :   11532:  notrack jmp *%rax
    0.00 :   11535:  mov    -0x78(%rbp),%rax
    0.00 :   11539:  mov    0x10(%rax),%r9
    0.00 :   1153d:  mov    -0x88(%rbp),%rax
    0.00 :   11544:  add    0x10(%rbx),%r9
    4.27 :   11548:  mov    %r9,(%rax)
    0.00 :   1154b:  mov    0x8(%rbx),%eax
    0.00 :   1154e:  cmp    $0x7,%rax
    0.00 :   11552:  je     11737 <_dl_relocate_object+0x9d7>
    0.00 :   11558:  add    $0x18,%rbx
    0.00 :   1155c:  cmp    %rbx,-0x98(%rbp)
    0.00 :   11563:  ja     113a8 <_dl_relocate_object+0x648>
    0.00 :   11569:  mov    -0xc0(%rbp),%rbx
    0.00 :   11570:  mov    -0xa8(%rbp),%r10
    0.00 :   11577:  mov    %r15,%r11
    0.00 :   1157a:  test   %rbx,%rbx
    0.00 :   1157d:  je     110a5 <_dl_relocate_object+0x345>
    0.00 :   11583:  mov    -0xd8(%rbp),%r12
    0.00 :   1158a:  cmp    %r12,%rbx
    0.00 :   1158d:  ja     110a5 <_dl_relocate_object+0x345>
    0.00 :   11593:  mov    %r10,-0x98(%rbp)
    0.00 :   1159a:  lea    0x1fadf(%rip),%r14        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   115a1:  xor    %r13d,%r13d
    0.00 :   115a4:  jmp    115bd <_dl_relocate_object+0x85d>
    0.00 :   115a6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   115b0:  add    $0x18,%rbx
    0.00 :   115b4:  cmp    %r12,%rbx
    0.00 :   115b7:  ja     11702 <_dl_relocate_object+0x9a2>
    0.00 :   115bd:  mov    0x8(%rbx),%rax
    0.00 :   115c1:  cmp    $0x25,%eax
    0.00 :   115c4:  jne    115b0 <_dl_relocate_object+0x850>
    0.00 :   115c6:  mov    -0xa0(%rbp),%rsi
    0.00 :   115cd:  mov    -0x98(%rbp),%rdi
    0.00 :   115d4:  shr    $0x20,%rax
    0.00 :   115d8:  add    (%rbx),%rdi
    0.00 :   115db:  mov    %rdi,-0x88(%rbp)
    0.00 :   115e2:  mov    -0x90(%rbp),%rdi
    0.00 :   115e9:  movzwl (%rsi,%rax,2),%ecx
    0.00 :   115ed:  lea    (%rax,%rax,2),%rax
    0.00 :   115f1:  mov    0x2e8(%r15),%rsi
    0.00 :   115f8:  lea    (%rdi,%rax,8),%r10
    0.00 :   115fc:  mov    %r10,-0x78(%rbp)
    0.00 :   11600:  movzbl 0x4(%r10),%eax
    0.00 :   11605:  mov    %eax,%edi
    0.00 :   11607:  shr    $0x4,%dil
    0.00 :   1160b:  je     11b20 <_dl_relocate_object+0xdc0>
    0.00 :   11611:  movzbl 0x5(%r10),%edx
    0.00 :   11616:  and    $0x3,%edx
    0.00 :   11619:  sub    $0x1,%edx
    0.00 :   1161c:  cmp    $0x1,%edx
    0.00 :   1161f:  jbe    11b20 <_dl_relocate_object+0xdc0>
    0.00 :   11625:  cmp    0x410(%r15),%r10
    0.00 :   1162c:  je     12734 <_dl_relocate_object+0x19d4>
    0.00 :   11632:  and    $0x7fff,%ecx
    0.00 :   11638:  mov    %r10,0x410(%r15)
    0.00 :   1163f:  movl   $0x0,0x418(%r15)
    0.00 :   1164a:  lea    (%rcx,%rcx,2),%rax
    0.00 :   1164e:  lea    (%rsi,%rax,8),%r8
    0.00 :   11652:  test   %r8,%r8
    0.00 :   11655:  je     11662 <_dl_relocate_object+0x902>
    0.00 :   11657:  mov    0x8(%r8),%r11d
    0.00 :   1165b:  test   %r11d,%r11d
    0.00 :   1165e:  cmove  %r13,%r8
    0.00 :   11662:  mov    0x68(%r15),%rdx
    0.00 :   11666:  mov    (%r10),%eax
    0.00 :   11669:  mov    0x8(%rdx),%rcx
    0.00 :   1166d:  xor    %edx,%edx
    0.00 :   1166f:  testb  $0x20,0x31e(%r15)
    0.00 :   11677:  je     1167c <_dl_relocate_object+0x91c>
    0.00 :   11679:  mov    (%r15),%rdx
    0.00 :   1167c:  push   $0x0
    0.00 :   1167e:  add    %rcx,%rax
    0.00 :   11681:  lea    -0x78(%rbp),%r11
    0.00 :   11685:  mov    -0xb0(%rbp),%rcx
    0.00 :   1168c:  push   $0x9
    0.00 :   1168e:  lea    (%rax,%rdx,1),%rdi
    0.00 :   11692:  xor    %r9d,%r9d
    0.00 :   11695:  mov    %r11,%rdx
    0.00 :   11698:  mov    %r15,%rsi
    0.00 :   1169b:  mov    %r10,-0xa8(%rbp)
    0.00 :   116a2:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   116a7:  mov    -0x78(%rbp),%rdx
    0.00 :   116ab:  mov    -0xa8(%rbp),%r10
    0.00 :   116b2:  movq   %rax,%xmm0
    0.00 :   116b7:  mov    %rax,%rcx
    0.00 :   116ba:  movq   %rdx,%xmm3
    0.00 :   116bf:  punpcklqdq %xmm3,%xmm0
    0.00 :   116c3:  movups %xmm0,0x420(%r15)
    0.00 :   116cb:  pop    %r8
    0.00 :   116cd:  pop    %r9
    0.00 :   116cf:  test   %rdx,%rdx
    0.00 :   116d2:  jne    11d60 <_dl_relocate_object+0x1000>
    0.00 :   116d8:  mov    -0xcc(%rbp),%esi
    0.00 :   116de:  mov    0x10(%rbx),%rax
    0.00 :   116e2:  add    (%r15),%rax
    0.00 :   116e5:  test   %esi,%esi
    0.00 :   116e7:  jne    116eb <_dl_relocate_object+0x98b>
    0.00 :   116e9:  call   *%rax
    0.00 :   116eb:  mov    -0x88(%rbp),%rcx
    0.00 :   116f2:  add    $0x18,%rbx
    0.00 :   116f6:  mov    %rax,(%rcx)
    0.00 :   116f9:  cmp    %r12,%rbx
    0.00 :   116fc:  jbe    115bd <_dl_relocate_object+0x85d>
    0.00 :   11702:  mov    %r15,%r11
    0.00 :   11705:  jmp    110a5 <_dl_relocate_object+0x345>
    0.00 :   1170a:  mov    -0x78(%rbp),%rax
    0.00 :   1170e:  mov    0x10(%rax),%r9
    0.00 :   11712:  mov    -0x88(%rbp),%rax
    0.00 :   11719:  add    0x10(%rbx),%r9
    0.00 :   1171d:  mov    %r9d,(%rax)
    0.00 :   11720:  shr    $0x20,%r9
    0.00 :   11724:  jne    126dc <_dl_relocate_object+0x197c>
    0.00 :   1172a:  mov    0x8(%rbx),%eax
    0.00 :   1172d:  cmp    $0x7,%rax
    0.00 :   11731:  jne    11558 <_dl_relocate_object+0x7f8>
    0.00 :   11737:  mov    0x2873b(%rip),%edi        # 39e78 <_rtld_global_ro+0x398>
    0.00 :   1173d:  test   %edi,%edi
    0.00 :   1173f:  je     11558 <_dl_relocate_object+0x7f8>
    0.00 :   11745:  mov    -0x80(%rbp),%rdx
    0.00 :   11749:  movzbl 0x4(%rdx),%eax
    0.00 :   1174d:  shr    $0x4,%al
    0.00 :   11750:  je     11be0 <_dl_relocate_object+0xe80>
    0.00 :   11756:  movzbl 0x5(%rdx),%eax
    0.00 :   1175a:  and    $0x3,%eax
    0.00 :   1175d:  sub    $0x1,%eax
    0.00 :   11760:  cmp    $0x1,%eax
    0.00 :   11763:  jbe    11be0 <_dl_relocate_object+0xe80>
    0.00 :   11769:  cmp    0x410(%r15),%rdx
    0.00 :   11770:  je     128db <_dl_relocate_object+0x1b7b>
    0.00 :   11776:  movl   $0x1,0x418(%r15)
    0.00 :   11781:  mov    %rdx,0x410(%r15)
    0.00 :   11788:  test   %r10,%r10
    0.00 :   1178b:  je     11799 <_dl_relocate_object+0xa39>
    0.00 :   1178d:  mov    0x8(%r10),%esi
    0.00 :   11791:  xor    %eax,%eax
    0.00 :   11793:  test   %esi,%esi
    0.00 :   11795:  cmove  %rax,%r10
    0.00 :   11799:  mov    0x68(%r15),%rax
    0.00 :   1179d:  mov    (%rdx),%edi
    0.00 :   1179f:  mov    0x8(%rax),%rcx
    0.00 :   117a3:  xor    %eax,%eax
    0.00 :   117a5:  testb  $0x20,0x31e(%r15)
    0.00 :   117ad:  je     117b2 <_dl_relocate_object+0xa52>
    0.00 :   117af:  mov    (%r15),%rax
    0.00 :   117b2:  push   $0x0
    0.00 :   117b4:  add    %rcx,%rdi
    0.00 :   117b7:  mov    -0xb0(%rbp),%rcx
    0.00 :   117be:  lea    -0x80(%rbp),%rdx
    0.00 :   117c2:  push   $0x9
    0.00 :   117c4:  mov    %r10,%r8
    0.00 :   117c7:  add    %rax,%rdi
    0.00 :   117ca:  mov    $0x1,%r9d
    0.00 :   117d0:  mov    %r15,%rsi
    0.00 :   117d3:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   117d8:  mov    -0x80(%rbp),%rdx
    0.00 :   117dc:  movq   %rax,%xmm0
    0.00 :   117e1:  mov    %rax,%r8
    0.00 :   117e4:  movq   %rdx,%xmm4
    0.00 :   117e9:  punpcklqdq %xmm4,%xmm0
    0.00 :   117ed:  movups %xmm0,0x420(%r15)
    0.00 :   117f5:  pop    %rax
    0.00 :   117f6:  pop    %rcx
    0.00 :   117f7:  test   %rdx,%rdx
    0.00 :   117fa:  je     11558 <_dl_relocate_object+0x7f8>
    0.00 :   11800:  jmp    11be3 <_dl_relocate_object+0xe83>
    0.00 :   11805:  nopl   (%rax)
    0.00 :   11808:  test   %r11,%r11
    0.00 :   1180b:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   11811:  mov    0x460(%r11),%rax
    0.00 :   11818:  mov    -0x88(%rbp),%rsi
    0.00 :   1181f:  mov    %rax,(%rsi)
    0.00 :   11822:  mov    0x8(%rbx),%eax
    0.00 :   11825:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   1182a:  mov    -0xcc(%rbp),%r8d
    0.00 :   11831:  mov    0x10(%rbx),%rax
    0.00 :   11835:  add    (%r15),%rax
    0.00 :   11838:  test   %r8d,%r8d
    0.00 :   1183b:  jne    1184d <_dl_relocate_object+0xaed>
    0.00 :   1183d:  mov    %r10,-0xb8(%rbp)
    0.00 :   11844:  call   *%rax
    0.00 :   11846:  mov    -0xb8(%rbp),%r10
    0.00 :   1184d:  mov    -0x88(%rbp),%rcx
    0.00 :   11854:  mov    %rax,(%rcx)
    0.00 :   11857:  jmp    1172a <_dl_relocate_object+0x9ca>
    0.00 :   1185c:  mov    -0x78(%rbp),%r12
    0.00 :   11860:  test   %r12,%r12
    0.00 :   11863:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   11869:  mov    0x10(%r13),%rdx
    0.00 :   1186d:  mov    0x10(%r12),%rax
    0.00 :   11872:  mov    %r9,%rsi
    0.00 :   11875:  mov    %r10,-0xb8(%rbp)
    0.00 :   1187c:  mov    -0x88(%rbp),%rdi
    0.00 :   11883:  cmp    %rax,%rdx
    0.00 :   11886:  cmova  %rax,%rdx
    0.00 :   1188a:  call   2afb0 <memcpy>
    0.00 :   1188f:  mov    0x10(%r13),%rax
    0.00 :   11893:  cmp    %rax,0x10(%r12)
    0.00 :   11898:  mov    -0xb8(%rbp),%r10
    0.00 :   1189f:  ja     118b7 <_dl_relocate_object+0xb57>
    0.00 :   118a1:  jae    1172a <_dl_relocate_object+0x9ca>
    0.00 :   118a7:  mov    0x28276(%rip),%r9d        # 39b24 <_rtld_global_ro+0x44>
    0.00 :   118ae:  test   %r9d,%r9d
    0.00 :   118b1:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   118b7:  lea    0x1f6f2(%rip),%rdi        # 30fb0 <__PRETTY_FUNCTION__.0+0x1a0>
    0.00 :   118be:  jmp    126e3 <_dl_relocate_object+0x1983>
    0.00 :   118c3:  nopl   0x0(%rax,%rax,1)
    0.00 :   118c8:  mov    -0x78(%rbp),%rax
    0.00 :   118cc:  test   %rax,%rax
    0.00 :   118cf:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   118d5:  mov    0x458(%r11),%rdx
    0.00 :   118dc:  lea    0x1(%rdx),%rcx
    0.00 :   118e0:  cmp    $0x1,%rcx
    0.00 :   118e4:  jbe    12b21 <_dl_relocate_object+0x1dc1>
    0.00 :   118ea:  mov    0x8(%rax),%rax
    0.00 :   118ee:  mov    -0x88(%rbp),%rdi
    0.00 :   118f5:  sub    %rdx,%rax
    0.00 :   118f8:  add    0x10(%rbx),%rax
    0.00 :   118fc:  mov    %rax,(%rdi)
    0.00 :   118ff:  mov    0x8(%rbx),%eax
    0.00 :   11902:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   11907:  mov    -0x78(%rbp),%rdx
    0.00 :   1190b:  test   %rdx,%rdx
    0.00 :   1190e:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   11914:  mov    -0x88(%rbp),%rsi
    0.00 :   1191b:  mov    0x10(%rbx),%rax
    0.00 :   1191f:  add    0x8(%rdx),%rax
    0.00 :   11923:  mov    %rax,(%rsi)
    0.00 :   11926:  mov    0x8(%rbx),%eax
    0.00 :   11929:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   1192e:  mov    0x10(%rbx),%rax
    0.00 :   11932:  mov    -0x88(%rbp),%rsi
    0.00 :   11939:  sub    %rsi,%rax
    0.00 :   1193c:  add    %r9,%rax
    0.00 :   1193f:  movslq %eax,%rdx
    0.00 :   11942:  mov    %eax,(%rsi)
    0.00 :   11944:  cmp    %rdx,%rax
    0.00 :   11947:  je     1172a <_dl_relocate_object+0x9ca>
    0.00 :   1194d:  lea    0x1f61c(%rip),%rdi        # 30f70 <__PRETTY_FUNCTION__.0+0x160>
    0.00 :   11954:  jmp    126e3 <_dl_relocate_object+0x1983>
    0.00 :   11959:  mov    -0x78(%rbp),%rdx
    0.00 :   1195d:  test   %rdx,%rdx
    0.00 :   11960:  je     12655 <_dl_relocate_object+0x18f5>
    0.00 :   11966:  mov    0x458(%r11),%rcx
    0.00 :   1196d:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   11971:  je     129b7 <_dl_relocate_object+0x1c57>
    0.00 :   11977:  test   %rcx,%rcx
    0.00 :   1197a:  je     12b8f <_dl_relocate_object+0x1e2f>
    0.00 :   11980:  mov    0x10(%rbx),%rax
    0.00 :   11984:  add    0x8(%rdx),%rax
    0.00 :   11988:  sub    %rcx,%rax
    0.00 :   1198b:  mov    -0x88(%rbp),%rcx
    0.00 :   11992:  mov    %rax,0x8(%rcx)
    0.00 :   11996:  lea    0x6763(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   1199d:  mov    %rax,(%rcx)
    0.00 :   119a0:  mov    0x8(%rbx),%eax
    0.00 :   119a3:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   119a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   119b0:  mov    %r13,%rdx
    0.00 :   119b3:  mov    %r15,%r11
    0.00 :   119b6:  movzwl 0x6(%rdx),%ecx
    0.00 :   119ba:  cmp    $0xfff1,%cx
    0.00 :   119be:  je     11b12 <_dl_relocate_object+0xdb2>
    0.00 :   119c4:  mov    (%r11),%r9
    0.00 :   119c7:  and    $0xf,%eax
    0.00 :   119ca:  add    0x8(%rdx),%r9
    0.00 :   119ce:  cmp    $0xa,%al
    0.00 :   119d0:  jne    1151a <_dl_relocate_object+0x7ba>
    0.00 :   119d6:  mov    -0xcc(%rbp),%eax
    0.00 :   119dc:  test   %eax,%eax
    0.00 :   119de:  jne    1151a <_dl_relocate_object+0x7ba>
    0.00 :   119e4:  test   %cx,%cx
    0.00 :   119e7:  je     1151a <_dl_relocate_object+0x7ba>
    0.00 :   119ed:  cmp    %r11,%r15
    0.00 :   119f0:  je     11a7f <_dl_relocate_object+0xd1f>
    0.00 :   119f6:  movzbl 0x31c(%r11),%eax
    0.00 :   119fe:  test   $0x4,%al
    0.00 :   11a00:  jne    11a7f <_dl_relocate_object+0xd1f>
    0.00 :   11a02:  mov    0x68(%r15),%rdx
    0.00 :   11a06:  mov    0x8(%rdx),%rdx
    0.00 :   11a0a:  testb  $0x20,0x31e(%r15)
    0.00 :   11a12:  je     11a17 <_dl_relocate_object+0xcb7>
    0.00 :   11a14:  add    (%r15),%rdx
    0.00 :   11a17:  mov    0x0(%r13),%ecx
    0.00 :   11a1b:  lea    (%rdx,%rcx,1),%r8
    0.00 :   11a1f:  mov    0x2809a(%rip),%rcx        # 39ac0 <_dl_argv>
    0.00 :   11a26:  mov    0x8(%r15),%rdx
    0.00 :   11a2a:  mov    (%rcx),%rsi
    0.00 :   11a2d:  test   $0x3,%al
    0.00 :   11a2f:  je     12e35 <_dl_relocate_object+0x20d5>
    0.00 :   11a35:  test   %rsi,%rsi
    0.00 :   11a38:  lea    0x1c561(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   11a3f:  mov    0x8(%r11),%rcx
    0.00 :   11a43:  lea    0x1f636(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   11a4a:  cmove  %rax,%rsi
    0.00 :   11a4e:  xor    %eax,%eax
    0.00 :   11a50:  mov    %r9,-0x100(%rbp)
    0.00 :   11a57:  mov    %r10,-0xf8(%rbp)
    0.00 :   11a5e:  mov    %r11,-0xb8(%rbp)
    0.00 :   11a65:  call   fe70 <_dl_error_printf>
    0.00 :   11a6a:  mov    -0x100(%rbp),%r9
    0.00 :   11a71:  mov    -0xf8(%rbp),%r10
    0.00 :   11a78:  mov    -0xb8(%rbp),%r11
    0.00 :   11a7f:  mov    %r11,-0xf8(%rbp)
    0.00 :   11a86:  mov    %r10,-0xb8(%rbp)
    0.00 :   11a8d:  call   *%r9
    0.00 :   11a90:  mov    -0xf8(%rbp),%r11
    0.00 :   11a97:  mov    -0xb8(%rbp),%r10
    0.00 :   11a9e:  mov    %rax,%r9
    0.00 :   11aa1:  cmp    $0x25,%r12
    0.00 :   11aa5:  jbe    11524 <_dl_relocate_object+0x7c4>
    0.00 :   11aab:  nopl   0x0(%rax,%rax,1)
    0.00 :   11ab0:  xor    %edx,%edx
    0.00 :   11ab2:  mov    %r14d,%esi
    0.00 :   11ab5:  mov    %r15,%rdi
    0.00 :   11ab8:  call   10c90 <_dl_reloc_bad_type>
    0.00 :   11abd:  nopl   (%rax)
    0.00 :   11ac0:  mov    -0xc0(%rbp),%rax
    0.00 :   11ac7:  mov    %rbx,-0xd8(%rbp)
    0.00 :   11ace:  test   %rax,%rax
    0.00 :   11ad1:  cmove  %rbx,%rax
    0.00 :   11ad5:  mov    %rax,-0xc0(%rbp)
    0.00 :   11adc:  jmp    11558 <_dl_relocate_object+0x7f8>
    0.00 :   11ae1:  nopl   0x0(%rax)
    0.00 :   11ae8:  mov    0x10(%rbx),%rax
    0.00 :   11aec:  add    (%r15),%rax
    0.00 :   11aef:  mov    %rax,(%rdi)
    0.00 :   11af2:  mov    0x8(%rbx),%eax
    0.00 :   11af5:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   11afa:  nopw   0x0(%rax,%rax,1)
    0.00 :   11b00:  movzwl 0x6(%rdx),%ecx
    0.00 :   11b04:  movzbl 0x4(%rdx),%eax
    0.00 :   11b08:  cmp    $0xfff1,%cx
    0.00 :   11b0c:  jne    119c4 <_dl_relocate_object+0xc64>
    0.00 :   11b12:  xor    %r9d,%r9d
    0.00 :   11b15:  jmp    119c7 <_dl_relocate_object+0xc67>
    0.00 :   11b1a:  nopw   0x0(%rax,%rax,1)
    0.00 :   11b20:  mov    %r15,%rcx
    0.00 :   11b23:  mov    %r10,%rdx
    0.00 :   11b26:  movzwl 0x6(%rdx),%esi
    0.00 :   11b2a:  mov    0x8(%rdx),%r9
    0.00 :   11b2e:  and    $0xf,%eax
    0.00 :   11b31:  cmp    $0xfff1,%si
    0.00 :   11b35:  je     126b9 <_dl_relocate_object+0x1959>
    0.00 :   11b3b:  mov    (%rcx),%rdx
    0.00 :   11b3e:  cmp    $0xa,%al
    0.00 :   11b40:  jne    116d8 <_dl_relocate_object+0x978>
    0.00 :   11b46:  test   %si,%si
    0.00 :   11b49:  je     116d8 <_dl_relocate_object+0x978>
    0.00 :   11b4f:  add    %rdx,%r9
    0.00 :   11b52:  mov    -0xcc(%rbp),%edi
    0.00 :   11b58:  test   %edi,%edi
    0.00 :   11b5a:  jne    12d3b <_dl_relocate_object+0x1fdb>
    0.00 :   11b60:  cmp    %rcx,%r15
    0.00 :   11b63:  je     11bcc <_dl_relocate_object+0xe6c>
    0.00 :   11b65:  movzbl 0x31c(%rcx),%eax
    0.00 :   11b6c:  test   $0x4,%al
    0.00 :   11b6e:  jne    11bcc <_dl_relocate_object+0xe6c>
    0.00 :   11b70:  mov    0x68(%r15),%rdx
    0.00 :   11b74:  mov    0x8(%rdx),%rdx
    0.00 :   11b78:  testb  $0x20,0x31e(%r15)
    0.00 :   11b80:  je     11b85 <_dl_relocate_object+0xe25>
    0.00 :   11b82:  add    (%r15),%rdx
    0.00 :   11b85:  mov    (%r10),%esi
    0.00 :   11b88:  lea    (%rdx,%rsi,1),%r8
    0.00 :   11b8c:  mov    0x27f2d(%rip),%rsi        # 39ac0 <_dl_argv>
    0.00 :   11b93:  mov    0x8(%r15),%rdx
    0.00 :   11b97:  mov    (%rsi),%rsi
    0.00 :   11b9a:  test   $0x3,%al
    0.00 :   11b9c:  je     12e35 <_dl_relocate_object+0x20d5>
    0.00 :   11ba2:  test   %rsi,%rsi
    0.00 :   11ba5:  lea    0x1c3f4(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   11bac:  mov    0x8(%rcx),%rcx
    0.00 :   11bb0:  mov    %r14,%rdi
    0.00 :   11bb3:  cmove  %rax,%rsi
    0.00 :   11bb7:  xor    %eax,%eax
    0.00 :   11bb9:  mov    %r9,-0xa8(%rbp)
    0.00 :   11bc0:  call   fe70 <_dl_error_printf>
    0.00 :   11bc5:  mov    -0xa8(%rbp),%r9
    0.00 :   11bcc:  call   *%r9
    0.00 :   11bcf:  mov    0x10(%rbx),%rax
    0.00 :   11bd3:  add    (%r15),%rax
    0.00 :   11bd6:  jmp    116e9 <_dl_relocate_object+0x989>
    0.00 :   11bdb:  nopl   0x0(%rax,%rax,1)
    0.00 :   11be0:  mov    %r15,%r8
    0.00 :   11be3:  mov    -0x88(%rbp),%rcx
    0.00 :   11bea:  xor    %esi,%esi
    0.00 :   11bec:  mov    %r15,%rdi
    0.00 :   11bef:  call   1b900 <_dl_audit_symbind>
    0.00 :   11bf4:  jmp    11558 <_dl_relocate_object+0x7f8>
    0.00 :   11bf9:  nopl   0x0(%rax)
    0.00 :   11c00:  mov    (%r11),%r10
    0.00 :   11c03:  jmp    10fba <_dl_relocate_object+0x25a>
    0.00 :   11c08:  mov    (%rbx),%rdx
    0.00 :   11c0b:  mov    (%r11),%rax
    0.00 :   11c0e:  add    $0x18,%rbx
    0.00 :   11c12:  add    -0x8(%rbx),%rax
    0.00 :   11c16:  mov    %rax,(%rdx,%r10,1)
    0.00 :   11c1a:  cmp    %rbx,%r15
    0.00 :   11c1d:  jb     110a5 <_dl_relocate_object+0x345>
    0.00 :   11c23:  cmpl   $0x25,0x8(%rbx)
    0.00 :   11c27:  je     11c08 <_dl_relocate_object+0xea8>
    0.00 :   11c29:  add    $0x18,%rbx
    0.00 :   11c2d:  cmp    %rbx,%r15
    0.00 :   11c30:  jae    11c23 <_dl_relocate_object+0xec3>
    0.00 :   11c32:  jmp    110a5 <_dl_relocate_object+0x345>
    0.00 :   11c37:  nopw   0x0(%rax,%rax,1)
    0.00 :   11c40:  mov    %r15,%r9
    0.00 :   11c43:  mov    %rsi,%rdx
    0.00 :   11c46:  movzwl 0x6(%rdx),%ecx
    0.00 :   11c4a:  cmp    $0xfff1,%cx
    0.00 :   11c4e:  je     12af8 <_dl_relocate_object+0x1d98>
    0.00 :   11c54:  mov    (%r9),%rdi
    0.00 :   11c57:  mov    %rdi,-0x98(%rbp)
    0.00 :   11c5e:  mov    0x8(%rdx),%rdi
    0.00 :   11c62:  and    $0xf,%eax
    0.00 :   11c65:  mov    %rdi,-0x90(%rbp)
    0.00 :   11c6c:  cmp    $0xa,%al
    0.00 :   11c6e:  je     129f2 <_dl_relocate_object+0x1c92>
    0.00 :   11c74:  mov    0x458(%r9),%rcx
    0.00 :   11c7b:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   11c7f:  je     12976 <_dl_relocate_object+0x1c16>
    0.00 :   11c85:  test   %rcx,%rcx
    0.00 :   11c88:  je     12daf <_dl_relocate_object+0x204f>
    0.00 :   11c8e:  mov    0x10(%r12),%rax
    0.00 :   11c93:  add    0x8(%rdx),%rax
    0.00 :   11c97:  sub    %rcx,%rax
    0.00 :   11c9a:  mov    %rax,0x8(%r13)
    0.00 :   11c9e:  lea    0x645b(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   11ca5:  mov    %rax,0x0(%r13)
    0.00 :   11ca9:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   11cae:  xchg   %ax,%ax
    0.00 :   11cb0:  mov    0x50(%r14),%rax
    0.00 :   11cb4:  test   %rax,%rax
    0.00 :   11cb7:  je     110df <_dl_relocate_object+0x37f>
    0.00 :   11cbd:  mov    0xe0(%r14),%rdx
    0.00 :   11cc4:  xor    %ecx,%ecx
    0.00 :   11cc6:  mov    0x8(%rax),%rax
    0.00 :   11cca:  mov    $0x20,%edi
    0.00 :   11ccf:  cmpq   $0x7,0x8(%rdx)
    0.00 :   11cd4:  sete   %cl
    0.00 :   11cd7:  xor    %edx,%edx
    0.00 :   11cd9:  lea    0x10(,%rcx,8),%rcx
    0.00 :   11ce1:  div    %rcx
    0.00 :   11ce4:  mov    %rax,%rsi
    0.00 :   11ce7:  call   *0x27d83(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   11ced:  mov    %rax,0x340(%r14)
    0.00 :   11cf4:  test   %rax,%rax
    0.00 :   11cf7:  jne    110df <_dl_relocate_object+0x37f>
    0.00 :   11cfd:  mov    0x27dbc(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   11d04:  mov    0x8(%r14),%rdx
    0.00 :   11d08:  mov    (%rax),%rsi
    0.00 :   11d0b:  test   %rsi,%rsi
    0.00 :   11d0e:  je     12e57 <_dl_relocate_object+0x20f7>
    0.00 :   11d14:  lea    0x1f3f5(%rip),%rdi        # 31110 <__PRETTY_FUNCTION__.0+0x300>
    0.00 :   11d1b:  xor    %eax,%eax
    0.00 :   11d1d:  call   ff20 <_dl_fatal_printf>
    0.00 :   11d22:  nopw   0x0(%rax,%rax,1)
    0.00 :   11d28:  cmp    $0x1d,%rax
    0.00 :   11d2c:  jbe    11e10 <_dl_relocate_object+0x10b0>
    0.00 :   11d32:  cmp    %r9d,0x418(%r15)
    0.00 :   11d39:  jne    11489 <_dl_relocate_object+0x729>
    0.00 :   11d3f:  mov    0x428(%r15),%rdx
    0.00 :   11d46:  addq   $0x1,0x28d92(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   11d4e:  mov    0x420(%r15),%r11
    0.00 :   11d55:  mov    %rdx,-0x78(%rbp)
    0.00 :   11d59:  jmp    1150e <_dl_relocate_object+0x7ae>
    0.00 :   11d5e:  xchg   %ax,%ax
    0.00 :   11d60:  movzbl 0x4(%rdx),%eax
    0.00 :   11d64:  jmp    11b26 <_dl_relocate_object+0xdc6>
    0.00 :   11d69:  nopl   0x0(%rax)
    0.00 :   11d70:  xor    %edi,%edi
    0.00 :   11d72:  xor    %esi,%esi
    0.00 :   11d74:  xor    %edx,%edx
    0.00 :   11d76:  jmp    10f2d <_dl_relocate_object+0x1cd>
    0.00 :   11d7b:  nopl   0x0(%rax,%rax,1)
    0.00 :   11d80:  cmpq   $0x0,0x240(%r11)
    0.00 :   11d88:  jne    11348 <_dl_relocate_object+0x5e8>
    0.00 :   11d8e:  jmp    1130c <_dl_relocate_object+0x5ac>
    0.00 :   11d93:  nopl   0x0(%rax,%rax,1)
    0.00 :   11d98:  mov    (%r11),%rsi
    0.00 :   11d9b:  add    %rsi,%rax
    0.00 :   11d9e:  mov    %rax,-0xa0(%rbp)
    0.00 :   11da5:  jmp    11378 <_dl_relocate_object+0x618>
    0.00 :   11daa:  nopw   0x0(%rax,%rax,1)
    0.00 :   11db0:  mov    0x27d41(%rip),%rdx        # 39af8 <_rtld_global_ro+0x18>
    0.00 :   11db7:  mov    0x470(%r14),%rcx
    0.00 :   11dbe:  add    (%r14),%rcx
    0.00 :   11dc1:  neg    %rdx
    0.00 :   11dc4:  mov    %rcx,%rdi
    0.00 :   11dc7:  add    %rcx,%rax
    0.00 :   11dca:  and    %rdx,%rdi
    0.00 :   11dcd:  and    %rdx,%rax
    0.00 :   11dd0:  cmp    %rax,%rdi
    0.00 :   11dd3:  je     11105 <_dl_relocate_object+0x3a5>
    0.00 :   11dd9:  sub    %rdi,%rax
    0.00 :   11ddc:  mov    $0x1,%edx
    0.00 :   11de1:  mov    %rax,%rsi
    0.00 :   11de4:  call   26d20 <__GI___mprotect>
    0.00 :   11de9:  test   %eax,%eax
    0.00 :   11deb:  jns    11105 <_dl_relocate_object+0x3a5>
    0.00 :   11df1:  mov    0x8(%r14),%rsi
    0.00 :   11df5:  mov    0x294a5(%rip),%edi        # 3b2a0 <rtld_errno>
    0.00 :   11dfb:  lea    0x2113e(%rip),%rcx        # 32f40 <errstring.1>
    0.00 :   11e02:  xor    %edx,%edx
    0.00 :   11e04:  call   2070 <_dl_signal_error@plt>
    0.00 :   11e09:  nopl   0x0(%rax)
    0.00 :   11e10:  lea    0x1a449(%rip),%rdx        # 2c260 <CSWTCH.111>
    0.00 :   11e17:  mov    (%rdx,%rax,4),%esi
    0.00 :   11e1a:  or     %r9d,%esi
    0.00 :   11e1d:  cmp    %esi,0x418(%r15)
    0.00 :   11e24:  jne    1147e <_dl_relocate_object+0x71e>
    0.00 :   11e2a:  jmp    11d3f <_dl_relocate_object+0xfdf>
    0.00 :   11e2f:  add    (%r14),%rdx
    0.00 :   11e32:  lea    0x18(%rax),%rcx
    0.00 :   11e36:  movq   %rdx,%xmm0
    0.00 :   11e3b:  movq   %rcx,%xmm6
    0.00 :   11e40:  punpcklqdq %xmm6,%xmm0
    0.00 :   11e44:  movups %xmm0,0x3f8(%r14)
    0.00 :   11e4c:  jmp    10e7c <_dl_relocate_object+0x11c>
    0.00 :   11e51:  lea    0x3d88(%rip),%rsi        # 15be0 <_dl_runtime_resolve_fxsave>
    0.00 :   11e58:  mov    $0x1,%r13d
    0.00 :   11e5e:  mov    %rsi,0x10(%rax)
    0.00 :   11e62:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   11e67:  add    %rsi,%rax
    0.00 :   11e6a:  mov    %rax,-0x68(%rbp)
    0.00 :   11e6e:  jmp    10f92 <_dl_relocate_object+0x232>
    0.00 :   11e73:  nopl   0x0(%rax,%rax,1)
    0.00 :   11e78:  movq   $0x0,-0xb8(%rbp)
    0.00 :   11e83:  cmp    %rbx,-0x98(%rbp)
    0.00 :   11e8a:  jbe    110a5 <_dl_relocate_object+0x345>
    0.00 :   11e90:  mov    %r10,-0x88(%rbp)
    0.00 :   11e97:  mov    %r11,%r15
    0.00 :   11e9a:  nopw   0x0(%rax,%rax,1)
    0.00 :   11ea0:  mov    0x8(%rbx),%r14
    0.00 :   11ea4:  mov    -0x90(%rbp),%rcx
    0.00 :   11eab:  mov    -0x88(%rbp),%r10
    0.00 :   11eb2:  add    (%rbx),%r10
    0.00 :   11eb5:  mov    %r14,%rax
    0.00 :   11eb8:  mov    %r14d,%r12d
    0.00 :   11ebb:  shr    $0x20,%rax
    0.00 :   11ebf:  lea    (%rax,%rax,2),%rax
    0.00 :   11ec3:  lea    (%rcx,%rax,8),%r13
    0.00 :   11ec7:  mov    %r13,-0x80(%rbp)
    0.00 :   11ecb:  cmp    $0x25,%r14d
    0.00 :   11ecf:  je     12520 <_dl_relocate_object+0x17c0>
    0.00 :   11ed5:  mov    %r13,-0x78(%rbp)
    0.00 :   11ed9:  cmp    $0x8,%r12
    0.00 :   11edd:  je     12548 <_dl_relocate_object+0x17e8>
    0.00 :   11ee3:  cmp    $0x26,%r12
    0.00 :   11ee7:  je     12548 <_dl_relocate_object+0x17e8>
    0.00 :   11eed:  test   %r12,%r12
    0.00 :   11ef0:  je     12014 <_dl_relocate_object+0x12b4>
    0.00 :   11ef6:  movzbl 0x4(%r13),%eax
    0.00 :   11efb:  mov    %eax,%edi
    0.00 :   11efd:  shr    $0x4,%dil
    0.00 :   11f01:  je     12410 <_dl_relocate_object+0x16b0>
    0.00 :   11f07:  movzbl 0x5(%r13),%edx
    0.00 :   11f0c:  and    $0x3,%edx
    0.00 :   11f0f:  sub    $0x1,%edx
    0.00 :   11f12:  cmp    $0x1,%edx
    0.00 :   11f15:  jbe    12410 <_dl_relocate_object+0x16b0>
    0.00 :   11f1b:  xor    %r9d,%r9d
    0.00 :   11f1e:  cmp    $0x6,%r12
    0.00 :   11f22:  lea    -0x7(%r12),%rdx
    0.00 :   11f27:  sete   %r9b
    0.00 :   11f2b:  xor    %eax,%eax
    0.00 :   11f2d:  shl    $0x2,%r9d
    0.00 :   11f31:  cmp    $0x5,%r12
    0.00 :   11f35:  sete   %al
    0.00 :   11f38:  add    %eax,%eax
    0.00 :   11f3a:  or     %eax,%r9d
    0.00 :   11f3d:  cmp    0x410(%r15),%r13
    0.00 :   11f44:  je     12676 <_dl_relocate_object+0x1916>
    0.00 :   11f4a:  cmp    $0x1d,%rdx
    0.00 :   11f4e:  ja     11f5b <_dl_relocate_object+0x11fb>
    0.00 :   11f50:  lea    0x1a309(%rip),%rax        # 2c260 <CSWTCH.111>
    0.00 :   11f57:  or     (%rax,%rdx,4),%r9d
    0.00 :   11f5b:  mov    0x68(%r15),%rax
    0.00 :   11f5f:  mov    0x0(%r13),%edi
    0.00 :   11f63:  mov    %r9d,0x418(%r15)
    0.00 :   11f6a:  mov    %r13,0x410(%r15)
    0.00 :   11f71:  mov    0x8(%rax),%rcx
    0.00 :   11f75:  xor    %eax,%eax
    0.00 :   11f77:  testb  $0x20,0x31e(%r15)
    0.00 :   11f7f:  je     11f84 <_dl_relocate_object+0x1224>
    0.00 :   11f81:  mov    (%r15),%rax
    0.00 :   11f84:  push   $0x0
    0.00 :   11f86:  add    %rcx,%rdi
    0.00 :   11f89:  mov    -0xb0(%rbp),%rcx
    0.00 :   11f90:  lea    -0x78(%rbp),%rdx
    0.00 :   11f94:  push   $0x9
    0.00 :   11f96:  add    %rax,%rdi
    0.00 :   11f99:  xor    %r8d,%r8d
    0.00 :   11f9c:  mov    %r15,%rsi
    0.00 :   11f9f:  mov    %r10,-0xa8(%rbp)
    0.00 :   11fa6:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   11fab:  mov    -0x78(%rbp),%rdx
    0.00 :   11faf:  mov    -0xa8(%rbp),%r10
    0.00 :   11fb6:  movq   %rax,%xmm0
    0.00 :   11fbb:  mov    %rax,%r11
    0.00 :   11fbe:  movq   %rdx,%xmm2
    0.00 :   11fc3:  punpcklqdq %xmm2,%xmm0
    0.00 :   11fc7:  movups %xmm0,0x420(%r15)
    0.00 :   11fcf:  pop    %rax
    0.00 :   11fd0:  pop    %rcx
    0.00 :   11fd1:  xor    %r9d,%r9d
    0.00 :   11fd4:  test   %rdx,%rdx
    0.00 :   11fd7:  jne    12560 <_dl_relocate_object+0x1800>
    0.00 :   11fdd:  cmp    $0x25,%r12
    0.00 :   11fe1:  ja     12510 <_dl_relocate_object+0x17b0>
    0.00 :   11fe7:  lea    0x1a1ca(%rip),%rcx        # 2c1b8 <primes.0+0x118>
    0.00 :   11fee:  movslq (%rcx,%r12,4),%rax
    0.00 :   11ff2:  add    %rcx,%rax
    0.00 :   11ff5:  notrack jmp *%rax
    0.00 :   11ff8:  mov    -0x78(%rbp),%rax
    0.00 :   11ffc:  mov    0x10(%rax),%r9
    0.00 :   12000:  add    0x10(%rbx),%r9
    0.00 :   12004:  mov    %r9,(%r10)
    0.00 :   12007:  mov    0x8(%rbx),%eax
    0.00 :   1200a:  cmp    $0x7,%rax
    0.00 :   1200e:  je     12188 <_dl_relocate_object+0x1428>
    0.00 :   12014:  add    $0x18,%rbx
    0.00 :   12018:  cmp    %rbx,-0x98(%rbp)
    0.00 :   1201f:  ja     11ea0 <_dl_relocate_object+0x1140>
    0.00 :   12025:  mov    -0xa0(%rbp),%rbx
    0.00 :   1202c:  mov    %r15,%r11
    0.00 :   1202f:  test   %rbx,%rbx
    0.00 :   12032:  je     110a5 <_dl_relocate_object+0x345>
    0.00 :   12038:  mov    -0xb8(%rbp),%r12
    0.00 :   1203f:  cmp    %r12,%rbx
    0.00 :   12042:  ja     110a5 <_dl_relocate_object+0x345>
    0.00 :   12048:  lea    0x1f031(%rip),%r13        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   1204f:  jmp    12065 <_dl_relocate_object+0x1305>
    0.00 :   12051:  nopl   0x0(%rax)
    0.00 :   12058:  add    $0x18,%rbx
    0.00 :   1205c:  cmp    %r12,%rbx
    0.00 :   1205f:  ja     11702 <_dl_relocate_object+0x9a2>
    0.00 :   12065:  mov    0x8(%rbx),%rax
    0.00 :   12069:  cmp    $0x25,%eax
    0.00 :   1206c:  jne    12058 <_dl_relocate_object+0x12f8>
    0.00 :   1206e:  shr    $0x20,%rax
    0.00 :   12072:  mov    -0x90(%rbp),%rsi
    0.00 :   12079:  mov    -0x88(%rbp),%r14
    0.00 :   12080:  lea    (%rax,%rax,2),%rax
    0.00 :   12084:  add    (%rbx),%r14
    0.00 :   12087:  lea    (%rsi,%rax,8),%r10
    0.00 :   1208b:  mov    %r10,-0x78(%rbp)
    0.00 :   1208f:  movzbl 0x4(%r10),%eax
    0.00 :   12094:  mov    %eax,%edi
    0.00 :   12096:  shr    $0x4,%dil
    0.00 :   1209a:  je     12580 <_dl_relocate_object+0x1820>
    0.00 :   120a0:  movzbl 0x5(%r10),%edx
    0.00 :   120a5:  and    $0x3,%edx
    0.00 :   120a8:  sub    $0x1,%edx
    0.00 :   120ab:  cmp    $0x1,%edx
    0.00 :   120ae:  jbe    12580 <_dl_relocate_object+0x1820>
    0.00 :   120b4:  cmp    0x410(%r15),%r10
    0.00 :   120bb:  je     12b60 <_dl_relocate_object+0x1e00>
    0.00 :   120c1:  mov    0x68(%r15),%rax
    0.00 :   120c5:  mov    (%r10),%edi
    0.00 :   120c8:  mov    %r10,0x410(%r15)
    0.00 :   120cf:  movl   $0x0,0x418(%r15)
    0.00 :   120da:  mov    0x8(%rax),%rcx
    0.00 :   120de:  xor    %eax,%eax
    0.00 :   120e0:  testb  $0x20,0x31e(%r15)
    0.00 :   120e8:  je     120ed <_dl_relocate_object+0x138d>
    0.00 :   120ea:  mov    (%r15),%rax
    0.00 :   120ed:  push   $0x0
    0.00 :   120ef:  add    %rcx,%rdi
    0.00 :   120f2:  mov    -0xb0(%rbp),%rcx
    0.00 :   120f9:  lea    -0x78(%rbp),%rdx
    0.00 :   120fd:  push   $0x9
    0.00 :   120ff:  add    %rax,%rdi
    0.00 :   12102:  xor    %r8d,%r8d
    0.00 :   12105:  xor    %r9d,%r9d
    0.00 :   12108:  mov    %r15,%rsi
    0.00 :   1210b:  mov    %r10,-0x98(%rbp)
    0.00 :   12112:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   12117:  mov    -0x78(%rbp),%rdx
    0.00 :   1211b:  mov    -0x98(%rbp),%r10
    0.00 :   12122:  movq   %rax,%xmm0
    0.00 :   12127:  mov    %rax,%rcx
    0.00 :   1212a:  movq   %rdx,%xmm7
    0.00 :   1212f:  punpcklqdq %xmm7,%xmm0
    0.00 :   12133:  movups %xmm0,0x420(%r15)
    0.00 :   1213b:  pop    %rdi
    0.00 :   1213c:  pop    %r8
    0.00 :   1213e:  test   %rdx,%rdx
    0.00 :   12141:  jne    126d3 <_dl_relocate_object+0x1973>
    0.00 :   12147:  mov    -0xcc(%rbp),%edx
    0.00 :   1214d:  mov    0x10(%rbx),%rax
    0.00 :   12151:  add    (%r15),%rax
    0.00 :   12154:  test   %edx,%edx
    0.00 :   12156:  jne    1215a <_dl_relocate_object+0x13fa>
    0.00 :   12158:  call   *%rax
    0.00 :   1215a:  mov    %rax,(%r14)
    0.00 :   1215d:  jmp    12058 <_dl_relocate_object+0x12f8>
    0.00 :   12162:  mov    -0x78(%rbp),%rax
    0.00 :   12166:  mov    0x10(%rax),%r9
    0.00 :   1216a:  add    0x10(%rbx),%r9
    0.00 :   1216e:  mov    %r9d,(%r10)
    0.00 :   12171:  shr    $0x20,%r9
    0.00 :   12175:  jne    12b15 <_dl_relocate_object+0x1db5>
    0.00 :   1217b:  mov    0x8(%rbx),%eax
    0.00 :   1217e:  cmp    $0x7,%rax
    0.00 :   12182:  jne    12014 <_dl_relocate_object+0x12b4>
    0.00 :   12188:  mov    0x27ce9(%rip),%r12d        # 39e78 <_rtld_global_ro+0x398>
    0.00 :   1218f:  test   %r12d,%r12d
    0.00 :   12192:  je     12014 <_dl_relocate_object+0x12b4>
    0.00 :   12198:  mov    -0x80(%rbp),%rdx
    0.00 :   1219c:  movzbl 0x4(%rdx),%eax
    0.00 :   121a0:  shr    $0x4,%al
    0.00 :   121a3:  je     12640 <_dl_relocate_object+0x18e0>
    0.00 :   121a9:  movzbl 0x5(%rdx),%eax
    0.00 :   121ad:  and    $0x3,%eax
    0.00 :   121b0:  sub    $0x1,%eax
    0.00 :   121b3:  cmp    $0x1,%eax
    0.00 :   121b6:  jbe    12640 <_dl_relocate_object+0x18e0>
    0.00 :   121bc:  cmp    0x410(%r15),%rdx
    0.00 :   121c3:  je     12bfd <_dl_relocate_object+0x1e9d>
    0.00 :   121c9:  mov    0x68(%r15),%rax
    0.00 :   121cd:  mov    (%rdx),%edi
    0.00 :   121cf:  mov    %rdx,0x410(%r15)
    0.00 :   121d6:  movl   $0x1,0x418(%r15)
    0.00 :   121e1:  mov    0x8(%rax),%rcx
    0.00 :   121e5:  xor    %eax,%eax
    0.00 :   121e7:  testb  $0x20,0x31e(%r15)
    0.00 :   121ef:  je     121f4 <_dl_relocate_object+0x1494>
    0.00 :   121f1:  mov    (%r15),%rax
    0.00 :   121f4:  push   $0x0
    0.00 :   121f6:  add    %rcx,%rdi
    0.00 :   121f9:  mov    -0xb0(%rbp),%rcx
    0.00 :   12200:  lea    -0x80(%rbp),%rdx
    0.00 :   12204:  push   $0x9
    0.00 :   12206:  xor    %r8d,%r8d
    0.00 :   12209:  add    %rax,%rdi
    0.00 :   1220c:  mov    $0x1,%r9d
    0.00 :   12212:  mov    %r15,%rsi
    0.00 :   12215:  mov    %r10,-0xa8(%rbp)
    0.00 :   1221c:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   12221:  mov    -0x80(%rbp),%rdx
    0.00 :   12225:  movq   %rax,%xmm0
    0.00 :   1222a:  mov    %rax,%r8
    0.00 :   1222d:  movq   %rdx,%xmm5
    0.00 :   12232:  punpcklqdq %xmm5,%xmm0
    0.00 :   12236:  movups %xmm0,0x420(%r15)
    0.00 :   1223e:  pop    %r10
    0.00 :   12240:  pop    %r11
    0.00 :   12242:  mov    -0xa8(%rbp),%r10
    0.00 :   12249:  test   %rdx,%rdx
    0.00 :   1224c:  je     12014 <_dl_relocate_object+0x12b4>
    0.00 :   12252:  jmp    12643 <_dl_relocate_object+0x18e3>
    0.00 :   12257:  nopw   0x0(%rax,%rax,1)
    0.00 :   12260:  test   %r11,%r11
    0.00 :   12263:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   12269:  mov    0x460(%r11),%rax
    0.00 :   12270:  mov    %rax,(%r10)
    0.00 :   12273:  mov    0x8(%rbx),%eax
    0.00 :   12276:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   1227b:  mov    -0x78(%rbp),%rcx
    0.00 :   1227f:  test   %rcx,%rcx
    0.00 :   12282:  je     1288c <_dl_relocate_object+0x1b2c>
    0.00 :   12288:  mov    0x458(%r11),%rdx
    0.00 :   1228f:  cmp    $0xffffffffffffffff,%rdx
    0.00 :   12293:  je     12c92 <_dl_relocate_object+0x1f32>
    0.00 :   12299:  test   %rdx,%rdx
    0.00 :   1229c:  je     12cfa <_dl_relocate_object+0x1f9a>
    0.00 :   122a2:  mov    0x10(%rbx),%rax
    0.00 :   122a6:  add    0x8(%rcx),%rax
    0.00 :   122aa:  sub    %rdx,%rax
    0.00 :   122ad:  mov    %rax,0x8(%r10)
    0.00 :   122b1:  lea    0x5e48(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   122b8:  mov    %rax,(%r10)
    0.00 :   122bb:  mov    0x8(%rbx),%eax
    0.00 :   122be:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   122c3:  mov    -0x78(%rbp),%rax
    0.00 :   122c7:  test   %rax,%rax
    0.00 :   122ca:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   122d0:  mov    0x458(%r11),%rdx
    0.00 :   122d7:  lea    0x1(%rdx),%rcx
    0.00 :   122db:  cmp    $0x1,%rcx
    0.00 :   122df:  jbe    12cc6 <_dl_relocate_object+0x1f66>
    0.00 :   122e5:  mov    0x8(%rax),%rax
    0.00 :   122e9:  sub    %rdx,%rax
    0.00 :   122ec:  add    0x10(%rbx),%rax
    0.00 :   122f0:  mov    %rax,(%r10)
    0.00 :   122f3:  mov    0x8(%rbx),%eax
    0.00 :   122f6:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   122fb:  mov    -0x78(%rbp),%rdx
    0.00 :   122ff:  test   %rdx,%rdx
    0.00 :   12302:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   12308:  mov    0x10(%rbx),%rax
    0.00 :   1230c:  add    0x8(%rdx),%rax
    0.00 :   12310:  mov    %rax,(%r10)
    0.00 :   12313:  mov    0x8(%rbx),%eax
    0.00 :   12316:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   1231b:  mov    0x10(%rbx),%rax
    0.00 :   1231f:  sub    %r10,%rax
    0.00 :   12322:  add    %r9,%rax
    0.00 :   12325:  movslq %eax,%rdx
    0.00 :   12328:  mov    %eax,(%r10)
    0.00 :   1232b:  cmp    %rdx,%rax
    0.00 :   1232e:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   12334:  lea    0x1ec35(%rip),%rdi        # 30f70 <__PRETTY_FUNCTION__.0+0x160>
    0.00 :   1233b:  mov    0x68(%r15),%rax
    0.00 :   1233f:  mov    0x8(%rax),%rax
    0.00 :   12343:  testb  $0x20,0x31e(%r15)
    0.00 :   1234b:  je     12350 <_dl_relocate_object+0x15f0>
    0.00 :   1234d:  add    (%r15),%rax
    0.00 :   12350:  mov    0x0(%r13),%edx
    0.00 :   12354:  mov    %r10,-0xa8(%rbp)
    0.00 :   1235b:  add    %rax,%rdx
    0.00 :   1235e:  mov    0x2775b(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   12365:  mov    (%rax),%rsi
    0.00 :   12368:  lea    0x1bc31(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1236f:  test   %rsi,%rsi
    0.00 :   12372:  cmove  %rax,%rsi
    0.00 :   12376:  xor    %eax,%eax
    0.00 :   12378:  call   fe70 <_dl_error_printf>
    0.00 :   1237d:  mov    0x8(%rbx),%eax
    0.00 :   12380:  mov    -0xa8(%rbp),%r10
    0.00 :   12387:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   1238c:  mov    -0xcc(%rbp),%r13d
    0.00 :   12393:  mov    0x10(%rbx),%rax
    0.00 :   12397:  add    (%r15),%rax
    0.00 :   1239a:  test   %r13d,%r13d
    0.00 :   1239d:  jne    123af <_dl_relocate_object+0x164f>
    0.00 :   1239f:  mov    %r10,-0xa8(%rbp)
    0.00 :   123a6:  call   *%rax
    0.00 :   123a8:  mov    -0xa8(%rbp),%r10
    0.00 :   123af:  mov    %rax,(%r10)
    0.00 :   123b2:  jmp    1217b <_dl_relocate_object+0x141b>
    0.00 :   123b7:  mov    -0x78(%rbp),%r12
    0.00 :   123bb:  test   %r12,%r12
    0.00 :   123be:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   123c4:  mov    0x10(%r13),%rax
    0.00 :   123c8:  mov    0x10(%r12),%rdx
    0.00 :   123cd:  mov    %r10,%rdi
    0.00 :   123d0:  mov    %r9,%rsi
    0.00 :   123d3:  cmp    %rdx,%rax
    0.00 :   123d6:  cmovbe %rax,%rdx
    0.00 :   123da:  call   2afb0 <memcpy>
    0.00 :   123df:  mov    %rax,%r10
    0.00 :   123e2:  mov    0x10(%r13),%rax
    0.00 :   123e6:  cmp    %rax,0x10(%r12)
    0.00 :   123eb:  ja     12403 <_dl_relocate_object+0x16a3>
    0.00 :   123ed:  jae    1217b <_dl_relocate_object+0x141b>
    0.00 :   123f3:  mov    0x2772a(%rip),%r14d        # 39b24 <_rtld_global_ro+0x44>
    0.00 :   123fa:  test   %r14d,%r14d
    0.00 :   123fd:  je     1217b <_dl_relocate_object+0x141b>
    0.00 :   12403:  lea    0x1eba6(%rip),%rdi        # 30fb0 <__PRETTY_FUNCTION__.0+0x1a0>
    0.00 :   1240a:  jmp    1233b <_dl_relocate_object+0x15db>
    0.00 :   1240f:  nop
    0.00 :   12410:  mov    %r13,%rdx
    0.00 :   12413:  mov    %r15,%r11
    0.00 :   12416:  movzwl 0x6(%rdx),%ecx
    0.00 :   1241a:  cmp    $0xfff1,%cx
    0.00 :   1241e:  je     12572 <_dl_relocate_object+0x1812>
    0.00 :   12424:  mov    (%r11),%r9
    0.00 :   12427:  and    $0xf,%eax
    0.00 :   1242a:  add    0x8(%rdx),%r9
    0.00 :   1242e:  cmp    $0xa,%al
    0.00 :   12430:  jne    11fdd <_dl_relocate_object+0x127d>
    0.00 :   12436:  mov    -0xcc(%rbp),%eax
    0.00 :   1243c:  test   %eax,%eax
    0.00 :   1243e:  jne    11fdd <_dl_relocate_object+0x127d>
    0.00 :   12444:  test   %cx,%cx
    0.00 :   12447:  je     11fdd <_dl_relocate_object+0x127d>
    0.00 :   1244d:  cmp    %r11,%r15
    0.00 :   12450:  je     124df <_dl_relocate_object+0x177f>
    0.00 :   12456:  movzbl 0x31c(%r11),%eax
    0.00 :   1245e:  test   $0x4,%al
    0.00 :   12460:  jne    124df <_dl_relocate_object+0x177f>
    0.00 :   12462:  mov    0x68(%r15),%rdx
    0.00 :   12466:  mov    0x8(%rdx),%rdx
    0.00 :   1246a:  testb  $0x20,0x31e(%r15)
    0.00 :   12472:  je     12477 <_dl_relocate_object+0x1717>
    0.00 :   12474:  add    (%r15),%rdx
    0.00 :   12477:  mov    0x0(%r13),%ecx
    0.00 :   1247b:  lea    (%rdx,%rcx,1),%r8
    0.00 :   1247f:  mov    0x2763a(%rip),%rcx        # 39ac0 <_dl_argv>
    0.00 :   12486:  mov    0x8(%r15),%rdx
    0.00 :   1248a:  mov    (%rcx),%rsi
    0.00 :   1248d:  test   $0x3,%al
    0.00 :   1248f:  je     12e35 <_dl_relocate_object+0x20d5>
    0.00 :   12495:  test   %rsi,%rsi
    0.00 :   12498:  lea    0x1bb01(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1249f:  mov    0x8(%r11),%rcx
    0.00 :   124a3:  lea    0x1ebd6(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   124aa:  cmove  %rax,%rsi
    0.00 :   124ae:  xor    %eax,%eax
    0.00 :   124b0:  mov    %r9,-0xd8(%rbp)
    0.00 :   124b7:  mov    %r10,-0xc0(%rbp)
    0.00 :   124be:  mov    %r11,-0xa8(%rbp)
    0.00 :   124c5:  call   fe70 <_dl_error_printf>
    0.00 :   124ca:  mov    -0xd8(%rbp),%r9
    0.00 :   124d1:  mov    -0xc0(%rbp),%r10
    0.00 :   124d8:  mov    -0xa8(%rbp),%r11
    0.00 :   124df:  mov    %r11,-0xc0(%rbp)
    0.00 :   124e6:  mov    %r10,-0xa8(%rbp)
    0.00 :   124ed:  call   *%r9
    0.00 :   124f0:  mov    -0xc0(%rbp),%r11
    0.00 :   124f7:  mov    -0xa8(%rbp),%r10
    0.00 :   124fe:  mov    %rax,%r9
    0.00 :   12501:  cmp    $0x25,%r12
    0.00 :   12505:  jbe    11fe7 <_dl_relocate_object+0x1287>
    0.00 :   1250b:  nopl   0x0(%rax,%rax,1)
    0.00 :   12510:  xor    %edx,%edx
    0.00 :   12512:  mov    %r14d,%esi
    0.00 :   12515:  mov    %r15,%rdi
    0.00 :   12518:  call   10c90 <_dl_reloc_bad_type>
    0.00 :   1251d:  nopl   (%rax)
    0.00 :   12520:  mov    -0xa0(%rbp),%rax
    0.00 :   12527:  mov    %rbx,-0xb8(%rbp)
    0.00 :   1252e:  test   %rax,%rax
    0.00 :   12531:  cmove  %rbx,%rax
    0.00 :   12535:  mov    %rax,-0xa0(%rbp)
    0.00 :   1253c:  jmp    12014 <_dl_relocate_object+0x12b4>
    0.00 :   12541:  nopl   0x0(%rax)
    0.00 :   12548:  mov    0x10(%rbx),%rax
    0.00 :   1254c:  add    (%r15),%rax
    0.00 :   1254f:  mov    %rax,(%r10)
    0.00 :   12552:  mov    0x8(%rbx),%eax
    0.00 :   12555:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   1255a:  nopw   0x0(%rax,%rax,1)
    0.00 :   12560:  movzwl 0x6(%rdx),%ecx
    0.00 :   12564:  movzbl 0x4(%rdx),%eax
    0.00 :   12568:  cmp    $0xfff1,%cx
    0.00 :   1256c:  jne    12424 <_dl_relocate_object+0x16c4>
    0.00 :   12572:  xor    %r9d,%r9d
    0.00 :   12575:  jmp    12427 <_dl_relocate_object+0x16c7>
    0.00 :   1257a:  nopw   0x0(%rax,%rax,1)
    0.00 :   12580:  mov    %r15,%rcx
    0.00 :   12583:  mov    %r10,%rdx
    0.00 :   12586:  movzwl 0x6(%rdx),%esi
    0.00 :   1258a:  mov    0x8(%rdx),%r9
    0.00 :   1258e:  and    $0xf,%eax
    0.00 :   12591:  cmp    $0xfff1,%si
    0.00 :   12595:  je     12b08 <_dl_relocate_object+0x1da8>
    0.00 :   1259b:  mov    (%rcx),%rdx
    0.00 :   1259e:  cmp    $0xa,%al
    0.00 :   125a0:  jne    12147 <_dl_relocate_object+0x13e7>
    0.00 :   125a6:  test   %si,%si
    0.00 :   125a9:  je     12147 <_dl_relocate_object+0x13e7>
    0.00 :   125af:  add    %rdx,%r9
    0.00 :   125b2:  mov    -0xcc(%rbp),%esi
    0.00 :   125b8:  test   %esi,%esi
    0.00 :   125ba:  jne    12d47 <_dl_relocate_object+0x1fe7>
    0.00 :   125c0:  cmp    %rcx,%r15
    0.00 :   125c3:  je     1262f <_dl_relocate_object+0x18cf>
    0.00 :   125c5:  movzbl 0x31c(%rcx),%edi
    0.00 :   125cc:  test   $0x4,%dil
    0.00 :   125d0:  jne    1262f <_dl_relocate_object+0x18cf>
    0.00 :   125d2:  mov    0x68(%r15),%rax
    0.00 :   125d6:  mov    0x8(%rax),%rax
    0.00 :   125da:  testb  $0x20,0x31e(%r15)
    0.00 :   125e2:  je     125e7 <_dl_relocate_object+0x1887>
    0.00 :   125e4:  add    (%r15),%rax
    0.00 :   125e7:  mov    (%r10),%edx
    0.00 :   125ea:  and    $0x3,%edi
    0.00 :   125ed:  lea    (%rax,%rdx,1),%r8
    0.00 :   125f1:  mov    0x274c8(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   125f8:  mov    0x8(%r15),%rdx
    0.00 :   125fc:  mov    (%rax),%rsi
    0.00 :   125ff:  je     12e35 <_dl_relocate_object+0x20d5>
    0.00 :   12605:  test   %rsi,%rsi
    0.00 :   12608:  lea    0x1b991(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1260f:  mov    0x8(%rcx),%rcx
    0.00 :   12613:  mov    %r13,%rdi
    0.00 :   12616:  cmove  %rax,%rsi
    0.00 :   1261a:  xor    %eax,%eax
    0.00 :   1261c:  mov    %r9,-0x98(%rbp)
    0.00 :   12623:  call   fe70 <_dl_error_printf>
    0.00 :   12628:  mov    -0x98(%rbp),%r9
    0.00 :   1262f:  call   *%r9
    0.00 :   12632:  mov    0x10(%rbx),%rax
    0.00 :   12636:  add    (%r15),%rax
    0.00 :   12639:  jmp    12158 <_dl_relocate_object+0x13f8>
    0.00 :   1263e:  xchg   %ax,%ax
    0.00 :   12640:  mov    %r15,%r8
    0.00 :   12643:  mov    %r10,%rcx
    0.00 :   12646:  xor    %esi,%esi
    0.00 :   12648:  mov    %r15,%rdi
    0.00 :   1264b:  call   1b900 <_dl_audit_symbind>
    0.00 :   12650:  jmp    12014 <_dl_relocate_object+0x12b4>
    0.00 :   12655:  mov    0x10(%rbx),%rax
    0.00 :   12659:  mov    -0x88(%rbp),%rcx
    0.00 :   12660:  mov    %rax,0x8(%rcx)
    0.00 :   12664:  lea    0x5aa5(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   1266b:  mov    %rax,(%rcx)
    0.00 :   1266e:  mov    0x8(%rbx),%eax
    0.00 :   12671:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   12676:  cmp    $0x1d,%rdx
    0.00 :   1267a:  ja     1291a <_dl_relocate_object+0x1bba>
    0.00 :   12680:  lea    0x19bd9(%rip),%rax        # 2c260 <CSWTCH.111>
    0.00 :   12687:  mov    (%rax,%rdx,4),%edi
    0.00 :   1268a:  or     %r9d,%edi
    0.00 :   1268d:  cmp    0x418(%r15),%edi
    0.00 :   12694:  jne    11f50 <_dl_relocate_object+0x11f0>
    0.00 :   1269a:  mov    0x428(%r15),%rdx
    0.00 :   126a1:  addq   $0x1,0x28437(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   126a9:  mov    0x420(%r15),%r11
    0.00 :   126b0:  mov    %rdx,-0x78(%rbp)
    0.00 :   126b4:  jmp    11fd1 <_dl_relocate_object+0x1271>
    0.00 :   126b9:  cmp    $0xa,%al
    0.00 :   126bb:  jne    116d8 <_dl_relocate_object+0x978>
    0.00 :   126c1:  jmp    11b52 <_dl_relocate_object+0xdf2>
    0.00 :   126c6:  mov    $0x1,%edx
    0.00 :   126cb:  mov    %r15,%rdi
    0.00 :   126ce:  call   10c90 <_dl_reloc_bad_type>
    0.00 :   126d3:  movzbl 0x4(%rdx),%eax
    0.00 :   126d7:  jmp    12586 <_dl_relocate_object+0x1826>
    0.00 :   126dc:  lea    0x1e84d(%rip),%rdi        # 30f30 <__PRETTY_FUNCTION__.0+0x120>
    0.00 :   126e3:  mov    0x68(%r15),%rax
    0.00 :   126e7:  mov    0x8(%rax),%rax
    0.00 :   126eb:  testb  $0x20,0x31e(%r15)
    0.00 :   126f3:  je     126f8 <_dl_relocate_object+0x1998>
    0.00 :   126f5:  add    (%r15),%rax
    0.00 :   126f8:  mov    0x0(%r13),%edx
    0.00 :   126fc:  mov    %r10,-0xb8(%rbp)
    0.00 :   12703:  add    %rax,%rdx
    0.00 :   12706:  mov    0x273b3(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   1270d:  mov    (%rax),%rsi
    0.00 :   12710:  lea    0x1b889(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12717:  test   %rsi,%rsi
    0.00 :   1271a:  cmove  %rax,%rsi
    0.00 :   1271e:  xor    %eax,%eax
    0.00 :   12720:  call   fe70 <_dl_error_printf>
    0.00 :   12725:  mov    0x8(%rbx),%eax
    0.00 :   12728:  mov    -0xb8(%rbp),%r10
    0.00 :   1272f:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   12734:  mov    0x418(%r15),%eax
    0.00 :   1273b:  test   %eax,%eax
    0.00 :   1273d:  jne    11632 <_dl_relocate_object+0x8d2>
    0.00 :   12743:  mov    0x428(%r15),%rdx
    0.00 :   1274a:  addq   $0x1,0x2838e(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12752:  mov    0x420(%r15),%rcx
    0.00 :   12759:  mov    %rdx,-0x78(%rbp)
    0.00 :   1275d:  jmp    116cf <_dl_relocate_object+0x96f>
    0.00 :   12762:  movzwl 0x2b8(%r14),%edx
    0.00 :   1276a:  mov    0x2a8(%r14),%rcx
    0.00 :   12771:  lea    0x0(,%rdx,8),%rax
    0.00 :   12779:  sub    %rdx,%rax
    0.00 :   1277c:  lea    (%rcx,%rax,8),%rax
    0.00 :   12780:  cmp    %rax,%rcx
    0.00 :   12783:  jae    12d53 <_dl_relocate_object+0x1ff3>
    0.00 :   12789:  mov    %ebx,-0x88(%rbp)
    0.00 :   1278f:  mov    %rcx,%r12
    0.00 :   12792:  xor    %r15d,%r15d
    0.00 :   12795:  movabs $0x2ffffffff,%r8
    0.00 :   1279f:  jmp    127c4 <_dl_relocate_object+0x1a64>
    0.00 :   127a1:  nopl   0x0(%rax)
    0.00 :   127a8:  lea    0x0(,%rdx,8),%rax
    0.00 :   127b0:  add    $0x38,%r12
    0.00 :   127b4:  sub    %rdx,%rax
    0.00 :   127b7:  lea    (%rcx,%rax,8),%rax
    0.00 :   127bb:  cmp    %rax,%r12
    0.00 :   127be:  jae    12908 <_dl_relocate_object+0x1ba8>
    0.00 :   127c4:  mov    (%r12),%rax
    0.00 :   127c8:  and    %r8,%rax
    0.00 :   127cb:  cmp    $0x1,%rax
    0.00 :   127cf:  jne    127a8 <_dl_relocate_object+0x1a48>
    0.00 :   127d1:  mov    %rsp,%rax
    0.00 :   127d4:  cmp    %rax,%rsp
    0.00 :   127d7:  je     127ee <_dl_relocate_object+0x1a8e>
    0.00 :   127d9:  sub    $0x1000,%rsp
    0.00 :   127e0:  orq    $0x0,0xff8(%rsp)
    0.00 :   127e9:  cmp    %rax,%rsp
    0.00 :   127ec:  jne    127d9 <_dl_relocate_object+0x1a79>
    0.00 :   127ee:  sub    $0x30,%rsp
    0.00 :   127f2:  orq    $0x0,0x28(%rsp)
    0.00 :   127f8:  mov    0x272f9(%rip),%rdx        # 39af8 <_rtld_global_ro+0x18>
    0.00 :   127ff:  mov    0x10(%r12),%rcx
    0.00 :   12804:  mov    %rdx,%rax
    0.00 :   12807:  neg    %rax
    0.00 :   1280a:  lea    -0x1(%rcx,%rdx,1),%rsi
    0.00 :   1280f:  mov    %rcx,%rdi
    0.00 :   12812:  add    0x28(%r12),%rsi
    0.00 :   12817:  and    %rax,%rdi
    0.00 :   1281a:  and    %rax,%rsi
    0.00 :   1281d:  mov    0x4(%r12),%eax
    0.00 :   12822:  lea    0xf(%rsp),%r9
    0.00 :   12827:  sub    %rdi,%rsi
    0.00 :   1282a:  add    (%r14),%rdi
    0.00 :   1282d:  mov    %r9,%rbx
    0.00 :   12830:  mov    %eax,%edx
    0.00 :   12832:  and    $0xfffffffffffffff0,%rbx
    0.00 :   12836:  shr    $0x2,%edx
    0.00 :   12839:  mov    %rsi,0x8(%rbx)
    0.00 :   1283d:  and    $0x1,%edx
    0.00 :   12840:  mov    %rdi,(%rbx)
    0.00 :   12843:  test   $0x2,%al
    0.00 :   12845:  je     1284a <_dl_relocate_object+0x1aea>
    0.00 :   12847:  or     $0x2,%edx
    0.00 :   1284a:  mov    %edx,0x10(%rbx)
    0.00 :   1284d:  test   $0x1,%al
    0.00 :   1284f:  je     12857 <_dl_relocate_object+0x1af7>
    0.00 :   12851:  or     $0x4,%edx
    0.00 :   12854:  mov    %edx,0x10(%rbx)
    0.00 :   12857:  or     $0x2,%edx
    0.00 :   1285a:  call   26d20 <__GI___mprotect>
    0.00 :   1285f:  movabs $0x2ffffffff,%r8
    0.00 :   12869:  test   %eax,%eax
    0.00 :   1286b:  js     12e4e <_dl_relocate_object+0x20ee>
    0.00 :   12871:  mov    %r15,0x18(%rbx)
    0.00 :   12875:  mov    0x2a8(%r14),%rcx
    0.00 :   1287c:  mov    %rbx,%r15
    0.00 :   1287f:  movzwl 0x2b8(%r14),%edx
    0.00 :   12887:  jmp    127a8 <_dl_relocate_object+0x1a48>
    0.00 :   1288c:  mov    0x10(%rbx),%rax
    0.00 :   12890:  mov    %rax,0x8(%r10)
    0.00 :   12894:  lea    0x5875(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   1289b:  mov    %rax,(%r10)
    0.00 :   1289e:  mov    0x8(%rbx),%eax
    0.00 :   128a1:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   128a6:  test   %r13d,%r13d
    0.00 :   128a9:  lea    0x1b85f(%rip),%rdx        # 2e10f <_sys_errnameidx+0x80f>
    0.00 :   128b0:  lea    0x1c632(%rip),%rax        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   128b7:  cmove  %rax,%rdx
    0.00 :   128bb:  mov    0x8(%r14),%rsi
    0.00 :   128bf:  cmpb   $0x0,(%rsi)
    0.00 :   128c2:  je     12959 <_dl_relocate_object+0x1bf9>
    0.00 :   128c8:  lea    0x1b848(%rip),%rdi        # 2e117 <_sys_errnameidx+0x817>
    0.00 :   128cf:  xor    %eax,%eax
    0.00 :   128d1:  call   fbc0 <_dl_debug_printf>
    0.00 :   128d6:  jmp    10e34 <_dl_relocate_object+0xd4>
    0.00 :   128db:  cmpl   $0x1,0x418(%r15)
    0.00 :   128e3:  jne    11776 <_dl_relocate_object+0xa16>
    0.00 :   128e9:  mov    0x428(%r15),%rdx
    0.00 :   128f0:  addq   $0x1,0x281e8(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   128f8:  mov    0x420(%r15),%r8
    0.00 :   128ff:  mov    %rdx,-0x80(%rbp)
    0.00 :   12903:  jmp    117f7 <_dl_relocate_object+0xa97>
    0.00 :   12908:  mov    %r15,-0xf0(%rbp)
    0.00 :   1290f:  mov    -0x88(%rbp),%ebx
    0.00 :   12915:  jmp    10e4b <_dl_relocate_object+0xeb>
    0.00 :   1291a:  cmp    %r9d,0x418(%r15)
    0.00 :   12921:  jne    11f5b <_dl_relocate_object+0x11fb>
    0.00 :   12927:  jmp    1269a <_dl_relocate_object+0x193a>
    0.00 :   1292c:  mov    -0xf0(%rbp),%rbx
    0.00 :   12933:  mov    0x10(%rbx),%edx
    0.00 :   12936:  mov    0x8(%rbx),%rsi
    0.00 :   1293a:  mov    (%rbx),%rdi
    0.00 :   1293d:  call   26d20 <__GI___mprotect>
    0.00 :   12942:  test   %eax,%eax
    0.00 :   12944:  js     12e1d <_dl_relocate_object+0x20bd>
    0.00 :   1294a:  mov    0x18(%rbx),%rbx
    0.00 :   1294e:  test   %rbx,%rbx
    0.00 :   12951:  je     110f5 <_dl_relocate_object+0x395>
    0.00 :   12957:  jmp    12933 <_dl_relocate_object+0x1bd3>
    0.00 :   12959:  mov    0x27160(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   12960:  mov    (%rax),%rsi
    0.00 :   12963:  lea    0x1b1b9(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   1296a:  test   %rsi,%rsi
    0.00 :   1296d:  cmove  %rax,%rsi
    0.00 :   12971:  jmp    128c8 <_dl_relocate_object+0x1b68>
    0.00 :   12976:  mov    0x10(%r12),%rsi
    0.00 :   1297b:  mov    %r9,%rdi
    0.00 :   1297e:  add    0x8(%rdx),%rsi
    0.00 :   12982:  mov    %r11,-0x90(%rbp)
    0.00 :   12989:  mov    %r10,-0x88(%rbp)
    0.00 :   12990:  call   17de0 <_dl_make_tlsdesc_dynamic>
    0.00 :   12995:  mov    -0x88(%rbp),%r10
    0.00 :   1299c:  mov    -0x90(%rbp),%r11
    0.00 :   129a3:  mov    %rax,0x8(%r13)
    0.00 :   129a7:  lea    0x5782(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   129ae:  mov    %rax,0x0(%r13)
    0.00 :   129b2:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   129b7:  mov    0x10(%rbx),%rsi
    0.00 :   129bb:  mov    %r11,%rdi
    0.00 :   129be:  add    0x8(%rdx),%rsi
    0.00 :   129c2:  mov    %r10,-0xb8(%rbp)
    0.00 :   129c9:  call   17de0 <_dl_make_tlsdesc_dynamic>
    0.00 :   129ce:  mov    -0x88(%rbp),%rcx
    0.00 :   129d5:  mov    -0xb8(%rbp),%r10
    0.00 :   129dc:  mov    %rax,0x8(%rcx)
    0.00 :   129e0:  lea    0x5749(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   129e7:  mov    %rax,(%rcx)
    0.00 :   129ea:  mov    0x8(%rbx),%eax
    0.00 :   129ed:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   129f2:  test   %cx,%cx
    0.00 :   129f5:  je     11c74 <_dl_relocate_object+0xf14>
    0.00 :   129fb:  mov    -0xcc(%rbp),%r8d
    0.00 :   12a02:  test   %r8d,%r8d
    0.00 :   12a05:  jne    11c74 <_dl_relocate_object+0xf14>
    0.00 :   12a0b:  cmp    %r9,%r15
    0.00 :   12a0e:  je     12aa5 <_dl_relocate_object+0x1d45>
    0.00 :   12a14:  movzbl 0x31c(%r9),%eax
    0.00 :   12a1c:  test   $0x4,%al
    0.00 :   12a1e:  jne    12aa5 <_dl_relocate_object+0x1d45>
    0.00 :   12a24:  mov    0x68(%r15),%rdx
    0.00 :   12a28:  mov    0x8(%rdx),%r8
    0.00 :   12a2c:  testb  $0x20,0x31e(%r15)
    0.00 :   12a34:  je     12a39 <_dl_relocate_object+0x1cd9>
    0.00 :   12a36:  add    (%r15),%r8
    0.00 :   12a39:  mov    -0x88(%rbp),%rsi
    0.00 :   12a40:  mov    0x27079(%rip),%rcx        # 39ac0 <_dl_argv>
    0.00 :   12a47:  mov    (%rsi),%edx
    0.00 :   12a49:  mov    (%rcx),%rsi
    0.00 :   12a4c:  add    %rdx,%r8
    0.00 :   12a4f:  mov    0x8(%r15),%rdx
    0.00 :   12a53:  test   $0x3,%al
    0.00 :   12a55:  je     12e35 <_dl_relocate_object+0x20d5>
    0.00 :   12a5b:  test   %rsi,%rsi
    0.00 :   12a5e:  lea    0x1b53b(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12a65:  mov    0x8(%r9),%rcx
    0.00 :   12a69:  lea    0x1e610(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   12a70:  cmove  %rax,%rsi
    0.00 :   12a74:  xor    %eax,%eax
    0.00 :   12a76:  mov    %r11,-0xa8(%rbp)
    0.00 :   12a7d:  mov    %r10,-0xa0(%rbp)
    0.00 :   12a84:  mov    %r9,-0x88(%rbp)
    0.00 :   12a8b:  call   fe70 <_dl_error_printf>
    0.00 :   12a90:  mov    -0xa8(%rbp),%r11
    0.00 :   12a97:  mov    -0xa0(%rbp),%r10
    0.00 :   12a9e:  mov    -0x88(%rbp),%r9
    0.00 :   12aa5:  mov    %r11,-0xa8(%rbp)
    0.00 :   12aac:  mov    -0x90(%rbp),%rax
    0.00 :   12ab3:  mov    %r10,-0xa0(%rbp)
    0.00 :   12aba:  add    -0x98(%rbp),%rax
    0.00 :   12ac1:  mov    %r9,-0x88(%rbp)
    0.00 :   12ac8:  call   *%rax
    0.00 :   12aca:  mov    -0x78(%rbp),%rdx
    0.00 :   12ace:  mov    -0x88(%rbp),%r9
    0.00 :   12ad5:  mov    -0xa0(%rbp),%r10
    0.00 :   12adc:  mov    -0xa8(%rbp),%r11
    0.00 :   12ae3:  test   %rdx,%rdx
    0.00 :   12ae6:  jne    11c74 <_dl_relocate_object+0xf14>
    0.00 :   12aec:  jmp    11294 <_dl_relocate_object+0x534>
    0.00 :   12af1:  nopl   0x0(%rax)
    0.00 :   12af8:  movq   $0x0,-0x98(%rbp)
    0.00 :   12b03:  jmp    11c5e <_dl_relocate_object+0xefe>
    0.00 :   12b08:  cmp    $0xa,%al
    0.00 :   12b0a:  jne    12147 <_dl_relocate_object+0x13e7>
    0.00 :   12b10:  jmp    125b2 <_dl_relocate_object+0x1852>
    0.00 :   12b15:  lea    0x1e414(%rip),%rdi        # 30f30 <__PRETTY_FUNCTION__.0+0x120>
    0.00 :   12b1c:  jmp    1233b <_dl_relocate_object+0x15db>
    0.00 :   12b21:  mov    %r11,%rdi
    0.00 :   12b24:  mov    %r10,-0xf8(%rbp)
    0.00 :   12b2b:  mov    %r11,-0xb8(%rbp)
    0.00 :   12b32:  call   10b30 <_dl_allocate_static_tls>
    0.00 :   12b37:  mov    -0xb8(%rbp),%r11
    0.00 :   12b3e:  mov    -0x78(%rbp),%rax
    0.00 :   12b42:  mov    -0xf8(%rbp),%r10
    0.00 :   12b49:  mov    0x458(%r11),%rdx
    0.00 :   12b50:  jmp    118ea <_dl_relocate_object+0xb8a>
    0.00 :   12b55:  mov    %rsi,%rdx
    0.00 :   12b58:  mov    %r15,%r9
    0.00 :   12b5b:  jmp    11c46 <_dl_relocate_object+0xee6>
    0.00 :   12b60:  mov    0x418(%r15),%r9d
    0.00 :   12b67:  test   %r9d,%r9d
    0.00 :   12b6a:  jne    120c1 <_dl_relocate_object+0x1361>
    0.00 :   12b70:  mov    0x428(%r15),%rdx
    0.00 :   12b77:  addq   $0x1,0x27f61(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12b7f:  mov    0x420(%r15),%rcx
    0.00 :   12b86:  mov    %rdx,-0x78(%rbp)
    0.00 :   12b8a:  jmp    1213e <_dl_relocate_object+0x13de>
    0.00 :   12b8f:  mov    %r11,%rdi
    0.00 :   12b92:  mov    $0x1,%esi
    0.00 :   12b97:  mov    %r10,-0xf8(%rbp)
    0.00 :   12b9e:  mov    %r11,-0xb8(%rbp)
    0.00 :   12ba5:  call   10a10 <_dl_try_allocate_static_tls>
    0.00 :   12baa:  mov    -0x78(%rbp),%rdx
    0.00 :   12bae:  mov    -0xb8(%rbp),%r11
    0.00 :   12bb5:  test   %eax,%eax
    0.00 :   12bb7:  mov    -0xf8(%rbp),%r10
    0.00 :   12bbe:  jne    129b7 <_dl_relocate_object+0x1c57>
    0.00 :   12bc4:  mov    0x458(%r11),%rcx
    0.00 :   12bcb:  jmp    11980 <_dl_relocate_object+0xc20>
    0.00 :   12bd0:  cmpl   $0x1,0x418(%r15)
    0.00 :   12bd8:  jne    111ef <_dl_relocate_object+0x48f>
    0.00 :   12bde:  mov    0x428(%r15),%rdx
    0.00 :   12be5:  addq   $0x1,0x27ef3(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12bed:  mov    0x420(%r15),%r9
    0.00 :   12bf4:  mov    %rdx,-0x78(%rbp)
    0.00 :   12bf8:  jmp    1128b <_dl_relocate_object+0x52b>
    0.00 :   12bfd:  cmpl   $0x1,0x418(%r15)
    0.00 :   12c05:  jne    121c9 <_dl_relocate_object+0x1469>
    0.00 :   12c0b:  mov    0x428(%r15),%rdx
    0.00 :   12c12:  addq   $0x1,0x27ec6(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12c1a:  mov    0x420(%r15),%r8
    0.00 :   12c21:  mov    %rdx,-0x80(%rbp)
    0.00 :   12c25:  jmp    12249 <_dl_relocate_object+0x14e9>
    0.00 :   12c2a:  lea    0x25ff(%rip),%rdx        # 15230 <_dl_runtime_profile_avx512>
    0.00 :   12c31:  testb  $0x1,0x26f62(%rip)        # 39b9a <_rtld_global_ro+0xba>
    0.00 :   12c38:  jne    12c53 <_dl_relocate_object+0x1ef3>
    0.00 :   12c3a:  testb  $0x10,0x26f3e(%rip)        # 39b7f <_rtld_global_ro+0x9f>
    0.00 :   12c41:  lea    0x2e08(%rip),%rdx        # 15a50 <_dl_runtime_profile_sse>
    0.00 :   12c48:  lea    0x29f1(%rip),%rcx        # 15640 <_dl_runtime_profile_avx>
    0.00 :   12c4f:  cmovne %rcx,%rdx
    0.00 :   12c53:  mov    0x27146(%rip),%rdi        # 39da0 <_rtld_global_ro+0x2c0>
    0.00 :   12c5a:  mov    %rdx,0x10(%rax)
    0.00 :   12c5e:  mov    $0x1,%r13d
    0.00 :   12c64:  test   %rdi,%rdi
    0.00 :   12c67:  je     10ec0 <_dl_relocate_object+0x160>
    0.00 :   12c6d:  mov    %r14,%rsi
    0.00 :   12c70:  call   d690 <_dl_name_match_p>
    0.00 :   12c75:  test   %eax,%eax
    0.00 :   12c77:  je     10ec0 <_dl_relocate_object+0x160>
    0.00 :   12c7d:  mov    %r14,0x27e4c(%rip)        # 3aad0 <_rtld_global+0xa90>
    0.00 :   12c84:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   12c89:  movzbl 0x4(%rdx),%eax
    0.00 :   12c8d:  jmp    11c46 <_dl_relocate_object+0xee6>
    0.00 :   12c92:  mov    0x10(%rbx),%rsi
    0.00 :   12c96:  mov    %r11,%rdi
    0.00 :   12c99:  add    0x8(%rcx),%rsi
    0.00 :   12c9d:  mov    %r10,-0xa8(%rbp)
    0.00 :   12ca4:  call   17de0 <_dl_make_tlsdesc_dynamic>
    0.00 :   12ca9:  mov    -0xa8(%rbp),%r10
    0.00 :   12cb0:  mov    %rax,0x8(%r10)
    0.00 :   12cb4:  lea    0x5475(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   12cbb:  mov    %rax,(%r10)
    0.00 :   12cbe:  mov    0x8(%rbx),%eax
    0.00 :   12cc1:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   12cc6:  mov    %r11,%rdi
    0.00 :   12cc9:  mov    %r10,-0xc0(%rbp)
    0.00 :   12cd0:  mov    %r11,-0xa8(%rbp)
    0.00 :   12cd7:  call   10b30 <_dl_allocate_static_tls>
    0.00 :   12cdc:  mov    -0xa8(%rbp),%r11
    0.00 :   12ce3:  mov    -0x78(%rbp),%rax
    0.00 :   12ce7:  mov    -0xc0(%rbp),%r10
    0.00 :   12cee:  mov    0x458(%r11),%rdx
    0.00 :   12cf5:  jmp    122e5 <_dl_relocate_object+0x1585>
    0.00 :   12cfa:  mov    %r11,%rdi
    0.00 :   12cfd:  mov    $0x1,%esi
    0.00 :   12d02:  mov    %r10,-0xc0(%rbp)
    0.00 :   12d09:  mov    %r11,-0xa8(%rbp)
    0.00 :   12d10:  call   10a10 <_dl_try_allocate_static_tls>
    0.00 :   12d15:  mov    -0x78(%rbp),%rcx
    0.00 :   12d19:  mov    -0xa8(%rbp),%r11
    0.00 :   12d20:  test   %eax,%eax
    0.00 :   12d22:  mov    -0xc0(%rbp),%r10
    0.00 :   12d29:  jne    12c92 <_dl_relocate_object+0x1f32>
    0.00 :   12d2f:  mov    0x458(%r11),%rdx
    0.00 :   12d36:  jmp    122a2 <_dl_relocate_object+0x1542>
    0.00 :   12d3b:  mov    0x10(%rbx),%rax
    0.00 :   12d3f:  add    (%r15),%rax
    0.00 :   12d42:  jmp    116eb <_dl_relocate_object+0x98b>
    0.00 :   12d47:  mov    0x10(%rbx),%rax
    0.00 :   12d4b:  add    (%r15),%rax
    0.00 :   12d4e:  jmp    1215a <_dl_relocate_object+0x13fa>
    0.00 :   12d53:  movq   $0x0,-0xf0(%rbp)
    0.00 :   12d5e:  jmp    10e4b <_dl_relocate_object+0xeb>
    0.00 :   12d63:  movzwl 0x2b8(%r14),%edx
    0.00 :   12d6b:  mov    0x2a8(%r14),%rcx
    0.00 :   12d72:  xor    %r13d,%r13d
    0.00 :   12d75:  lea    0x0(,%rdx,8),%rax
    0.00 :   12d7d:  sub    %rdx,%rax
    0.00 :   12d80:  lea    (%rcx,%rax,8),%rax
    0.00 :   12d84:  cmp    %rax,%rcx
    0.00 :   12d87:  jb     12789 <_dl_relocate_object+0x1a29>
    0.00 :   12d8d:  movq   $0x0,-0xf0(%rbp)
    0.00 :   12d98:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   12d9d:  nopl   (%rax)
    0.00 :   12da0:  xor    %r13d,%r13d
    0.00 :   12da3:  lea    0x1c13f(%rip),%rdx        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   12daa:  jmp    128bb <_dl_relocate_object+0x1b5b>
    0.00 :   12daf:  mov    %r9,%rdi
    0.00 :   12db2:  mov    $0x1,%esi
    0.00 :   12db7:  mov    %r11,-0x98(%rbp)
    0.00 :   12dbe:  mov    %r10,-0x90(%rbp)
    0.00 :   12dc5:  mov    %r9,-0x88(%rbp)
    0.00 :   12dcc:  call   10a10 <_dl_try_allocate_static_tls>
    0.00 :   12dd1:  mov    -0x78(%rbp),%rdx
    0.00 :   12dd5:  mov    -0x88(%rbp),%r9
    0.00 :   12ddc:  test   %eax,%eax
    0.00 :   12dde:  mov    -0x90(%rbp),%r10
    0.00 :   12de5:  mov    -0x98(%rbp),%r11
    0.00 :   12dec:  jne    12976 <_dl_relocate_object+0x1c16>
    0.00 :   12df2:  mov    0x458(%r9),%rcx
    0.00 :   12df9:  jmp    11c8e <_dl_relocate_object+0xf2e>
    0.00 :   12dfe:  lea    0x1ccab(%rip),%rcx        # 2fab0 <__PRETTY_FUNCTION__.2>
    0.00 :   12e05:  mov    $0x216,%edx
    0.00 :   12e0a:  lea    0x1e2a7(%rip),%rsi        # 310b8 <__PRETTY_FUNCTION__.0+0x2a8>
    0.00 :   12e11:  lea    0x1e2c0(%rip),%rdi        # 310d8 <__PRETTY_FUNCTION__.0+0x2c8>
    0.00 :   12e18:  call   1e460 <__GI___assert_fail>
    0.00 :   12e1d:  lea    0x1e0e4(%rip),%rcx        # 30f08 <__PRETTY_FUNCTION__.0+0xf8>
    0.00 :   12e24:  mov    0x8(%r14),%rsi
    0.00 :   12e28:  mov    0x28472(%rip),%edi        # 3b2a0 <rtld_errno>
    0.00 :   12e2e:  xor    %edx,%edx
    0.00 :   12e30:  call   2070 <_dl_signal_error@plt>
    0.00 :   12e35:  test   %rsi,%rsi
    0.00 :   12e38:  je     12e63 <_dl_relocate_object+0x2103>
    0.00 :   12e3a:  mov    %rdx,%rcx
    0.00 :   12e3d:  lea    0x1e1bc(%rip),%rdi        # 31000 <__PRETTY_FUNCTION__.0+0x1f0>
    0.00 :   12e44:  mov    %r8,%rdx
    0.00 :   12e47:  xor    %eax,%eax
    0.00 :   12e49:  call   ff20 <_dl_fatal_printf>
    0.00 :   12e4e:  lea    0x1e083(%rip),%rcx        # 30ed8 <__PRETTY_FUNCTION__.0+0xc8>
    0.00 :   12e55:  jmp    12e24 <_dl_relocate_object+0x20c4>
    0.00 :   12e57:  lea    0x1b142(%rip),%rsi        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12e5e:  jmp    11d14 <_dl_relocate_object+0xfb4>
    0.00 :   12e63:  lea    0x1b136(%rip),%rsi        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12e6a:  jmp    12e3a <_dl_relocate_object+0x20da>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000002aa40 <strlen>:
    0.00 :   2aa40:  endbr64
    0.00 :   2aa44:  pxor   %xmm0,%xmm0
    0.00 :   2aa48:  pxor   %xmm1,%xmm1
    0.00 :   2aa4c:  pxor   %xmm2,%xmm2
    0.00 :   2aa50:  pxor   %xmm3,%xmm3
    0.00 :   2aa54:  mov    %rdi,%rax
    0.00 :   2aa57:  mov    %rdi,%rcx
    0.00 :   2aa5a:  and    $0xfff,%rcx
    0.00 :   2aa61:  cmp    $0xfcf,%rcx
    0.00 :   2aa68:  ja     2aad0 <strlen+0x90>
    0.00 :   2aa6a:  movdqu (%rax),%xmm4
    0.00 :   2aa6e:  pcmpeqb %xmm0,%xmm4
    0.00 :   2aa72:  pmovmskb %xmm4,%edx
    0.00 :   2aa76:  test   %edx,%edx
  100.00 :   2aa78:  je     2aa7e <strlen+0x3e>
    0.00 :   2aa7a:  bsf    %edx,%eax
    0.00 :   2aa7d:  ret
    0.00 :   2aa7e:  and    $0xfffffffffffffff0,%rax
    0.00 :   2aa82:  pcmpeqb 0x10(%rax),%xmm1
    0.00 :   2aa87:  pcmpeqb 0x20(%rax),%xmm2
    0.00 :   2aa8c:  pcmpeqb 0x30(%rax),%xmm3
    0.00 :   2aa91:  pmovmskb %xmm1,%edx
    0.00 :   2aa95:  pmovmskb %xmm2,%r8d
    0.00 :   2aa9a:  pmovmskb %xmm3,%ecx
    0.00 :   2aa9e:  shl    $0x10,%rdx
    0.00 :   2aaa2:  shl    $0x10,%rcx
    0.00 :   2aaa6:  or     %r8,%rcx
    0.00 :   2aaa9:  shl    $0x20,%rcx
    0.00 :   2aaad:  or     %rcx,%rdx
    0.00 :   2aab0:  mov    %rdi,%rcx
    0.00 :   2aab3:  xor    %rax,%rcx
    0.00 :   2aab6:  and    $0xffffffffffffffc0,%rax
    0.00 :   2aaba:  sar    %cl,%rdx
    0.00 :   2aabd:  test   %rdx,%rdx
    0.00 :   2aac0:  je     2ab40 <strlen+0x100>
    0.00 :   2aac2:  bsf    %rdx,%rax
    0.00 :   2aac6:  ret
    0.00 :   2aac7:  nopw   0x0(%rax,%rax,1)
    0.00 :   2aad0:  and    $0xffffffffffffffc0,%rax
    0.00 :   2aad4:  pcmpeqb (%rax),%xmm0
    0.00 :   2aad8:  pcmpeqb 0x10(%rax),%xmm1
    0.00 :   2aadd:  pcmpeqb 0x20(%rax),%xmm2
    0.00 :   2aae2:  pcmpeqb 0x30(%rax),%xmm3
    0.00 :   2aae7:  pmovmskb %xmm0,%esi
    0.00 :   2aaeb:  pmovmskb %xmm1,%edx
    0.00 :   2aaef:  pmovmskb %xmm2,%r8d
    0.00 :   2aaf4:  pmovmskb %xmm3,%ecx
    0.00 :   2aaf8:  shl    $0x10,%rdx
    0.00 :   2aafc:  shl    $0x10,%rcx
    0.00 :   2ab00:  or     %rsi,%rdx
    0.00 :   2ab03:  or     %r8,%rcx
    0.00 :   2ab06:  shl    $0x20,%rcx
    0.00 :   2ab0a:  or     %rcx,%rdx
    0.00 :   2ab0d:  mov    %rdi,%rcx
    0.00 :   2ab10:  xor    %rax,%rcx
    0.00 :   2ab13:  and    $0xffffffffffffffc0,%rax
    0.00 :   2ab17:  sar    %cl,%rdx
    0.00 :   2ab1a:  test   %rdx,%rdx
    0.00 :   2ab1d:  je     2ab30 <strlen+0xf0>
    0.00 :   2ab1f:  bsf    %rdx,%rax
    0.00 :   2ab23:  ret
    0.00 :   2ab24:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2ab2f:  nop
    0.00 :   2ab30:  pxor   %xmm1,%xmm1
    0.00 :   2ab34:  pxor   %xmm2,%xmm2
    0.00 :   2ab38:  pxor   %xmm3,%xmm3
    0.00 :   2ab3c:  nopl   0x0(%rax)
    0.00 :   2ab40:  movdqa 0x40(%rax),%xmm0
    0.00 :   2ab45:  pminub 0x50(%rax),%xmm0
    0.00 :   2ab4a:  pminub 0x60(%rax),%xmm0
    0.00 :   2ab4f:  pminub 0x70(%rax),%xmm0
    0.00 :   2ab54:  pcmpeqb %xmm3,%xmm0
    0.00 :   2ab58:  pmovmskb %xmm0,%edx
    0.00 :   2ab5c:  test   %edx,%edx
    0.00 :   2ab5e:  jne    2ab90 <strlen+0x150>
    0.00 :   2ab60:  sub    $0xffffffffffffff80,%rax
    0.00 :   2ab64:  movdqa (%rax),%xmm0
    0.00 :   2ab68:  pminub 0x10(%rax),%xmm0
    0.00 :   2ab6d:  pminub 0x20(%rax),%xmm0
    0.00 :   2ab72:  pminub 0x30(%rax),%xmm0
    0.00 :   2ab77:  pcmpeqb %xmm3,%xmm0
    0.00 :   2ab7b:  pmovmskb %xmm0,%edx
    0.00 :   2ab7f:  test   %edx,%edx
    0.00 :   2ab81:  jne    2ab94 <strlen+0x154>
    0.00 :   2ab83:  jmp    2ab40 <strlen+0x100>
    0.00 :   2ab85:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2ab90:  add    $0x40,%rax
    0.00 :   2ab94:  pxor   %xmm0,%xmm0
    0.00 :   2ab98:  pcmpeqb (%rax),%xmm0
    0.00 :   2ab9c:  pcmpeqb 0x10(%rax),%xmm1
    0.00 :   2aba1:  pcmpeqb 0x20(%rax),%xmm2
    0.00 :   2aba6:  pcmpeqb 0x30(%rax),%xmm3
    0.00 :   2abab:  pmovmskb %xmm0,%esi
    0.00 :   2abaf:  pmovmskb %xmm1,%edx
    0.00 :   2abb3:  pmovmskb %xmm2,%r8d
    0.00 :   2abb8:  pmovmskb %xmm3,%ecx
    0.00 :   2abbc:  shl    $0x10,%rdx
    0.00 :   2abc0:  shl    $0x10,%rcx
    0.00 :   2abc4:  or     %rsi,%rdx
    0.00 :   2abc7:  or     %r8,%rcx
    0.00 :   2abca:  shl    $0x20,%rcx
    0.00 :   2abce:  or     %rcx,%rdx
    0.00 :   2abd1:  bsf    %rdx,%rdx
    0.00 :   2abd5:  add    %rdx,%rax
    0.00 :   2abd8:  sub    %rdi,%rax
    0.00 :   2abdb:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a95a0 <__libc_memmove_ifunc>:
    0.00 :   a95a0:  endbr64
  100.00 :   a95a4:  mov    0x17091d(%rip),%rcx        # 219ec8 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   a95ab:  lea    0x1b32e(%rip),%rax        # c48e0 <__memcpy_erms>
    0.00 :   a95b2:  mov    0x1a4(%rcx),%edx
    0.00 :   a95b8:  test   $0x48,%dh
    0.00 :   a95bb:  jne    a9633 <__libc_memmove_ifunc+0x93>
    0.00 :   a95bd:  mov    0xb8(%rcx),%esi
    0.00 :   a95c3:  test   $0x10000,%esi
    0.00 :   a95c9:  jne    a9638 <__libc_memmove_ifunc+0x98>
    0.00 :   a95cb:  test   $0x2,%dh
    0.00 :   a95ce:  je     a9610 <__libc_memmove_ifunc+0x70>
    0.00 :   a95d0:  test   %esi,%esi
    0.00 :   a95d2:  js     a9688 <__libc_memmove_ifunc+0xe8>
    0.00 :   a95d8:  test   $0x800,%esi
    0.00 :   a95de:  je     a9600 <__libc_memmove_ifunc+0x60>
    0.00 :   a95e0:  and    $0x200,%esi
    0.00 :   a95e6:  lea    0xfe5c3(%rip),%rdx        # 1a7bb0 <__memcpy_avx_unaligned_rtm>
    0.00 :   a95ed:  lea    0xfe64c(%rip),%rax        # 1a7c40 <__memcpy_avx_unaligned_erms_rtm>
    0.00 :   a95f4:  cmove  %rdx,%rax
    0.00 :   a95f8:  ret
    0.00 :   a95f9:  nopl   0x0(%rax)
    0.00 :   a9600:  test   $0x4,%dh
    0.00 :   a9603:  je     a96a8 <__libc_memmove_ifunc+0x108>
    0.00 :   a9609:  nopl   0x0(%rax)
    0.00 :   a9610:  testb  $0x2,0x9d(%rcx)
    0.00 :   a9617:  je     a9668 <__libc_memmove_ifunc+0xc8>
    0.00 :   a9619:  test   $0x20,%dl
    0.00 :   a961c:  jne    a9668 <__libc_memmove_ifunc+0xc8>
    0.00 :   a961e:  and    $0x2,%edx
    0.00 :   a9621:  lea    0xd3fc8(%rip),%rax        # 17d5f0 <__memmove_ssse3>
    0.00 :   a9628:  lea    0xd9661(%rip),%rdx        # 182c90 <__memmove_ssse3_back>
    0.00 :   a962f:  cmovne %rdx,%rax
    0.00 :   a9633:  ret
    0.00 :   a9634:  nopl   0x0(%rax)
    0.00 :   a9638:  test   $0x10,%dh
    0.00 :   a963b:  jne    a95cb <__libc_memmove_ifunc+0x2b>
    0.00 :   a963d:  lea    0xfa62c(%rip),%rax        # 1a3c70 <__memcpy_avx512_no_vzeroupper>
    0.00 :   a9644:  test   %esi,%esi
    0.00 :   a9646:  jns    a9633 <__libc_memmove_ifunc+0x93>
    0.00 :   a9648:  and    $0x200,%esi
    0.00 :   a964e:  lea    0xfd0db(%rip),%rdx        # 1a6730 <__memcpy_avx512_unaligned>
    0.00 :   a9655:  lea    0xfd164(%rip),%rax        # 1a67c0 <__memcpy_avx512_unaligned_erms>
    0.00 :   a965c:  cmove  %rdx,%rax
    0.00 :   a9660:  ret
    0.00 :   a9661:  nopl   0x0(%rax)
    0.00 :   a9668:  and    $0x200,%esi
    0.00 :   a966e:  lea    0x1b1fb(%rip),%rdx        # c4870 <memcpy@GLIBC_2.2.5>
    0.00 :   a9675:  lea    0x1b304(%rip),%rax        # c4980 <__memcpy_sse2_unaligned_erms>
    0.00 :   a967c:  cmove  %rdx,%rax
    0.00 :   a9680:  ret
    0.00 :   a9681:  nopl   0x0(%rax)
    0.00 :   a9688:  and    $0x200,%esi
    0.00 :   a968e:  lea    0x10569b(%rip),%rdx        # 1aed30 <__memcpy_evex_unaligned>
    0.00 :   a9695:  lea    0x105724(%rip),%rax        # 1aedc0 <__memcpy_evex_unaligned_erms>
    0.00 :   a969c:  cmove  %rdx,%rax
    0.00 :   a96a0:  ret
    0.00 :   a96a1:  nopl   0x0(%rax)
    0.00 :   a96a8:  and    $0x200,%esi
    0.00 :   a96ae:  lea    0xf707b(%rip),%rdx        # 1a0730 <__memcpy_avx_unaligned>
    0.00 :   a96b5:  lea    0xf7104(%rip),%rax        # 1a07c0 <__memcpy_avx_unaligned_erms>
    0.00 :   a96bc:  cmove  %rdx,%rax
    0.00 :   a96c0:  ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000017970 <__GI___tunables_init>:
    0.00 :   17970:  endbr64
    0.00 :   17974:  push   %r15
    0.00 :   17976:  push   %r14
    0.00 :   17978:  push   %r13
    0.00 :   1797a:  push   %r12
    0.00 :   1797c:  push   %rbp
    0.00 :   1797d:  mov    %rdi,%rbp
    0.00 :   17980:  push   %rbx
    0.00 :   17981:  sub    $0x28,%rsp
    0.00 :   17985:  mov    0x2210d(%rip),%eax        # 39a98 <__libc_enable_secure>
    0.00 :   1798b:  test   %eax,%eax
    0.00 :   1798d:  jne    17c25 <__GI___tunables_init+0x2b5>
    0.00 :   17993:  lea    0x21166(%rip),%rbx        # 38b00 <tunable_list>
    0.00 :   1799a:  mov    $0xffffffffffffffa8,%r12
    0.00 :   179a1:  sub    %rbx,%r12
    0.00 :   179a4:  nopl   0x0(%rax)
    0.00 :   179a8:  test   %rbp,%rbp
    0.00 :   179ab:  je     179ed <__GI___tunables_init+0x7d>
    0.00 :   179ad:  mov    0x0(%rbp),%r9
    0.00 :   179b1:  test   %r9,%r9
    0.00 :   179b4:  je     179ed <__GI___tunables_init+0x7d>
    0.00 :   179b6:  movzbl (%r9),%edx
    0.00 :   179ba:  lea    0x8(%rbp),%r13
    0.00 :   179be:  cmp    $0x3d,%dl
    0.00 :   179c1:  je     179fc <__GI___tunables_init+0x8c>
    0.00 :   179c3:  test   %dl,%dl
    0.00 :   179c5:  je     179fc <__GI___tunables_init+0x8c>
    0.00 :   179c7:  mov    $0x1,%eax
    0.00 :   179cc:  jmp    179d5 <__GI___tunables_init+0x65>
    0.00 :   179ce:  xchg   %ax,%ax
    0.00 :   179d0:  cmp    $0x3d,%dl
    0.00 :   179d3:  je     17a00 <__GI___tunables_init+0x90>
    0.00 :   179d5:  movzbl (%r9,%rax,1),%edx
    0.00 :   179da:  mov    %rax,%rcx
    0.00 :   179dd:  add    $0x1,%rax
    0.00 :   179e1:  test   %dl,%dl
    0.00 :   179e3:  jne    179d0 <__GI___tunables_init+0x60>
    0.00 :   179e5:  mov    %r13,%rbp
    0.00 :   179e8:  test   %rbp,%rbp
    0.00 :   179eb:  jne    179ad <__GI___tunables_init+0x3d>
    0.00 :   179ed:  add    $0x28,%rsp
    0.00 :   179f1:  pop    %rbx
    0.00 :   179f2:  pop    %rbp
    0.00 :   179f3:  pop    %r12
    0.00 :   179f5:  pop    %r13
    0.00 :   179f7:  pop    %r14
    0.00 :   179f9:  pop    %r15
    0.00 :   179fb:  ret
    0.00 :   179fc:  xor    %ecx,%ecx
    0.00 :   179fe:  xchg   %ax,%ax
    0.00 :   17a00:  test   %dl,%dl
    0.00 :   17a02:  je     179e5 <__GI___tunables_init+0x75>
    0.00 :   17a04:  lea    0x1(%rcx),%r14
    0.00 :   17a08:  mov    %r9,%rax
    0.00 :   17a0b:  lea    0x16866(%rip),%rsi        # 2e278 <_sys_errnameidx+0x978>
    0.00 :   17a12:  mov    $0x47,%ecx
    0.00 :   17a17:  lea    (%r9,%r14,1),%r15
    0.00 :   17a1b:  jmp    17a3b <__GI___tunables_init+0xcb>
    0.00 :   17a1d:  nopl   (%rax)
    0.00 :   17a20:  cmp    %cl,%dl
    0.00 :   17a22:  jne    17a42 <__GI___tunables_init+0xd2>
    0.00 :   17a24:  movzbl 0x1(%rsi),%ecx
    0.00 :   17a28:  add    $0x1,%rsi
    0.00 :   17a2c:  lea    0x1(%rax),%rdx
    0.00 :   17a30:  test   %cl,%cl
    0.00 :   17a32:  je     17b0c <__GI___tunables_init+0x19c>
    0.00 :   17a38:  mov    %rdx,%rax
    0.00 :   17a3b:  movzbl (%rax),%edx
    0.00 :   17a3e:  test   %dl,%dl
    0.00 :   17a40:  jne    17a20 <__GI___tunables_init+0xb0>
    0.00 :   17a42:  mov    0x2204f(%rip),%r11d        # 39a98 <__libc_enable_secure>
    0.00 :   17a49:  lea    0x21108(%rip),%r8        # 38b58 <tunable_list+0x58>
    0.00 :   17a50:  xor    %r10d,%r10d
    0.00 :   17a53:  jmp    17a6a <__GI___tunables_init+0xfa>
    0.00 :   17a55:  nopl   (%rax)
    0.00 :   17a58:  add    $0x1,%r10d
    0.00 :   17a5c:  add    $0x70,%r8
    0.00 :   17a60:  cmp    $0x23,%r10d
    0.00 :   17a64:  je     179e5 <__GI___tunables_init+0x75>
    0.00 :   17a6a:  cmpb   $0x0,-0x8(%r8)
    0.00 :   17a6f:  jne    17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a71:  movzbl (%r8),%edi
    0.00 :   17a75:  test   %dil,%dil
    0.00 :   17a78:  je     17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a7a:  lea    (%r12,%r8,1),%r14
  100.00 :   17a7e:  mov    %r8,%rsi
    0.00 :   17a81:  mov    %r9,%rax
    0.00 :   17a84:  mov    %edi,%edx
    0.00 :   17a86:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   17a90:  movzbl (%rax),%ecx
    0.00 :   17a93:  cmp    %dl,%cl
    0.00 :   17a95:  jne    17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a97:  test   %cl,%cl
    0.00 :   17a99:  je     17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a9b:  movzbl 0x1(%rsi),%edx
    0.00 :   17a9f:  add    $0x1,%rsi
    0.00 :   17aa3:  add    $0x1,%rax
    0.00 :   17aa7:  test   %dl,%dl
    0.00 :   17aa9:  jne    17a90 <__GI___tunables_init+0x120>
    0.00 :   17aab:  cmpb   $0x3d,(%rax)
    0.00 :   17aae:  jne    17a58 <__GI___tunables_init+0xe8>
    0.00 :   17ab0:  test   %r11d,%r11d
    0.00 :   17ab3:  je     17ac6 <__GI___tunables_init+0x156>
    0.00 :   17ab5:  mov    -0x4(%r8),%eax
    0.00 :   17ab9:  test   %eax,%eax
    0.00 :   17abb:  je     17b90 <__GI___tunables_init+0x220>
    0.00 :   17ac1:  cmp    $0x2,%eax
    0.00 :   17ac4:  jne    17a58 <__GI___tunables_init+0xe8>
    0.00 :   17ac6:  movslq %r10d,%r10
    0.00 :   17ac9:  lea    0x0(,%r10,8),%rax
    0.00 :   17ad1:  sub    %r10,%rax
    0.00 :   17ad4:  shl    $0x4,%rax
    0.00 :   17ad8:  cmpl   $0x3,0x30(%rbx,%rax,1)
    0.00 :   17add:  je     17b86 <__GI___tunables_init+0x216>
    0.00 :   17ae3:  xor    %esi,%esi
    0.00 :   17ae5:  mov    %r15,%rdi
    0.00 :   17ae8:  call   d750 <_dl_strtoul>
    0.00 :   17aed:  mov    %rax,0x18(%rsp)
    0.00 :   17af2:  lea    0x18(%rsp),%rsi
    0.00 :   17af7:  lea    (%rbx,%r14,1),%rdi
    0.00 :   17afb:  xor    %ecx,%ecx
    0.00 :   17afd:  xor    %edx,%edx
    0.00 :   17aff:  call   17320 <do_tunable_update_val>
    0.00 :   17b04:  mov    %r13,%rbp
    0.00 :   17b07:  jmp    179a8 <__GI___tunables_init+0x38>
    0.00 :   17b0c:  cmpb   $0x3d,0x1(%rax)
    0.00 :   17b10:  jne    17a42 <__GI___tunables_init+0xd2>
    0.00 :   17b16:  xor    %eax,%eax
    0.00 :   17b18:  nopl   0x0(%rax,%rax,1)
    0.00 :   17b20:  mov    %rax,%rdx
    0.00 :   17b23:  add    $0x1,%rax
    0.00 :   17b27:  cmpb   $0x0,-0x1(%r9,%rax,1)
    0.00 :   17b2d:  jne    17b20 <__GI___tunables_init+0x1b0>
    0.00 :   17b2f:  lea    0x2(%rdx),%rdi
    0.00 :   17b33:  mov    %r9,0x8(%rsp)
    0.00 :   17b38:  mov    %rdx,(%rsp)
    0.00 :   17b3c:  call   d3d0 <__minimal_malloc>
    0.00 :   17b41:  mov    (%rsp),%rdx
    0.00 :   17b45:  mov    0x8(%rsp),%r9
    0.00 :   17b4a:  test   %rax,%rax
    0.00 :   17b4d:  je     17c53 <__GI___tunables_init+0x2e3>
    0.00 :   17b53:  nopl   0x0(%rax,%rax,1)
    0.00 :   17b58:  movzbl (%r9,%rdx,1),%ecx
    0.00 :   17b5d:  mov    %cl,(%rax,%rdx,1)
    0.00 :   17b60:  sub    $0x1,%rdx
    0.00 :   17b64:  jae    17b58 <__GI___tunables_init+0x1e8>
    0.00 :   17b66:  lea    (%rax,%r14,1),%rdi
    0.00 :   17b6a:  mov    %r15,%rsi
    0.00 :   17b6d:  mov    %rax,(%rsp)
    0.00 :   17b71:  call   17410 <parse_tunables>
    0.00 :   17b76:  mov    (%rsp),%rax
    0.00 :   17b7a:  mov    %rax,0x0(%rbp)
    0.00 :   17b7e:  mov    %r13,%rbp
    0.00 :   17b81:  jmp    179a8 <__GI___tunables_init+0x38>
    0.00 :   17b86:  mov    %r15,0x18(%rsp)
    0.00 :   17b8b:  jmp    17af2 <__GI___tunables_init+0x182>
    0.00 :   17b90:  mov    0x0(%rbp),%rax
    0.00 :   17b94:  mov    %rbp,%rsi
    0.00 :   17b97:  mov    %rbp,%r13
    0.00 :   17b9a:  test   %rax,%rax
    0.00 :   17b9d:  je     17a58 <__GI___tunables_init+0xe8>
    0.00 :   17ba3:  mov    %r8,%rcx
    0.00 :   17ba6:  test   %dil,%dil
    0.00 :   17ba9:  jne    17bc6 <__GI___tunables_init+0x256>
    0.00 :   17bab:  jmp    17bf0 <__GI___tunables_init+0x280>
    0.00 :   17bad:  nopl   (%rax)
    0.00 :   17bb0:  cmp    %dl,%dil
    0.00 :   17bb3:  jne    17bcd <__GI___tunables_init+0x25d>
    0.00 :   17bb5:  movzbl 0x1(%rcx),%edi
    0.00 :   17bb9:  add    $0x1,%rcx
    0.00 :   17bbd:  add    $0x1,%rax
    0.00 :   17bc1:  test   %dil,%dil
    0.00 :   17bc4:  je     17bf0 <__GI___tunables_init+0x280>
    0.00 :   17bc6:  movzbl (%rax),%edx
    0.00 :   17bc9:  test   %dl,%dl
    0.00 :   17bcb:  jne    17bb0 <__GI___tunables_init+0x240>
    0.00 :   17bcd:  mov    0x8(%rsi),%rax
    0.00 :   17bd1:  add    $0x8,%rsi
    0.00 :   17bd5:  test   %rax,%rax
    0.00 :   17bd8:  je     17c19 <__GI___tunables_init+0x2a9>
    0.00 :   17bda:  movzbl (%r8),%edi
    0.00 :   17bde:  mov    %r8,%rcx
    0.00 :   17be1:  test   %dil,%dil
    0.00 :   17be4:  jne    17bc6 <__GI___tunables_init+0x256>
    0.00 :   17be6:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   17bf0:  cmpb   $0x3d,(%rax)
    0.00 :   17bf3:  jne    17bcd <__GI___tunables_init+0x25d>
    0.00 :   17bf5:  mov    %rsi,%rax
    0.00 :   17bf8:  nopl   0x0(%rax,%rax,1)
    0.00 :   17c00:  mov    0x8(%rax),%rdx
    0.00 :   17c04:  add    $0x8,%rax
    0.00 :   17c08:  mov    %rdx,-0x8(%rax)
    0.00 :   17c0c:  test   %rdx,%rdx
    0.00 :   17c0f:  jne    17c00 <__GI___tunables_init+0x290>
    0.00 :   17c11:  mov    (%rsi),%rax
    0.00 :   17c14:  test   %rax,%rax
    0.00 :   17c17:  jne    17bda <__GI___tunables_init+0x26a>
    0.00 :   17c19:  mov    -0x4(%r8),%eax
    0.00 :   17c1d:  mov    %rbp,%r13
    0.00 :   17c20:  jmp    17ac1 <__GI___tunables_init+0x151>
    0.00 :   17c25:  xor    %esi,%esi
    0.00 :   17c27:  lea    0x16659(%rip),%rdi        # 2e287 <_sys_errnameidx+0x987>
    0.00 :   17c2e:  mov    $0x15,%eax
    0.00 :   17c33:  syscall
    0.00 :   17c35:  test   %eax,%eax
    0.00 :   17c37:  je     17c44 <__GI___tunables_init+0x2d4>
    0.00 :   17c39:  cmp    $0xfffff000,%eax
    0.00 :   17c3e:  ja     17993 <__GI___tunables_init+0x23>
    0.00 :   17c44:  movl   $0x2,0x21de6(%rip)        # 39a34 <tunable_list+0xf34>
    0.00 :   17c4e:  jmp    17993 <__GI___tunables_init+0x23>
    0.00 :   17c53:  lea    0x19946(%rip),%rdi        # 315a0 <__PRETTY_FUNCTION__.0+0x10>
    0.00 :   17c5a:  call   ff20 <_dl_fatal_printf>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a17f0 <malloc_consolidate>:
    0.00 :   a17f0:  push   %r15
    0.00 :   a17f2:  lea    0x60(%rdi),%rax
    0.00 :   a17f6:  push   %r14
    0.00 :   a17f8:  push   %r13
    0.00 :   a17fa:  mov    %rdi,%r13
    0.00 :   a17fd:  push   %r12
    0.00 :   a17ff:  lea    0x10(%rdi),%r12
    0.00 :   a1803:  push   %rbp
    0.00 :   a1804:  push   %rbx
    0.00 :   a1805:  sub    $0x38,%rsp
    0.00 :   a1809:  movl   $0x0,0x8(%rdi)
    0.00 :   a1810:  mov    %rax,0x8(%rsp)
    0.00 :   a1815:  xor    %ebx,%ebx
    0.00 :   a1817:  xchg   %rbx,(%r12)
    0.00 :   a181b:  test   %rbx,%rbx
    0.00 :   a181e:  jne    a1895 <malloc_consolidate+0xa5>
    0.00 :   a1820:  add    $0x8,%r12
    0.00 :   a1824:  cmp    %r12,0x8(%rsp)
    0.00 :   a1829:  jne    a1815 <malloc_consolidate+0x25>
    0.00 :   a182b:  add    $0x38,%rsp
    0.00 :   a182f:  pop    %rbx
    0.00 :   a1830:  pop    %rbp
    0.00 :   a1831:  pop    %r12
    0.00 :   a1833:  pop    %r13
    0.00 :   a1835:  pop    %r14
    0.00 :   a1837:  pop    %r15
    0.00 :   a1839:  ret
    0.00 :   a183a:  nopw   0x0(%rax,%rax,1)
    0.00 :   a1840:  testb  $0x1,0x8(%r14,%r10,1)
   92.05 :   a1846:  je     a1950 <malloc_consolidate+0x160>
    0.00 :   a184c:  and    $0xfffffffffffffffe,%rcx
    0.00 :   a1850:  mov    %rcx,0x8(%r14)
    0.00 :   a1854:  mov    0x70(%r13),%rdx
    0.00 :   a1858:  mov    %rbx,0x70(%r13)
    0.00 :   a185c:  movq   %rdx,%xmm0
    0.00 :   a1861:  mov    %rbx,0x18(%rdx)
    7.95 :   a1865:  movhps 0x8(%rsp),%xmm0
    0.00 :   a186a:  cmp    $0x3ff,%rbp
    0.00 :   a1871:  jbe    a187b <malloc_consolidate+0x8b>
    0.00 :   a1873:  pxor   %xmm1,%xmm1
    0.00 :   a1877:  movups %xmm1,0x20(%rbx)
    0.00 :   a187b:  mov    %rbp,%rdx
    0.00 :   a187e:  movups %xmm0,0x10(%rbx)
    0.00 :   a1882:  or     $0x1,%rdx
    0.00 :   a1886:  mov    %rdx,0x8(%rbx)
    0.00 :   a188a:  mov    %rbp,(%r14)
    0.00 :   a188d:  cmp    %r15,%r8
    0.00 :   a1890:  je     a1820 <malloc_consolidate+0x30>
    0.00 :   a1892:  mov    %r9,%rbx
    0.00 :   a1895:  test   $0xf,%bl
    0.00 :   a1898:  jne    a1980 <malloc_consolidate+0x190>
    0.00 :   a189e:  mov    0x8(%rbx),%rdx
    0.00 :   a18a2:  mov    %edx,%ecx
    0.00 :   a18a4:  shr    $0x4,%ecx
    0.00 :   a18a7:  sub    $0x2,%ecx
    0.00 :   a18aa:  lea    0x10(%r13,%rcx,8),%rcx
    0.00 :   a18af:  cmp    %rcx,%r12
    0.00 :   a18b2:  jne    a199c <malloc_consolidate+0x1ac>
    0.00 :   a18b8:  mov    %rdx,%rbp
    0.00 :   a18bb:  mov    0x10(%rbx),%r8
    0.00 :   a18bf:  lea    0x10(%rbx),%r15
    0.00 :   a18c3:  and    $0xfffffffffffffff8,%rbp
    0.00 :   a18c7:  shr    $0xc,%r15
    0.00 :   a18cb:  lea    (%rbx,%rbp,1),%r14
    0.00 :   a18cf:  mov    %r8,%r9
    0.00 :   a18d2:  mov    0x8(%r14),%rcx
    0.00 :   a18d6:  xor    %r15,%r9
    0.00 :   a18d9:  mov    %rcx,%r10
    0.00 :   a18dc:  and    $0xfffffffffffffff8,%r10
    0.00 :   a18e0:  and    $0x1,%edx
    0.00 :   a18e3:  jne    a192f <malloc_consolidate+0x13f>
    0.00 :   a18e5:  mov    (%rbx),%rdx
    0.00 :   a18e8:  sub    %rdx,%rbx
    0.00 :   a18eb:  add    %rdx,%rbp
    0.00 :   a18ee:  mov    0x8(%rbx),%rdi
    0.00 :   a18f2:  and    $0xfffffffffffffff8,%rdi
    0.00 :   a18f6:  cmp    %rdx,%rdi
    0.00 :   a18f9:  jne    a1990 <malloc_consolidate+0x1a0>
    0.00 :   a18ff:  mov    %rbx,%rdi
    0.00 :   a1902:  mov    %r10,0x28(%rsp)
    0.00 :   a1907:  mov    %r9,0x20(%rsp)
    0.00 :   a190c:  mov    %rcx,0x18(%rsp)
    0.00 :   a1911:  mov    %r8,0x10(%rsp)
    0.00 :   a1916:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a191b:  mov    0x28(%rsp),%r10
    0.00 :   a1920:  mov    0x20(%rsp),%r9
    0.00 :   a1925:  mov    0x18(%rsp),%rcx
    0.00 :   a192a:  mov    0x10(%rsp),%r8
    0.00 :   a192f:  cmp    %r14,0x60(%r13)
    0.00 :   a1933:  jne    a1840 <malloc_consolidate+0x50>
    0.00 :   a1939:  add    %r10,%rbp
    0.00 :   a193c:  or     $0x1,%rbp
    0.00 :   a1940:  mov    %rbp,0x8(%rbx)
    0.00 :   a1944:  mov    %rbx,0x60(%r13)
    0.00 :   a1948:  jmp    a188d <malloc_consolidate+0x9d>
    0.00 :   a194d:  nopl   (%rax)
    0.00 :   a1950:  add    %r10,%rbp
    0.00 :   a1953:  mov    %r14,%rdi
    0.00 :   a1956:  mov    %r9,0x18(%rsp)
    0.00 :   a195b:  mov    %r8,0x10(%rsp)
    0.00 :   a1960:  lea    (%rbx,%rbp,1),%r14
    0.00 :   a1964:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a1969:  mov    0x10(%rsp),%r8
    0.00 :   a196e:  mov    0x18(%rsp),%r9
    0.00 :   a1973:  jmp    a1854 <malloc_consolidate+0x64>
    0.00 :   a1978:  nopl   0x0(%rax,%rax,1)
    0.00 :   a1980:  lea    0x13cc31(%rip),%rdi        # 1de5b8 <__PRETTY_FUNCTION__.1+0x478>
    0.00 :   a1987:  call   a0ce0 <malloc_printerr>
    0.00 :   a198c:  nopl   0x0(%rax)
    0.00 :   a1990:  lea    0x13cc89(%rip),%rdi        # 1de620 <__PRETTY_FUNCTION__.1+0x4e0>
    0.00 :   a1997:  call   a0ce0 <malloc_printerr>
    0.00 :   a199c:  lea    0x13cc4d(%rip),%rdi        # 1de5f0 <__PRETTY_FUNCTION__.1+0x4b0>
    0.00 :   a19a3:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a0440 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@plt>:
    0.00 :   a0440:  endbr64
  100.00 :   a0444:  bnd jmp *0x186c75(%rip)        # 2270c0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const@@GLIBCXX_3.4+0xf94e0>
    0.00 :   a044b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     0000000000028490 <*ABS*+0xa86a0@plt>:
    0.00 :   28490:  endbr64
  100.00 :   28494:  bnd jmp *0x1f1bfd(%rip)        # 21a098 <_GLOBAL_OFFSET_TABLE_+0x98>
    0.00 :   2849b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of spgemm_cpu_exec for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000064b6 <std::_Hashtable<int, std::pair<int const, float>, std::allocator<std::pair<int const, float> >, std::__detail::_Select1st, std::equal_to<int>, std::hash<int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_begin() const>:
  100.00 :   64b6:   endbr64
    0.00 :   64ba:   push   %rbp
    0.00 :   64bb:   mov    %rsp,%rbp
    0.00 :   64be:   mov    %rdi,-0x8(%rbp)
    0.00 :   64c2:   mov    -0x8(%rbp),%rax
    0.00 :   64c6:   mov    0x10(%rax),%rax
    0.00 :   64ca:   pop    %rbp
    0.00 :   64cb:   ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b240 <check_match>:
    0.00 :   b240:   push   %r14
    0.00 :   b242:   movzwl 0x6(%r9),%eax
    0.06 :   b247:   mov    %rdi,%r10
    0.00 :   b24a:   push   %r13
    0.00 :   b24c:   mov    %rdx,%r13
    0.00 :   b24f:   mov    %r8d,%edx
    0.00 :   b252:   push   %r12
    0.00 :   b254:   push   %rbp
    0.00 :   b255:   mov    %ecx,%ebp
    0.00 :   b257:   movzbl 0x4(%r9),%ecx
    0.00 :   b25c:   push   %rbx
    0.00 :   b25d:   mov    %r9,%rbx
    0.00 :   b260:   mov    0x40(%rsp),%r12
    0.00 :   b265:   and    $0xf,%ecx
    0.00 :   b268:   cmpq   $0x0,0x8(%r9)
    0.00 :   b26d:   je     b390 <check_match+0x150>
    0.00 :   b273:   xor    %r8d,%r8d
    0.00 :   b276:   test   %ax,%ax
    0.00 :   b279:   mov    $0xfffffb98,%eax
    0.00 :   b27e:   sete   %r8b
    0.00 :   b282:   sar    %cl,%eax
    0.00 :   b284:   and    %edx,%r8d
    0.00 :   b287:   and    $0x1,%eax
    0.00 :   b28a:   or     %eax,%r8d
    0.00 :   b28d:   jne    b360 <check_match+0x120>
    0.00 :   b293:   cmp    %rsi,%rbx
    0.00 :   b296:   je     b2af <check_match+0x6f>
    0.00 :   b298:   mov    (%rbx),%edi
    0.00 :   b29a:   mov    %r10,%rsi
    0.00 :   b29d:   add    0x38(%rsp),%rdi
    0.00 :   b2a2:   call   27220 <strcmp>
    0.00 :   b2a7:   test   %eax,%eax
    0.00 :   b2a9:   jne    b360 <check_match+0x120>
    0.00 :   b2af:   mov    0x348(%r12),%rax
    0.00 :   b2b7:   test   %r13,%r13
    0.00 :   b2ba:   je     b310 <check_match+0xd0>
    0.00 :   b2bc:   test   %rax,%rax
    0.00 :   b2bf:   je     b3b0 <check_match+0x170>
    0.00 :   b2c5:   mov    0x30(%rsp),%edx
    0.00 :   b2c9:   movzwl (%rax,%rdx,2),%r14d
    0.00 :   b2ce:   mov    %r14,%rax
    0.00 :   b2d1:   and    $0x7fff,%eax
    0.00 :   b2d6:   lea    (%rax,%rax,2),%rdx
    0.00 :   b2da:   mov    0x2e8(%r12),%rax
    0.00 :   b2e2:   lea    (%rax,%rdx,8),%rax
    0.00 :   b2e6:   mov    0x8(%rax),%ebp
   99.94 :   b2e9:   cmp    0x8(%r13),%ebp
    0.00 :   b2ed:   je     b370 <check_match+0x130>
    0.00 :   b2f3:   or     0xc(%r13),%ebp
    0.00 :   b2f7:   jne    b360 <check_match+0x120>
    0.00 :   b2f9:   test   %r14w,%r14w
    0.00 :   b2fd:   js     b360 <check_match+0x120>
    0.00 :   b2ff:   mov    %rbx,%rax
    0.00 :   b302:   pop    %rbx
    0.00 :   b303:   pop    %rbp
    0.00 :   b304:   pop    %r12
    0.00 :   b306:   pop    %r13
    0.00 :   b308:   pop    %r14
    0.00 :   b30a:   ret
    0.00 :   b30b:   nopl   0x0(%rax,%rax,1)
    0.00 :   b310:   test   %rax,%rax
    0.00 :   b313:   je     b2ff <check_match+0xbf>
    0.00 :   b315:   mov    0x30(%rsp),%edx
    0.00 :   b319:   movzwl (%rax,%rdx,2),%edx
    0.00 :   b31d:   xor    %eax,%eax
    0.00 :   b31f:   mov    %edx,%ecx
    0.00 :   b321:   and    $0x7fff,%ecx
    0.00 :   b327:   and    $0x2,%ebp
    0.00 :   b32a:   sete   %al
    0.00 :   b32d:   add    $0x2,%eax
    0.00 :   b330:   cmp    %eax,%ecx
    0.00 :   b332:   jl     b2ff <check_match+0xbf>
    0.00 :   b334:   test   %dx,%dx
    0.00 :   b337:   js     b360 <check_match+0x120>
    0.00 :   b339:   mov    0x50(%rsp),%rax
    0.00 :   b33e:   mov    0x50(%rsp),%rsi
    0.00 :   b343:   mov    (%rax),%eax
    0.00 :   b345:   lea    0x1(%rax),%edx
    0.00 :   b348:   mov    %edx,(%rsi)
    0.00 :   b34a:   test   %eax,%eax
    0.00 :   b34c:   jne    b360 <check_match+0x120>
    0.00 :   b34e:   mov    0x48(%rsp),%rax
    0.00 :   b353:   mov    %rbx,(%rax)
    0.00 :   b356:   cs nopw 0x0(%rax,%rax,1)
    0.00 :   b360:   xor    %eax,%eax
    0.00 :   b362:   pop    %rbx
    0.00 :   b363:   pop    %rbp
    0.00 :   b364:   pop    %r12
    0.00 :   b366:   pop    %r13
    0.00 :   b368:   pop    %r14
    0.00 :   b36a:   ret
    0.00 :   b36b:   nopl   0x0(%rax,%rax,1)
    0.00 :   b370:   mov    0x0(%r13),%rsi
    0.00 :   b374:   mov    (%rax),%rdi
    0.00 :   b377:   call   27220 <strcmp>
    0.00 :   b37c:   test   %eax,%eax
    0.00 :   b37e:   je     b2ff <check_match+0xbf>
    0.00 :   b384:   jmp    b2f3 <check_match+0xb3>
    0.00 :   b389:   nopl   0x0(%rax)
    0.00 :   b390:   cmp    $0x6,%cl
    0.00 :   b393:   je     b273 <check_match+0x33>
    0.00 :   b399:   cmp    $0xfff1,%ax
    0.00 :   b39d:   je     b273 <check_match+0x33>
    0.00 :   b3a3:   xor    %eax,%eax
    0.00 :   b3a5:   jmp    b362 <check_match+0x122>
    0.00 :   b3a7:   nopw   0x0(%rax,%rax,1)
    0.00 :   b3b0:   mov    0x10(%r13),%rdi
    0.00 :   b3b4:   test   %rdi,%rdi
    0.00 :   b3b7:   je     b2ff <check_match+0xbf>
    0.00 :   b3bd:   mov    %r12,%rsi
    0.00 :   b3c0:   call   d690 <_dl_name_match_p>
    0.00 :   b3c5:   test   %eax,%eax
    0.00 :   b3c7:   je     b2ff <check_match+0xbf>
    0.00 :   b3cd:   lea    0x257b4(%rip),%rcx        # 30b88 <__PRETTY_FUNCTION__.2>
    0.00 :   b3d4:   mov    $0x6a,%edx
    0.00 :   b3d9:   lea    0x22a9d(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   b3e0:   lea    0x254c1(%rip),%rdi        # 308a8 <__PRETTY_FUNCTION__.10+0x10>
    0.00 :   b3e7:   call   1e460 <__GI___assert_fail>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000021030 <_dl_start>:
    0.00 :   21030:  endbr64
    0.00 :   21034:  push   %rbp
    0.00 :   21035:  mov    %rsp,%rbp
    0.00 :   21038:  push   %r15
    0.00 :   2103a:  push   %r14
    0.00 :   2103c:  push   %r13
    0.00 :   2103e:  push   %r12
    0.00 :   21040:  push   %rbx
    0.00 :   21041:  sub    $0x88,%rsp
    0.00 :   21048:  mov    %rdi,-0x78(%rbp)
    0.00 :   2104c:  rdtsc
    0.00 :   2104e:  lea    -0x21055(%rip),%r12        # 0 <GLIBC_2.2.5>
    0.00 :   21055:  andb   $0xdf,0x19db2(%rip)        # 3ae0e <_rtld_global+0xdce>
    0.00 :   2105c:  mov    %r12,0x19a8d(%rip)        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   21063:  shl    $0x20,%rdx
    0.00 :   21067:  or     %rdx,%rax
    0.00 :   2106a:  lea    0x18e0f(%rip),%rdx        # 39e80 <_DYNAMIC>
    0.00 :   21071:  mov    %rax,0x18a28(%rip)        # 39aa0 <start_time>
    0.00 :   21078:  mov    0x18e01(%rip),%rax        # 39e80 <_DYNAMIC>
    0.00 :   2107f:  mov    %rdx,0x19a7a(%rip)        # 3ab00 <_rtld_global+0xac0>
    0.00 :   21086:  test   %rax,%rax
    0.00 :   21089:  je     21128 <_dl_start+0xf8>
    0.00 :   2108f:  mov    $0x6fffffff,%edi
    0.00 :   21094:  mov    $0x6ffffdff,%r10d
    0.00 :   2109a:  mov    $0x6ffffeff,%ebx
    0.00 :   2109f:  mov    $0x6fffff41,%r13d
    0.00 :   210a5:  lea    0x19a84(%rip),%rcx        # 3ab30 <_rtld_global+0xaf0>
    0.00 :   210ac:  mov    $0x6ffffe35,%r11d
    0.00 :   210b2:  mov    $0x32,%r9d
    0.00 :   210b8:  mov    $0x70000022,%r8d
    0.00 :   210be:  jmp    210da <_dl_start+0xaa>
    0.00 :   210c0:  mov    %r8,%rsi
    0.00 :   210c3:  sub    %rax,%rsi
    0.00 :   210c6:  mov    %rsi,%rax
    0.00 :   210c9:  mov    %rdx,(%rcx,%rax,8)
    0.00 :   210cd:  mov    0x10(%rdx),%rax
    0.00 :   210d1:  add    $0x10,%rdx
    0.00 :   210d5:  test   %rax,%rax
    0.00 :   210d8:  je     21128 <_dl_start+0xf8>
    0.00 :   210da:  cmp    $0x22,%rax
    0.00 :   210de:  jbe    210c9 <_dl_start+0x99>
    0.00 :   210e0:  mov    %rdi,%rsi
    0.00 :   210e3:  sub    %rax,%rsi
    0.00 :   210e6:  cmp    $0xf,%rsi
    0.00 :   210ea:  jbe    210c0 <_dl_start+0x90>
    0.00 :   210ec:  lea    (%rax,%rax,1),%esi
    0.00 :   210ef:  mov    %esi,%r14d
    0.00 :   210f2:  sar    %r14d
    0.00 :   210f5:  cmp    $0xfffffff8,%esi
    0.00 :   210f8:  jbe    21108 <_dl_start+0xd8>
    0.00 :   210fa:  mov    %r9d,%eax
    0.00 :   210fd:  sub    %r14d,%eax
    0.00 :   21100:  jmp    210c9 <_dl_start+0x99>
    0.00 :   21102:  nopw   0x0(%rax,%rax,1)
    0.00 :   21108:  mov    %r10,%rsi
    0.00 :   2110b:  sub    %rax,%rsi
    0.00 :   2110e:  cmp    $0xb,%rsi
    0.00 :   21112:  ja     215d0 <_dl_start+0x5a0>
    0.00 :   21118:  mov    %r11,%rsi
    0.00 :   2111b:  sub    %rax,%rsi
    0.00 :   2111e:  mov    %rsi,%rax
    0.00 :   21121:  jmp    210c9 <_dl_start+0x99>
    0.00 :   21123:  nopl   0x0(%rax,%rax,1)
    0.00 :   21128:  movzbl 0x19cdf(%rip),%edx        # 3ae0e <_rtld_global+0xdce>
    0.00 :   2112f:  mov    %edx,%edi
    0.00 :   21131:  and    $0x20,%edi
    0.00 :   21134:  jne    211ba <_dl_start+0x18a>
    0.00 :   2113a:  mov    0x19a0f(%rip),%rax        # 3ab50 <_rtld_global+0xb10>
    0.00 :   21141:  test   %rax,%rax
    0.00 :   21144:  je     2114a <_dl_start+0x11a>
    0.00 :   21146:  add    %r12,0x8(%rax)
    0.00 :   2114a:  mov    0x199f7(%rip),%rax        # 3ab48 <_rtld_global+0xb08>
    0.00 :   21151:  test   %rax,%rax
    0.00 :   21154:  je     2115a <_dl_start+0x12a>
    0.00 :   21156:  add    %r12,0x8(%rax)
    0.00 :   2115a:  mov    0x199f7(%rip),%rax        # 3ab58 <_rtld_global+0xb18>
    0.00 :   21161:  test   %rax,%rax
    0.00 :   21164:  je     2116a <_dl_start+0x13a>
    0.00 :   21166:  add    %r12,0x8(%rax)
    0.00 :   2116a:  mov    0x199ef(%rip),%rax        # 3ab60 <_rtld_global+0xb20>
    0.00 :   21171:  test   %rax,%rax
    0.00 :   21174:  je     2117a <_dl_start+0x14a>
    0.00 :   21176:  add    %r12,0x8(%rax)
    0.00 :   2117a:  mov    0x199e7(%rip),%rax        # 3ab68 <_rtld_global+0xb28>
    0.00 :   21181:  test   %rax,%rax
    0.00 :   21184:  je     2118a <_dl_start+0x15a>
    0.00 :   21186:  add    %r12,0x8(%rax)
    0.00 :   2118a:  mov    0x19a57(%rip),%rax        # 3abe8 <_rtld_global+0xba8>
    0.00 :   21191:  test   %rax,%rax
    0.00 :   21194:  je     2119a <_dl_start+0x16a>
    0.00 :   21196:  add    %r12,0x8(%rax)
    0.00 :   2119a:  mov    0x19b1f(%rip),%rax        # 3acc0 <_rtld_global+0xc80>
    0.00 :   211a1:  test   %rax,%rax
    0.00 :   211a4:  je     211aa <_dl_start+0x17a>
    0.00 :   211a6:  add    %r12,0x8(%rax)
    0.00 :   211aa:  mov    0x19bdf(%rip),%rax        # 3ad90 <_rtld_global+0xd50>
    0.00 :   211b1:  test   %rax,%rax
    0.00 :   211b4:  je     211ba <_dl_start+0x18a>
    0.00 :   211b6:  add    %r12,0x8(%rax)
    0.00 :   211ba:  mov    0x19a0f(%rip),%rax        # 3abd0 <_rtld_global+0xb90>
    0.00 :   211c1:  test   %rax,%rax
    0.00 :   211c4:  je     211d1 <_dl_start+0x1a1>
    0.00 :   211c6:  cmpq   $0x7,0x8(%rax)
    0.00 :   211cb:  jne    2171a <_dl_start+0x6ea>
    0.00 :   211d1:  mov    0x19990(%rip),%rcx        # 3ab68 <_rtld_global+0xb28>
    0.00 :   211d8:  test   %rcx,%rcx
    0.00 :   211db:  je     211ef <_dl_start+0x1bf>
    0.00 :   211dd:  mov    0x19994(%rip),%rsi        # 3ab78 <_rtld_global+0xb38>
    0.00 :   211e4:  cmpq   $0x18,0x8(%rsi)
    0.00 :   211e9:  jne    216bd <_dl_start+0x68d>
    0.00 :   211ef:  cmpq   $0x0,0x19a21(%rip)        # 3ac18 <_rtld_global+0xbd8>
    0.00 :   211f7:  jne    2169e <_dl_start+0x66e>
    0.00 :   211fd:  cmpq   $0x0,0x199a3(%rip)        # 3aba8 <_rtld_global+0xb68>
    0.00 :   21205:  jne    2167f <_dl_start+0x64f>
    0.00 :   2120b:  mov    0x19a56(%rip),%rsi        # 3ac68 <_rtld_global+0xc28>
    0.00 :   21212:  test   %rsi,%rsi
    0.00 :   21215:  je     21225 <_dl_start+0x1f5>
    0.00 :   21217:  testq  $0xfffffffffffffffe,0x8(%rsi)
    0.00 :   2121f:  jne    21660 <_dl_start+0x630>
    0.00 :   21225:  mov    0x199f4(%rip),%rsi        # 3ac20 <_rtld_global+0xbe0>
    0.00 :   2122c:  test   %rsi,%rsi
    0.00 :   2122f:  je     2123f <_dl_start+0x20f>
    0.00 :   21231:  testq  $0xfffffffffffffff7,0x8(%rsi)
    0.00 :   21239:  jne    216dc <_dl_start+0x6ac>
    0.00 :   2123f:  pxor   %xmm0,%xmm0
    0.00 :   21243:  mov    0x1999e(%rip),%r10        # 3abe8 <_rtld_global+0xba8>
    0.00 :   2124a:  movaps %xmm0,-0x70(%rbp)
    0.00 :   2124e:  movaps %xmm0,-0x60(%rbp)
    0.00 :   21252:  movaps %xmm0,-0x50(%rbp)
    0.00 :   21256:  movaps %xmm0,-0x40(%rbp)
    0.00 :   2125a:  test   %rcx,%rcx
    0.00 :   2125d:  je     21610 <_dl_start+0x5e0>
    0.00 :   21263:  mov    0x8(%rcx),%rcx
    0.00 :   21267:  test   %dil,%dil
    0.00 :   2126a:  mov    0x19a07(%rip),%r9        # 3ac78 <_rtld_global+0xc38>
    0.00 :   21271:  lea    (%rcx,%r12,1),%rsi
    0.00 :   21275:  cmovne %rsi,%rcx
    0.00 :   21279:  mov    0x198f0(%rip),%rsi        # 3ab70 <_rtld_global+0xb30>
    0.00 :   21280:  mov    0x8(%rsi),%rsi
    0.00 :   21284:  movq   %rcx,%xmm0
    0.00 :   21289:  movq   %rsi,%xmm2
    0.00 :   2128e:  lea    (%rsi,%rcx,1),%r8
    0.00 :   21292:  punpcklqdq %xmm2,%xmm0
    0.00 :   21296:  movaps %xmm0,-0x70(%rbp)
    0.00 :   2129a:  test   %r9,%r9
    0.00 :   2129d:  je     212a7 <_dl_start+0x277>
    0.00 :   2129f:  mov    0x8(%r9),%r9
    0.00 :   212a3:  mov    %r9,-0x60(%rbp)
    0.00 :   212a7:  test   %rax,%rax
    0.00 :   212aa:  je     212ee <_dl_start+0x2be>
    0.00 :   212ac:  mov    0x8(%r10),%rax
    0.00 :   212b0:  test   %dil,%dil
    0.00 :   212b3:  mov    0x19886(%rip),%rdi        # 3ab40 <_rtld_global+0xb00>
    0.00 :   212ba:  lea    (%rax,%r12,1),%r9
    0.00 :   212be:  mov    0x8(%rdi),%rdi
    0.00 :   212c2:  cmovne %r9,%rax
    0.00 :   212c6:  movq   %rdi,%xmm3
    0.00 :   212cb:  movq   %rax,%xmm0
    0.00 :   212d0:  lea    (%rdi,%rax,1),%r9
    0.00 :   212d4:  punpcklqdq %xmm3,%xmm0
    0.00 :   212d8:  cmp    %r8,%r9
    0.00 :   212db:  je     215fa <_dl_start+0x5ca>
    0.00 :   212e1:  cmp    %r8,%rax
    0.00 :   212e4:  je     215ee <_dl_start+0x5be>
    0.00 :   212ea:  movaps %xmm0,-0x50(%rbp)
    0.00 :   212ee:  lea    -0x70(%rbp),%rax
    0.00 :   212f2:  lea    -0x30(%rbp),%r10
    0.00 :   212f6:  mov    %rax,-0xa8(%rbp)
    0.00 :   212fd:  mov    %rax,%r8
    0.00 :   21300:  lea    -0x9207(%rip),%r9        # 18100 <_dl_tlsdesc_return>
    0.00 :   21307:  mov    0x19852(%rip),%rsi        # 3ab60 <_rtld_global+0xb20>
    0.00 :   2130e:  mov    (%r8),%rax
    0.00 :   21311:  mov    0x10(%r8),%rcx
    0.00 :   21315:  mov    0x8(%r8),%rdi
    0.00 :   21319:  mov    0x8(%rsi),%rsi
    0.00 :   2131d:  add    %rax,%rdi
    0.00 :   21320:  and    $0x20,%edx
    0.00 :   21323:  lea    (%rcx,%rcx,2),%rdx
    0.00 :   21327:  lea    (%rsi,%r12,1),%r11
    0.00 :   2132b:  lea    (%rax,%rdx,8),%rbx
    0.00 :   2132f:  cmovne %r11,%rsi
    0.00 :   21333:  cmp    %rbx,%rax
    0.00 :   21336:  jae    21363 <_dl_start+0x333>
    0.00 :   21338:  nopl   0x0(%rax,%rax,1)
    0.00 :   21340:  mov    (%rax),%rdx
    0.00 :   21343:  add    %r12,%rdx
    0.00 :   21346:  cmpl   $0x8,0x8(%rax)
    0.00 :   2134a:  jne    21641 <_dl_start+0x611>
    0.00 :   21350:  mov    0x10(%rax),%rcx
    0.00 :   21354:  add    $0x18,%rax
    0.00 :   21358:  add    %r12,%rcx
    0.00 :   2135b:  mov    %rcx,(%rdx)
    0.00 :   2135e:  cmp    %rax,%rbx
    0.00 :   21361:  ja     21340 <_dl_start+0x310>
    0.00 :   21363:  cmpq   $0x0,0x19955(%rip)        # 3acc0 <_rtld_global+0xc80>
    0.00 :   2136b:  je     216fb <_dl_start+0x6cb>
    0.00 :   21371:  mov    %r12,%rdx
    0.00 :   21374:  cmp    %rbx,%rdi
    0.00 :   21377:  ja     21397 <_dl_start+0x367>
    0.00 :   21379:  jmp    21428 <_dl_start+0x3f8>
    0.00 :   2137e:  xchg   %ax,%ax
    0.00 :   21380:  cmp    $0x5,%r14
    0.00 :   21384:  ja     21480 <_dl_start+0x450>
    0.00 :   2138a:  add    $0x18,%rbx
    0.00 :   2138e:  cmp    %rbx,%rdi
    0.00 :   21391:  jbe    21428 <_dl_start+0x3f8>
    0.00 :   21397:  mov    0x8(%rbx),%r13
    0.00 :   2139b:  mov    (%rbx),%r12
    0.00 :   2139e:  mov    %r13,%rax
    0.00 :   213a1:  mov    %r13,%r14
    0.00 :   213a4:  add    %rdx,%r12
    0.00 :   213a7:  shr    $0x20,%rax
    0.00 :   213ab:  lea    (%rax,%rax,2),%rax
    0.00 :   213af:  lea    (%rsi,%rax,8),%r15
    0.00 :   213b3:  and    $0xffffffff,%r14d
    0.00 :   213b7:  je     2138a <_dl_start+0x35a>
    0.00 :   213b9:  xor    %eax,%eax
    0.00 :   213bb:  test   %r15,%r15
    0.00 :   213be:  je     213ec <_dl_start+0x3bc>
    0.00 :   213c0:  movzbl 0x4(%r15),%ecx
    0.00 :   213c5:  movzwl 0x6(%r15),%r11d
    0.00 :   213ca:  mov    0x8(%r15),%rax
    0.00 :   213ce:  and    $0xf,%ecx
    0.00 :   213d1:  cmp    $0xfff1,%r11w
    0.00 :   213d6:  je     214b0 <_dl_start+0x480>
    0.00 :   213dc:  add    0x1970d(%rip),%rax        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   213e3:  cmp    $0xa,%cl
    0.00 :   213e6:  je     215c0 <_dl_start+0x590>
    0.00 :   213ec:  cmp    $0x12,%r14
    0.00 :   213f0:  je     21490 <_dl_start+0x460>
    0.00 :   213f6:  ja     21450 <_dl_start+0x420>
    0.00 :   213f8:  test   $0xfffffff8,%r13d
    0.00 :   213ff:  je     21380 <_dl_start+0x350>
    0.00 :   21405:  cmp    $0x10,%r14
    0.00 :   21409:  jne    2138a <_dl_start+0x35a>
    0.00 :   2140f:  add    $0x18,%rbx
    0.00 :   21413:  movq   $0x1,(%r12)
    0.00 :   2141b:  cmp    %rbx,%rdi
    0.00 :   2141e:  ja     21397 <_dl_start+0x367>
    0.00 :   21424:  nopl   0x0(%rax)
    0.00 :   21428:  add    $0x20,%r8
    0.00 :   2142c:  cmp    %r10,%r8
    0.00 :   2142f:  je     21510 <_dl_start+0x4e0>
    0.00 :   21435:  mov    0x196b4(%rip),%r12        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   2143c:  movzbl 0x199cb(%rip),%edx        # 3ae0e <_rtld_global+0xdce>
    0.00 :   21443:  jmp    21307 <_dl_start+0x2d7>
    0.00 :   21448:  nopl   0x0(%rax,%rax,1)
    0.00 :   21450:  cmp    $0x24,%r14
    0.00 :   21454:  jne    2138a <_dl_start+0x35a>
    0.00 :   2145a:  mov    0x10(%rbx),%rax
    0.00 :   2145e:  sub    0x19ae3(%rip),%rax        # 3af48 <_rtld_global+0xf08>
    0.00 :   21465:  add    0x8(%r15),%rax
    0.00 :   21469:  mov    %rax,0x8(%r12)
    0.00 :   2146e:  mov    %r9,(%r12)
    0.00 :   21472:  jmp    2138a <_dl_start+0x35a>
    0.00 :   21477:  nopw   0x0(%rax,%rax,1)
    0.00 :   21480:  add    0x10(%rbx),%rax
    0.00 :   21484:  mov    %rax,(%r12)
    0.00 :   21488:  jmp    2138a <_dl_start+0x35a>
    0.00 :   2148d:  nopl   (%rax)
    0.00 :   21490:  mov    0x10(%rbx),%rax
    0.00 :   21494:  sub    0x19aad(%rip),%rax        # 3af48 <_rtld_global+0xf08>
    0.00 :   2149b:  add    0x8(%r15),%rax
    0.00 :   2149f:  mov    %rax,(%r12)
    0.00 :   214a3:  jmp    2138a <_dl_start+0x35a>
    0.00 :   214a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   214b0:  cmp    $0xa,%cl
    0.00 :   214b3:  jne    213ec <_dl_start+0x3bc>
    0.00 :   214b9:  nopl   0x0(%rax)
    0.00 :   214c0:  mov    %r10,-0xa0(%rbp)
    0.00 :   214c7:  mov    %rdx,-0x98(%rbp)
    0.00 :   214ce:  mov    %rsi,-0x90(%rbp)
    0.00 :   214d5:  mov    %rdi,-0x88(%rbp)
    0.00 :   214dc:  mov    %r8,-0x80(%rbp)
    0.00 :   214e0:  call   *%rax
    0.00 :   214e2:  mov    -0xa0(%rbp),%r10
    0.00 :   214e9:  mov    -0x98(%rbp),%rdx
    0.00 :   214f0:  lea    -0x93f7(%rip),%r9        # 18100 <_dl_tlsdesc_return>
    0.00 :   214f7:  mov    -0x90(%rbp),%rsi
    0.00 :   214fe:  mov    -0x88(%rbp),%rdi
    0.00 :   21505:  mov    -0x80(%rbp),%r8
    0.00 :   21509:  jmp    213ec <_dl_start+0x3bc>
    0.00 :   2150e:  xchg   %ax,%ax
    0.00 :   21510:  orb    $0x4,0x198f5(%rip)        # 3ae0c <_rtld_global+0xdcc>
  100.00 :   21517:  call   1e2e0 <__rtld_malloc_init_stubs>
    0.00 :   2151c:  lea    -0x1c103(%rip),%rax        # 5420 <__GI__dl_find_object>
    0.00 :   21523:  mov    %rax,0x1892e(%rip)        # 39e58 <_rtld_global_ro+0x378>
    0.00 :   2152a:  rdtsc
    0.00 :   2152c:  lea    0x195bd(%rip),%rbx        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   21533:  mov    %rbx,%rdi
    0.00 :   21536:  shl    $0x20,%rdx
    0.00 :   2153a:  or     %rdx,%rax
    0.00 :   2153d:  mov    %rax,0x1855c(%rip)        # 39aa0 <start_time>
    0.00 :   21544:  call   13530 <_dl_setup_hash>
    0.00 :   21549:  lea    0x19d88(%rip),%rax        # 3b2d8 <_end>
    0.00 :   21550:  lea    -0x21557(%rip),%rdi        # 0 <GLIBC_2.2.5>
    0.00 :   21557:  mov    %rbx,0x195ba(%rip)        # 3ab18 <_rtld_global+0xad8>
    0.00 :   2155e:  movq   %rax,%xmm1
    0.00 :   21563:  movq   %rdi,%xmm0
    0.00 :   21568:  mov    -0x78(%rbp),%rdi
    0.00 :   2156c:  lea    0x9da2(%rip),%rax        # 2b315 <_etext>
    0.00 :   21573:  punpcklqdq %xmm1,%xmm0
    0.00 :   21577:  lea    0x362(%rip),%rsi        # 218e0 <dl_main>
    0.00 :   2157e:  mov    %rax,0x198d3(%rip)        # 3ae58 <_rtld_global+0xe18>
    0.00 :   21585:  mov    %rbp,0x18504(%rip)        # 39a90 <__libc_stack_end>
    0.00 :   2158c:  movups %xmm0,0x198b5(%rip)        # 3ae48 <_rtld_global+0xe08>
    0.00 :   21593:  call   1f440 <_dl_sysdep_start>
    0.00 :   21598:  mov    %rax,%r12
    0.00 :   2159b:  testb  $0x80,0x1853e(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   215a2:  jne    2161c <_dl_start+0x5ec>
    0.00 :   215a4:  add    $0x88,%rsp
    0.00 :   215ab:  mov    %r12,%rax
    0.00 :   215ae:  pop    %rbx
    0.00 :   215af:  pop    %r12
    0.00 :   215b1:  pop    %r13
    0.00 :   215b3:  pop    %r14
    0.00 :   215b5:  pop    %r15
    0.00 :   215b7:  pop    %rbp
    0.00 :   215b8:  ret
    0.00 :   215b9:  nopl   0x0(%rax)
    0.00 :   215c0:  test   %r11w,%r11w
    0.00 :   215c4:  jne    214c0 <_dl_start+0x490>
    0.00 :   215ca:  jmp    213ec <_dl_start+0x3bc>
    0.00 :   215cf:  nop
    0.00 :   215d0:  mov    %rbx,%rsi
    0.00 :   215d3:  sub    %rax,%rsi
    0.00 :   215d6:  cmp    $0xa,%rsi
    0.00 :   215da:  ja     210cd <_dl_start+0x9d>
    0.00 :   215e0:  mov    %r13,%rsi
    0.00 :   215e3:  sub    %rax,%rsi
    0.00 :   215e6:  mov    %rsi,%rax
    0.00 :   215e9:  jmp    210c9 <_dl_start+0x99>
    0.00 :   215ee:  add    %rsi,%rdi
    0.00 :   215f1:  mov    %rdi,-0x68(%rbp)
    0.00 :   215f5:  jmp    212ee <_dl_start+0x2be>
    0.00 :   215fa:  sub    %rdi,%rsi
    0.00 :   215fd:  lea    (%rsi,%rcx,1),%r8
    0.00 :   21601:  mov    %rsi,-0x68(%rbp)
    0.00 :   21605:  cmp    %r8,%rax
    0.00 :   21608:  jne    212ea <_dl_start+0x2ba>
    0.00 :   2160e:  jmp    215ee <_dl_start+0x5be>
    0.00 :   21610:  xor    %r8d,%r8d
    0.00 :   21613:  xor    %esi,%esi
    0.00 :   21615:  xor    %ecx,%ecx
    0.00 :   21617:  jmp    212a7 <_dl_start+0x277>
    0.00 :   2161c:  rdtsc
    0.00 :   2161e:  mov    -0xa8(%rbp),%rdi
    0.00 :   21625:  shl    $0x20,%rdx
    0.00 :   21629:  or     %rdx,%rax
    0.00 :   2162c:  sub    0x1846d(%rip),%rax        # 39aa0 <start_time>
    0.00 :   21633:  mov    %rax,-0x70(%rbp)
    0.00 :   21637:  call   20600 <print_statistics>
    0.00 :   2163c:  jmp    215a4 <_dl_start+0x574>
    0.00 :   21641:  lea    0xe468(%rip),%rcx        # 2fab0 <__PRETTY_FUNCTION__.2>
    0.00 :   21648:  mov    $0x216,%edx
    0.00 :   2164d:  lea    0xfa64(%rip),%rsi        # 310b8 <__PRETTY_FUNCTION__.0+0x2a8>
    0.00 :   21654:  lea    0xfa7d(%rip),%rdi        # 310d8 <__PRETTY_FUNCTION__.0+0x2c8>
    0.00 :   2165b:  call   1e460 <__GI___assert_fail>
    0.00 :   21660:  lea    0xe2c9(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21667:  mov    $0x7c,%edx
    0.00 :   2166c:  lea    0xd4ed(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   21673:  lea    0x10ebe(%rip),%rdi        # 32538 <__PRETTY_FUNCTION__.3+0xcf0>
    0.00 :   2167a:  call   1e460 <__GI___assert_fail>
    0.00 :   2167f:  lea    0xe2aa(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21686:  mov    $0x77,%edx
    0.00 :   2168b:  lea    0xd4ce(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   21692:  lea    0xd4f5(%rip),%rdi        # 2eb8e <__PRETTY_FUNCTION__.2+0x220>
    0.00 :   21699:  call   1e460 <__GI___assert_fail>
    0.00 :   2169e:  lea    0xe28b(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216a5:  mov    $0x76,%edx
    0.00 :   216aa:  lea    0xd4af(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216b1:  lea    0xd4bd(%rip),%rdi        # 2eb75 <__PRETTY_FUNCTION__.2+0x207>
    0.00 :   216b8:  call   1e460 <__GI___assert_fail>
    0.00 :   216bd:  lea    0xe26c(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216c4:  mov    $0x6e,%edx
    0.00 :   216c9:  lea    0xd490(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216d0:  lea    0xeff9(%rip),%rdi        # 306d0 <__PRETTY_FUNCTION__.0+0x3f0>
    0.00 :   216d7:  call   1e460 <__GI___assert_fail>
    0.00 :   216dc:  lea    0xe24d(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216e3:  mov    $0x7f,%edx
    0.00 :   216e8:  lea    0xd471(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216ef:  lea    0x10eaa(%rip),%rdi        # 325a0 <__PRETTY_FUNCTION__.3+0xd58>
    0.00 :   216f6:  call   1e460 <__GI___assert_fail>
    0.00 :   216fb:  lea    0xe6ae(%rip),%rcx        # 2fdb0 <__PRETTY_FUNCTION__.1>
    0.00 :   21702:  mov    $0x76,%edx
    0.00 :   21707:  lea    0xd497(%rip),%rsi        # 2eba5 <__PRETTY_FUNCTION__.2+0x237>
    0.00 :   2170e:  lea    0x10edb(%rip),%rdi        # 325f0 <__PRETTY_FUNCTION__.3+0xda8>
    0.00 :   21715:  call   1e460 <__GI___assert_fail>
    0.00 :   2171a:  lea    0xe20f(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21721:  mov    $0x66,%edx
    0.00 :   21726:  lea    0xd433(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   2172d:  lea    0xef74(%rip),%rdi        # 306a8 <__PRETTY_FUNCTION__.0+0x3c8>
    0.00 :   21734:  call   1e460 <__GI___assert_fail>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000015080 <rtld_mutex_dummy>:
  100.00 :   15080:  endbr64
    0.00 :   15084:  xor    %eax,%eax
    0.00 :   15086:  ret
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:Pu (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     00000000000a0ae0 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@plt>:
    0.00 :   a0ae0:  endbr64
  100.00 :   a0ae4:  bnd jmp *0x186925(%rip)        # 227410 <std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const@@GLIBCXX_3.4+0xf8a60>
    0.00 :   a0aeb:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:Pu (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000027220 <strcmp>:
    0.00 :   27220:  endbr64
    0.00 :   27224:  mov    %esi,%ecx
    0.00 :   27226:  mov    %edi,%eax
    0.00 :   27228:  and    $0x3f,%rcx
    0.00 :   2722c:  and    $0x3f,%rax
   16.67 :   27230:  cmp    $0x30,%ecx
    0.00 :   27233:  ja     27280 <strcmp+0x60>
    0.00 :   27235:  cmp    $0x30,%eax
    0.00 :   27238:  ja     27280 <strcmp+0x60>
    0.00 :   2723a:  movlpd (%rdi),%xmm1
   83.33 :   2723e:  movlpd (%rsi),%xmm2
    0.00 :   27242:  movhpd 0x8(%rdi),%xmm1
    0.00 :   27247:  movhpd 0x8(%rsi),%xmm2
    0.00 :   2724c:  pxor   %xmm0,%xmm0
    0.00 :   27250:  pcmpeqb %xmm1,%xmm0
    0.00 :   27254:  pcmpeqb %xmm2,%xmm1
    0.00 :   27258:  psubb  %xmm0,%xmm1
    0.00 :   2725c:  pmovmskb %xmm1,%edx
    0.00 :   27260:  sub    $0xffff,%edx
    0.00 :   27266:  jne    28640 <strcmp+0x1420>
    0.00 :   2726c:  add    $0x10,%rsi
    0.00 :   27270:  add    $0x10,%rdi
    0.00 :   27274:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2727f:  nop
    0.00 :   27280:  and    $0xfffffffffffffff0,%rsi
    0.00 :   27284:  and    $0xfffffffffffffff0,%rdi
    0.00 :   27288:  mov    $0xffff,%edx
    0.00 :   2728d:  xor    %r8d,%r8d
    0.00 :   27290:  and    $0xf,%ecx
    0.00 :   27293:  and    $0xf,%eax
    0.00 :   27296:  cmp    %eax,%ecx
    0.00 :   27298:  je     272c0 <strcmp+0xa0>
    0.00 :   2729a:  ja     272a3 <strcmp+0x83>
    0.00 :   2729c:  mov    %edx,%r8d
    0.00 :   2729f:  xchg   %eax,%ecx
    0.00 :   272a0:  xchg   %rsi,%rdi
    0.00 :   272a3:  lea    0xf(%rax),%r9
    0.00 :   272a7:  sub    %rcx,%r9
    0.00 :   272aa:  lea    0x6167(%rip),%r10        # 2d418 <unsecure_envvars.6+0x118>
    0.00 :   272b1:  movslq (%r10,%r9,4),%r9
    0.00 :   272b5:  lea    (%r10,%r9,1),%r10
    0.00 :   272b9:  notrack jmp *%r10
    0.00 :   272bd:  nopl   (%rax)
    0.00 :   272c0:  movdqa (%rsi),%xmm1
    0.00 :   272c4:  pxor   %xmm0,%xmm0
    0.00 :   272c8:  pcmpeqb %xmm1,%xmm0
    0.00 :   272cc:  pcmpeqb (%rdi),%xmm1
    0.00 :   272d0:  psubb  %xmm0,%xmm1
    0.00 :   272d4:  pmovmskb %xmm1,%r9d
    0.00 :   272d9:  shr    %cl,%edx
    0.00 :   272db:  shr    %cl,%r9d
    0.00 :   272de:  sub    %r9d,%edx
    0.00 :   272e1:  jne    28625 <strcmp+0x1405>
    0.00 :   272e7:  mov    $0x10,%rcx
    0.00 :   272ee:  mov    $0x10,%r9
    0.00 :   272f5:  pxor   %xmm0,%xmm0
    0.00 :   272f9:  nopl   0x0(%rax)
    0.00 :   27300:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27305:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2730a:  pcmpeqb %xmm1,%xmm0
    0.00 :   2730e:  pcmpeqb %xmm2,%xmm1
    0.00 :   27312:  psubb  %xmm0,%xmm1
    0.00 :   27316:  pmovmskb %xmm1,%edx
    0.00 :   2731a:  sub    $0xffff,%edx
    0.00 :   27320:  jne    28620 <strcmp+0x1400>
    0.00 :   27326:  add    $0x10,%rcx
    0.00 :   2732a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2732f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27334:  pcmpeqb %xmm1,%xmm0
    0.00 :   27338:  pcmpeqb %xmm2,%xmm1
    0.00 :   2733c:  psubb  %xmm0,%xmm1
    0.00 :   27340:  pmovmskb %xmm1,%edx
    0.00 :   27344:  sub    $0xffff,%edx
    0.00 :   2734a:  jne    28620 <strcmp+0x1400>
    0.00 :   27350:  add    $0x10,%rcx
    0.00 :   27354:  jmp    27300 <strcmp+0xe0>
    0.00 :   27356:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   27360:  pxor   %xmm0,%xmm0
    0.00 :   27364:  movdqa (%rdi),%xmm2
    0.00 :   27368:  movdqa (%rsi),%xmm1
    0.00 :   2736c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27370:  pslldq $0xf,%xmm2
    0.00 :   27375:  pcmpeqb %xmm1,%xmm2
    0.00 :   27379:  psubb  %xmm0,%xmm2
    0.00 :   2737d:  pmovmskb %xmm2,%r9d
    0.00 :   27382:  shr    %cl,%edx
    0.00 :   27384:  shr    %cl,%r9d
    0.00 :   27387:  sub    %r9d,%edx
    0.00 :   2738a:  jne    28625 <strcmp+0x1405>
    0.00 :   27390:  movdqa (%rdi),%xmm3
    0.00 :   27394:  pxor   %xmm0,%xmm0
    0.00 :   27398:  mov    $0x10,%rcx
    0.00 :   2739f:  mov    $0x1,%r9d
    0.00 :   273a5:  lea    0x1(%rdi),%r10
    0.00 :   273a9:  and    $0xfff,%r10
    0.00 :   273b0:  sub    $0x1000,%r10
    0.00 :   273b7:  nopw   0x0(%rax,%rax,1)
    0.00 :   273c0:  add    $0x10,%r10
    0.00 :   273c4:  jg     27460 <strcmp+0x240>
    0.00 :   273ca:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   273cf:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   273d4:  movdqa %xmm2,%xmm4
    0.00 :   273d8:  psrldq $0x1,%xmm3
    0.00 :   273dd:  pslldq $0xf,%xmm2
    0.00 :   273e2:  por    %xmm3,%xmm2
    0.00 :   273e6:  pcmpeqb %xmm1,%xmm0
    0.00 :   273ea:  pcmpeqb %xmm2,%xmm1
    0.00 :   273ee:  psubb  %xmm0,%xmm1
    0.00 :   273f2:  pmovmskb %xmm1,%edx
    0.00 :   273f6:  sub    $0xffff,%edx
    0.00 :   273fc:  jne    28620 <strcmp+0x1400>
    0.00 :   27402:  add    $0x10,%rcx
    0.00 :   27406:  movdqa %xmm4,%xmm3
    0.00 :   2740a:  add    $0x10,%r10
    0.00 :   2740e:  jg     27460 <strcmp+0x240>
    0.00 :   27410:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27415:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2741a:  movdqa %xmm2,%xmm4
    0.00 :   2741e:  psrldq $0x1,%xmm3
    0.00 :   27423:  pslldq $0xf,%xmm2
    0.00 :   27428:  por    %xmm3,%xmm2
    0.00 :   2742c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27430:  pcmpeqb %xmm2,%xmm1
    0.00 :   27434:  psubb  %xmm0,%xmm1
    0.00 :   27438:  pmovmskb %xmm1,%edx
    0.00 :   2743c:  sub    $0xffff,%edx
    0.00 :   27442:  jne    28620 <strcmp+0x1400>
    0.00 :   27448:  add    $0x10,%rcx
    0.00 :   2744c:  movdqa %xmm4,%xmm3
    0.00 :   27450:  jmp    273c0 <strcmp+0x1a0>
    0.00 :   27455:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27460:  pcmpeqb %xmm3,%xmm0
    0.00 :   27464:  pmovmskb %xmm0,%edx
    0.00 :   27468:  test   $0xfffe,%edx
    0.00 :   2746e:  jne    27480 <strcmp+0x260>
    0.00 :   27470:  pxor   %xmm0,%xmm0
    0.00 :   27474:  sub    $0x1000,%r10
    0.00 :   2747b:  jmp    273ca <strcmp+0x1aa>
    0.00 :   27480:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27485:  psrldq $0x1,%xmm0
    0.00 :   2748a:  psrldq $0x1,%xmm3
    0.00 :   2748f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27494:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2749f:  nop
    0.00 :   274a0:  pxor   %xmm0,%xmm0
    0.00 :   274a4:  movdqa (%rdi),%xmm2
    0.00 :   274a8:  movdqa (%rsi),%xmm1
    0.00 :   274ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   274b0:  pslldq $0xe,%xmm2
    0.00 :   274b5:  pcmpeqb %xmm1,%xmm2
    0.00 :   274b9:  psubb  %xmm0,%xmm2
    0.00 :   274bd:  pmovmskb %xmm2,%r9d
    0.00 :   274c2:  shr    %cl,%edx
    0.00 :   274c4:  shr    %cl,%r9d
    0.00 :   274c7:  sub    %r9d,%edx
    0.00 :   274ca:  jne    28625 <strcmp+0x1405>
    0.00 :   274d0:  movdqa (%rdi),%xmm3
    0.00 :   274d4:  pxor   %xmm0,%xmm0
    0.00 :   274d8:  mov    $0x10,%rcx
    0.00 :   274df:  mov    $0x2,%r9d
    0.00 :   274e5:  lea    0x2(%rdi),%r10
    0.00 :   274e9:  and    $0xfff,%r10
    0.00 :   274f0:  sub    $0x1000,%r10
    0.00 :   274f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   27500:  add    $0x10,%r10
    0.00 :   27504:  jg     275a0 <strcmp+0x380>
    0.00 :   2750a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2750f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27514:  movdqa %xmm2,%xmm4
    0.00 :   27518:  psrldq $0x2,%xmm3
    0.00 :   2751d:  pslldq $0xe,%xmm2
    0.00 :   27522:  por    %xmm3,%xmm2
    0.00 :   27526:  pcmpeqb %xmm1,%xmm0
    0.00 :   2752a:  pcmpeqb %xmm2,%xmm1
    0.00 :   2752e:  psubb  %xmm0,%xmm1
    0.00 :   27532:  pmovmskb %xmm1,%edx
    0.00 :   27536:  sub    $0xffff,%edx
    0.00 :   2753c:  jne    28620 <strcmp+0x1400>
    0.00 :   27542:  add    $0x10,%rcx
    0.00 :   27546:  movdqa %xmm4,%xmm3
    0.00 :   2754a:  add    $0x10,%r10
    0.00 :   2754e:  jg     275a0 <strcmp+0x380>
    0.00 :   27550:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27555:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2755a:  movdqa %xmm2,%xmm4
    0.00 :   2755e:  psrldq $0x2,%xmm3
    0.00 :   27563:  pslldq $0xe,%xmm2
    0.00 :   27568:  por    %xmm3,%xmm2
    0.00 :   2756c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27570:  pcmpeqb %xmm2,%xmm1
    0.00 :   27574:  psubb  %xmm0,%xmm1
    0.00 :   27578:  pmovmskb %xmm1,%edx
    0.00 :   2757c:  sub    $0xffff,%edx
    0.00 :   27582:  jne    28620 <strcmp+0x1400>
    0.00 :   27588:  add    $0x10,%rcx
    0.00 :   2758c:  movdqa %xmm4,%xmm3
    0.00 :   27590:  jmp    27500 <strcmp+0x2e0>
    0.00 :   27595:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   275a0:  pcmpeqb %xmm3,%xmm0
    0.00 :   275a4:  pmovmskb %xmm0,%edx
    0.00 :   275a8:  test   $0xfffc,%edx
    0.00 :   275ae:  jne    275c0 <strcmp+0x3a0>
    0.00 :   275b0:  pxor   %xmm0,%xmm0
    0.00 :   275b4:  sub    $0x1000,%r10
    0.00 :   275bb:  jmp    2750a <strcmp+0x2ea>
    0.00 :   275c0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   275c5:  psrldq $0x2,%xmm0
    0.00 :   275ca:  psrldq $0x2,%xmm3
    0.00 :   275cf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   275d4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   275df:  nop
    0.00 :   275e0:  pxor   %xmm0,%xmm0
    0.00 :   275e4:  movdqa (%rdi),%xmm2
    0.00 :   275e8:  movdqa (%rsi),%xmm1
    0.00 :   275ec:  pcmpeqb %xmm1,%xmm0
    0.00 :   275f0:  pslldq $0xd,%xmm2
    0.00 :   275f5:  pcmpeqb %xmm1,%xmm2
    0.00 :   275f9:  psubb  %xmm0,%xmm2
    0.00 :   275fd:  pmovmskb %xmm2,%r9d
    0.00 :   27602:  shr    %cl,%edx
    0.00 :   27604:  shr    %cl,%r9d
    0.00 :   27607:  sub    %r9d,%edx
    0.00 :   2760a:  jne    28625 <strcmp+0x1405>
    0.00 :   27610:  movdqa (%rdi),%xmm3
    0.00 :   27614:  pxor   %xmm0,%xmm0
    0.00 :   27618:  mov    $0x10,%rcx
    0.00 :   2761f:  mov    $0x3,%r9d
    0.00 :   27625:  lea    0x3(%rdi),%r10
    0.00 :   27629:  and    $0xfff,%r10
    0.00 :   27630:  sub    $0x1000,%r10
    0.00 :   27637:  nopw   0x0(%rax,%rax,1)
    0.00 :   27640:  add    $0x10,%r10
    0.00 :   27644:  jg     276e0 <strcmp+0x4c0>
    0.00 :   2764a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2764f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27654:  movdqa %xmm2,%xmm4
    0.00 :   27658:  psrldq $0x3,%xmm3
    0.00 :   2765d:  pslldq $0xd,%xmm2
    0.00 :   27662:  por    %xmm3,%xmm2
    0.00 :   27666:  pcmpeqb %xmm1,%xmm0
    0.00 :   2766a:  pcmpeqb %xmm2,%xmm1
    0.00 :   2766e:  psubb  %xmm0,%xmm1
    0.00 :   27672:  pmovmskb %xmm1,%edx
    0.00 :   27676:  sub    $0xffff,%edx
    0.00 :   2767c:  jne    28620 <strcmp+0x1400>
    0.00 :   27682:  add    $0x10,%rcx
    0.00 :   27686:  movdqa %xmm4,%xmm3
    0.00 :   2768a:  add    $0x10,%r10
    0.00 :   2768e:  jg     276e0 <strcmp+0x4c0>
    0.00 :   27690:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27695:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2769a:  movdqa %xmm2,%xmm4
    0.00 :   2769e:  psrldq $0x3,%xmm3
    0.00 :   276a3:  pslldq $0xd,%xmm2
    0.00 :   276a8:  por    %xmm3,%xmm2
    0.00 :   276ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   276b0:  pcmpeqb %xmm2,%xmm1
    0.00 :   276b4:  psubb  %xmm0,%xmm1
    0.00 :   276b8:  pmovmskb %xmm1,%edx
    0.00 :   276bc:  sub    $0xffff,%edx
    0.00 :   276c2:  jne    28620 <strcmp+0x1400>
    0.00 :   276c8:  add    $0x10,%rcx
    0.00 :   276cc:  movdqa %xmm4,%xmm3
    0.00 :   276d0:  jmp    27640 <strcmp+0x420>
    0.00 :   276d5:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   276e0:  pcmpeqb %xmm3,%xmm0
    0.00 :   276e4:  pmovmskb %xmm0,%edx
    0.00 :   276e8:  test   $0xfff8,%edx
    0.00 :   276ee:  jne    27700 <strcmp+0x4e0>
    0.00 :   276f0:  pxor   %xmm0,%xmm0
    0.00 :   276f4:  sub    $0x1000,%r10
    0.00 :   276fb:  jmp    2764a <strcmp+0x42a>
    0.00 :   27700:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27705:  psrldq $0x3,%xmm0
    0.00 :   2770a:  psrldq $0x3,%xmm3
    0.00 :   2770f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27714:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2771f:  nop
    0.00 :   27720:  pxor   %xmm0,%xmm0
    0.00 :   27724:  movdqa (%rdi),%xmm2
    0.00 :   27728:  movdqa (%rsi),%xmm1
    0.00 :   2772c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27730:  pslldq $0xc,%xmm2
    0.00 :   27735:  pcmpeqb %xmm1,%xmm2
    0.00 :   27739:  psubb  %xmm0,%xmm2
    0.00 :   2773d:  pmovmskb %xmm2,%r9d
    0.00 :   27742:  shr    %cl,%edx
    0.00 :   27744:  shr    %cl,%r9d
    0.00 :   27747:  sub    %r9d,%edx
    0.00 :   2774a:  jne    28625 <strcmp+0x1405>
    0.00 :   27750:  movdqa (%rdi),%xmm3
    0.00 :   27754:  pxor   %xmm0,%xmm0
    0.00 :   27758:  mov    $0x10,%rcx
    0.00 :   2775f:  mov    $0x4,%r9d
    0.00 :   27765:  lea    0x4(%rdi),%r10
    0.00 :   27769:  and    $0xfff,%r10
    0.00 :   27770:  sub    $0x1000,%r10
    0.00 :   27777:  nopw   0x0(%rax,%rax,1)
    0.00 :   27780:  add    $0x10,%r10
    0.00 :   27784:  jg     27820 <strcmp+0x600>
    0.00 :   2778a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2778f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27794:  movdqa %xmm2,%xmm4
    0.00 :   27798:  psrldq $0x4,%xmm3
    0.00 :   2779d:  pslldq $0xc,%xmm2
    0.00 :   277a2:  por    %xmm3,%xmm2
    0.00 :   277a6:  pcmpeqb %xmm1,%xmm0
    0.00 :   277aa:  pcmpeqb %xmm2,%xmm1
    0.00 :   277ae:  psubb  %xmm0,%xmm1
    0.00 :   277b2:  pmovmskb %xmm1,%edx
    0.00 :   277b6:  sub    $0xffff,%edx
    0.00 :   277bc:  jne    28620 <strcmp+0x1400>
    0.00 :   277c2:  add    $0x10,%rcx
    0.00 :   277c6:  movdqa %xmm4,%xmm3
    0.00 :   277ca:  add    $0x10,%r10
    0.00 :   277ce:  jg     27820 <strcmp+0x600>
    0.00 :   277d0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   277d5:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   277da:  movdqa %xmm2,%xmm4
    0.00 :   277de:  psrldq $0x4,%xmm3
    0.00 :   277e3:  pslldq $0xc,%xmm2
    0.00 :   277e8:  por    %xmm3,%xmm2
    0.00 :   277ec:  pcmpeqb %xmm1,%xmm0
    0.00 :   277f0:  pcmpeqb %xmm2,%xmm1
    0.00 :   277f4:  psubb  %xmm0,%xmm1
    0.00 :   277f8:  pmovmskb %xmm1,%edx
    0.00 :   277fc:  sub    $0xffff,%edx
    0.00 :   27802:  jne    28620 <strcmp+0x1400>
    0.00 :   27808:  add    $0x10,%rcx
    0.00 :   2780c:  movdqa %xmm4,%xmm3
    0.00 :   27810:  jmp    27780 <strcmp+0x560>
    0.00 :   27815:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27820:  pcmpeqb %xmm3,%xmm0
    0.00 :   27824:  pmovmskb %xmm0,%edx
    0.00 :   27828:  test   $0xfff0,%edx
    0.00 :   2782e:  jne    27840 <strcmp+0x620>
    0.00 :   27830:  pxor   %xmm0,%xmm0
    0.00 :   27834:  sub    $0x1000,%r10
    0.00 :   2783b:  jmp    2778a <strcmp+0x56a>
    0.00 :   27840:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27845:  psrldq $0x4,%xmm0
    0.00 :   2784a:  psrldq $0x4,%xmm3
    0.00 :   2784f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27854:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2785f:  nop
    0.00 :   27860:  pxor   %xmm0,%xmm0
    0.00 :   27864:  movdqa (%rdi),%xmm2
    0.00 :   27868:  movdqa (%rsi),%xmm1
    0.00 :   2786c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27870:  pslldq $0xb,%xmm2
    0.00 :   27875:  pcmpeqb %xmm1,%xmm2
    0.00 :   27879:  psubb  %xmm0,%xmm2
    0.00 :   2787d:  pmovmskb %xmm2,%r9d
    0.00 :   27882:  shr    %cl,%edx
    0.00 :   27884:  shr    %cl,%r9d
    0.00 :   27887:  sub    %r9d,%edx
    0.00 :   2788a:  jne    28625 <strcmp+0x1405>
    0.00 :   27890:  movdqa (%rdi),%xmm3
    0.00 :   27894:  pxor   %xmm0,%xmm0
    0.00 :   27898:  mov    $0x10,%rcx
    0.00 :   2789f:  mov    $0x5,%r9d
    0.00 :   278a5:  lea    0x5(%rdi),%r10
    0.00 :   278a9:  and    $0xfff,%r10
    0.00 :   278b0:  sub    $0x1000,%r10
    0.00 :   278b7:  nopw   0x0(%rax,%rax,1)
    0.00 :   278c0:  add    $0x10,%r10
    0.00 :   278c4:  jg     27960 <strcmp+0x740>
    0.00 :   278ca:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   278cf:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   278d4:  movdqa %xmm2,%xmm4
    0.00 :   278d8:  psrldq $0x5,%xmm3
    0.00 :   278dd:  pslldq $0xb,%xmm2
    0.00 :   278e2:  por    %xmm3,%xmm2
    0.00 :   278e6:  pcmpeqb %xmm1,%xmm0
    0.00 :   278ea:  pcmpeqb %xmm2,%xmm1
    0.00 :   278ee:  psubb  %xmm0,%xmm1
    0.00 :   278f2:  pmovmskb %xmm1,%edx
    0.00 :   278f6:  sub    $0xffff,%edx
    0.00 :   278fc:  jne    28620 <strcmp+0x1400>
    0.00 :   27902:  add    $0x10,%rcx
    0.00 :   27906:  movdqa %xmm4,%xmm3
    0.00 :   2790a:  add    $0x10,%r10
    0.00 :   2790e:  jg     27960 <strcmp+0x740>
    0.00 :   27910:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27915:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2791a:  movdqa %xmm2,%xmm4
    0.00 :   2791e:  psrldq $0x5,%xmm3
    0.00 :   27923:  pslldq $0xb,%xmm2
    0.00 :   27928:  por    %xmm3,%xmm2
    0.00 :   2792c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27930:  pcmpeqb %xmm2,%xmm1
    0.00 :   27934:  psubb  %xmm0,%xmm1
    0.00 :   27938:  pmovmskb %xmm1,%edx
    0.00 :   2793c:  sub    $0xffff,%edx
    0.00 :   27942:  jne    28620 <strcmp+0x1400>
    0.00 :   27948:  add    $0x10,%rcx
    0.00 :   2794c:  movdqa %xmm4,%xmm3
    0.00 :   27950:  jmp    278c0 <strcmp+0x6a0>
    0.00 :   27955:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27960:  pcmpeqb %xmm3,%xmm0
    0.00 :   27964:  pmovmskb %xmm0,%edx
    0.00 :   27968:  test   $0xffe0,%edx
    0.00 :   2796e:  jne    27980 <strcmp+0x760>
    0.00 :   27970:  pxor   %xmm0,%xmm0
    0.00 :   27974:  sub    $0x1000,%r10
    0.00 :   2797b:  jmp    278ca <strcmp+0x6aa>
    0.00 :   27980:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27985:  psrldq $0x5,%xmm0
    0.00 :   2798a:  psrldq $0x5,%xmm3
    0.00 :   2798f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27994:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2799f:  nop
    0.00 :   279a0:  pxor   %xmm0,%xmm0
    0.00 :   279a4:  movdqa (%rdi),%xmm2
    0.00 :   279a8:  movdqa (%rsi),%xmm1
    0.00 :   279ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   279b0:  pslldq $0xa,%xmm2
    0.00 :   279b5:  pcmpeqb %xmm1,%xmm2
    0.00 :   279b9:  psubb  %xmm0,%xmm2
    0.00 :   279bd:  pmovmskb %xmm2,%r9d
    0.00 :   279c2:  shr    %cl,%edx
    0.00 :   279c4:  shr    %cl,%r9d
    0.00 :   279c7:  sub    %r9d,%edx
    0.00 :   279ca:  jne    28625 <strcmp+0x1405>
    0.00 :   279d0:  movdqa (%rdi),%xmm3
    0.00 :   279d4:  pxor   %xmm0,%xmm0
    0.00 :   279d8:  mov    $0x10,%rcx
    0.00 :   279df:  mov    $0x6,%r9d
    0.00 :   279e5:  lea    0x6(%rdi),%r10
    0.00 :   279e9:  and    $0xfff,%r10
    0.00 :   279f0:  sub    $0x1000,%r10
    0.00 :   279f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   27a00:  add    $0x10,%r10
    0.00 :   27a04:  jg     27aa0 <strcmp+0x880>
    0.00 :   27a0a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27a0f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27a14:  movdqa %xmm2,%xmm4
    0.00 :   27a18:  psrldq $0x6,%xmm3
    0.00 :   27a1d:  pslldq $0xa,%xmm2
    0.00 :   27a22:  por    %xmm3,%xmm2
    0.00 :   27a26:  pcmpeqb %xmm1,%xmm0
    0.00 :   27a2a:  pcmpeqb %xmm2,%xmm1
    0.00 :   27a2e:  psubb  %xmm0,%xmm1
    0.00 :   27a32:  pmovmskb %xmm1,%edx
    0.00 :   27a36:  sub    $0xffff,%edx
    0.00 :   27a3c:  jne    28620 <strcmp+0x1400>
    0.00 :   27a42:  add    $0x10,%rcx
    0.00 :   27a46:  movdqa %xmm4,%xmm3
    0.00 :   27a4a:  add    $0x10,%r10
    0.00 :   27a4e:  jg     27aa0 <strcmp+0x880>
    0.00 :   27a50:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27a55:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27a5a:  movdqa %xmm2,%xmm4
    0.00 :   27a5e:  psrldq $0x6,%xmm3
    0.00 :   27a63:  pslldq $0xa,%xmm2
    0.00 :   27a68:  por    %xmm3,%xmm2
    0.00 :   27a6c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27a70:  pcmpeqb %xmm2,%xmm1
    0.00 :   27a74:  psubb  %xmm0,%xmm1
    0.00 :   27a78:  pmovmskb %xmm1,%edx
    0.00 :   27a7c:  sub    $0xffff,%edx
    0.00 :   27a82:  jne    28620 <strcmp+0x1400>
    0.00 :   27a88:  add    $0x10,%rcx
    0.00 :   27a8c:  movdqa %xmm4,%xmm3
    0.00 :   27a90:  jmp    27a00 <strcmp+0x7e0>
    0.00 :   27a95:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27aa0:  pcmpeqb %xmm3,%xmm0
    0.00 :   27aa4:  pmovmskb %xmm0,%edx
    0.00 :   27aa8:  test   $0xffc0,%edx
    0.00 :   27aae:  jne    27ac0 <strcmp+0x8a0>
    0.00 :   27ab0:  pxor   %xmm0,%xmm0
    0.00 :   27ab4:  sub    $0x1000,%r10
    0.00 :   27abb:  jmp    27a0a <strcmp+0x7ea>
    0.00 :   27ac0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27ac5:  psrldq $0x6,%xmm0
    0.00 :   27aca:  psrldq $0x6,%xmm3
    0.00 :   27acf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27ad4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27adf:  nop
    0.00 :   27ae0:  pxor   %xmm0,%xmm0
    0.00 :   27ae4:  movdqa (%rdi),%xmm2
    0.00 :   27ae8:  movdqa (%rsi),%xmm1
    0.00 :   27aec:  pcmpeqb %xmm1,%xmm0
    0.00 :   27af0:  pslldq $0x9,%xmm2
    0.00 :   27af5:  pcmpeqb %xmm1,%xmm2
    0.00 :   27af9:  psubb  %xmm0,%xmm2
    0.00 :   27afd:  pmovmskb %xmm2,%r9d
    0.00 :   27b02:  shr    %cl,%edx
    0.00 :   27b04:  shr    %cl,%r9d
    0.00 :   27b07:  sub    %r9d,%edx
    0.00 :   27b0a:  jne    28625 <strcmp+0x1405>
    0.00 :   27b10:  movdqa (%rdi),%xmm3
    0.00 :   27b14:  pxor   %xmm0,%xmm0
    0.00 :   27b18:  mov    $0x10,%rcx
    0.00 :   27b1f:  mov    $0x7,%r9d
    0.00 :   27b25:  lea    0x7(%rdi),%r10
    0.00 :   27b29:  and    $0xfff,%r10
    0.00 :   27b30:  sub    $0x1000,%r10
    0.00 :   27b37:  nopw   0x0(%rax,%rax,1)
    0.00 :   27b40:  add    $0x10,%r10
    0.00 :   27b44:  jg     27be0 <strcmp+0x9c0>
    0.00 :   27b4a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27b4f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27b54:  movdqa %xmm2,%xmm4
    0.00 :   27b58:  psrldq $0x7,%xmm3
    0.00 :   27b5d:  pslldq $0x9,%xmm2
    0.00 :   27b62:  por    %xmm3,%xmm2
    0.00 :   27b66:  pcmpeqb %xmm1,%xmm0
    0.00 :   27b6a:  pcmpeqb %xmm2,%xmm1
    0.00 :   27b6e:  psubb  %xmm0,%xmm1
    0.00 :   27b72:  pmovmskb %xmm1,%edx
    0.00 :   27b76:  sub    $0xffff,%edx
    0.00 :   27b7c:  jne    28620 <strcmp+0x1400>
    0.00 :   27b82:  add    $0x10,%rcx
    0.00 :   27b86:  movdqa %xmm4,%xmm3
    0.00 :   27b8a:  add    $0x10,%r10
    0.00 :   27b8e:  jg     27be0 <strcmp+0x9c0>
    0.00 :   27b90:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27b95:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27b9a:  movdqa %xmm2,%xmm4
    0.00 :   27b9e:  psrldq $0x7,%xmm3
    0.00 :   27ba3:  pslldq $0x9,%xmm2
    0.00 :   27ba8:  por    %xmm3,%xmm2
    0.00 :   27bac:  pcmpeqb %xmm1,%xmm0
    0.00 :   27bb0:  pcmpeqb %xmm2,%xmm1
    0.00 :   27bb4:  psubb  %xmm0,%xmm1
    0.00 :   27bb8:  pmovmskb %xmm1,%edx
    0.00 :   27bbc:  sub    $0xffff,%edx
    0.00 :   27bc2:  jne    28620 <strcmp+0x1400>
    0.00 :   27bc8:  add    $0x10,%rcx
    0.00 :   27bcc:  movdqa %xmm4,%xmm3
    0.00 :   27bd0:  jmp    27b40 <strcmp+0x920>
    0.00 :   27bd5:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27be0:  pcmpeqb %xmm3,%xmm0
    0.00 :   27be4:  pmovmskb %xmm0,%edx
    0.00 :   27be8:  test   $0xff80,%edx
    0.00 :   27bee:  jne    27c00 <strcmp+0x9e0>
    0.00 :   27bf0:  pxor   %xmm0,%xmm0
    0.00 :   27bf4:  sub    $0x1000,%r10
    0.00 :   27bfb:  jmp    27b4a <strcmp+0x92a>
    0.00 :   27c00:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27c05:  psrldq $0x7,%xmm0
    0.00 :   27c0a:  psrldq $0x7,%xmm3
    0.00 :   27c0f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27c14:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27c1f:  nop
    0.00 :   27c20:  pxor   %xmm0,%xmm0
    0.00 :   27c24:  movdqa (%rdi),%xmm2
    0.00 :   27c28:  movdqa (%rsi),%xmm1
    0.00 :   27c2c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27c30:  pslldq $0x8,%xmm2
    0.00 :   27c35:  pcmpeqb %xmm1,%xmm2
    0.00 :   27c39:  psubb  %xmm0,%xmm2
    0.00 :   27c3d:  pmovmskb %xmm2,%r9d
    0.00 :   27c42:  shr    %cl,%edx
    0.00 :   27c44:  shr    %cl,%r9d
    0.00 :   27c47:  sub    %r9d,%edx
    0.00 :   27c4a:  jne    28625 <strcmp+0x1405>
    0.00 :   27c50:  movdqa (%rdi),%xmm3
    0.00 :   27c54:  pxor   %xmm0,%xmm0
    0.00 :   27c58:  mov    $0x10,%rcx
    0.00 :   27c5f:  mov    $0x8,%r9d
    0.00 :   27c65:  lea    0x8(%rdi),%r10
    0.00 :   27c69:  and    $0xfff,%r10
    0.00 :   27c70:  sub    $0x1000,%r10
    0.00 :   27c77:  nopw   0x0(%rax,%rax,1)
    0.00 :   27c80:  add    $0x10,%r10
    0.00 :   27c84:  jg     27d20 <strcmp+0xb00>
    0.00 :   27c8a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27c8f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27c94:  movdqa %xmm2,%xmm4
    0.00 :   27c98:  psrldq $0x8,%xmm3
    0.00 :   27c9d:  pslldq $0x8,%xmm2
    0.00 :   27ca2:  por    %xmm3,%xmm2
    0.00 :   27ca6:  pcmpeqb %xmm1,%xmm0
    0.00 :   27caa:  pcmpeqb %xmm2,%xmm1
    0.00 :   27cae:  psubb  %xmm0,%xmm1
    0.00 :   27cb2:  pmovmskb %xmm1,%edx
    0.00 :   27cb6:  sub    $0xffff,%edx
    0.00 :   27cbc:  jne    28620 <strcmp+0x1400>
    0.00 :   27cc2:  add    $0x10,%rcx
    0.00 :   27cc6:  movdqa %xmm4,%xmm3
    0.00 :   27cca:  add    $0x10,%r10
    0.00 :   27cce:  jg     27d20 <strcmp+0xb00>
    0.00 :   27cd0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27cd5:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27cda:  movdqa %xmm2,%xmm4
    0.00 :   27cde:  psrldq $0x8,%xmm3
    0.00 :   27ce3:  pslldq $0x8,%xmm2
    0.00 :   27ce8:  por    %xmm3,%xmm2
    0.00 :   27cec:  pcmpeqb %xmm1,%xmm0
    0.00 :   27cf0:  pcmpeqb %xmm2,%xmm1
    0.00 :   27cf4:  psubb  %xmm0,%xmm1
    0.00 :   27cf8:  pmovmskb %xmm1,%edx
    0.00 :   27cfc:  sub    $0xffff,%edx
    0.00 :   27d02:  jne    28620 <strcmp+0x1400>
    0.00 :   27d08:  add    $0x10,%rcx
    0.00 :   27d0c:  movdqa %xmm4,%xmm3
    0.00 :   27d10:  jmp    27c80 <strcmp+0xa60>
    0.00 :   27d15:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27d20:  pcmpeqb %xmm3,%xmm0
    0.00 :   27d24:  pmovmskb %xmm0,%edx
    0.00 :   27d28:  test   $0xff00,%edx
    0.00 :   27d2e:  jne    27d40 <strcmp+0xb20>
    0.00 :   27d30:  pxor   %xmm0,%xmm0
    0.00 :   27d34:  sub    $0x1000,%r10
    0.00 :   27d3b:  jmp    27c8a <strcmp+0xa6a>
    0.00 :   27d40:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27d45:  psrldq $0x8,%xmm0
    0.00 :   27d4a:  psrldq $0x8,%xmm3
    0.00 :   27d4f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27d54:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27d5f:  nop
    0.00 :   27d60:  pxor   %xmm0,%xmm0
    0.00 :   27d64:  movdqa (%rdi),%xmm2
    0.00 :   27d68:  movdqa (%rsi),%xmm1
    0.00 :   27d6c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27d70:  pslldq $0x7,%xmm2
    0.00 :   27d75:  pcmpeqb %xmm1,%xmm2
    0.00 :   27d79:  psubb  %xmm0,%xmm2
    0.00 :   27d7d:  pmovmskb %xmm2,%r9d
    0.00 :   27d82:  shr    %cl,%edx
    0.00 :   27d84:  shr    %cl,%r9d
    0.00 :   27d87:  sub    %r9d,%edx
    0.00 :   27d8a:  jne    28625 <strcmp+0x1405>
    0.00 :   27d90:  movdqa (%rdi),%xmm3
    0.00 :   27d94:  pxor   %xmm0,%xmm0
    0.00 :   27d98:  mov    $0x10,%rcx
    0.00 :   27d9f:  mov    $0x9,%r9d
    0.00 :   27da5:  lea    0x9(%rdi),%r10
    0.00 :   27da9:  and    $0xfff,%r10
    0.00 :   27db0:  sub    $0x1000,%r10
    0.00 :   27db7:  nopw   0x0(%rax,%rax,1)
    0.00 :   27dc0:  add    $0x10,%r10
    0.00 :   27dc4:  jg     27e60 <strcmp+0xc40>
    0.00 :   27dca:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27dcf:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27dd4:  movdqa %xmm2,%xmm4
    0.00 :   27dd8:  psrldq $0x9,%xmm3
    0.00 :   27ddd:  pslldq $0x7,%xmm2
    0.00 :   27de2:  por    %xmm3,%xmm2
    0.00 :   27de6:  pcmpeqb %xmm1,%xmm0
    0.00 :   27dea:  pcmpeqb %xmm2,%xmm1
    0.00 :   27dee:  psubb  %xmm0,%xmm1
    0.00 :   27df2:  pmovmskb %xmm1,%edx
    0.00 :   27df6:  sub    $0xffff,%edx
    0.00 :   27dfc:  jne    28620 <strcmp+0x1400>
    0.00 :   27e02:  add    $0x10,%rcx
    0.00 :   27e06:  movdqa %xmm4,%xmm3
    0.00 :   27e0a:  add    $0x10,%r10
    0.00 :   27e0e:  jg     27e60 <strcmp+0xc40>
    0.00 :   27e10:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27e15:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27e1a:  movdqa %xmm2,%xmm4
    0.00 :   27e1e:  psrldq $0x9,%xmm3
    0.00 :   27e23:  pslldq $0x7,%xmm2
    0.00 :   27e28:  por    %xmm3,%xmm2
    0.00 :   27e2c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27e30:  pcmpeqb %xmm2,%xmm1
    0.00 :   27e34:  psubb  %xmm0,%xmm1
    0.00 :   27e38:  pmovmskb %xmm1,%edx
    0.00 :   27e3c:  sub    $0xffff,%edx
    0.00 :   27e42:  jne    28620 <strcmp+0x1400>
    0.00 :   27e48:  add    $0x10,%rcx
    0.00 :   27e4c:  movdqa %xmm4,%xmm3
    0.00 :   27e50:  jmp    27dc0 <strcmp+0xba0>
    0.00 :   27e55:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27e60:  pcmpeqb %xmm3,%xmm0
    0.00 :   27e64:  pmovmskb %xmm0,%edx
    0.00 :   27e68:  test   $0xfe00,%edx
    0.00 :   27e6e:  jne    27e80 <strcmp+0xc60>
    0.00 :   27e70:  pxor   %xmm0,%xmm0
    0.00 :   27e74:  sub    $0x1000,%r10
    0.00 :   27e7b:  jmp    27dca <strcmp+0xbaa>
    0.00 :   27e80:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27e85:  psrldq $0x9,%xmm0
    0.00 :   27e8a:  psrldq $0x9,%xmm3
    0.00 :   27e8f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27e94:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27e9f:  nop
    0.00 :   27ea0:  pxor   %xmm0,%xmm0
    0.00 :   27ea4:  movdqa (%rdi),%xmm2
    0.00 :   27ea8:  movdqa (%rsi),%xmm1
    0.00 :   27eac:  pcmpeqb %xmm1,%xmm0
    0.00 :   27eb0:  pslldq $0x6,%xmm2
    0.00 :   27eb5:  pcmpeqb %xmm1,%xmm2
    0.00 :   27eb9:  psubb  %xmm0,%xmm2
    0.00 :   27ebd:  pmovmskb %xmm2,%r9d
    0.00 :   27ec2:  shr    %cl,%edx
    0.00 :   27ec4:  shr    %cl,%r9d
    0.00 :   27ec7:  sub    %r9d,%edx
    0.00 :   27eca:  jne    28625 <strcmp+0x1405>
    0.00 :   27ed0:  movdqa (%rdi),%xmm3
    0.00 :   27ed4:  pxor   %xmm0,%xmm0
    0.00 :   27ed8:  mov    $0x10,%rcx
    0.00 :   27edf:  mov    $0xa,%r9d
    0.00 :   27ee5:  lea    0xa(%rdi),%r10
    0.00 :   27ee9:  and    $0xfff,%r10
    0.00 :   27ef0:  sub    $0x1000,%r10
    0.00 :   27ef7:  nopw   0x0(%rax,%rax,1)
    0.00 :   27f00:  add    $0x10,%r10
    0.00 :   27f04:  jg     27fa0 <strcmp+0xd80>
    0.00 :   27f0a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27f0f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27f14:  movdqa %xmm2,%xmm4
    0.00 :   27f18:  psrldq $0xa,%xmm3
    0.00 :   27f1d:  pslldq $0x6,%xmm2
    0.00 :   27f22:  por    %xmm3,%xmm2
    0.00 :   27f26:  pcmpeqb %xmm1,%xmm0
    0.00 :   27f2a:  pcmpeqb %xmm2,%xmm1
    0.00 :   27f2e:  psubb  %xmm0,%xmm1
    0.00 :   27f32:  pmovmskb %xmm1,%edx
    0.00 :   27f36:  sub    $0xffff,%edx
    0.00 :   27f3c:  jne    28620 <strcmp+0x1400>
    0.00 :   27f42:  add    $0x10,%rcx
    0.00 :   27f46:  movdqa %xmm4,%xmm3
    0.00 :   27f4a:  add    $0x10,%r10
    0.00 :   27f4e:  jg     27fa0 <strcmp+0xd80>
    0.00 :   27f50:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27f55:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   27f5a:  movdqa %xmm2,%xmm4
    0.00 :   27f5e:  psrldq $0xa,%xmm3
    0.00 :   27f63:  pslldq $0x6,%xmm2
    0.00 :   27f68:  por    %xmm3,%xmm2
    0.00 :   27f6c:  pcmpeqb %xmm1,%xmm0
    0.00 :   27f70:  pcmpeqb %xmm2,%xmm1
    0.00 :   27f74:  psubb  %xmm0,%xmm1
    0.00 :   27f78:  pmovmskb %xmm1,%edx
    0.00 :   27f7c:  sub    $0xffff,%edx
    0.00 :   27f82:  jne    28620 <strcmp+0x1400>
    0.00 :   27f88:  add    $0x10,%rcx
    0.00 :   27f8c:  movdqa %xmm4,%xmm3
    0.00 :   27f90:  jmp    27f00 <strcmp+0xce0>
    0.00 :   27f95:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27fa0:  pcmpeqb %xmm3,%xmm0
    0.00 :   27fa4:  pmovmskb %xmm0,%edx
    0.00 :   27fa8:  test   $0xfc00,%edx
    0.00 :   27fae:  jne    27fc0 <strcmp+0xda0>
    0.00 :   27fb0:  pxor   %xmm0,%xmm0
    0.00 :   27fb4:  sub    $0x1000,%r10
    0.00 :   27fbb:  jmp    27f0a <strcmp+0xcea>
    0.00 :   27fc0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   27fc5:  psrldq $0xa,%xmm0
    0.00 :   27fca:  psrldq $0xa,%xmm3
    0.00 :   27fcf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27fd4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27fdf:  nop
    0.00 :   27fe0:  pxor   %xmm0,%xmm0
    0.00 :   27fe4:  movdqa (%rdi),%xmm2
    0.00 :   27fe8:  movdqa (%rsi),%xmm1
    0.00 :   27fec:  pcmpeqb %xmm1,%xmm0
    0.00 :   27ff0:  pslldq $0x5,%xmm2
    0.00 :   27ff5:  pcmpeqb %xmm1,%xmm2
    0.00 :   27ff9:  psubb  %xmm0,%xmm2
    0.00 :   27ffd:  pmovmskb %xmm2,%r9d
    0.00 :   28002:  shr    %cl,%edx
    0.00 :   28004:  shr    %cl,%r9d
    0.00 :   28007:  sub    %r9d,%edx
    0.00 :   2800a:  jne    28625 <strcmp+0x1405>
    0.00 :   28010:  movdqa (%rdi),%xmm3
    0.00 :   28014:  pxor   %xmm0,%xmm0
    0.00 :   28018:  mov    $0x10,%rcx
    0.00 :   2801f:  mov    $0xb,%r9d
    0.00 :   28025:  lea    0xb(%rdi),%r10
    0.00 :   28029:  and    $0xfff,%r10
    0.00 :   28030:  sub    $0x1000,%r10
    0.00 :   28037:  nopw   0x0(%rax,%rax,1)
    0.00 :   28040:  add    $0x10,%r10
    0.00 :   28044:  jg     280e0 <strcmp+0xec0>
    0.00 :   2804a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2804f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   28054:  movdqa %xmm2,%xmm4
    0.00 :   28058:  psrldq $0xb,%xmm3
    0.00 :   2805d:  pslldq $0x5,%xmm2
    0.00 :   28062:  por    %xmm3,%xmm2
    0.00 :   28066:  pcmpeqb %xmm1,%xmm0
    0.00 :   2806a:  pcmpeqb %xmm2,%xmm1
    0.00 :   2806e:  psubb  %xmm0,%xmm1
    0.00 :   28072:  pmovmskb %xmm1,%edx
    0.00 :   28076:  sub    $0xffff,%edx
    0.00 :   2807c:  jne    28620 <strcmp+0x1400>
    0.00 :   28082:  add    $0x10,%rcx
    0.00 :   28086:  movdqa %xmm4,%xmm3
    0.00 :   2808a:  add    $0x10,%r10
    0.00 :   2808e:  jg     280e0 <strcmp+0xec0>
    0.00 :   28090:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28095:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2809a:  movdqa %xmm2,%xmm4
    0.00 :   2809e:  psrldq $0xb,%xmm3
    0.00 :   280a3:  pslldq $0x5,%xmm2
    0.00 :   280a8:  por    %xmm3,%xmm2
    0.00 :   280ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   280b0:  pcmpeqb %xmm2,%xmm1
    0.00 :   280b4:  psubb  %xmm0,%xmm1
    0.00 :   280b8:  pmovmskb %xmm1,%edx
    0.00 :   280bc:  sub    $0xffff,%edx
    0.00 :   280c2:  jne    28620 <strcmp+0x1400>
    0.00 :   280c8:  add    $0x10,%rcx
    0.00 :   280cc:  movdqa %xmm4,%xmm3
    0.00 :   280d0:  jmp    28040 <strcmp+0xe20>
    0.00 :   280d5:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   280e0:  pcmpeqb %xmm3,%xmm0
    0.00 :   280e4:  pmovmskb %xmm0,%edx
    0.00 :   280e8:  test   $0xf800,%edx
    0.00 :   280ee:  jne    28100 <strcmp+0xee0>
    0.00 :   280f0:  pxor   %xmm0,%xmm0
    0.00 :   280f4:  sub    $0x1000,%r10
    0.00 :   280fb:  jmp    2804a <strcmp+0xe2a>
    0.00 :   28100:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28105:  psrldq $0xb,%xmm0
    0.00 :   2810a:  psrldq $0xb,%xmm3
    0.00 :   2810f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28114:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2811f:  nop
    0.00 :   28120:  pxor   %xmm0,%xmm0
    0.00 :   28124:  movdqa (%rdi),%xmm2
    0.00 :   28128:  movdqa (%rsi),%xmm1
    0.00 :   2812c:  pcmpeqb %xmm1,%xmm0
    0.00 :   28130:  pslldq $0x4,%xmm2
    0.00 :   28135:  pcmpeqb %xmm1,%xmm2
    0.00 :   28139:  psubb  %xmm0,%xmm2
    0.00 :   2813d:  pmovmskb %xmm2,%r9d
    0.00 :   28142:  shr    %cl,%edx
    0.00 :   28144:  shr    %cl,%r9d
    0.00 :   28147:  sub    %r9d,%edx
    0.00 :   2814a:  jne    28625 <strcmp+0x1405>
    0.00 :   28150:  movdqa (%rdi),%xmm3
    0.00 :   28154:  pxor   %xmm0,%xmm0
    0.00 :   28158:  mov    $0x10,%rcx
    0.00 :   2815f:  mov    $0xc,%r9d
    0.00 :   28165:  lea    0xc(%rdi),%r10
    0.00 :   28169:  and    $0xfff,%r10
    0.00 :   28170:  sub    $0x1000,%r10
    0.00 :   28177:  nopw   0x0(%rax,%rax,1)
    0.00 :   28180:  add    $0x10,%r10
    0.00 :   28184:  jg     28220 <strcmp+0x1000>
    0.00 :   2818a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2818f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   28194:  movdqa %xmm2,%xmm4
    0.00 :   28198:  psrldq $0xc,%xmm3
    0.00 :   2819d:  pslldq $0x4,%xmm2
    0.00 :   281a2:  por    %xmm3,%xmm2
    0.00 :   281a6:  pcmpeqb %xmm1,%xmm0
    0.00 :   281aa:  pcmpeqb %xmm2,%xmm1
    0.00 :   281ae:  psubb  %xmm0,%xmm1
    0.00 :   281b2:  pmovmskb %xmm1,%edx
    0.00 :   281b6:  sub    $0xffff,%edx
    0.00 :   281bc:  jne    28620 <strcmp+0x1400>
    0.00 :   281c2:  add    $0x10,%rcx
    0.00 :   281c6:  movdqa %xmm4,%xmm3
    0.00 :   281ca:  add    $0x10,%r10
    0.00 :   281ce:  jg     28220 <strcmp+0x1000>
    0.00 :   281d0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   281d5:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   281da:  movdqa %xmm2,%xmm4
    0.00 :   281de:  psrldq $0xc,%xmm3
    0.00 :   281e3:  pslldq $0x4,%xmm2
    0.00 :   281e8:  por    %xmm3,%xmm2
    0.00 :   281ec:  pcmpeqb %xmm1,%xmm0
    0.00 :   281f0:  pcmpeqb %xmm2,%xmm1
    0.00 :   281f4:  psubb  %xmm0,%xmm1
    0.00 :   281f8:  pmovmskb %xmm1,%edx
    0.00 :   281fc:  sub    $0xffff,%edx
    0.00 :   28202:  jne    28620 <strcmp+0x1400>
    0.00 :   28208:  add    $0x10,%rcx
    0.00 :   2820c:  movdqa %xmm4,%xmm3
    0.00 :   28210:  jmp    28180 <strcmp+0xf60>
    0.00 :   28215:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   28220:  pcmpeqb %xmm3,%xmm0
    0.00 :   28224:  pmovmskb %xmm0,%edx
    0.00 :   28228:  test   $0xf000,%edx
    0.00 :   2822e:  jne    28240 <strcmp+0x1020>
    0.00 :   28230:  pxor   %xmm0,%xmm0
    0.00 :   28234:  sub    $0x1000,%r10
    0.00 :   2823b:  jmp    2818a <strcmp+0xf6a>
    0.00 :   28240:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28245:  psrldq $0xc,%xmm0
    0.00 :   2824a:  psrldq $0xc,%xmm3
    0.00 :   2824f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28254:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2825f:  nop
    0.00 :   28260:  pxor   %xmm0,%xmm0
    0.00 :   28264:  movdqa (%rdi),%xmm2
    0.00 :   28268:  movdqa (%rsi),%xmm1
    0.00 :   2826c:  pcmpeqb %xmm1,%xmm0
    0.00 :   28270:  pslldq $0x3,%xmm2
    0.00 :   28275:  pcmpeqb %xmm1,%xmm2
    0.00 :   28279:  psubb  %xmm0,%xmm2
    0.00 :   2827d:  pmovmskb %xmm2,%r9d
    0.00 :   28282:  shr    %cl,%edx
    0.00 :   28284:  shr    %cl,%r9d
    0.00 :   28287:  sub    %r9d,%edx
    0.00 :   2828a:  jne    28625 <strcmp+0x1405>
    0.00 :   28290:  movdqa (%rdi),%xmm3
    0.00 :   28294:  pxor   %xmm0,%xmm0
    0.00 :   28298:  mov    $0x10,%rcx
    0.00 :   2829f:  mov    $0xd,%r9d
    0.00 :   282a5:  lea    0xd(%rdi),%r10
    0.00 :   282a9:  and    $0xfff,%r10
    0.00 :   282b0:  sub    $0x1000,%r10
    0.00 :   282b7:  nopw   0x0(%rax,%rax,1)
    0.00 :   282c0:  add    $0x10,%r10
    0.00 :   282c4:  jg     28360 <strcmp+0x1140>
    0.00 :   282ca:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   282cf:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   282d4:  movdqa %xmm2,%xmm4
    0.00 :   282d8:  psrldq $0xd,%xmm3
    0.00 :   282dd:  pslldq $0x3,%xmm2
    0.00 :   282e2:  por    %xmm3,%xmm2
    0.00 :   282e6:  pcmpeqb %xmm1,%xmm0
    0.00 :   282ea:  pcmpeqb %xmm2,%xmm1
    0.00 :   282ee:  psubb  %xmm0,%xmm1
    0.00 :   282f2:  pmovmskb %xmm1,%edx
    0.00 :   282f6:  sub    $0xffff,%edx
    0.00 :   282fc:  jne    28620 <strcmp+0x1400>
    0.00 :   28302:  add    $0x10,%rcx
    0.00 :   28306:  movdqa %xmm4,%xmm3
    0.00 :   2830a:  add    $0x10,%r10
    0.00 :   2830e:  jg     28360 <strcmp+0x1140>
    0.00 :   28310:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28315:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2831a:  movdqa %xmm2,%xmm4
    0.00 :   2831e:  psrldq $0xd,%xmm3
    0.00 :   28323:  pslldq $0x3,%xmm2
    0.00 :   28328:  por    %xmm3,%xmm2
    0.00 :   2832c:  pcmpeqb %xmm1,%xmm0
    0.00 :   28330:  pcmpeqb %xmm2,%xmm1
    0.00 :   28334:  psubb  %xmm0,%xmm1
    0.00 :   28338:  pmovmskb %xmm1,%edx
    0.00 :   2833c:  sub    $0xffff,%edx
    0.00 :   28342:  jne    28620 <strcmp+0x1400>
    0.00 :   28348:  add    $0x10,%rcx
    0.00 :   2834c:  movdqa %xmm4,%xmm3
    0.00 :   28350:  jmp    282c0 <strcmp+0x10a0>
    0.00 :   28355:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   28360:  pcmpeqb %xmm3,%xmm0
    0.00 :   28364:  pmovmskb %xmm0,%edx
    0.00 :   28368:  test   $0xe000,%edx
    0.00 :   2836e:  jne    28380 <strcmp+0x1160>
    0.00 :   28370:  pxor   %xmm0,%xmm0
    0.00 :   28374:  sub    $0x1000,%r10
    0.00 :   2837b:  jmp    282ca <strcmp+0x10aa>
    0.00 :   28380:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28385:  psrldq $0xd,%xmm0
    0.00 :   2838a:  psrldq $0xd,%xmm3
    0.00 :   2838f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28394:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2839f:  nop
    0.00 :   283a0:  pxor   %xmm0,%xmm0
    0.00 :   283a4:  movdqa (%rdi),%xmm2
    0.00 :   283a8:  movdqa (%rsi),%xmm1
    0.00 :   283ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   283b0:  pslldq $0x2,%xmm2
    0.00 :   283b5:  pcmpeqb %xmm1,%xmm2
    0.00 :   283b9:  psubb  %xmm0,%xmm2
    0.00 :   283bd:  pmovmskb %xmm2,%r9d
    0.00 :   283c2:  shr    %cl,%edx
    0.00 :   283c4:  shr    %cl,%r9d
    0.00 :   283c7:  sub    %r9d,%edx
    0.00 :   283ca:  jne    28625 <strcmp+0x1405>
    0.00 :   283d0:  movdqa (%rdi),%xmm3
    0.00 :   283d4:  pxor   %xmm0,%xmm0
    0.00 :   283d8:  mov    $0x10,%rcx
    0.00 :   283df:  mov    $0xe,%r9d
    0.00 :   283e5:  lea    0xe(%rdi),%r10
    0.00 :   283e9:  and    $0xfff,%r10
    0.00 :   283f0:  sub    $0x1000,%r10
    0.00 :   283f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   28400:  add    $0x10,%r10
    0.00 :   28404:  jg     284a0 <strcmp+0x1280>
    0.00 :   2840a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2840f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   28414:  movdqa %xmm2,%xmm4
    0.00 :   28418:  psrldq $0xe,%xmm3
    0.00 :   2841d:  pslldq $0x2,%xmm2
    0.00 :   28422:  por    %xmm3,%xmm2
    0.00 :   28426:  pcmpeqb %xmm1,%xmm0
    0.00 :   2842a:  pcmpeqb %xmm2,%xmm1
    0.00 :   2842e:  psubb  %xmm0,%xmm1
    0.00 :   28432:  pmovmskb %xmm1,%edx
    0.00 :   28436:  sub    $0xffff,%edx
    0.00 :   2843c:  jne    28620 <strcmp+0x1400>
    0.00 :   28442:  add    $0x10,%rcx
    0.00 :   28446:  movdqa %xmm4,%xmm3
    0.00 :   2844a:  add    $0x10,%r10
    0.00 :   2844e:  jg     284a0 <strcmp+0x1280>
    0.00 :   28450:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28455:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2845a:  movdqa %xmm2,%xmm4
    0.00 :   2845e:  psrldq $0xe,%xmm3
    0.00 :   28463:  pslldq $0x2,%xmm2
    0.00 :   28468:  por    %xmm3,%xmm2
    0.00 :   2846c:  pcmpeqb %xmm1,%xmm0
    0.00 :   28470:  pcmpeqb %xmm2,%xmm1
    0.00 :   28474:  psubb  %xmm0,%xmm1
    0.00 :   28478:  pmovmskb %xmm1,%edx
    0.00 :   2847c:  sub    $0xffff,%edx
    0.00 :   28482:  jne    28620 <strcmp+0x1400>
    0.00 :   28488:  add    $0x10,%rcx
    0.00 :   2848c:  movdqa %xmm4,%xmm3
    0.00 :   28490:  jmp    28400 <strcmp+0x11e0>
    0.00 :   28495:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   284a0:  pcmpeqb %xmm3,%xmm0
    0.00 :   284a4:  pmovmskb %xmm0,%edx
    0.00 :   284a8:  test   $0xc000,%edx
    0.00 :   284ae:  jne    284c0 <strcmp+0x12a0>
    0.00 :   284b0:  pxor   %xmm0,%xmm0
    0.00 :   284b4:  sub    $0x1000,%r10
    0.00 :   284bb:  jmp    2840a <strcmp+0x11ea>
    0.00 :   284c0:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   284c5:  psrldq $0xe,%xmm0
    0.00 :   284ca:  psrldq $0xe,%xmm3
    0.00 :   284cf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   284d4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   284df:  nop
    0.00 :   284e0:  pxor   %xmm0,%xmm0
    0.00 :   284e4:  movdqa (%rdi),%xmm2
    0.00 :   284e8:  movdqa (%rsi),%xmm1
    0.00 :   284ec:  pcmpeqb %xmm1,%xmm0
    0.00 :   284f0:  pslldq $0x1,%xmm2
    0.00 :   284f5:  pcmpeqb %xmm1,%xmm2
    0.00 :   284f9:  psubb  %xmm0,%xmm2
    0.00 :   284fd:  pmovmskb %xmm2,%r9d
    0.00 :   28502:  shr    %cl,%edx
    0.00 :   28504:  shr    %cl,%r9d
    0.00 :   28507:  sub    %r9d,%edx
    0.00 :   2850a:  jne    28625 <strcmp+0x1405>
    0.00 :   28510:  movdqa (%rdi),%xmm3
    0.00 :   28514:  pxor   %xmm0,%xmm0
    0.00 :   28518:  mov    $0x10,%rcx
    0.00 :   2851f:  mov    $0xf,%r9d
    0.00 :   28525:  lea    0xf(%rdi),%r10
    0.00 :   28529:  and    $0xfff,%r10
    0.00 :   28530:  sub    $0x1000,%r10
    0.00 :   28537:  nopw   0x0(%rax,%rax,1)
    0.00 :   28540:  add    $0x10,%r10
    0.00 :   28544:  jg     285e0 <strcmp+0x13c0>
    0.00 :   2854a:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   2854f:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   28554:  movdqa %xmm2,%xmm4
    0.00 :   28558:  psrldq $0xf,%xmm3
    0.00 :   2855d:  pslldq $0x1,%xmm2
    0.00 :   28562:  por    %xmm3,%xmm2
    0.00 :   28566:  pcmpeqb %xmm1,%xmm0
    0.00 :   2856a:  pcmpeqb %xmm2,%xmm1
    0.00 :   2856e:  psubb  %xmm0,%xmm1
    0.00 :   28572:  pmovmskb %xmm1,%edx
    0.00 :   28576:  sub    $0xffff,%edx
    0.00 :   2857c:  jne    28620 <strcmp+0x1400>
    0.00 :   28582:  add    $0x10,%rcx
    0.00 :   28586:  movdqa %xmm4,%xmm3
    0.00 :   2858a:  add    $0x10,%r10
    0.00 :   2858e:  jg     285e0 <strcmp+0x13c0>
    0.00 :   28590:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28595:  movdqa (%rdi,%rcx,1),%xmm2
    0.00 :   2859a:  movdqa %xmm2,%xmm4
    0.00 :   2859e:  psrldq $0xf,%xmm3
    0.00 :   285a3:  pslldq $0x1,%xmm2
    0.00 :   285a8:  por    %xmm3,%xmm2
    0.00 :   285ac:  pcmpeqb %xmm1,%xmm0
    0.00 :   285b0:  pcmpeqb %xmm2,%xmm1
    0.00 :   285b4:  psubb  %xmm0,%xmm1
    0.00 :   285b8:  pmovmskb %xmm1,%edx
    0.00 :   285bc:  sub    $0xffff,%edx
    0.00 :   285c2:  jne    28620 <strcmp+0x1400>
    0.00 :   285c4:  add    $0x10,%rcx
    0.00 :   285c8:  movdqa %xmm4,%xmm3
    0.00 :   285cc:  jmp    28540 <strcmp+0x1320>
    0.00 :   285d1:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   285dc:  nopl   0x0(%rax)
    0.00 :   285e0:  pcmpeqb %xmm3,%xmm0
    0.00 :   285e4:  pmovmskb %xmm0,%edx
    0.00 :   285e8:  test   $0x8000,%edx
    0.00 :   285ee:  jne    28600 <strcmp+0x13e0>
    0.00 :   285f0:  pxor   %xmm0,%xmm0
    0.00 :   285f4:  sub    $0x1000,%r10
    0.00 :   285fb:  jmp    2854a <strcmp+0x132a>
    0.00 :   28600:  movdqa (%rsi,%rcx,1),%xmm1
    0.00 :   28605:  psrldq $0xf,%xmm3
    0.00 :   2860a:  psrldq $0xf,%xmm0
    0.00 :   2860f:  nop
    0.00 :   28610:  pcmpeqb %xmm3,%xmm1
    0.00 :   28614:  psubb  %xmm0,%xmm1
    0.00 :   28618:  pmovmskb %xmm1,%edx
    0.00 :   2861c:  not    %edx
    0.00 :   2861e:  xchg   %ax,%ax
    0.00 :   28620:  lea    -0x10(%r9,%rcx,1),%rax
    0.00 :   28625:  lea    (%rdi,%rax,1),%rdi
    0.00 :   28629:  lea    (%rsi,%rcx,1),%rsi
    0.00 :   2862d:  test   %r8d,%r8d
    0.00 :   28630:  je     28640 <strcmp+0x1420>
    0.00 :   28632:  xchg   %rsi,%rdi
    0.00 :   28635:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   28640:  bsf    %rdx,%rdx
    0.00 :   28644:  movzbl (%rsi,%rdx,1),%ecx
    0.00 :   28648:  movzbl (%rdi,%rdx,1),%eax
    0.00 :   2864c:  sub    %ecx,%eax
    0.00 :   2864e:  ret
    0.00 :   2864f:  xor    %eax,%eax
    0.00 :   28651:  ret
    0.00 :   28652:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2865d:  nopl   (%rax)
    0.00 :   28660:  movzbl (%rsi),%ecx
    0.00 :   28663:  movzbl (%rdi),%eax
    0.00 :   28666:  sub    %ecx,%eax
    0.00 :   28668:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000421e0 <_setjmp>:
    0.00 :   421e0:  endbr64
  100.00 :   421e4:  xor    %esi,%esi
    0.00 :   421e6:  jmp    42110 <__sigsetjmp>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000003a3c0 <__ctype_init>:
    0.00 :   3a3c0:  endbr64
    0.00 :   3a3c4:  mov    0x1dfba5(%rip),%rax        # 219f70 <_DYNAMIC+0x3b0>
    0.00 :   3a3cb:  mov    0x1dfa26(%rip),%rcx        # 219df8 <_DYNAMIC+0x238>
    0.00 :   3a3d2:  mov    %fs:(%rax),%rax
    0.00 :   3a3d6:  mov    (%rax),%rax
    0.00 :   3a3d9:  mov    0x40(%rax),%rsi
  100.00 :   3a3dd:  lea    0x100(%rsi),%rdx
    0.00 :   3a3e4:  mov    %rdx,%fs:(%rcx)
    0.00 :   3a3e8:  mov    0x48(%rax),%rdi
    0.00 :   3a3ec:  mov    0x1dfc05(%rip),%rcx        # 219ff8 <_DYNAMIC+0x438>
    0.00 :   3a3f3:  lea    0x200(%rdi),%rdx
    0.00 :   3a3fa:  mov    %rdx,%fs:(%rcx)
    0.00 :   3a3fe:  mov    0x58(%rax),%rax
    0.00 :   3a402:  mov    0x1df9df(%rip),%rdx        # 219de8 <_DYNAMIC+0x228>
    0.00 :   3a409:  add    $0x200,%rax
    0.00 :   3a40f:  mov    %rax,%fs:(%rdx)
    0.00 :   3a413:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:Pu (3 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000947d0 <start_thread>:
    0.00 :   947d0:  endbr64
    0.00 :   947d4:  push   %rbp
    0.00 :   947d5:  push   %rbx
    0.00 :   947d6:  sub    $0x88,%rsp
    0.00 :   947dd:  mov    %rdi,0x8(%rsp)
    0.00 :   947e2:  mov    %fs:0x28,%rax
    0.00 :   947eb:  mov    %rax,0x78(%rsp)
    0.00 :   947f0:  xor    %eax,%eax
    0.00 :   947f2:  cmpb   $0x0,0x613(%rdi)
    0.00 :   947f9:  je     94858 <start_thread+0x88>
    0.00 :   947fb:  mov    0x8(%rsp),%rax
    0.00 :   94800:  mov    $0x1,%edx
    0.00 :   94805:  lea    0x618(%rax),%rbp
    0.00 :   9480c:  xor    %eax,%eax
    0.00 :   9480e:  lock cmpxchg %edx,0x0(%rbp)
    0.00 :   94813:  jne    94a98 <start_thread+0x2c8>
    0.00 :   94819:  mov    0x8(%rsp),%rax
    0.00 :   9481e:  mov    0x614(%rax),%ebx
    0.00 :   94824:  cmp    $0x1,%ebx
    0.00 :   94827:  jne    94839 <start_thread+0x69>
    0.00 :   94829:  mov    0x8(%rsp),%rax
    0.00 :   9482e:  movq   $0x0,0x628(%rax)
    0.00 :   94839:  mov    0x8(%rsp),%rcx
    0.00 :   9483e:  xor    %eax,%eax
    0.00 :   94840:  xchg   %eax,0x618(%rcx)
    0.00 :   94846:  sub    $0x1,%eax
    0.00 :   94849:  jg     94acf <start_thread+0x2ff>
    0.00 :   9484f:  sub    $0x1,%ebx
    0.00 :   94852:  je     94a54 <start_thread+0x284>
    0.00 :   94858:  mov    0x8(%rsp),%rax
    0.00 :   9485d:  lea    0x6b8(%rax),%rdx
    0.00 :   94864:  mov    0x18577d(%rip),%rax        # 219fe8 <_DYNAMIC+0x428>
    0.00 :   9486b:  mov    %rdx,%fs:(%rax)
    0.00 :   9486f:  call   3a3c0 <__ctype_init>
    0.00 :   94874:  mov    %fs:0x30c,%eax
   66.67 :   9487c:  and    $0x80,%eax
   33.33 :   94881:  mov    %eax,%r8d
    0.00 :   94884:  jne    94a68 <start_thread+0x298>
    0.00 :   9488a:  movl   $0xfffffffe,%fs:0x9a4
    0.00 :   94896:  test   %r8d,%r8d
    0.00 :   94899:  jne    94aa5 <start_thread+0x2d5>
    0.00 :   9489f:  mov    0x8(%rsp),%rax
    0.00 :   948a4:  mov    $0x18,%esi
    0.00 :   948a9:  lea    0x2e0(%rax),%rdi
    0.00 :   948b0:  mov    $0x111,%eax
    0.00 :   948b5:  syscall
    0.00 :   948b7:  lea    0x10(%rsp),%rdi
    0.00 :   948bc:  call   421e0 <_setjmp>
    0.00 :   948c1:  endbr64
    0.00 :   948c5:  pxor   %xmm0,%xmm0
    0.00 :   948c9:  mov    0x8(%rsp),%rcx
    0.00 :   948ce:  mov    %eax,%r8d
    0.00 :   948d1:  movups %xmm0,0x58(%rsp)
    0.00 :   948d6:  xor    %eax,%eax
    0.00 :   948d8:  xchg   %eax,0x61c(%rcx)
    0.00 :   948de:  cmp    $0xfffffffe,%eax
    0.00 :   948e1:  je     94adc <start_thread+0x30c>
    0.00 :   948e7:  test   %r8d,%r8d
    0.00 :   948ea:  jne    94940 <start_thread+0x170>
    0.00 :   948ec:  lea    0x10(%rsp),%rax
    0.00 :   948f1:  mov    %rax,%fs:0x300
    0.00 :   948fa:  mov    0x8(%rsp),%rbx
    0.00 :   948ff:  mov    $0x8,%r10d
    0.00 :   94905:  xor    %edx,%edx
    0.00 :   94907:  mov    $0x2,%edi
    0.00 :   9490c:  mov    $0xe,%eax
    0.00 :   94911:  lea    0x8f0(%rbx),%rsi
    0.00 :   94918:  syscall
    0.00 :   9491a:  nop
    0.00 :   9491b:  cmpb   $0x0,0x970(%rbx)
    0.00 :   94922:  je     94ab1 <start_thread+0x2e1>
    0.00 :   94928:  mov    0x648(%rbx),%rdi
    0.00 :   9492f:  call   *0x640(%rbx)
    0.00 :   94935:  cltq
    0.00 :   94937:  mov    %rax,%fs:0x630
    0.00 :   94940:  call   45d60 <__call_tls_dtors>
    0.00 :   94945:  call   915f0 <__GI___nptl_deallocate_tsd>
    0.00 :   9494a:  call   a8180 <__libc_thread_freeres>
    0.00 :   9494f:  mov    0x8(%rsp),%rax
    0.00 :   94954:  cmpb   $0x0,0x611(%rax)
    0.00 :   9495b:  jne    94b1b <start_thread+0x34b>
    0.00 :   94961:  mov    0x8(%rsp),%rax
    0.00 :   94966:  lock orl $0x10,0x308(%rax)
    0.00 :   9496e:  lock decl 0x185933(%rip)        # 21a2a8 <__nptl_nthreads>
    0.00 :   94975:  sete   %al
    0.00 :   94978:  test   %al,%al
    0.00 :   9497a:  jne    94ac8 <start_thread+0x2f8>
    0.00 :   94980:  mov    0x8(%rsp),%rbx
    0.00 :   94985:  mov    $0x8,%r10d
    0.00 :   9498b:  xor    %edx,%edx
    0.00 :   9498d:  xor    %edi,%edi
    0.00 :   9498f:  movabs $0xfffffffeffffffff,%rax
    0.00 :   94999:  mov    %rax,0x8f0(%rbx)
    0.00 :   949a0:  lea    0x8f0(%rbx),%rsi
    0.00 :   949a7:  mov    $0xe,%eax
    0.00 :   949ac:  syscall
    0.00 :   949ae:  xor    %eax,%eax
    0.00 :   949b0:  lea    0x974(%rbx),%rbp
    0.00 :   949b7:  mov    $0x1,%edx
    0.00 :   949bc:  lock cmpxchg %edx,0x0(%rbp)
    0.00 :   949c1:  jne    94bc0 <start_thread+0x3f0>
    0.00 :   949c7:  mov    0x8(%rsp),%rsi
    0.00 :   949cc:  xor    %eax,%eax
    0.00 :   949ce:  movb   $0x1,0x973(%rsi)
    0.00 :   949d5:  xchg   %eax,0x974(%rsi)
    0.00 :   949db:  sub    $0x1,%eax
    0.00 :   949de:  jg     94bb3 <start_thread+0x3e3>
    0.00 :   949e4:  mov    0x8(%rsp),%rax
    0.00 :   949e9:  cmpb   $0x0,0x612(%rax)
    0.00 :   949f0:  jne    94a2c <start_thread+0x25c>
    0.00 :   949f2:  call   11b1c0 <__getpagesize>
    0.00 :   949f7:  mov    0x8(%rsp),%rbx
    0.00 :   949fc:  mov    %eax,%edx
    0.00 :   949fe:  mov    %rsp,%rax
    0.00 :   94a01:  mov    0x690(%rbx),%rbp
    0.00 :   94a08:  neg    %edx
    0.00 :   94a0a:  movslq %edx,%rdx
    0.00 :   94a0d:  sub    %rbp,%rax
    0.00 :   94a10:  and    %rdx,%rax
    0.00 :   94a13:  cmp    %rax,0x698(%rbx)
    0.00 :   94a1a:  jbe    94c1b <start_thread+0x44b>
    0.00 :   94a20:  cmp    $0x4000,%rax
    0.00 :   94a26:  ja     94bcd <start_thread+0x3fd>
    0.00 :   94a2c:  mov    0x8(%rsp),%rax
    0.00 :   94a31:  testb  $0x40,0x308(%rax)
    0.00 :   94a38:  jne    94b4d <start_thread+0x37d>
    0.00 :   94a3e:  mov    0x8(%rsp),%rax
    0.00 :   94a43:  cmp    %rax,0x628(%rax)
    0.00 :   94a4a:  jne    94a54 <start_thread+0x284>
    0.00 :   94a4c:  mov    %rax,%rdi
    0.00 :   94a4f:  call   91740 <__GI___nptl_free_tcb>
    0.00 :   94a54:  mov    $0x3c,%edx
    0.00 :   94a59:  nopl   0x0(%rax)
    0.00 :   94a60:  xor    %edi,%edi
    0.00 :   94a62:  mov    %edx,%eax
    0.00 :   94a64:  syscall
    0.00 :   94a66:  jmp    94a60 <start_thread+0x290>
    0.00 :   94a68:  mov    0x8(%rsp),%rax
    0.00 :   94a6d:  mov    $0x53053053,%r10d
    0.00 :   94a73:  xor    %edx,%edx
    0.00 :   94a75:  mov    $0x20,%esi
    0.00 :   94a7a:  lea    0x9a0(%rax),%rdi
    0.00 :   94a81:  mov    $0x14e,%eax
    0.00 :   94a86:  syscall
    0.00 :   94a88:  cmp    $0xfffff000,%eax
    0.00 :   94a8d:  ja     9488a <start_thread+0xba>
    0.00 :   94a93:  jmp    9489f <start_thread+0xcf>
    0.00 :   94a98:  mov    %rbp,%rdi
    0.00 :   94a9b:  call   91230 <__lll_lock_wait_private>
    0.00 :   94aa0:  jmp    94819 <start_thread+0x49>
    0.00 :   94aa5:  lea    0x1492d4(%rip),%rdi        # 1ddd80 <__PRETTY_FUNCTION__.0+0x188>
    0.00 :   94aac:  call   896d0 <__libc_fatal>
    0.00 :   94ab1:  mov    0x8(%rsp),%rax
    0.00 :   94ab6:  mov    0x648(%rax),%rdi
    0.00 :   94abd:  call   *0x640(%rax)
    0.00 :   94ac3:  jmp    94937 <start_thread+0x167>
    0.00 :   94ac8:  xor    %edi,%edi
    0.00 :   94aca:  call   455f0 <exit>
    0.00 :   94acf:  mov    %rbp,%rdi
    0.00 :   94ad2:  call   91300 <__lll_lock_wake_private>
    0.00 :   94ad7:  jmp    9484f <start_thread+0x7f>
    0.00 :   94adc:  lea    0x61c(%rcx),%rdi
    0.00 :   94ae3:  xor    %r10d,%r10d
    0.00 :   94ae6:  mov    $0x1,%edx
    0.00 :   94aeb:  mov    $0x81,%esi
    0.00 :   94af0:  mov    $0xca,%eax
    0.00 :   94af5:  syscall
    0.00 :   94af7:  cmp    $0xfffffffffffff000,%rax
    0.00 :   94afd:  jbe    948e7 <start_thread+0x117>
    0.00 :   94b03:  add    $0x16,%eax
    0.00 :   94b06:  and    $0xfffffff7,%eax
    0.00 :   94b09:  je     948e7 <start_thread+0x117>
    0.00 :   94b0f:  lea    0x1491f2(%rip),%rdi        # 1ddd08 <__PRETTY_FUNCTION__.0+0x110>
    0.00 :   94b16:  call   896d0 <__libc_fatal>
    0.00 :   94b1b:  mov    0x8(%rsp),%rcx
    0.00 :   94b20:  mov    0x187f9a(%rip),%eax        # 21cac0 <__nptl_threads_events>
    0.00 :   94b26:  or     0x650(%rcx),%eax
    0.00 :   94b2c:  test   $0x1,%ah
    0.00 :   94b2f:  je     94961 <start_thread+0x191>
    0.00 :   94b35:  cmpq   $0x0,0x668(%rcx)
    0.00 :   94b3d:  je     94be6 <start_thread+0x416>
    0.00 :   94b43:  call   90f90 <__nptl_death_event>
    0.00 :   94b48:  jmp    94961 <start_thread+0x191>
    0.00 :   94b4d:  lea    0x61c(%rax),%rdi
    0.00 :   94b54:  mov    $0xca,%r9d
    0.00 :   94b5a:  mov    $0x881,%r8d
    0.00 :   94b60:  jmp    94b70 <start_thread+0x3a0>
    0.00 :   94b62:  mov    0x8(%rsp),%rax
    0.00 :   94b67:  testb  $0x40,0x308(%rax)
    0.00 :   94b6e:  je     94ba4 <start_thread+0x3d4>
    0.00 :   94b70:  xor    %r10d,%r10d
    0.00 :   94b73:  xor    %edx,%edx
    0.00 :   94b75:  mov    $0x80,%esi
    0.00 :   94b7a:  mov    %r9d,%eax
    0.00 :   94b7d:  syscall
    0.00 :   94b7f:  cmp    $0xfffffffffffff000,%rax
    0.00 :   94b85:  jbe    94b62 <start_thread+0x392>
    0.00 :   94b87:  add    $0xb,%eax
    0.00 :   94b8a:  cmp    $0xb,%eax
    0.00 :   94b8d:  ja     94b0f <start_thread+0x33f>
    0.00 :   94b8f:  mov    %eax,%ecx
    0.00 :   94b91:  mov    %r8,%rsi
    0.00 :   94b94:  shr    %cl,%rsi
    0.00 :   94b97:  mov    %rsi,%rax
    0.00 :   94b9a:  test   $0x1,%al
    0.00 :   94b9c:  je     94b0f <start_thread+0x33f>
    0.00 :   94ba2:  jmp    94b62 <start_thread+0x392>
    0.00 :   94ba4:  movl   $0x0,0x61c(%rax)
    0.00 :   94bae:  jmp    94a3e <start_thread+0x26e>
    0.00 :   94bb3:  mov    %rbp,%rdi
    0.00 :   94bb6:  call   91300 <__lll_lock_wake_private>
    0.00 :   94bbb:  jmp    949e4 <start_thread+0x214>
    0.00 :   94bc0:  mov    %rbp,%rdi
    0.00 :   94bc3:  call   91230 <__lll_lock_wait_private>
    0.00 :   94bc8:  jmp    949c7 <start_thread+0x1f7>
    0.00 :   94bcd:  lea    -0x4000(%rax),%rsi
    0.00 :   94bd4:  mov    $0x4,%edx
    0.00 :   94bd9:  mov    %rbp,%rdi
    0.00 :   94bdc:  call   11eb70 <__madvise>
    0.00 :   94be1:  jmp    94a2c <start_thread+0x25c>
    0.00 :   94be6:  movl   $0x9,0x658(%rcx)
    0.00 :   94bf0:  mov    %rcx,0x660(%rcx)
    0.00 :   94bf7:  mov    0x187eba(%rip),%rax        # 21cab8 <__nptl_last_event>
    0.00 :   94bfe:  mov    0x8(%rsp),%rcx
    0.00 :   94c03:  mov    %rax,0x668(%rcx)
    0.00 :   94c0a:  lock cmpxchg %rcx,0x187ea5(%rip)        # 21cab8 <__nptl_last_event>
    0.00 :   94c13:  je     94b43 <start_thread+0x373>
    0.00 :   94c19:  jmp    94bf7 <start_thread+0x427>
    0.00 :   94c1b:  lea    0x14cb7e(%rip),%rcx        # 1e17a0 <__PRETTY_FUNCTION__.3>
    0.00 :   94c22:  mov    $0xc1,%edx
    0.00 :   94c27:  lea    0x144885(%rip),%rsi        # 1d94b3 <null+0xc38>
    0.00 :   94c2e:  lea    0x14488e(%rip),%rdi        # 1d94c3 <null+0xc48>
    0.00 :   94c35:  call   39e50 <__assert_fail>
