--------------------------------------------------------------------------------
Profile data file 'callgrind.out.68237' (creator: callgrind-3.18.1)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 1810798867
Trigger: Program termination
Profiled target:  ./spgemm_cpu_exec (PID 68237, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
11,728,349,268 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
2,594,897,648 (22.13%)  gemini_1.cpp:spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.0] [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  995,833,944 ( 8.49%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  969,481,944 ( 8.27%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  851,660,501 ( 7.26%)  ./stdio-common/./stdio-common/printf_fp.c:__printf_fp_l [/usr/lib/x86_64-linux-gnu/libc.so.6]
  482,316,972 ( 4.11%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  274,000,000 ( 2.34%)  ./stdio-common/./stdio-common/vfprintf-internal.c:__vfprintf_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
  264,695,112 ( 2.26%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  261,973,008 ( 2.23%)  ./stdio-common/./stdio-common/printf_fp.c:hack_digit [/usr/lib/x86_64-linux-gnu/libc.so.6]
  208,003,301 ( 1.77%)  ???:std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  187,914,300 ( 1.60%)  /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  187,671,346 ( 1.60%)  ./stdlib/./stdlib/strtod_l.c:____strtof_l_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
  164,123,906 ( 1.40%)  ???:std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  155,324,526 ( 1.32%)  ./stdlib/../sysdeps/x86_64/mul_1.S:__mpn_mul_1 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  152,021,702 ( 1.30%)  ???:std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  146,999,724 ( 1.25%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  144,083,646 ( 1.23%)  ./stdlib/./stdlib/divrem.c:__mpn_divrem [/usr/lib/x86_64-linux-gnu/libc.so.6]
  119,519,166 ( 1.02%)  /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
  112,056,224 ( 0.96%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  109,970,002 ( 0.94%)  ???:std::istreambuf_iterator<char, std::char_traits<char> > std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_int<long>(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, long&) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
  109,534,512 ( 0.93%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
  106,320,258 ( 0.91%)  /usr/include/c++/11/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   97,676,868 ( 0.83%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   93,096,282 ( 0.79%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   92,046,237 ( 0.78%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   90,535,074 ( 0.77%)  ???:0x00000000000206b0 [/usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0]
   73,153,236 ( 0.62%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   69,718,220 ( 0.59%)  /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_less_iter::operator()<int, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(int&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   66,055,325 ( 0.56%)  /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   65,028,632 ( 0.55%)  gemini_1.cpp:spgemm_cpu(CSRMatrix const&, CSRMatrix const&, CSRMatrix&) [clone ._omp_fn.1] [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   60,045,000 ( 0.51%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   58,863,189 ( 0.50%)  ???:0x000000000012b240 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   57,057,213 ( 0.49%)  ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   57,000,012 ( 0.49%)  ???:std::ostream& std::ostream::_M_insert<double>(double) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   57,000,000 ( 0.49%)  ./libio/./libio/vsnprintf.c:__vsnprintf_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
   54,841,948 ( 0.47%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   51,000,000 ( 0.43%)  ???:0x00000000000fb400 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   50,831,008 ( 0.43%)  /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<int> >, std::is_move_constructible<int>, std::is_move_assignable<int> >::value, void>::type std::swap<int>(int&, int&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   50,552,658 ( 0.43%)  ???:0x000000000012e8f0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   50,379,294 ( 0.43%)  ???:0x0000000000020910 [/usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0]
   49,725,078 ( 0.42%)  ???:std::istream::sentry::sentry(std::istream&, bool) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   48,000,000 ( 0.41%)  ./libio/./libio/strops.c:_IO_str_init_static_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
   47,615,636 ( 0.41%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   44,379,332 ( 0.38%)  ./stdlib/./stdlib/strtod_l.c:str_to_mpn.constprop.0 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   44,000,044 ( 0.38%)  ./locale/./locale/uselocale.c:uselocale [/usr/lib/x86_64-linux-gnu/libc.so.6]
   42,000,000 ( 0.36%)  ???:std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, float&) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   40,060,000 ( 0.34%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   39,243,816 ( 0.33%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   38,019,076 ( 0.32%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   38,000,000 ( 0.32%)  ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:__strchrnul_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   35,000,000 ( 0.30%)  /usr/include/c++/11/bits/vector.tcc:std::pair<int, float>& std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::emplace_back<std::pair<int, float> >(std::pair<int, float>&&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   33,357,849 ( 0.28%)  /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   31,769,400 ( 0.27%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator< <int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   31,000,000 ( 0.26%)  ???:std::__num_base::_S_format_float(std::ios_base const&, char*, char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   29,442,042 ( 0.25%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   28,799,984 ( 0.25%)  ./stdlib/../sysdeps/x86_64/lshift.S:__mpn_lshift [/usr/lib/x86_64-linux-gnu/libc.so.6]
   27,000,000 ( 0.23%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator-(long) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   26,638,038 ( 0.23%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   26,466,198 ( 0.23%)  ???:0x000000000012faf0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   26,286,694 ( 0.22%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
   25,025,111 ( 0.21%)  ../utils/csr_io.cpp:write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   25,000,043 ( 0.21%)  ../utils/csr_io.cpp:write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   25,000,000 ( 0.21%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::back() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   24,000,312 ( 0.20%)  ./libio/./libio/genops.c:_IO_setb [/usr/lib/x86_64-linux-gnu/libc.so.6]
   24,000,000 ( 0.20%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::__normal_iterator(std::pair<int, float>* const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   24,000,000 ( 0.20%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   23,000,360 ( 0.20%)  ./libio/./libio/genops.c:_IO_no_init [/usr/lib/x86_64-linux-gnu/libc.so.6]
   23,000,300 ( 0.20%)  ./libio/./libio/genops.c:_IO_old_init [/usr/lib/x86_64-linux-gnu/libc.so.6]
   22,819,578 ( 0.19%)  ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   22,424,032 ( 0.19%)  /usr/include/c++/11/new:operator new(unsigned long, void*) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   22,000,000 ( 0.19%)  ./stdlib/../sysdeps/ieee754/dbl-64/dbl2mpn.c:__mpn_extract_double [/usr/lib/x86_64-linux-gnu/libc.so.6]
   22,000,000 ( 0.19%)  /usr/include/c++/11/bits/stl_pair.h:std::pair<int, float>::pair<int&, float&, true>(int&, float&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   22,000,000 ( 0.19%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::pair<int, float> >::construct<std::pair<int, float>, std::pair<int, float> >(std::pair<int, float>*, std::pair<int, float>&&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   21,708,428 ( 0.19%)  ???:std::istream::operator>>(int&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   21,000,000 ( 0.18%)  /usr/include/c++/11/bits/move.h:std::pair<int, float>&& std::forward<std::pair<int, float> >(std::remove_reference<std::pair<int, float> >::type&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   20,799,508 ( 0.18%)  ./stdlib/./stdlib/strtod_l.c:round_and_return [/usr/lib/x86_64-linux-gnu/libc.so.6]
   20,020,060 ( 0.17%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   20,000,020 ( 0.17%)  /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<float const*, std::vector<float, std::allocator<float> > >(__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&, __gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   20,000,000 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   20,000,000 ( 0.17%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::end() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   19,649,448 ( 0.17%)  /usr/include/c++/11/bits/move.h:int const& std::forward<int const&>(std::remove_reference<int const&>::type&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   19,000,000 ( 0.16%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, float> > >::construct<std::pair<int, float>, std::pair<int, float> >(std::allocator<std::pair<int, float> >&, std::pair<int, float>*, std::pair<int, float>&&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   18,800,052 ( 0.16%)  ???:std::istream& std::istream::_M_extract<float>(float&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   17,999,172 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
   17,529,283 ( 0.15%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
   17,271,432 ( 0.15%)  ./stdlib/../sysdeps/x86_64/rshift.S:__mpn_rshift [/usr/lib/x86_64-linux-gnu/libc.so.6]
   17,000,000 ( 0.14%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::push_back(std::pair<int, float>&&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   16,650,102 ( 0.14%)  ./stdlib/./stdlib/mul.c:__mpn_mul [/usr/lib/x86_64-linux-gnu/libc.so.6]
   14,017,010 ( 0.12%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<float>::__value, void>::__type std::__fill_a1<float*, float>(float*, float*, float const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   14,014,042 ( 0.12%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   14,000,014 ( 0.12%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::base() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   14,000,000 ( 0.12%)  ./stdio-common/../libio/libioP.h:__vfprintf_internal
   14,000,000 ( 0.12%)  ???:std::string::push_back(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   13,801,000 ( 0.12%)  /usr/include/c++/11/bits/stl_algo.h:void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   13,600,000 ( 0.12%)  ???:void std::__convert_to_v<float>(char const*, float&, std::_Ios_Iostate&, __locale_struct* const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   13,039,000 ( 0.11%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::size() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   12,600,126 ( 0.11%)  ???:std::locale::facet::_S_get_c_locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   12,036,012 ( 0.10%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   12,030,090 ( 0.10%)  ???:0x0000000000103500 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   12,012,012 ( 0.10%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   12,007,962 ( 0.10%)  ???:std::codecvt<char, char, __mbstate_t>::do_always_noconv() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   12,000,000 ( 0.10%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator++() [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   12,000,000 ( 0.10%)  ???:std::string::reserve(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,199,848 ( 0.10%)  /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::push_back(float const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
   11,022,480 ( 0.09%)  ./stdlib/./stdlib/cmp.c:__mpn_cmp [/usr/lib/x86_64-linux-gnu/libc.so.6]
   11,011,033 ( 0.09%)  ???:std::ostream::operator<<(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,000,308 ( 0.09%)  ???:std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
   11,000,000 ( 0.09%)  ./nptl/./nptl/alloca_cutoff.c:__libc_alloca_cutoff [/usr/lib/x86_64-linux-gnu/libc.so.6]
   10,001,203 ( 0.09%)  ???:0x00000000048fe0f0 [???]
   10,001,095 ( 0.09%)  ./libio/./libio/genops.c:_IO_default_xsputn [/usr/lib/x86_64-linux-gnu/libc.so.6]
   10,000,000 ( 0.09%)  ???:std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    9,000,000 ( 0.08%)  ./stdio-common/./stdio-common/printf-parse.h:__vfprintf_internal
    8,935,023 ( 0.08%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    8,400,178 ( 0.07%)  ./nptl/./nptl/pthread_once.c:pthread_once@@GLIBC_2.34 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    8,400,000 ( 0.07%)  /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<float>::construct<float, float const&>(float*, float const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    8,295,638 ( 0.07%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    8,008,008 ( 0.07%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    8,004,025 ( 0.07%)  ???:0x00000000048fe1f0 [???]
    8,001,145 ( 0.07%)  ???:0x00000000048fc8d0 [???]
    8,000,000 ( 0.07%)  ./stdio-common/../sysdeps/generic/get-rounding-mode.h:__printf_fp_l
    8,000,000 ( 0.07%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator*() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    8,000,000 ( 0.07%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    8,000,000 ( 0.07%)  ???:std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    7,606,387 ( 0.06%)  ???:0x00000000048fb6b0 [???]
    7,600,000 ( 0.06%)  /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<float> >::construct<float, float const&>(std::allocator<float>&, float*, float const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,236,216 ( 0.06%)  ../utils/csr_io.cpp:read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,200,090 ( 0.06%)  ../utils/csr_io.cpp:read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,007,034 ( 0.06%)  /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,000,028 ( 0.06%)  /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,000,000 ( 0.06%)  ./stdio-common/./stdio-common/printf_fp.c:__printf_fp [/usr/lib/x86_64-linux-gnu/libc.so.6]
    7,000,000 ( 0.06%)  /usr/include/c++/11/bits/move.h:float& std::forward<float&>(std::remove_reference<float&>::type&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    7,000,000 ( 0.06%)  /usr/include/c++/11/bits/move.h:std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    6,654,669 ( 0.06%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,979,414 ( 0.05%)  /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,801,208 ( 0.05%)  /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,600,266 ( 0.05%)  /usr/include/c++/11/bits/move.h:float const& std::forward<float const&>(std::remove_reference<float const&>::type&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,217,654 ( 0.04%)  /usr/include/c++/11/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter)'2 [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,193,336 ( 0.04%)  /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [/home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/spgemm_cpu_exec]
    5,000,000 ( 0.04%)  ./stdio-common/../sysdeps/pthread/allocalim.h:__printf_fp_l
    4,873,464 ( 0.04%)  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30]
    4,400,000 ( 0.04%)  ./stdlib/../sysdeps/ieee754/flt-32/mpn2flt.c:__mpn_construct_float [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,211,338 ( 0.04%)  ???:0x0000000004b1c620 [???]
    4,002,041 ( 0.03%)  ???:0x00000000048fbbb0 [???]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                   

-- line 89 ----------------------------------------
          .                  	pointer;
          .           
          .                 struct _Vector_impl_data
          .                 {
          .           	pointer _M_start;
          .           	pointer _M_finish;
          .           	pointer _M_end_of_storage;
          .           
     12,136 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
     18,204 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
      9,102 ( 0.00%)  	{ }
          .           
          .           #if __cplusplus >= 201103L
          .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
          .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
          .           	  _M_end_of_storage(__x._M_end_of_storage)
          .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
          .           #endif
          .           
          .           	void
        180 ( 0.00%)  	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
          .           	{
        144 ( 0.00%)  	  _M_start = __x._M_start;
        144 ( 0.00%)  	  _M_finish = __x._M_finish;
        144 ( 0.00%)  	  _M_end_of_storage = __x._M_end_of_storage;
        108 ( 0.00%)  	}
          .           
          .           	void
        108 ( 0.00%)  	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
          .           	{
          .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
          .           	  // information used by TBAA.
         36 ( 0.00%)  	  _Vector_impl_data __tmp;
        104 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (8x)
         60 ( 0.00%)  	  __tmp._M_copy_data(*this);
        160 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data const&) (8x)
         60 ( 0.00%)  	  _M_copy_data(__x);
        160 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data const&) (8x)
         60 ( 0.00%)  	  __x._M_copy_data(__tmp);
        160 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_M_copy_data(std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data const&) (8x)
         72 ( 0.00%)  	}
          .                 };
          .           
     22,242 ( 0.00%)        struct _Vector_impl
     18,252 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (1,014x)
          .           	: public _Tp_alloc_type, public _Vector_impl_data
          .                 {
     10,075 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
          .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
     12,090 ( 0.00%)  	: _Tp_alloc_type()
     18,180 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator() (1,010x)
     13,130 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (1,010x)
      6,045 ( 0.00%)  	{ }
          .           
      6,042 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
      8,056 ( 0.00%)  	: _Tp_alloc_type(__a)
     22,044 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<float>::allocator(std::allocator<float> const&) (1,002x)
     13,026 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_Vector_impl_data::_Vector_impl_data() (1,002x)
      3,021 ( 0.00%)  	{ }
          .           
          .           #if __cplusplus >= 201103L
          .           	// Not defaulted, to enforce noexcept(true) even when
          .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
          .           	_Vector_impl(_Vector_impl&& __x) noexcept
          .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
          .           	{ }
          .           
-- line 146 ----------------------------------------
-- line 268 ----------------------------------------
          .           #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
          .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
          .                 };
          .           
          .               public:
          .                 typedef _Alloc allocator_type;
          .           
          .                 _Tp_alloc_type&
     48,956 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
     36,717 ( 0.00%)        { return this->_M_impl; }
          .           
          .                 const _Tp_alloc_type&
     32,848 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
     24,636 ( 0.00%)        { return this->_M_impl; }
          .           
          .                 allocator_type
         36 ( 0.00%)        get_allocator() const _GLIBCXX_NOEXCEPT
         66 ( 0.00%)        { return allocator_type(_M_get_Tp_allocator()); }
         88 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::allocator(std::allocator<int> const&) (4x)
         28 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const (4x)
          .           
          .           #if __cplusplus >= 201103L
     22,165 ( 0.00%)        _Vector_base() = default;
     45,450 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() (1,010x)
          .           #else
          .                 _Vector_base() { }
          .           #endif
          .           
         36 ( 0.00%)        _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         48 ( 0.00%)        : _M_impl(__a) { }
        104 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_Vector_impl::_Vector_impl(std::allocator<float> const&) (2x)
          .           
          .                 // Kept for ABI compatibility.
          .           #if !_GLIBCXX_INLINE_VERSION
          .                 _Vector_base(size_t __n)
          .                 : _M_impl()
          .                 { _M_create_storage(__n); }
          .           #endif
          .           
      8,008 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
      5,005 ( 0.00%)        : _M_impl(__a)
     52,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_Vector_impl::_Vector_impl(std::allocator<float> const&) (1,000x)
      9,009 ( 0.00%)        { _M_create_storage(__n); }
    393,895 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_create_storage(unsigned long) (1,000x)
          .           
          .           #if __cplusplus >= 201103L
          .                 _Vector_base(_Vector_base&&) = default;
          .           
          .                 // Kept for ABI compatibility.
          .           # if !_GLIBCXX_INLINE_VERSION
          .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
          .                 : _M_impl(std::move(__a)) { }
-- line 313 ----------------------------------------
-- line 325 ----------------------------------------
          .                 }
          .           # endif
          .           
          .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
          .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
          .                 { }
          .           #endif
          .           
     15,110 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
          .                 {
     21,154 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
    246,233 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_deallocate(std::pair<int, float>*, unsigned long) (1,000x)
     21,157 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
     18,132 ( 0.00%)        }
     29,000 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_Vector_impl::~_Vector_impl() (1,000x)
          .           
          .               public:
          .                 _Vector_impl _M_impl;
          .           
          .                 pointer
     36,612 ( 0.00%)        _M_allocate(size_t __n)
          .                 {
          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
     48,816 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  1,307,263 ( 0.01%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (4,062x)
     12,204 ( 0.00%)        }
          .           
          .                 void
     56,861 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
          .                 {
          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
     16,246 ( 0.00%)  	if (__p)
     36,612 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
    189,854 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<float> >::deallocate(std::allocator<float>&, float*, unsigned long) (1,039x)
     24,369 ( 0.00%)        }
          .           
          .               protected:
          .                 void
      6,006 ( 0.00%)        _M_create_storage(size_t __n)
          .                 {
      7,007 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
        469 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_M_allocate(unsigned long) (1x)
      4,004 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
      7,010 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      3,003 ( 0.00%)        }
          .               };
          .           
          .             /**
          .              *  @brief A standard container which offers fixed time access to
          .              *  individual elements in any order.
          .              *
          .              *  @ingroup sequences
          .              *
-- line 372 ----------------------------------------
-- line 445 ----------------------------------------
          .                 {
          .           	// Instantiating std::__relocate_a might cause an error outside the
          .           	// immediate context (in __relocate_object_a's noexcept-specifier),
          .           	// so only do it if we know the type can be move-inserted into *this.
          .           	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
          .                 }
          .           
          .                 static pointer
     65,584 ( 0.00%)        _S_do_relocate(pointer __first, pointer __last, pointer __result,
          .           		     _Tp_alloc_type& __alloc, true_type) noexcept
          .                 {
     49,188 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
  2,073,673 ( 0.02%)  => /usr/include/c++/11/bits/stl_uninitialized.h:float* std::__relocate_a<float*, float*, std::allocator<float> >(float*, float*, float*, std::allocator<float>&) (77x)
     16,396 ( 0.00%)        }
          .           
          .                 static pointer
          .                 _S_do_relocate(pointer, pointer, pointer __result,
          .           		     _Tp_alloc_type&, false_type) noexcept
          .                 { return __result; }
          .           
          .                 static pointer
     65,584 ( 0.00%)        _S_relocate(pointer __first, pointer __last, pointer __result,
          .           		  _Tp_alloc_type& __alloc) noexcept
          .                 {
          .           	using __do_it = __bool_constant<_S_use_relocate()>;
     49,188 ( 0.00%)  	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
  2,074,905 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_S_do_relocate(float*, float*, float*, std::allocator<float>&, std::integral_constant<bool, true>) (77x)
     16,396 ( 0.00%)        }
          .           #endif // C++11
          .           
          .               protected:
          .                 using _Base::_M_allocate;
          .                 using _Base::_M_deallocate;
          .                 using _Base::_M_impl;
          .                 using _Base::_M_get_Tp_allocator;
          .           
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
          .               public:
          .                 // [23.2.4.1] construct/copy/destroy
          .                 // (assign() and get_allocator() are also listed in this section)
          .           
          .                 /**
          .                  *  @brief  Creates a %vector with no elements.
          .                  */
          .           #if __cplusplus >= 201103L
     22,165 ( 0.00%)        vector() = default;
     56,560 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base() (1,010x)
          .           #else
          .                 vector() { }
          .           #endif
          .           
          .                 /**
          .                  *  @brief  Creates a %vector with no elements.
          .                  *  @param  __a  An allocator object.
          .                  */
          .                 explicit
         36 ( 0.00%)        vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         48 ( 0.00%)        : _Base(__a) { }
        132 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_Vector_base(std::allocator<float> const&) (2x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Creates a %vector with default constructed elements.
          .                  *  @param  __n  The number of elements to initially create.
          .                  *  @param  __a  An allocator.
          .                  *
          .                  *  This constructor fills the %vector with @a __n default
          .                  *  constructed elements.
          .                  */
          .                 explicit
          8 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
         12 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
        573 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_Vector_base(unsigned long, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&) (1x)
        138 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&) (1x)
          9 ( 0.00%)        { _M_default_initialize(__n); }
    108,070 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_M_default_initialize(unsigned long) (1x)
          .           
          .                 /**
          .                  *  @brief  Creates a %vector with copies of an exemplar element.
          .                  *  @param  __n  The number of elements to initially create.
          .                  *  @param  __value  An element to copy.
          .                  *  @param  __a  An allocator.
          .                  *
          .                  *  This constructor fills the %vector with @a __n copies of @a __value.
          .                  */
      9,000 ( 0.00%)        vector(size_type __n, const value_type& __value,
          .           	     const allocator_type& __a = allocator_type())
     12,000 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
    467,895 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_Vector_base(unsigned long, std::allocator<float> const&) (1,000x)
    138,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_S_check_init_len(unsigned long, std::allocator<float> const&) (1,000x)
     10,000 ( 0.00%)        { _M_fill_initialize(__n, __value); }
  7,167,000 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_M_fill_initialize(unsigned long, float const&) (1,000x)
          .           #else
          .                 /**
          .                  *  @brief  Creates a %vector with copies of an exemplar element.
          .                  *  @param  __n  The number of elements to initially create.
          .                  *  @param  __value  An element to copy.
          .                  *  @param  __a  An allocator.
          .                  *
          .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 533 ----------------------------------------
-- line 670 ----------------------------------------
          .           #endif
          .           
          .                 /**
          .                  *  The dtor only erases the elements, and note that if the
          .                  *  elements themselves are pointers, the pointed-to memory is
          .                  *  not touched in any way.  Managing the pointer is the user's
          .                  *  responsibility.
          .                  */
     15,110 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
          .                 {
     21,154 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     37,000 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<std::pair<int, float>*, std::pair<int, float> >(std::pair<int, float>*, std::pair<int, float>*, std::allocator<std::pair<int, float> >&) (1,000x)
     12,088 ( 0.00%)  		      _M_get_Tp_allocator());
      7,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_get_Tp_allocator() (1,000x)
          .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
     18,132 ( 0.00%)        }
    300,233 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::~_Vector_base() (1,000x)
          .           
          .                 /**
          .                  *  @brief  %Vector assignment operator.
          .                  *  @param  __x  A %vector of identical element and allocator types.
          .                  *
          .                  *  All the elements of @a __x are copied, but any unused capacity in
          .                  *  @a __x will not be copied.
          .                  *
-- line 691 ----------------------------------------
-- line 701 ----------------------------------------
          .                  *
          .                  *  The contents of @a __x are moved into this %vector (without copying,
          .                  *  if the allocators permit it).
          .                  *  Afterwards @a __x is a valid, but unspecified %vector.
          .                  *
          .                  *  Whether the allocator is moved depends on the allocator traits.
          .                  */
          .                 vector&
         36 ( 0.00%)        operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
          .                 {
          6 ( 0.00%)  	constexpr bool __move_storage =
          .           	  _Alloc_traits::_S_propagate_on_move_assign()
          .           	  || _Alloc_traits::_S_always_equal();
         48 ( 0.00%)  	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
      1,146 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_M_move_assign(std::vector<float, std::allocator<float> >&&, std::integral_constant<bool, true>) (2x)
         14 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::vector<float, std::allocator<float> >&>::type&& std::move<std::vector<float, std::allocator<float> >&>(std::vector<float, std::allocator<float> >&) (2x)
          6 ( 0.00%)  	return *this;
         12 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  %Vector list assignment operator.
          .                  *  @param  __l  An initializer_list.
          .                  *
          .                  *  This function fills a %vector with copies of the elements in the
          .                  *  initializer list @a __l.
          .                  *
-- line 724 ----------------------------------------
-- line 803 ----------------------------------------
          .           
          .                 // iterators
          .                 /**
          .                  *  Returns a read/write iterator that points to the first
          .                  *  element in the %vector.  Iteration is done in ordinary
          .                  *  element order.
          .                  */
          .                 iterator
     40,792 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
     56,089 ( 0.00%)        { return iterator(this->_M_impl._M_start); }
     60,732 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (5,061x)
          .           
          .                 /**
          .                  *  Returns a read-only (constant) iterator that points to the
          .                  *  first element in the %vector.  Iteration is done in ordinary
          .                  *  element order.
          .                  */
          .                 const_iterator
         24 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
         33 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
         12 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::__normal_iterator(float const* const&) (1x)
          .           
          .                 /**
          .                  *  Returns a read/write iterator that points one past the last
          .                  *  element in the %vector.  Iteration is done in ordinary
          .                  *  element order.
          .                  */
          .                 iterator
  8,040,792 ( 0.07%)        end() _GLIBCXX_NOEXCEPT
 12,061,188 ( 0.10%)        { return iterator(this->_M_impl._M_finish); }
        456 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >::__normal_iterator(float* const&) (38x)
          .           
          .                 /**
          .                  *  Returns a read-only (constant) iterator that points one past
          .                  *  the last element in the %vector.  Iteration is done in
          .                  *  ordinary element order.
          .                  */
          .                 const_iterator
         24 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
         36 ( 0.00%)        { return const_iterator(this->_M_impl._M_finish); }
         12 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::__normal_iterator(float const* const&) (1x)
          .           
          .                 /**
          .                  *  Returns a read/write reverse iterator that points to the
          .                  *  last element in the %vector.  Iteration is done in reverse
          .                  *  element order.
          .                  */
          .                 reverse_iterator
          .                 rbegin() _GLIBCXX_NOEXCEPT
-- line 847 ----------------------------------------
-- line 910 ----------------------------------------
          .                 const_reverse_iterator
          .                 crend() const noexcept
          .                 { return const_reverse_iterator(begin()); }
          .           #endif
          .           
          .                 // [23.2.4.2] capacity
          .                 /**  Returns the number of elements in the %vector.  */
          .                 size_type
  4,069,648 ( 0.03%)        size() const _GLIBCXX_NOEXCEPT
  9,156,708 ( 0.08%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
          .           
          .                 /**  Returns the size() of the largest possible %vector.  */
          .                 size_type
     41,030 ( 0.00%)        max_size() const _GLIBCXX_NOEXCEPT
     57,442 ( 0.00%)        { return _S_max_size(_M_get_Tp_allocator()); }
    470,316 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) (7,126x)
     49,882 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const (7,126x)
          .           
          .           #if __cplusplus >= 201103L
          .                 /**
          .                  *  @brief  Resizes the %vector to the specified number of elements.
          .                  *  @param  __new_size  Number of elements the %vector should contain.
          .                  *
          .                  *  This function will %resize the %vector to the specified
          .                  *  number of elements.  If the number is smaller than the
          .                  *  %vector's current size the %vector is truncated, otherwise
          .                  *  default constructed elements are appended.
          .                  */
          .                 void
         12 ( 0.00%)        resize(size_type __new_size)
          .                 {
         14 ( 0.00%)  	if (__new_size > size())
         13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::size() const (1x)
         22 ( 0.00%)  	  _M_default_append(__new_size - size());
  7,001,267 ( 0.06%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<float, std::allocator<float> >::_M_default_append(unsigned long) (1x)
         13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::size() const (1x)
          .           	else if (__new_size < size())
          .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
          8 ( 0.00%)        }
          .           
          .                 /**
          .                  *  @brief  Resizes the %vector to the specified number of elements.
          .                  *  @param  __new_size  Number of elements the %vector should contain.
          .                  *  @param  __x  Data with which new elements should be populated.
          .                  *
          .                  *  This function will %resize the %vector to the specified
          .                  *  number of elements.  If the number is smaller than the
          .                  *  %vector's current size the %vector is truncated, otherwise
          .                  *  the %vector is extended and new elements are populated with
          .                  *  given data.
          .                  */
          .                 void
          8 ( 0.00%)        resize(size_type __new_size, const value_type& __x)
          .                 {
          7 ( 0.00%)  	if (__new_size > size())
         13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (1x)
         17 ( 0.00%)  	  _M_fill_insert(end(), __new_size - size(), __x);
      8,898 ( 0.00%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&) (1x)
         32 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1x)
         13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (1x)
          .           	else if (__new_size < size())
          .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
          5 ( 0.00%)        }
          .           #else
          .                 /**
          .                  *  @brief  Resizes the %vector to the specified number of elements.
          .                  *  @param  __new_size  Number of elements the %vector should contain.
          .                  *  @param  __x  Data with which new elements should be populated.
          .                  *
          .                  *  This function will %resize the %vector to the specified
          .                  *  number of elements.  If the number is smaller than the
-- line 971 ----------------------------------------
-- line 990 ----------------------------------------
          .                 { _M_shrink_to_fit(); }
          .           #endif
          .           
          .                 /**
          .                  *  Returns the total number of elements that the %vector can
          .                  *  hold before needing to allocate more memory.
          .                  */
          .                 size_type
      8,000 ( 0.00%)        capacity() const _GLIBCXX_NOEXCEPT
      4,000 ( 0.00%)        { return size_type(this->_M_impl._M_end_of_storage
     14,000 ( 0.00%)  			 - this->_M_impl._M_start); }
          .           
          .                 /**
          .                  *  Returns true if the %vector is empty.  (Thus begin() would
          .                  *  equal end().)
          .                  */
          .                 _GLIBCXX_NODISCARD bool
          .                 empty() const _GLIBCXX_NOEXCEPT
          .                 { return begin() == end(); }
-- line 1008 ----------------------------------------
-- line 1035 ----------------------------------------
          .                  *  @return  Read/write reference to data.
          .                  *
          .                  *  This operator allows for easy, array-style, data access.
          .                  *  Note that data access with this operator is unchecked and
          .                  *  out_of_range lookups are not defined. (For checked lookups
          .                  *  see at().)
          .                  */
          .                 reference
449,960,815 ( 3.84%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
          .                 {
          .           	__glibcxx_requires_subscript(__n);
461,969,815 ( 3.94%)  	return *(this->_M_impl._M_start + __n);
179,984,326 ( 1.53%)        }
          .           
          .                 /**
          .                  *  @brief  Subscript access to the data contained in the %vector.
          .                  *  @param __n The index of the element for which data should be
          .                  *  accessed.
          .                  *  @return  Read-only (constant) reference to data.
          .                  *
          .                  *  This operator allows for easy, array-style, data access.
          .                  *  Note that data access with this operator is unchecked and
          .                  *  out_of_range lookups are not defined. (For checked lookups
          .                  *  see at().)
          .                  */
          .                 const_reference
604,916,215 ( 5.16%)        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
          .                 {
          .           	__glibcxx_requires_subscript(__n);
604,916,215 ( 5.16%)  	return *(this->_M_impl._M_start + __n);
241,966,486 ( 2.06%)        }
          .           
          .               protected:
          .                 /// Safety check used only from at().
          .                 void
          .                 _M_range_check(size_type __n) const
          .                 {
          .           	if (__n >= this->size())
          .           	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
-- line 1073 ----------------------------------------
-- line 1135 ----------------------------------------
          .           	return *begin();
          .                 }
          .           
          .                 /**
          .                  *  Returns a read/write reference to the data at the last
          .                  *  element of the %vector.
          .                  */
          .                 reference
  8,000,000 ( 0.07%)        back() _GLIBCXX_NOEXCEPT
          .                 {
          .           	__glibcxx_requires_nonempty();
 12,000,000 ( 0.10%)  	return *(end() - 1);
 39,000,000 ( 0.33%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator-(long) const (1,000,000x)
 32,000,000 ( 0.27%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::end() (1,000,000x)
  8,000,000 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::pair<int, float>*, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::operator*() const (1,000,000x)
  5,000,000 ( 0.04%)        }
          .           
          .                 /**
          .                  *  Returns a read-only (constant) reference to the data at the
          .                  *  last element of the %vector.
          .                  */
          .                 const_reference
          .                 back() const _GLIBCXX_NOEXCEPT
          .                 {
-- line 1155 ----------------------------------------
-- line 1179 ----------------------------------------
          .                  *
          .                  *  This is a typical stack operation.  The function creates an
          .                  *  element at the end of the %vector and assigns the given data
          .                  *  to it.  Due to the nature of a %vector this operation can be
          .                  *  done in constant time if the %vector has preallocated space
          .                  *  available.
          .                  */
          .                 void
 10,812,012 ( 0.09%)        push_back(const value_type& __x)
          .                 {
 10,812,012 ( 0.09%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
          .           	  {
          .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 12,592,328 ( 0.11%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 86,734,404 ( 0.74%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&) (1,398,942x)
          .           				     __x);
  8,994,520 ( 0.08%)  	    ++this->_M_impl._M_finish;
          .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
          .           	  }
          .           	else
     27,882 ( 0.00%)  	  _M_realloc_insert(end(), __x);
  6,952,651 ( 0.06%)  => /usr/include/c++/11/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (3,060x)
     97,920 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (3,060x)
  7,204,910 ( 0.06%)        }
          .           
          .           #if __cplusplus >= 201103L
          .                 void
  6,000,000 ( 0.05%)        push_back(value_type&& __x)
 11,000,000 ( 0.09%)        { emplace_back(std::move(__x)); }
209,000,000 ( 1.78%)  => /usr/include/c++/11/bits/vector.tcc:std::pair<int, float>& std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::emplace_back<std::pair<int, float> >(std::pair<int, float>&&) (1,000,000x)
  7,000,000 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::pair<int, float>&>::type&& std::move<std::pair<int, float>&>(std::pair<int, float>&) (1,000,000x)
          .           
          .                 template<typename... _Args>
          .           #if __cplusplus > 201402L
          .           	reference
          .           #else
          .           	void
          .           #endif
          .           	emplace_back(_Args&&... __args);
-- line 1212 ----------------------------------------
-- line 1585 ----------------------------------------
          .           	    std::__uninitialized_copy_a(__first, __last,
          .           					this->_M_impl._M_start,
          .           					_M_get_Tp_allocator());
          .           	}
          .           
          .                 // Called by the first initialize_dispatch above and by the
          .                 // vector(n,value,a) constructor.
          .                 void
      7,000 ( 0.00%)        _M_fill_initialize(size_type __n, const value_type& __value)
          .                 {
      2,000 ( 0.00%)  	this->_M_impl._M_finish =
      6,000 ( 0.00%)  	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
  7,138,000 ( 0.06%)  => /usr/include/c++/11/bits/stl_uninitialized.h:float* std::__uninitialized_fill_n_a<float*, unsigned long, float, float>(float*, unsigned long, float const&, std::allocator<float>&) (1,000x)
      4,000 ( 0.00%)  					_M_get_Tp_allocator());
      7,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_get_Tp_allocator() (1,000x)
      3,000 ( 0.00%)        }
          .           
          .           #if __cplusplus >= 201103L
          .                 // Called by the vector(n) constructor.
          .                 void
          6 ( 0.00%)        _M_default_initialize(size_type __n)
          .                 {
          2 ( 0.00%)  	this->_M_impl._M_finish =
          6 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    108,042 ( 0.00%)  => /usr/include/c++/11/bits/stl_uninitialized.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >* std::__uninitialized_default_n_a<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >*, unsigned long, std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >(std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >*, unsigned long, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >&) (1x)
          4 ( 0.00%)  					   _M_get_Tp_allocator());
          7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_M_get_Tp_allocator() (1x)
          3 ( 0.00%)        }
          .           #endif
          .           
          .                 // Internal assign functions follow.  The *_aux functions do the actual
          .                 // assignment work for the range versions.
          .           
          .                 // Called by the range assign to implement [23.1.1]/9
          .           
          .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1616 ----------------------------------------
-- line 1748 ----------------------------------------
          .                 // Emplacing an rvalue of the correct type can use _M_insert_rval.
          .                 iterator
          .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
          .                 { return _M_insert_rval(__position, std::move(__v)); }
          .           #endif
          .           
          .                 // Called by _M_fill_insert, _M_insert_aux etc.
          .                 size_type
     34,111 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
          .                 {
     43,414 ( 0.00%)  	if (max_size() - size() < __n)
    260,270 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (3,062x)
     39,806 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (3,062x)
          .           	  __throw_length_error(__N(__s));
          .           
     49,616 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
     79,612 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (6,124x)
     42,874 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (3,062x)
     34,111 ( 0.00%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
    260,270 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (3,062x)
     39,806 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (3,062x)
     18,606 ( 0.00%)        }
          .           
          .                 // Called by constructors to check initial size.
          .                 static size_type
     10,010 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
          .                 {
     15,015 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
         66 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::_S_max_size(std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&) (1x)
         22 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::allocator(std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&) (1x)
         18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::~allocator() (1x)
          .           	  __throw_length_error(
          .           	      __N("cannot create std::vector larger than max_size()"));
      1,001 ( 0.00%)  	return __n;
      6,006 ( 0.00%)        }
          .           
          .                 static size_type
     73,656 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
          .                 {
          .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
          .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
          .           	// (even if std::allocator_traits::max_size says we can).
     18,414 ( 0.00%)  	const size_t __diffmax
          .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
     36,828 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
    192,402 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) (7,126x)
     55,242 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
     99,764 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (7,126x)
     46,035 ( 0.00%)        }
          .           
          .                 // Internal erase functions follow.
          .           
          .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
          .                 // _M_assign_aux.
          .                 void
          .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
          .                 {
-- line 1793 ----------------------------------------
-- line 1807 ----------------------------------------
          .                 _M_erase(iterator __first, iterator __last);
          .           
          .           #if __cplusplus >= 201103L
          .               private:
          .                 // Constant-time move assignment when source object's memory can be
          .                 // moved, either because the source's allocator will move too
          .                 // or because the allocators are equal.
          .                 void
         60 ( 0.00%)        _M_move_assign(vector&& __x, true_type) noexcept
          .                 {
         78 ( 0.00%)  	vector __tmp(get_allocator());
        320 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector(std::allocator<int> const&) (4x)
        184 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::get_allocator() const (4x)
         72 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<int>::~allocator() (4x)
         30 ( 0.00%)  	this->_M_impl._M_swap_data(__x._M_impl);
        424 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data&) (4x)
         30 ( 0.00%)  	__tmp._M_impl._M_swap_data(__x._M_impl);
        424 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_M_swap_data(std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data&) (4x)
         60 ( 0.00%)  	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
         76 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::__alloc_on_move<std::allocator<int> >(std::allocator<int>&, std::allocator<int>&) (4x)
         56 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (8x)
         54 ( 0.00%)        }
        528 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (4x)
          .           
          .                 // Do move assignment when it might not be possible to move source
          .                 // object's memory, resulting in a linear-time operation.
          .                 void
          .                 _M_move_assign(vector&& __x, false_type)
          .                 {
          .           	if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
          .           	  _M_move_assign(std::move(__x), true_type());
-- line 1829 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/alloc_traits.h
--------------------------------------------------------------------------------
Ir                  

-- line 455 ----------------------------------------
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *
         .                  *  Calls @c a.allocate(n)
         .                 */
         .                 _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
    36,612 ( 0.00%)        allocate(allocator_type& __a, size_type __n)
    48,816 ( 0.00%)        { return __a.allocate(__n); }
       439 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::allocate(unsigned long, void const*) (1x)
         .           
         .                 /**
         .                  *  @brief  Allocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __n  The number of objects to allocate space for.
         .                  *  @param  __hint Aid to locality.
         .                  *  @return Memory of suitable size and alignment for @a n objects
         .                  *          of type @c value_type
-- line 472 ----------------------------------------
-- line 487 ----------------------------------------
         .                  *  @brief  Deallocate memory.
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the memory to deallocate.
         .                  *  @param  __n  The number of objects space was allocated for.
         .                  *
         .                  *  Calls <tt> a.deallocate(p, n) </tt>
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR void
    42,714 ( 0.00%)        deallocate(allocator_type& __a, pointer __p, size_type __n)
    54,918 ( 0.00%)        { __a.deallocate(__p, __n); }
   212,233 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::pair<int, float> >::deallocate(std::pair<int, float>*, unsigned long) (1,000x)
         .           
         .                 /**
         .                  *  @brief  Construct an object of type `_Up`
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to memory of suitable size and alignment for
         .                  *	       an object of type `_Up`.
         .                  *  @param  __args Constructor arguments.
         .                  *
         .                  *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
         .                  *  in C++11, C++14 and C++17. Changed in C++20 to call
         .                  *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
         .                 */
         .                 template<typename _Up, typename... _Args>
         .           	static _GLIBCXX20_CONSTEXPR void
19,614,014 ( 0.17%)  	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
         .           		  _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
         .           	{
         .           #if __cplusplus <= 201703L
25,218,018 ( 0.22%)  	  __a.construct(__p, std::forward<_Args>(__args)...);
37,000,000 ( 0.32%)  => /usr/include/c++/11/ext/new_allocator.h:void __gnu_cxx::new_allocator<std::pair<int, float> >::construct<std::pair<int, float>, std::pair<int, float> >(std::pair<int, float>*, std::pair<int, float>&&) (1,000,000x)
 7,000,000 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::pair<int, float>&& std::forward<std::pair<int, float> >(std::remove_reference<std::pair<int, float> >::type&) (1,000,000x)
         .           #else
         .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
         .           #endif
 8,406,006 ( 0.07%)  	}
         .           
         .                 /**
         .                  *  @brief  Destroy an object of type @a _Up
         .                  *  @param  __a  An allocator.
         .                  *  @param  __p  Pointer to the object to destroy
         .                  *
         .                  *  Calls @c __a.destroy(__p).
         .                 */
-- line 528 ----------------------------------------
-- line 539 ----------------------------------------
         .           	}
         .           
         .                 /**
         .                  *  @brief  The maximum supported allocation size
         .                  *  @param  __a  An allocator.
         .                  *  @return @c __a.max_size()
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR size_type
    46,035 ( 0.00%)        max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
         .                 {
         .           #if __cplusplus <= 201703L
    27,621 ( 0.00%)  	return __a.max_size();
   121,142 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<int>::max_size() const (7,126x)
         .           #else
         .           	return size_t(-1) / sizeof(value_type);
         .           #endif
    18,414 ( 0.00%)        }
         .           
         .                 /**
         .                  *  @brief  Obtain an allocator to use when copying a container.
         .                  *  @param  __rhs  An allocator.
         .                  *  @return @c __rhs
         .                 */
         .                 static _GLIBCXX20_CONSTEXPR allocator_type
         .                 select_on_container_copy_construction(const allocator_type& __rhs)
-- line 562 ----------------------------------------
-- line 702 ----------------------------------------
         .           
         .             template<typename _Alloc>
         .               inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
         .               { }
         .           #endif
         .           
         .             template<typename _Alloc>
         .               _GLIBCXX14_CONSTEXPR inline void
        36 ( 0.00%)      __alloc_on_move(_Alloc& __one, _Alloc& __two)
         .               {
         .                 typedef allocator_traits<_Alloc> __traits;
         .                 typedef typename __traits::propagate_on_container_move_assignment __pocma;
         .           #if __cplusplus >= 201703L
         .                 if constexpr (__pocma::value)
        18 ( 0.00%)  	__one = std::move(__two);
        28 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<std::allocator<int>&>::type&& std::move<std::allocator<int>&>(std::allocator<int>&) (4x)
         .           #else
         .                 __do_alloc_on_move(__one, __two, __pocma());
         .           #endif
        18 ( 0.00%)      }
         .           
         .           #if __cplusplus < 201703L
         .             template<typename _Alloc>
         .               inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
         .               {
         .                 using std::swap;
         .                 swap(__one, __two);
         .               }
-- line 728 ----------------------------------------
-- line 837 ----------------------------------------
         .           #else
         .           	allocator_traits<_Allocator>::destroy(__alloc,
         .           					      std::__addressof(*__first));
         .           #endif
         .               }
         .           
         .             template<typename _ForwardIterator, typename _Tp>
         .               inline void
    21,161 ( 0.00%)      _Destroy(_ForwardIterator __first, _ForwardIterator __last,
         .           	     allocator<_Tp>&)
         .               {
    15,115 ( 0.00%)        _Destroy(__first, __last);
    22,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_construct.h:void std::_Destroy<std::pair<int, float>*>(std::pair<int, float>*, std::pair<int, float>*) (1,000x)
     9,069 ( 0.00%)      }
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace std
         .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: ../utils/csr_io.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include "csr_io.h"
         .           #include <fstream>
         .           
        40 ( 0.00%)  static std::vector<int> read_vector_int(const std::string& path) {
        24 ( 0.00%)      std::ifstream file(path);
    17,839 ( 0.00%)  => ???:0x000000000010a540 (4x)
        12 ( 0.00%)      std::vector<int> data;
       268 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (4x)
         .               int val;
 7,236,092 ( 0.06%)      while (file >> val) data.push_back(val);
190,801,509 ( 1.63%)  => ???:0x000000000010a3b0 (402,006x)
38,319,899 ( 0.33%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (402,002x)
 2,412,036 ( 0.02%)  => ???:0x000000000010a4d0 (402,006x)
         8 ( 0.00%)      return data;
        40 ( 0.00%)  }
    11,470 ( 0.00%)  => ???:0x000000000010a340 (4x)
         .           
        20 ( 0.00%)  static std::vector<float> read_vector_float(const std::string& path) {
        12 ( 0.00%)      std::ifstream file(path);
     3,476 ( 0.00%)  => ???:0x000000000010a540 (2x)
         6 ( 0.00%)      std::vector<float> data;
       134 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::vector() (2x)
         .               float val;
 7,200,028 ( 0.06%)      while (file >> val) data.push_back(val);
784,238,489 ( 6.69%)  => ???:0x000000000010a330 (400,002x)
38,114,180 ( 0.32%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::push_back(float const&) (400,000x)
 2,400,012 ( 0.02%)  => ???:0x000000000010a4d0 (400,002x)
         4 ( 0.00%)      return data;
        20 ( 0.00%)  }
     1,598 ( 0.00%)  => ???:0x000000000010a340 (2x)
         .           
        20 ( 0.00%)  static void write_vector_int(const std::string& path, const std::vector<int>& vec) {
        12 ( 0.00%)      std::ofstream file(path);
     5,240 ( 0.00%)  => ???:0x000000000010a5e0 (2x)
25,025,061 ( 0.21%)      for (int v : vec) file << v << "\n";
378,902,188 ( 3.23%)  => ???:0x000000000010a580 (1,001,001x)
222,226,395 ( 1.89%)  => ???:0x000000000010a440 (1,001,001x)
34,034,102 ( 0.29%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (1,001,003x)
12,012,012 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (1,001,001x)
 8,008,008 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (1,001,001x)
        64 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (2x)
        62 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (2x)
        18 ( 0.00%)  }
     4,865 ( 0.00%)  => ???:0x000000000010a500 (2x)
         .           
        10 ( 0.00%)  static void write_vector_float(const std::string& path, const std::vector<float>& vec) {
         6 ( 0.00%)      std::ofstream file(path);
     2,007 ( 0.00%)  => ???:0x000000000010a5e0 (1x)
25,000,018 ( 0.21%)      for (float v : vec) file << v << "\n";
2,673,602,629 (22.80%)  => ???:0x000000000010a3f0 (1,000,000x)
222,008,658 ( 1.89%)  => ???:0x000000000010a440 (1,000,000x)
34,000,034 ( 0.29%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<float const*, std::vector<float, std::allocator<float> > >(__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&, __gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > > const&) (1,000,001x)
12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator++() (1,000,000x)
 8,000,000 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::operator*() const (1,000,000x)
        32 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::end() const (1x)
        31 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::begin() const (1x)
         9 ( 0.00%)  }
     1,033 ( 0.00%)  => ???:0x000000000010a500 (1x)
         .           
        18 ( 0.00%)  static std::pair<int, int> read_shape(const std::string& path) {
        12 ( 0.00%)      std::ifstream file(path);
     3,476 ( 0.00%)  => ???:0x000000000010a540 (2x)
         .               int rows, cols;
        20 ( 0.00%)      file >> rows >> cols;
     2,336 ( 0.00%)  => ???:0x000000000010a3b0 (4x)
        16 ( 0.00%)      return {rows, cols};
        72 ( 0.00%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<int, int>::pair<int&, int&, true>(int&, int&) (2x)
        18 ( 0.00%)  }
     1,598 ( 0.00%)  => ???:0x000000000010a340 (2x)
         .           
        11 ( 0.00%)  static void write_shape(const std::string& path, int rows, int cols) {
         6 ( 0.00%)      std::ofstream file(path);
     2,007 ( 0.00%)  => ???:0x000000000010a5e0 (1x)
        20 ( 0.00%)      file << rows << " " << cols << "\n";
       863 ( 0.00%)  => ???:0x000000000010a580 (2x)
       444 ( 0.00%)  => ???:0x000000000010a440 (2x)
         9 ( 0.00%)  }
     1,033 ( 0.00%)  => ???:0x000000000010a500 (1x)
         .           
        20 ( 0.00%)  CSRMatrix load_csr_matrix(const std::string& basename) {
         6 ( 0.00%)      CSRMatrix mat;
       440 ( 0.00%)  => /home/dishapant/Desktop/llm-performance-optimization/sparse_matmul/cpu/../utils/csr_io.h:CSRMatrix::CSRMatrix() (2x)
        44 ( 0.00%)      mat.indptr = read_vector_int(basename + "_indptr.txt");
 1,469,619 ( 0.01%)  => ../utils/csr_io.cpp:read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (2x)
     3,737 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (2x)
     1,196 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> >&&) (2x)
       208 ( 0.00%)  => ???:0x000000000010a3c0 (2x)
       264 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
        46 ( 0.00%)      mat.indices = read_vector_int(basename + "_indices.txt");
237,329,618 ( 2.02%)  => ../utils/csr_io.cpp:read_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (2x)
       674 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (2x)
     1,196 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> >&&) (2x)
       208 ( 0.00%)  => ???:0x000000000010a3c0 (2x)
       264 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
        46 ( 0.00%)      mat.data = read_vector_float(basename + "_data.txt");
831,957,979 ( 7.09%)  => ../utils/csr_io.cpp:read_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (2x)
       674 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (2x)
     1,196 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator=(std::vector<float, std::allocator<float> >&&) (2x)
       208 ( 0.00%)  => ???:0x000000000010a3c0 (2x)
       264 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::~vector() (2x)
        30 ( 0.00%)      auto [rows, cols] = read_shape(basename + "_shape.txt");
     7,566 ( 0.00%)  => ../utils/csr_io.cpp:read_shape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (2x)
       674 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (2x)
       208 ( 0.00%)  => ???:0x000000000010a3c0 (2x)
         4 ( 0.00%)      mat.rows = rows;
         4 ( 0.00%)      mat.cols = cols;
         2 ( 0.00%)      return mat;
        14 ( 0.00%)  }
         .           
        11 ( 0.00%)  void save_csr_matrix(const std::string& basename, const CSRMatrix& mat) {
        14 ( 0.00%)      write_vector_int(basename + "_indptr.txt", mat.indptr);
   734,026 ( 0.01%)  => ../utils/csr_io.cpp:write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&) (1x)
       152 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (1x)
         8 ( 0.00%)  => ???:0x000000000010a3c0 (1x)
        15 ( 0.00%)      write_vector_int(basename + "_indices.txt", mat.indices);
679,484,021 ( 5.79%)  => ../utils/csr_io.cpp:write_vector_int(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<int, std::allocator<int> > const&) (1x)
       152 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (1x)
         8 ( 0.00%)  => ???:0x000000000010a3c0 (1x)
        15 ( 0.00%)      write_vector_float(basename + "_data.txt", mat.data);
2,974,614,467 (25.36%)  => ../utils/csr_io.cpp:write_vector_float(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<float, std::allocator<float> > const&) (1x)
       152 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (1x)
         8 ( 0.00%)  => ???:0x000000000010a3c0 (1x)
        18 ( 0.00%)      write_shape(basename + "_shape.txt", mat.rows, mat.cols);
     4,393 ( 0.00%)  => ../utils/csr_io.cpp:write_shape(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) (1x)
       152 ( 0.00%)  => /usr/include/c++/11/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) (1x)
         8 ( 0.00%)  => ???:0x000000000010a3c0 (1x)
         9 ( 0.00%)  }
--------------------------------------------------------------------------------
-- Auto-annotated source: gemini_1.cpp
--------------------------------------------------------------------------------
Ir                   

          .           #include "csr_io.h"
          .           #include <vector>
          .           #include <numeric>
          .           #include <algorithm>
          .           #include <omp.h>
          .           
          .           // spgemm_cpu.cpp
         11 ( 0.00%)  void spgemm_cpu(const CSRMatrix& A, const CSRMatrix& B, CSRMatrix& C) {
          .               // Set the dimensions of the output matrix C
          4 ( 0.00%)      C.rows = A.rows;
          4 ( 0.00%)      C.cols = B.cols;
         10 ( 0.00%)      C.indptr.resize(C.rows + 1, 0);
      8,993 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::resize(unsigned long, int const&) (1x)
          .           
          .               // This vector will store vectors of intermediate results for each row of C.
          .               // Each inner vector will hold the column indices and values for the non-zero elements of a single row.
         14 ( 0.00%)      std::vector<std::vector<std::pair<int, float>>> intermediate_rows(C.rows);
    108,810 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::vector(unsigned long, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > const&) (1x)
         18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::allocator() (1x)
         18 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::~allocator() (1x)
          .           
          .               // The core of the SpGEMM computation is parallelized across the rows of matrix A.
          .               // Each thread computes a subset of the rows of the resulting matrix C.
        301 ( 0.00%)      #pragma omp parallel for schedule(dynamic)
6,675,839,271 (56.92%)  => ???:0x000000000010a510 (1x)
      4,240 ( 0.00%)      for (int i = 0; i < A.rows; ++i) {
      1,264 ( 0.00%)  => ???:0x000000000010a570 (16x)
          .                   // A temporary dense vector (or accumulator) for the current row i of C.
          .                   // The `next` vector is used to keep track of occupied indices in the accumulator
          .                   // to avoid iterating over all B.cols entries, which would be inefficient.
     17,000 ( 0.00%)          std::vector<float> accumulator(B.cols, 0.0f);
  7,803,895 ( 0.07%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::vector(unsigned long, float const&, std::allocator<float> const&) (1,000x)
     18,000 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<float>::allocator() (1,000x)
     18,000 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<float>::~allocator() (1,000x)
      3,000 ( 0.00%)          std::vector<int> next;
     67,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (1,000x)
     26,000 ( 0.00%)          next.reserve(A.indptr[i+1] - A.indptr[i]); // Pre-allocate memory as an optimization
     24,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const (2,000x)
    436,368 ( 0.00%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<int, std::allocator<int> >::reserve(unsigned long) (1,000x)
          .           
          .                   // Iterate over the non-zero elements of row i in matrix A
  3,225,000 ( 0.03%)          for (int jj = A.indptr[i]; jj < A.indptr[i + 1]; ++jj) {
  2,424,000 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const (202,000x)
  2,000,000 ( 0.02%)              int j = A.indices[jj];      // Column index in A (which is the row index in B)
  2,400,000 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const (200,000x)
  2,000,000 ( 0.02%)              float val_A = A.data[jj];   // Value of A(i, j)
  2,400,000 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) const (200,000x)
          .           
          .                       // Now, iterate over the non-zero elements of row j in matrix B
644,889,296 ( 5.50%)              for (int kk = B.indptr[j]; kk < B.indptr[j + 1]; ++kk) {
484,716,972 ( 4.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const (40,393,081x)
399,930,810 ( 3.41%)                  int k = B.indices[kk];      // Column index in B
479,916,972 ( 4.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) const (39,993,081x)
399,930,810 ( 3.41%)                  float val_B = B.data[kk];   // Value of B(j, k)
479,916,972 ( 4.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) const (39,993,081x)
          .           
          .                           // If this is the first time we've encountered this column index k for the current output row i,
          .                           // add it to our list of non-zero candidates (`next`).
639,889,296 ( 5.46%)                  if (accumulator[k] == 0.0f) {
479,916,972 ( 4.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) (39,993,081x)
  6,000,016 ( 0.05%)                      next.push_back(k);
 94,708,892 ( 0.81%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (1,000,000x)
        411 ( 0.00%)  => ???:0x000000000010a390 (16x)
          .                           }
          .           
          .                           // Perform the scalar multiplication and add to the accumulator
439,923,891 ( 3.75%)                  accumulator[k] += val_A * val_B;
479,916,972 ( 4.09%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) (39,993,081x)
          .                       }
          .                   }
          .           
          .                   // Sort the column indices to ensure the CSR format is correct.
     10,000 ( 0.00%)          std::sort(next.begin(), next.end());
1,200,360,578 (10.23%)  => /usr/include/c++/11/bits/stl_algo.h:void std::sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (1,000x)
     32,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1,000x)
     31,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (1,000x)
          .           
          .                   // Reserve space in the intermediate storage for this row to avoid reallocations.
     14,000 ( 0.00%)          intermediate_rows[i].reserve(next.size());
     15,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,000x)
    749,836 ( 0.01%)  => /usr/include/c++/11/bits/vector.tcc:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::reserve(unsigned long) (1,000x)
     13,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (1,000x)
 16,018,000 ( 0.14%)          for (int col_idx : next) {
 34,034,000 ( 0.29%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,001,000x)
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (1,000,000x)
  8,000,000 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (1,000,000x)
     32,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1,000x)
     31,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (1,000x)
          .                       // Only store actual non-zero values.
 16,000,000 ( 0.14%)              if (accumulator[col_idx] != 0.0f) {
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) (1,000,000x)
 25,000,000 ( 0.21%)                  intermediate_rows[i].push_back({col_idx, accumulator[col_idx]});
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) (1,000,000x)
233,000,000 ( 1.99%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::push_back(std::pair<int, float>&&) (1,000,000x)
 36,000,000 ( 0.31%)  => /usr/include/c++/11/bits/stl_pair.h:std::pair<int, float>::pair<int&, float&, true>(int&, float&) (1,000,000x)
 15,000,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,000,000x)
          .                       }
          .                   }
     16,001 ( 0.00%)      }
    350,969 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (1,000x)
    321,028 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::~vector() (1,000x)
     28,994 ( 0.00%)  => ???:0x000000000010a4e0 (1,000x)
          .           
          .               // At this point, all parallel computation is done. The following part constructs the final CSR matrix C
          .               // from the intermediate results. This part is serial.
          .           
          .               // Calculate the row pointers (indptr) for C by accumulating the number of non-zero elements in each row.
      5,006 ( 0.00%)      for (int i = 0; i < C.rows; ++i) {
     26,000 ( 0.00%)          C.indptr[i + 1] = C.indptr[i] + intermediate_rows[i].size();
     24,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (2,000x)
     15,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,000x)
     13,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::size() const (1,000x)
          .               }
          .           
          .               // Get the total number of non-zero elements in C.
          9 ( 0.00%)      int total_non_zeros = C.indptr[C.rows];
         12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1x)
          7 ( 0.00%)      C.indices.resize(total_non_zeros);
  7,001,486 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::resize(unsigned long) (1x)
          7 ( 0.00%)      C.data.resize(total_non_zeros);
  7,001,321 ( 0.06%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::resize(unsigned long) (1x)
          .           
          .               // Populate the indices and data arrays for C from the intermediate results.
          .               // This can be parallelized as well, as each thread would write to a distinct memory location.
        235 ( 0.00%)      #pragma omp parallel for
 12,879,008 ( 0.11%)  => ???:0x000000000010a510 (1x)
        384 ( 0.00%)      for (int i = 0; i < C.rows; ++i) {
        160 ( 0.00%)  => ???:0x000000000010a5c0 (16x)
         96 ( 0.00%)  => ???:0x000000000010a530 (16x)
     10,000 ( 0.00%)          int offset = C.indptr[i];
     12,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,000x)
 15,018,024 ( 0.13%)          for (size_t j = 0; j < intermediate_rows[i].size(); ++j) {
 15,015,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,001,000x)
 13,013,000 ( 0.11%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::size() const (1,001,000x)
 24,000,000 ( 0.20%)              C.indices[offset + j] = intermediate_rows[i][j].first;
 15,000,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,000,000x)
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long) (1,000,000x)
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::operator[](unsigned long) (1,000,000x)
 26,000,000 ( 0.22%)              C.data[offset + j] = intermediate_rows[i][j].second;
 15,000,000 ( 0.13%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::operator[](unsigned long) (1,000,000x)
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::operator[](unsigned long) (1,000,000x)
 12,000,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::operator[](unsigned long) (1,000,000x)
          .                   }
          .               }
          9 ( 0.00%)  }    393,567 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >, std::allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > > >::~vector() (1x)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/ext/new_allocator.h
--------------------------------------------------------------------------------
Ir                  

-- line 71 ----------------------------------------
         .           
         .           #if __cplusplus >= 201103L
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 2103. propagate_on_container_move_assignment
         .                 typedef std::true_type propagate_on_container_move_assignment;
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
    21,112 ( 0.00%)        new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 _GLIBCXX20_CONSTEXPR
    16,112 ( 0.00%)        new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 template<typename _Tp1>
         .           	_GLIBCXX20_CONSTEXPR
         .           	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
         .           
         .           #if __cplusplus <= 201703L
    35,210 ( 0.00%)        ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
         .           
         .                 pointer
         .                 address(reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           
         .                 const_pointer
         .                 address(const_reference __x) const _GLIBCXX_NOEXCEPT
         .                 { return std::__addressof(__x); }
         .           #endif
         .           
         .                 // NB: __n is permitted to be 0.  The C++ standard says nothing
         .                 // about what the return value is when __n == 0.
         .                 _GLIBCXX_NODISCARD _Tp*
    42,714 ( 0.00%)        allocate(size_type __n, const void* = static_cast<const void*>(0))
         .                 {
         .           #if __cplusplus >= 201103L
         .           	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .           	 // 3308. std::allocator<void>().allocate(n)
         .           	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
         .           #endif
         .           
    61,020 ( 0.00%)  	if (__builtin_expect(__n > this->_M_max_size(), false))
         7 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::_M_max_size() const (1x)
         .           	  {
         .           	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .           	    // 3190. allocator::allocate sometimes returns too little storage
         .           	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
         .           	      std::__throw_bad_array_new_length();
         .           	    std::__throw_bad_alloc();
         .           	  }
         .           
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
         .           	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
         .           	  }
         .           #endif
    30,513 ( 0.00%)  	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       405 ( 0.00%)  => ???:0x000000000010a450 (1x)
    23,204 ( 0.00%)        }
    18,000 ( 0.00%)  => /usr/include/c++/11/bits/allocator.h:std::allocator<std::pair<int, float> >::~allocator() (1,000x)
         .           
         .                 // __p is not permitted to be a null pointer.
         .                 void
    42,714 ( 0.00%)        deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
         .                 {
         .           #if __cpp_aligned_new
         .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
         .           	  {
         .           	    ::operator delete(__p,
         .           # if __cpp_sized_deallocation
         .           			      __t * sizeof(_Tp),
         .           # endif
         .           			      std::align_val_t(alignof(_Tp)));
         .           	    return;
         .           	  }
         .           #endif
    36,616 ( 0.00%)  	::operator delete(__p
       152 ( 0.00%)  => ???:0x000000000010a460 (1x)
         .           #if __cpp_sized_deallocation
         .           			  , __t * sizeof(_Tp)
         .           #endif
         .           			 );
    12,204 ( 0.00%)        }
         .           
         .           #if __cplusplus <= 201703L
         .                 size_type
    46,035 ( 0.00%)        max_size() const _GLIBCXX_USE_NOEXCEPT
    46,035 ( 0.00%)        { return _M_max_size(); }
         7 ( 0.00%)  => /usr/include/c++/11/ext/new_allocator.h:__gnu_cxx::new_allocator<std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > > >::_M_max_size() const (1x)
         .           
         .           #if __cplusplus >= 201103L
         .                 template<typename _Up, typename... _Args>
         .           	void
22,016,016 ( 0.19%)  	construct(_Up* __p, _Args&&... __args)
         .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
37,826,026 ( 0.32%)  	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 3,200,000 ( 0.03%)  => /usr/include/c++/11/new:operator new(unsigned long, void*) (400,000x)
 2,800,000 ( 0.02%)  => /usr/include/c++/11/bits/move.h:float const& std::forward<float const&>(std::remove_reference<float const&>::type&) (400,000x)
         .           
         .                 template<typename _Up>
         .           	void
         .           	destroy(_Up* __p)
         .           	noexcept(std::is_nothrow_destructible<_Up>::value)
         .           	{ __p->~_Up(); }
         .           #else
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 170 ----------------------------------------
-- line 189 ----------------------------------------
         .           	friend _GLIBCXX20_CONSTEXPR bool
         .           	operator!=(const new_allocator&, const new_allocator<_Up>&)
         .           	_GLIBCXX_NOTHROW
         .           	{ return false; }
         .           #endif
         .           
         .               private:
         .                 _GLIBCXX_CONSTEXPR size_type
    61,236 ( 0.00%)        _M_max_size() const _GLIBCXX_USE_NOEXCEPT
         .                 {
         .           #if __PTRDIFF_MAX__ < __SIZE_MAX__
    15,309 ( 0.00%)  	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
         .           #else
         .           	return std::size_t(-1) / sizeof(_Tp);
         .           #endif
    30,618 ( 0.00%)        }
         .               };
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
         .           
         .           #endif

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_pair.h
--------------------------------------------------------------------------------
Ir                  

-- line 344 ----------------------------------------
         .                  : first(__x), second(std::forward<_U2>(__y)) { }
         .           
         .                 template<typename _U1, typename _U2, typename
         .           	       enable_if<_PCCP::template
         .           			   _MoveConstructiblePair<_U1, _U2>()
         .           			  && _PCCP::template
         .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
         .                                    bool>::type=true>
 7,000,014 ( 0.06%)  	constexpr pair(_U1&& __x, _U2&& __y)
15,000,030 ( 0.13%)  	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 7,000,000 ( 0.06%)  => /usr/include/c++/11/bits/move.h:float& std::forward<float&>(std::remove_reference<float&>::type&) (1,000,000x)
 7,000,000 ( 0.06%)  => /usr/include/c++/11/bits/move.h:int& std::forward<int&>(std::remove_reference<int&>::type&) (1,000,000x)
         .           
         .                 template<typename _U1, typename _U2, typename
         .           	       enable_if<_PCCP::template
         .           			   _MoveConstructiblePair<_U1, _U2>()
         .           			  && !_PCCP::template
         .           			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
         .                                    bool>::type=false>
         .           	explicit constexpr pair(_U1&& __x, _U2&& __y)
-- line 361 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir                   

-- line 36 ----------------------------------------
          .           {
          .           namespace __ops
          .           {
          .             struct _Iter_less_iter
          .             {
          .               template<typename _Iterator1, typename _Iterator2>
          .                 _GLIBCXX14_CONSTEXPR
          .                 bool
 71,586,400 ( 0.61%)        operator()(_Iterator1 __it1, _Iterator2 __it2) const
116,327,900 ( 0.99%)        { return *__it1 < *__it2; }
143,172,800 ( 1.22%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (17,896,600x)
          .             };
          .           
          .             _GLIBCXX14_CONSTEXPR
          .             inline _Iter_less_iter
          .             __iter_less_iter()
      6,000 ( 0.00%)    { return _Iter_less_iter(); }
          .           
          .             struct _Iter_less_val
          .             {
          .           #if __cplusplus >= 201103L
          .               constexpr _Iter_less_val() = default;
          .           #else
          .               _Iter_less_val() { }
          .           #endif
          .           
          .               _GLIBCXX20_CONSTEXPR
          .               explicit
        245 ( 0.00%)      _Iter_less_val(_Iter_less_iter) { }
          .           
          .               template<typename _Iterator, typename _Value>
          .                 _GLIBCXX20_CONSTEXPR
          .                 bool
        315 ( 0.00%)        operator()(_Iterator __it, _Value& __val) const
        450 ( 0.00%)        { return *__it < __val; }
        360 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (45x)
          .             };
          .           
          .             _GLIBCXX20_CONSTEXPR
          .             inline _Iter_less_val
          .             __iter_less_val()
          .             { return _Iter_less_val(); }
          .           
          .             _GLIBCXX20_CONSTEXPR
-- line 77 ----------------------------------------
-- line 89 ----------------------------------------
          .           
          .               _GLIBCXX20_CONSTEXPR
          .               explicit
          .               _Val_less_iter(_Iter_less_iter) { }
          .           
          .               template<typename _Value, typename _Iterator>
          .                 _GLIBCXX20_CONSTEXPR
          .                 bool
 29,355,040 ( 0.25%)        operator()(_Value& __val, _Iterator __it) const
 40,363,180 ( 0.34%)        { return __val < *__it; }
 29,355,040 ( 0.25%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (3,669,380x)
          .             };
          .           
          .             _GLIBCXX20_CONSTEXPR
          .             inline _Val_less_iter
          .             __val_less_iter()
          .             { return _Val_less_iter(); }
          .           
          .             _GLIBCXX20_CONSTEXPR
          .             inline _Val_less_iter
          .             __val_comp_iter(_Iter_less_iter)
  5,979,414 ( 0.05%)    { return _Val_less_iter(); }
          .           
          .             struct _Iter_equal_to_iter
          .             {
          .               template<typename _Iterator1, typename _Iterator2>
          .                 _GLIBCXX20_CONSTEXPR
          .                 bool
          .                 operator()(_Iterator1 __it1, _Iterator2 __it2) const
          .                 { return *__it1 == *__it2; }
-- line 117 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/move.h
--------------------------------------------------------------------------------
Ir                  

-- line 41 ----------------------------------------
         .           
         .             // Used, in C++03 mode too, by allocators, etc.
         .             /**
         .              *  @brief Same as C++11 std::addressof
         .              *  @ingroup utilities
         .              */
         .             template<typename _Tp>
         .               inline _GLIBCXX_CONSTEXPR _Tp*
     8,008 ( 0.00%)      __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
     6,006 ( 0.00%)      { return __builtin_addressof(__r); }
         .           
         .           #if __cplusplus >= 201103L
         .           
         .           _GLIBCXX_END_NAMESPACE_VERSION
         .           } // namespace
         .           
         .           #include <type_traits> // Brings in std::declval too.
         .           
-- line 58 ----------------------------------------
-- line 69 ----------------------------------------
         .              *  @brief  Forward an lvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
         .               _GLIBCXX_NODISCARD
         .               constexpr _Tp&&
34,428,424 ( 0.29%)      forward(typename std::remove_reference<_Tp>::type& __t) noexcept
25,821,318 ( 0.22%)      { return static_cast<_Tp&&>(__t); }
         .           
         .             /**
         .              *  @brief  Forward an rvalue.
         .              *  @return The parameter cast to the specified type.
         .              *
         .              *  This function is used to implement "perfect forwarding".
         .              */
         .             template<typename _Tp>
-- line 86 ----------------------------------------
-- line 96 ----------------------------------------
         .             /**
         .              *  @brief  Convert a value to an rvalue.
         .              *  @param  __t  A thing of arbitrary type.
         .              *  @return The parameter cast to an rvalue-reference to allow moving it.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX_NODISCARD
         .               constexpr typename std::remove_reference<_Tp>::type&&
41,746,104 ( 0.36%)      move(_Tp&& __t) noexcept
31,309,578 ( 0.27%)      { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
         .           
         .           
         .             template<typename _Tp>
         .               struct __move_if_noexcept_cond
         .               : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
         .                               is_copy_constructible<_Tp>>::type { };
         .           
         .             /**
-- line 113 ----------------------------------------
-- line 188 ----------------------------------------
         .               inline
         .           #if __cplusplus >= 201103L
         .               typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         .           			      is_move_constructible<_Tp>,
         .           			      is_move_assignable<_Tp>>::value>::type
         .           #else
         .               void
         .           #endif
14,296,221 ( 0.12%)      swap(_Tp& __a, _Tp& __b)
         .               _GLIBCXX_NOEXCEPT_IF(__and_<is_nothrow_move_constructible<_Tp>,
         .           				is_nothrow_move_assignable<_Tp>>::value)
         .               {
         .           #if __cplusplus < 201103L
         .                 // concept requirements
         .                 __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
         .           #endif
 7,942,345 ( 0.07%)        _Tp __tmp = _GLIBCXX_MOVE(__a);
11,119,283 ( 0.09%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (1,588,469x)
 9,530,814 ( 0.08%)        __a = _GLIBCXX_MOVE(__b);
11,119,283 ( 0.09%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (1,588,469x)
 9,530,814 ( 0.08%)        __b = _GLIBCXX_MOVE(__tmp);
11,119,283 ( 0.09%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (1,588,469x)
 9,530,814 ( 0.08%)      }
         .           
         .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .             // DR 809. std::swap should be overloaded for array types.
         .             /// Swap the contents of two arrays.
         .             template<typename _Tp, size_t _Nm>
         .               _GLIBCXX20_CONSTEXPR
         .               inline
         .           #if __cplusplus >= 201103L
-- line 215 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/vector.tcc
--------------------------------------------------------------------------------
Ir                  

-- line 58 ----------------------------------------
         .           
         .           namespace std _GLIBCXX_VISIBILITY(default)
         .           {
         .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
         .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
         .           
         .             template<typename _Tp, typename _Alloc>
         .               void
    12,000 ( 0.00%)      vector<_Tp, _Alloc>::
         .               reserve(size_type __n)
         .               {
    14,000 ( 0.00%)        if (__n > this->max_size())
    85,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::max_size() const (1,000x)
         .           	__throw_length_error(__N("vector::reserve"));
    14,000 ( 0.00%)        if (this->capacity() < __n)
    13,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::capacity() const (1,000x)
         .           	{
     8,000 ( 0.00%)  	  const size_type __old_size = size();
    13,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::size() const (1,000x)
         .           	  pointer __tmp;
         .           #if __cplusplus >= 201103L
         .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
         .           	    {
    12,000 ( 0.00%)  	      __tmp = this->_M_allocate(__n);
   440,836 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_allocate(unsigned long) (1,000x)
    14,000 ( 0.00%)  	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
   104,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_S_relocate(std::pair<int, float>*, std::pair<int, float>*, std::pair<int, float>*, std::allocator<std::pair<int, float> >&) (1,000x)
     8,000 ( 0.00%)  			  __tmp, _M_get_Tp_allocator());
     7,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_get_Tp_allocator() (1,000x)
         .           	    }
         .           	  else
         .           #endif
         .           	    {
         .           	      __tmp = _M_allocate_and_copy(__n,
         .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
         .           		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
         .           	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         .           			    _M_get_Tp_allocator());
         .           	    }
         .           	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
    16,000 ( 0.00%)  	  _M_deallocate(this->_M_impl._M_start,
    12,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<std::pair<int, float>, std::allocator<std::pair<int, float> > >::_M_deallocate(std::pair<int, float>*, unsigned long) (1,000x)
     4,000 ( 0.00%)  			this->_M_impl._M_end_of_storage
    10,000 ( 0.00%)  			- this->_M_impl._M_start);
     6,000 ( 0.00%)  	  this->_M_impl._M_start = __tmp;
    12,000 ( 0.00%)  	  this->_M_impl._M_finish = __tmp + __old_size;
    14,000 ( 0.00%)  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
         .           	}
     6,000 ( 0.00%)      }
         .           
         .           #if __cplusplus >= 201103L
         .             template<typename _Tp, typename _Alloc>
         .               template<typename... _Args>
         .           #if __cplusplus > 201402L
         .                 typename vector<_Tp, _Alloc>::reference
         .           #else
         .                 void
         .           #endif
 7,000,000 ( 0.06%)        vector<_Tp, _Alloc>::
         .                 emplace_back(_Args&&... __args)
         .                 {
 6,000,000 ( 0.05%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
         .           	  {
         .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
10,000,000 ( 0.09%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
63,000,000 ( 0.54%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<std::pair<int, float> > >::construct<std::pair<int, float>, std::pair<int, float> >(std::allocator<std::pair<int, float> >&, std::pair<int, float>*, std::pair<int, float>&&) (1,000,000x)
 7,000,000 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::pair<int, float>&& std::forward<std::pair<int, float> >(std::remove_reference<std::pair<int, float> >::type&) (1,000,000x)
         .           				     std::forward<_Args>(__args)...);
 6,000,000 ( 0.05%)  	    ++this->_M_impl._M_finish;
         .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         .           	  }
         .           	else
         .           	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
         .           #if __cplusplus > 201402L
 3,000,000 ( 0.03%)  	return back();
104,000,000 ( 0.89%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<std::pair<int, float>, std::allocator<std::pair<int, float> > >::back() (1,000,000x)
         .           #endif
 3,000,000 ( 0.03%)        }
         .           #endif
         .           
         .             template<typename _Tp, typename _Alloc>
         .               typename vector<_Tp, _Alloc>::iterator
         .               vector<_Tp, _Alloc>::
         .           #if __cplusplus >= 201103L
         .               insert(const_iterator __position, const value_type& __x)
         .           #else
-- line 133 ----------------------------------------
-- line 418 ----------------------------------------
         .                 *__position = std::forward<_Arg>(__arg);
         .           #endif
         .               }
         .           
         .           #if __cplusplus >= 201103L
         .             template<typename _Tp, typename _Alloc>
         .               template<typename... _Args>
         .                 void
    34,078 ( 0.00%)        vector<_Tp, _Alloc>::
         .                 _M_realloc_insert(iterator __position, _Args&&... __args)
         .           #else
         .             template<typename _Tp, typename _Alloc>
         .               void
         .               vector<_Tp, _Alloc>::
         .               _M_realloc_insert(iterator __position, const _Tp& __x)
         .           #endif
         .               {
         .                 const size_type __len =
    18,588 ( 0.00%)  	_M_check_len(size_type(1), "vector::_M_realloc_insert");
    11,174 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_M_check_len(unsigned long, char const*) const (38x)
     9,294 ( 0.00%)        pointer __old_start = this->_M_impl._M_start;
     9,294 ( 0.00%)        pointer __old_finish = this->_M_impl._M_finish;
    30,980 ( 0.00%)        const size_type __elems_before = __position - begin();
     1,330 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >::difference_type __gnu_cxx::operator-<float*, std::vector<float, std::allocator<float> > >(__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > > const&, __gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > > const&) (38x)
     1,178 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::begin() (38x)
    18,588 ( 0.00%)        pointer __new_start(this->_M_allocate(__len));
    10,663 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_allocate(unsigned long) (38x)
     6,196 ( 0.00%)        pointer __new_finish(__new_start);
         .                 __try
         .           	{
         .           	  // The order of the three operations is dictated by the C++11
         .           	  // case, where the moves could alter a new element belonging
         .           	  // to the existing vector.  This is an issue only for callers
         .           	  // taking the element by lvalue ref (see last bullet of C++11
         .           	  // [res.on.arguments]).
    30,980 ( 0.00%)  	  _Alloc_traits::construct(this->_M_impl,
     2,356 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::allocator_traits<std::allocator<float> >::construct<float, float const&>(std::allocator<float>&, float*, float const&) (38x)
       266 ( 0.00%)  => /usr/include/c++/11/bits/move.h:float const& std::forward<float const&>(std::remove_reference<float const&>::type&) (38x)
     6,196 ( 0.00%)  				   __new_start + __elems_before,
         .           #if __cplusplus >= 201103L
         .           				   std::forward<_Args>(__args)...);
         .           #else
         .           				   __x);
         .           #endif
     3,098 ( 0.00%)  	  __new_finish = pointer();
         .           
         .           #if __cplusplus >= 201103L
         .           	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
         .           	    {
    30,980 ( 0.00%)  	      __new_finish = _S_relocate(__old_start, __position.base(),
 2,072,042 ( 0.02%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_S_relocate(float*, float*, float*, std::allocator<float>&) (38x)
       266 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >::base() const (38x)
    12,392 ( 0.00%)  					 __new_start, _M_get_Tp_allocator());
       266 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_get_Tp_allocator() (38x)
         .           
     3,098 ( 0.00%)  	      ++__new_finish;
         .           
    30,980 ( 0.00%)  	      __new_finish = _S_relocate(__position.base(), __old_finish,
     3,990 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<float, std::allocator<float> >::_S_relocate(float*, float*, float*, std::allocator<float>&) (38x)
       266 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >::base() const (38x)
    12,392 ( 0.00%)  					 __new_finish, _M_get_Tp_allocator());
       266 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_get_Tp_allocator() (38x)
         .           	    }
         .           	  else
         .           #endif
         .           	    {
         .           	      __new_finish
         .           		= std::__uninitialized_move_if_noexcept_a
         .           		(__old_start, __position.base(),
         .           		 __new_start, _M_get_Tp_allocator());
-- line 475 ----------------------------------------
-- line 492 ----------------------------------------
         .           	  _M_deallocate(__new_start, __len);
         .           	  __throw_exception_again;
         .           	}
         .           #if __cplusplus >= 201103L
         .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
         .           #endif
         .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
         .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
    15,490 ( 0.00%)        _M_deallocate(__old_start,
     7,191 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<float, std::allocator<float> >::_M_deallocate(float*, unsigned long) (38x)
    12,392 ( 0.00%)  		    this->_M_impl._M_end_of_storage - __old_start);
     9,294 ( 0.00%)        this->_M_impl._M_start = __new_start;
     9,294 ( 0.00%)        this->_M_impl._M_finish = __new_finish;
    18,588 ( 0.00%)        this->_M_impl._M_end_of_storage = __new_start + __len;
    21,686 ( 0.00%)      }
         .           
         .             template<typename _Tp, typename _Alloc>
         .               void
        13 ( 0.00%)      vector<_Tp, _Alloc>::
         .               _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
         .               {
         2 ( 0.00%)        if (__n != 0)
         .           	{
         4 ( 0.00%)  	  if (size_type(this->_M_impl._M_end_of_storage
         5 ( 0.00%)  			- this->_M_impl._M_finish) >= __n)
         .           	    {
         .           #if __cplusplus < 201103L
         .           	      value_type __x_copy = __x;
         .           #else
         .           	      _Temporary_value __tmp(this, __x);
         .           	      value_type& __x_copy = __tmp._M_val();
         .           #endif
         .           	      const size_type __elems_after = end() - __position;
-- line 523 ----------------------------------------
-- line 551 ----------------------------------------
         .           		  this->_M_impl._M_finish += __elems_after;
         .           		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
         .           		  std::fill(__position.base(), __old_finish, __x_copy);
         .           		}
         .           	    }
         .           	  else
         .           	    {
         .           	      const size_type __len =
         7 ( 0.00%)  		_M_check_len(__n, "vector::_M_fill_insert");
       295 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const (1x)
        10 ( 0.00%)  	      const size_type __elems_before = __position - begin();
        35 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1x)
        31 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (1x)
         6 ( 0.00%)  	      pointer __new_start(this->_M_allocate(__len));
       467 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (1x)
         2 ( 0.00%)  	      pointer __new_finish(__new_start);
         .           	      __try
         .           		{
         .           		  // See _M_realloc_insert above.
         8 ( 0.00%)  		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
     7,145 ( 0.00%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_fill_n_a<int*, unsigned long, int, int>(int*, unsigned long, int const&, std::allocator<int>&) (1x)
         .           						__n, __x,
         4 ( 0.00%)  						_M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         1 ( 0.00%)  		  __new_finish = pointer();
         .           
         .           		  __new_finish
         .           		    = std::__uninitialized_move_if_noexcept_a
        11 ( 0.00%)  		    (this->_M_impl._M_start, __position.base(),
       345 ( 0.00%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) (1x)
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (1x)
         4 ( 0.00%)  		     __new_start, _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           
         3 ( 0.00%)  		  __new_finish += __n;
         .           
         .           		  __new_finish
         .           		    = std::__uninitialized_move_if_noexcept_a
        12 ( 0.00%)  		    (__position.base(), this->_M_impl._M_finish,
       345 ( 0.00%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) (1x)
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (1x)
         4 ( 0.00%)  		     __new_finish, _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           		}
         .           	      __catch(...)
         .           		{
         .           		  if (!__new_finish)
         .           		    std::_Destroy(__new_start + __elems_before,
         .           				  __new_start + __elems_before + __n,
         .           				  _M_get_Tp_allocator());
         .           		  else
         .           		    std::_Destroy(__new_start, __new_finish,
         .           				  _M_get_Tp_allocator());
         .           		  _M_deallocate(__new_start, __len);
         .           		  __throw_exception_again;
         .           		}
         7 ( 0.00%)  	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        37 ( 0.00%)  => /usr/include/c++/11/bits/alloc_traits.h:void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&) (1x)
         4 ( 0.00%)  			    _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
         8 ( 0.00%)  	      _M_deallocate(this->_M_impl._M_start,
        12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (1x)
         2 ( 0.00%)  			    this->_M_impl._M_end_of_storage
         5 ( 0.00%)  			    - this->_M_impl._M_start);
         3 ( 0.00%)  	      this->_M_impl._M_start = __new_start;
         3 ( 0.00%)  	      this->_M_impl._M_finish = __new_finish;
         6 ( 0.00%)  	      this->_M_impl._M_end_of_storage = __new_start + __len;
         .           	    }
         .           	}
        10 ( 0.00%)      }
         .           
         .           #if __cplusplus >= 201103L
         .             template<typename _Tp, typename _Alloc>
         .               void
        14 ( 0.00%)      vector<_Tp, _Alloc>::
         .               _M_default_append(size_type __n)
         .               {
         4 ( 0.00%)        if (__n != 0)
         .           	{
         8 ( 0.00%)  	  const size_type __size = size();
        13 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (1x)
         6 ( 0.00%)  	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
        10 ( 0.00%)  					 - this->_M_impl._M_finish);
         .           
        26 ( 0.00%)  	  if (__size > max_size() || __navail > max_size() - __size)
       170 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (2x)
         .           	    __builtin_unreachable();
         .           
         6 ( 0.00%)  	  if (__navail >= __n)
         .           	    {
         .           	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
         .           	      this->_M_impl._M_finish =
         .           		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
         .           						 __n, _M_get_Tp_allocator());
         .           	      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
         .           	    }
         .           	  else
         .           	    {
         .           	      const size_type __len =
        14 ( 0.00%)  		_M_check_len(__n, "vector::_M_default_append");
       295 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const (1x)
        12 ( 0.00%)  	      pointer __new_start(this->_M_allocate(__len));
       546 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (1x)
         .           	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
         .           		{
         .           		  __try
         .           		    {
        16 ( 0.00%)  		      std::__uninitialized_default_n_a(__new_start + __size,
 7,000,167 ( 0.06%)  => /usr/include/c++/11/bits/stl_uninitialized.h:int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&) (1x)
         8 ( 0.00%)  			      __n, _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           		    }
         .           		  __catch(...)
         .           		    {
         .           		      _M_deallocate(__new_start, __len);
         .           		      __throw_exception_again;
         .           		    }
        14 ( 0.00%)  		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
       105 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_relocate(int*, int*, int*, std::allocator<int>&) (1x)
         8 ( 0.00%)  			      __new_start, _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1x)
         .           		}
         .           	      else
         .           		{
         .           		  pointer __destroy_from = pointer();
         .           		  __try
         .           		    {
         .           		      std::__uninitialized_default_n_a(__new_start + __size,
         .           			      __n, _M_get_Tp_allocator());
-- line 657 ----------------------------------------
-- line 667 ----------------------------------------
         .           				      _M_get_Tp_allocator());
         .           		      _M_deallocate(__new_start, __len);
         .           		      __throw_exception_again;
         .           		    }
         .           		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         .           				_M_get_Tp_allocator());
         .           		}
         .           	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
        16 ( 0.00%)  	      _M_deallocate(this->_M_impl._M_start,
        12 ( 0.00%)  => /usr/include/c++/11/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (1x)
         4 ( 0.00%)  			    this->_M_impl._M_end_of_storage
        10 ( 0.00%)  			    - this->_M_impl._M_start);
         6 ( 0.00%)  	      this->_M_impl._M_start = __new_start;
        16 ( 0.00%)  	      this->_M_impl._M_finish = __new_start + __size + __n;
        12 ( 0.00%)  	      this->_M_impl._M_end_of_storage = __new_start + __len;
         .           	    }
         .           	}
        10 ( 0.00%)      }
         .           
         .             template<typename _Tp, typename _Alloc>
         .               bool
         .               vector<_Tp, _Alloc>::
         .               _M_shrink_to_fit()
         .               {
         .                 if (capacity() == size())
         .           	return false;
-- line 691 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir                  

-- line 144 ----------------------------------------
         .              *  @return   Nothing.
         .              *
         .              *  This function swaps the values pointed to by two iterators, not the
         .              *  iterators themselves.
         .             */
         .             template<typename _ForwardIterator1, typename _ForwardIterator2>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
11,119,283 ( 0.09%)      iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
         .           				  _ForwardIterator1>)
         .                 __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
         .           				  _ForwardIterator2>)
         .           
         .           #if __cplusplus < 201103L
-- line 160 ----------------------------------------
-- line 174 ----------------------------------------
         .           	_ReferenceType2;
         .                 std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
         .           	&& __are_same<_ValueType1&, _ReferenceType1>::__value
         .           	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
         .           	iter_swap(__a, __b);
         .           #else
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .                 // 187. iter_swap underspecified
15,884,690 ( 0.14%)        swap(*__a, *__b);
84,188,857 ( 0.72%)  => /usr/include/c++/11/bits/move.h:std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<int> >, std::is_move_constructible<int>, std::is_move_assignable<int> >::value, void>::type std::swap<int>(int&, int&) (1,588,469x)
25,415,504 ( 0.22%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (3,176,938x)
         .           #endif
 6,353,876 ( 0.05%)      }
         .           
         .             /**
         .              *  @brief Swap the elements of two sequences.
         .              *  @ingroup mutating_algorithms
         .              *  @param  __first1  A forward iterator.
         .              *  @param  __last1   A forward iterator.
         .              *  @param  __first2  A forward iterator.
         .              *  @return   An iterator equal to @p first2+(last1-first1).
-- line 192 ----------------------------------------
-- line 222 ----------------------------------------
         .              *
         .              *  This is the simple classic generic implementation.  It will work on
         .              *  temporary expressions, since they are only evaluated once, unlike a
         .              *  preprocessor macro.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX14_CONSTEXPR
         .               inline const _Tp&
    46,035 ( 0.00%)      min(const _Tp& __a, const _Tp& __b)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         .                 //return __b < __a ? __b : __a;
    55,242 ( 0.00%)        if (__b < __a)
         .           	return __b;
     9,207 ( 0.00%)        return __a;
    18,414 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief This does what you think it does.
         .              *  @ingroup sorting_algorithms
         .              *  @param  __a  A thing of arbitrary type.
         .              *  @param  __b  Another thing of arbitrary type.
         .              *  @return   The greater of the parameters.
         .              *
         .              *  This is the simple classic generic implementation.  It will work on
         .              *  temporary expressions, since they are only evaluated once, unlike a
         .              *  preprocessor macro.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX14_CONSTEXPR
         .               inline const _Tp&
    15,505 ( 0.00%)      max(const _Tp& __a, const _Tp& __b)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         .                 //return  __a < __b ? __b : __a;
    18,606 ( 0.00%)        if (__a < __b)
        18 ( 0.00%)  	return __b;
     3,092 ( 0.00%)        return __a;
     6,202 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief This does what you think it does.
         .              *  @ingroup sorting_algorithms
         .              *  @param  __a  A thing of arbitrary type.
         .              *  @param  __b  Another thing of arbitrary type.
         .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
         .              *  @return   The lesser of the parameters.
-- line 270 ----------------------------------------
-- line 305 ----------------------------------------
         .                 return __a;
         .               }
         .           
         .             // Fallback implementation of the function in bits/stl_iterator.h used to
         .             // remove the __normal_iterator wrapper. See copy, fill, ...
         .             template<typename _Iterator>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _Iterator
    98,400 ( 0.00%)      __niter_base(_Iterator __it)
         .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    73,800 ( 0.00%)      { return __it; }
         .           
         .             template<typename _Ite, typename _Seq>
         .               _Ite
         .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
         .           		 std::random_access_iterator_tag>&);
         .           
         .             // Reverse the __niter_base transformation to get a
         .             // __normal_iterator back again (this assumes that __normal_iterator
         .             // is only used to wrap random access iterators, like pointers).
         .             template<typename _From, typename _To>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _From
    14,586 ( 0.00%)      __niter_wrap(_From __from, _To __res)
    34,034 ( 0.00%)      { return __from + (__res - std::__niter_base(__from)); }
    92,378 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (2,431x)
    43,758 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:int* std::__niter_base<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2,431x)
         .           
         .             // No need to wrap, iterator already has the right type.
         .             template<typename _Iterator>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _Iterator
        10 ( 0.00%)      __niter_wrap(const _Iterator&, _Iterator __res)
         6 ( 0.00%)      { return __res; }
         .           
         .             // All of these auxiliary structs serve two purposes.  (1) Replace
         .             // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
         .             // because the input and output ranges are permitted to overlap.)
         .             // (2) If we're using random access iterators, then write the loop as
         .             // a for loop with an explicit count.
         .           
         .             template<bool _IsMove, bool _IsSimple, typename _Category>
-- line 344 ----------------------------------------
-- line 412 ----------------------------------------
         .           #endif
         .           
         .             template<bool _IsMove>
         .               struct __copy_move<_IsMove, true, random_access_iterator_tag>
         .               {
         .                 template<typename _Tp>
         .           	_GLIBCXX20_CONSTEXPR
         .           	static _Tp*
        14 ( 0.00%)  	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
         .           	{
         .           #if __cplusplus >= 201103L
         .           	  using __assignable = conditional<_IsMove,
         .           					   is_move_assignable<_Tp>,
         .           					   is_copy_assignable<_Tp>>;
         .           	  // trivial types can have deleted assignment
         .           	  static_assert( __assignable::type::value, "type is not assignable" );
         .           #endif
         8 ( 0.00%)  	  const ptrdiff_t _Num = __last - __first;
         4 ( 0.00%)  	  if (_Num)
         .           	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
         8 ( 0.00%)  	  return __result + _Num;
         4 ( 0.00%)  	}
         .               };
         .           
         .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
         .           
         .             template<typename _Tp, typename _Ref, typename _Ptr>
         .               struct _Deque_iterator;
         .           
         .             struct _Bit_iterator;
-- line 441 ----------------------------------------
-- line 478 ----------------------------------------
         .               __copy_move_a2(
         .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
         .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
         .           	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
        14 ( 0.00%)      __copy_move_a2(_II __first, _II __last, _OI __result)
         .               {
         .                 typedef typename iterator_traits<_II>::iterator_category _Category;
         .           #ifdef __cpp_lib_is_constant_evaluated
         .                 if (std::is_constant_evaluated())
         .           	return std::__copy_move<_IsMove, false, _Category>::
         .           	  __copy_m(__first, __last, __result);
         .           #endif
         .                 return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
        12 ( 0.00%)  			      _Category>::__copy_m(__first, __last, __result);
        38 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*) (2x)
         4 ( 0.00%)      }
         .           
         .             template<bool _IsMove,
         .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
         .               _OI
         .               __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           		   _OI);
         .           
-- line 504 ----------------------------------------
-- line 513 ----------------------------------------
         .               typename __gnu_cxx::__enable_if<
         .                 __is_random_access_iter<_II>::__value,
         .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
         .               __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
        14 ( 0.00%)      __copy_move_a1(_II __first, _II __last, _OI __result)
        16 ( 0.00%)      { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
        68 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_a2<true, int*, int*>(int*, int*, int*) (2x)
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
        18 ( 0.00%)      __copy_move_a(_II __first, _II __last, _OI __result)
         .               {
        40 ( 0.00%)        return std::__niter_wrap(__result,
        98 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_a1<true, int*, int*>(int*, int*, int*) (2x)
        42 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) (6x)
        16 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__niter_wrap<int*>(int* const&, int*) (2x)
         .           		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
         .           					     std::__niter_base(__last),
         .           					     std::__niter_base(__result)));
        10 ( 0.00%)      }
         .           
         .             template<bool _IsMove,
         .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
         .               _OI
         .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		  _OI);
         .           
-- line 541 ----------------------------------------
-- line 603 ----------------------------------------
         .              *  [first,last); the copy_backward function should be used instead.
         .              *
         .              *  Note that the end of the output range is permitted to be contained
         .              *  within [first,last).
         .             */
         .             template<typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
        16 ( 0.00%)      copy(_II __first, _II __last, _OI __result)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
         .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
         .           	    typename iterator_traits<_II>::value_type>)
         .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
         .           
         .                 return std::__copy_move_a<__is_move_iterator<_II>::__value>
        26 ( 0.00%)  	     (std::__miter_base(__first), std::__miter_base(__last), __result);
       224 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_a<true, int*, int*>(int*, int*, int*) (2x)
       108 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:decltype (__miter_base(({parm#1}.base)())) std::__miter_base<int*>(std::move_iterator<int*>) (4x)
         6 ( 0.00%)      }
         .           
         .           #if __cplusplus >= 201103L
         .             /**
         .              *  @brief Moves the range [first,last) into result.
         .              *  @ingroup mutating_algorithms
         .              *  @param  __first  An input iterator.
         .              *  @param  __last   An input iterator.
         .              *  @param  __result An output iterator.
-- line 629 ----------------------------------------
-- line 723 ----------------------------------------
         .           #endif
         .           
         .             template<bool _IsMove>
         .               struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
         .               {
         .                 template<typename _Tp>
         .           	_GLIBCXX20_CONSTEXPR
         .           	static _Tp*
    17,017 ( 0.00%)  	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
         .           	{
         .           #if __cplusplus >= 201103L
         .           	  using __assignable = conditional<_IsMove,
         .           					   is_move_assignable<_Tp>,
         .           					   is_copy_assignable<_Tp>>;
         .           	  // trivial types can have deleted assignment
         .           	  static_assert( __assignable::type::value, "type is not assignable" );
         .           #endif
     9,724 ( 0.00%)  	  const ptrdiff_t _Num = __last - __first;
     4,862 ( 0.00%)  	  if (_Num)
    29,172 ( 0.00%)  	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    36,968 ( 0.00%)  => ???:0x000000000010a550 (2,431x)
    14,586 ( 0.00%)  	  return __result - _Num;
     4,862 ( 0.00%)  	}
         .               };
         .           
         .             template<bool _IsMove, typename _BI1, typename _BI2>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _BI2
    17,017 ( 0.00%)      __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
         .               {
         .                 typedef typename iterator_traits<_BI1>::iterator_category _Category;
         .           #ifdef __cpp_lib_is_constant_evaluated
         .                 if (std::is_constant_evaluated())
         .           	return std::__copy_move_backward<_IsMove, false, _Category>::
         .           	  __copy_move_b(__first, __last, __result);
         .           #endif
         .                 return std::__copy_move_backward<_IsMove,
         .           				       __memcpyable<_BI2, _BI1>::__value,
    14,586 ( 0.00%)  				       _Category>::__copy_move_b(__first,
   117,191 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<int>(int const*, int const*, int*) (2,431x)
         .           								 __last,
         .           								 __result);
     4,862 ( 0.00%)      }
         .           
         .             template<bool _IsMove, typename _BI1, typename _BI2>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _BI2
    17,017 ( 0.00%)      __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    19,448 ( 0.00%)      { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
   153,656 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_backward_a2<true, int*, int*>(int*, int*, int*) (2,431x)
         .           
         .             template<bool _IsMove,
         .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
         .               _OI
         .               __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           			    _OI);
         .           
-- line 777 ----------------------------------------
-- line 788 ----------------------------------------
         .                 __is_random_access_iter<_II>::__value,
         .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
         .               __copy_move_backward_a1(_II, _II,
         .           			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
    21,879 ( 0.00%)      __copy_move_backward_a(_II __first, _II __last, _OI __result)
         .               {
    48,620 ( 0.00%)        return std::__niter_wrap(__result,
   190,121 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:int* std::__copy_move_backward_a1<true, int*, int*>(int*, int*, int*) (2,431x)
   184,756 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__niter_wrap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int*) (2,431x)
   131,274 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:int* std::__niter_base<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (7,293x)
         .           		std::__copy_move_backward_a1<_IsMove>
         .           		  (std::__niter_base(__first), std::__niter_base(__last),
         .           		   std::__niter_base(__result)));
    12,155 ( 0.00%)      }
         .           
         .             template<bool _IsMove,
         .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
         .               _OI
         .               __copy_move_backward_a(
         .           		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		_OI);
-- line 810 ----------------------------------------
-- line 876 ----------------------------------------
         .              *  optimizations such as unrolling).
         .              *
         .              *  Result may not be in the range (first,last].  Use move instead.  Note
         .              *  that the start of the output range may overlap [first,last).
         .             */
         .             template<typename _BI1, typename _BI2>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _BI2
    19,448 ( 0.00%)      move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
         .                 __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
         .                 __glibcxx_function_requires(_ConvertibleConcept<
         .           	    typename iterator_traits<_BI1>::value_type,
         .           	    typename iterator_traits<_BI2>::value_type>)
         .                 __glibcxx_requires_can_decrement_range(__first, __last, __result);
         .           
    31,603 ( 0.00%)        return std::__copy_move_backward_a<true>(std::__miter_base(__first),
   588,805 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__copy_move_backward_a<true, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2,431x)
    34,034 ( 0.00%)  => /usr/include/c++/11/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (4,862x)
         .           					       std::__miter_base(__last),
         .           					       __result);
     7,293 ( 0.00%)      }
         .           
         .           #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
         .           #else
         .           #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
         .           #endif
         .           
         .             template<typename _ForwardIterator, typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
-- line 905 ----------------------------------------
-- line 911 ----------------------------------------
         .                 for (; __first != __last; ++__first)
         .           	*__first = __value;
         .               }
         .           
         .             template<typename _ForwardIterator, typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
         .               inline typename
         .               __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
     6,018 ( 0.00%)      __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
         .           	      const _Tp& __value)
         .               {
     3,009 ( 0.00%)        const _Tp __tmp = __value;
12,008,008 ( 0.10%)        for (; __first != __last; ++__first)
 9,002,997 ( 0.08%)  	*__first = __tmp;
     4,012 ( 0.00%)      }
         .           
         .             // Specialization: for char types we can use memset.
         .             template<typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
         .               inline typename
         .               __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
         .               __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
         .               {
-- line 933 ----------------------------------------
-- line 960 ----------------------------------------
         .           
         .             void
         .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,
         .           	    const bool&);
         .           
         .             template<typename _FIte, typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
     7,021 ( 0.00%)      __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
     9,027 ( 0.00%)      { std::__fill_a1(__first, __last, __value); }
14,017,010 ( 0.12%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__enable_if<std::__is_scalar<float>::__value, void>::__type std::__fill_a1<float*, float>(float*, float*, float const&) (1,001x)
         .           
         .             template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
         .               void
         .               __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           	     const _Tp&);
         .           
         .             /**
-- line 977 ----------------------------------------
-- line 1002 ----------------------------------------
         .             // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
         .             inline _GLIBCXX_CONSTEXPR int
         .             __size_to_integer(int __n) { return __n; }
         .             inline _GLIBCXX_CONSTEXPR unsigned
         .             __size_to_integer(unsigned __n) { return __n; }
         .             inline _GLIBCXX_CONSTEXPR long
         .             __size_to_integer(long __n) { return __n; }
         .             inline _GLIBCXX_CONSTEXPR unsigned long
     7,021 ( 0.00%)    __size_to_integer(unsigned long __n) { return __n; }
         .             inline _GLIBCXX_CONSTEXPR long long
         .             __size_to_integer(long long __n) { return __n; }
         .             inline _GLIBCXX_CONSTEXPR unsigned long long
         .             __size_to_integer(unsigned long long __n) { return __n; }
         .           
         .           #if defined(__GLIBCXX_TYPE_INT_N_0)
         .             inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
         .             __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
-- line 1018 ----------------------------------------
-- line 1101 ----------------------------------------
         .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
         .           #endif
         .                 return __fill_n_a1(__first, __n, __value);
         .               }
         .           
         .             template<typename _OutputIterator, typename _Size, typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OutputIterator
     7,021 ( 0.00%)      __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
         .           	       std::random_access_iterator_tag)
         .               {
         .           #if __cplusplus >= 201103L
         .                 static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
         .           #endif
     2,006 ( 0.00%)        if (__n <= 0)
         .           	return __first;
         .           
         .                 __glibcxx_requires_can_increment(__first, __n);
         .           
     9,027 ( 0.00%)        std::__fill_a(__first, __first + __n, __value);
14,033,026 ( 0.12%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::__fill_a<float*, float>(float*, float*, float const&) (1,001x)
     4,012 ( 0.00%)        return __first + __n;
     2,006 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief Fills the range [first,first+n) with copies of value.
         .              *  @ingroup mutating_algorithms
         .              *  @param  __first  An output iterator.
         .              *  @param  __n      The count of copies to perform.
         .              *  @param  __value  A reference-to-const of arbitrary type.
         .              *  @return   The iterator at first+n.
-- line 1130 ----------------------------------------
-- line 1136 ----------------------------------------
         .              *  If @p __n is negative, the function does nothing.
         .             */
         .             // _GLIBCXX_RESOLVE_LIB_DEFECTS
         .             // DR 865. More algorithms that throw away information
         .             // DR 426. search_n(), fill_n(), and generate_n() with negative n
         .             template<typename _OI, typename _Size, typename _Tp>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
     7,021 ( 0.00%)      fill_n(_OI __first, _Size __n, const _Tp& __value)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
         .           
     9,027 ( 0.00%)        return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
14,057,050 ( 0.12%)  => /usr/include/c++/11/bits/stl_algobase.h:float* std::__fill_n_a<float*, unsigned long, float>(float*, unsigned long, float const&, std::random_access_iterator_tag) (1,001x)
     7,007 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:std::__size_to_integer(unsigned long) (1,001x)
     3,009 ( 0.00%)  			       std::__iterator_category(__first));
     6,006 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator_base_types.h:std::iterator_traits<float*>::iterator_category std::__iterator_category<float*>(float* const&) (1,001x)
     2,006 ( 0.00%)      }
         .           
         .             template<bool _BoolType>
         .               struct __equal
         .               {
         .                 template<typename _II1, typename _II2>
         .           	_GLIBCXX20_CONSTEXPR
         .           	static bool
         .           	equal(_II1 __first1, _II1 __last1, _II2 __first2)
-- line 1159 ----------------------------------------
-- line 1507 ----------------------------------------
         .             { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
         .           
         .             inline _GLIBCXX_CONSTEXPR unsigned
         .             __lg(unsigned __n)
         .             { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
         .           
         .             inline _GLIBCXX_CONSTEXPR long
         .             __lg(long __n)
    13,000 ( 0.00%)    { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
         .           
         .             inline _GLIBCXX_CONSTEXPR unsigned long
         .             __lg(unsigned long __n)
         .             { return (int)sizeof(long) * __CHAR_BIT__ - 1 - __builtin_clzl(__n); }
         .           
         .             inline _GLIBCXX_CONSTEXPR long long
         .             __lg(long long __n)
         .             { return (int)sizeof(long long) * __CHAR_BIT__ - 1 - __builtin_clzll(__n); }
-- line 1523 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_algo.h
--------------------------------------------------------------------------------
Ir                  

-- line 71 ----------------------------------------
         .           namespace std _GLIBCXX_VISIBILITY(default)
         .           {
         .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
         .           
         .             /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
         .             template<typename _Iterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
   828,744 ( 0.01%)      __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
         .           			   _Iterator __c, _Compare __comp)
         .               {
   828,744 ( 0.01%)        if (__comp(__a, __b))
 3,832,941 ( 0.03%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (103,593x)
         .           	{
   419,240 ( 0.00%)  	  if (__comp(__b, __c))
 1,938,985 ( 0.02%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (52,405x)
   129,330 ( 0.00%)  	    std::iter_swap(__result, __b);
 2,327,940 ( 0.02%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (25,866x)
   212,312 ( 0.00%)  	  else if (__comp(__a, __c))
   981,943 ( 0.01%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (26,539x)
    67,495 ( 0.00%)  	    std::iter_swap(__result, __c);
 1,214,910 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (13,499x)
         .           	  else
    65,200 ( 0.00%)  	    std::iter_swap(__result, __a);
 1,173,600 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (13,040x)
         .           	}
   409,504 ( 0.00%)        else if (__comp(__a, __c))
 1,893,956 ( 0.02%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (51,188x)
   113,580 ( 0.00%)  	std::iter_swap(__result, __a);
 2,044,440 ( 0.02%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (22,716x)
   227,776 ( 0.00%)        else if (__comp(__b, __c))
 1,053,464 ( 0.01%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (28,472x)
    70,055 ( 0.00%)  	std::iter_swap(__result, __c);
 1,260,990 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (14,011x)
         .                 else
    72,305 ( 0.00%)  	std::iter_swap(__result, __b);
 1,301,490 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (14,461x)
   399,911 ( 0.00%)      }
         .           
         .             /// Provided for stable_partition to use.
         .             template<typename _InputIterator, typename _Predicate>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _InputIterator
         .               __find_if_not(_InputIterator __first, _InputIterator __last,
         .           		  _Predicate __pred)
         .               {
-- line 105 ----------------------------------------
-- line 1634 ----------------------------------------
         .                 return std::__stable_partition(__first, __last,
         .           				     __gnu_cxx::__ops::__pred_iter(__pred));
         .               }
         .           
         .             /// This is a helper function for the sort routines.
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
        10 ( 0.00%)      __heap_select(_RandomAccessIterator __first,
         .           		  _RandomAccessIterator __middle,
         .           		  _RandomAccessIterator __last, _Compare __comp)
         .               {
         6 ( 0.00%)        std::__make_heap(__first, __middle, __comp);
    12,199 ( 0.00%)  => /usr/include/c++/11/bits/stl_heap.h:void std::__make_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter&) (1x)
        10 ( 0.00%)        for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
        34 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator< <int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1x)
         .           	if (__comp(__i, __first))
         .           	  std::__pop_heap(__first, __middle, __i, __comp);
         6 ( 0.00%)      }
         .           
         .             // partial_sort
         .           
         .             template<typename _InputIterator, typename _RandomAccessIterator,
         .           	   typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               _RandomAccessIterator
         .               __partial_sort_copy(_InputIterator __first, _InputIterator __last,
-- line 1658 ----------------------------------------
-- line 1791 ----------------------------------------
         .           				      __result_first, __result_last,
         .           				__gnu_cxx::__ops::__iter_comp_iter(__comp));
         .               }
         .           
         .             /// This is a helper function for the sort routine.
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
 8,969,121 ( 0.08%)      __unguarded_linear_insert(_RandomAccessIterator __last,
         .           			      _Compare __comp)
         .               {
         .                 typename iterator_traits<_RandomAccessIterator>::value_type
 6,975,983 ( 0.06%)  	__val = _GLIBCXX_MOVE(*__last);
 7,972,552 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (996,569x)
 6,975,983 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (996,569x)
 1,993,138 ( 0.02%)        _RandomAccessIterator __next = __last;
 2,989,707 ( 0.03%)        --__next;
11,958,828 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (996,569x)
30,351,609 ( 0.26%)        while (__comp(__val, __next))
99,073,260 ( 0.84%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Val_less_iter::operator()<int, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(int&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (3,669,380x)
         .           	{
26,728,110 ( 0.23%)  	  *__last = _GLIBCXX_MOVE(*__next);
42,764,976 ( 0.36%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (5,345,622x)
18,709,677 ( 0.16%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (2,672,811x)
 5,345,622 ( 0.05%)  	  __last = __next;
 8,018,433 ( 0.07%)  	  --__next;
32,073,732 ( 0.27%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (2,672,811x)
         .           	}
 7,972,552 ( 0.07%)        *__last = _GLIBCXX_MOVE(__val);
 7,972,552 ( 0.07%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (996,569x)
 6,975,983 ( 0.06%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (996,569x)
 6,975,983 ( 0.06%)      }
         .           
         .             /// This is a helper function for the sort routine.
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
    10,000 ( 0.00%)      __insertion_sort(_RandomAccessIterator __first,
         .           		     _RandomAccessIterator __last, _Compare __comp)
         .               {
     7,000 ( 0.00%)        if (__first == __last) return;
    34,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,000x)
         .           
   164,000 ( 0.00%)        for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   544,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (16,000x)
   180,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (15,000x)
    38,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (1,000x)
         .           	{
   120,000 ( 0.00%)  	  if (__comp(__i, __first))
   555,000 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (15,000x)
         .           	    {
         .           	      typename iterator_traits<_RandomAccessIterator>::value_type
    17,017 ( 0.00%)  		__val = _GLIBCXX_MOVE(*__i);
    19,448 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (2,431x)
    17,017 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (2,431x)
    24,310 ( 0.00%)  	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
   681,183 ( 0.01%)  => /usr/include/c++/11/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::move_backward<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (2,431x)
    92,378 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (2,431x)
    21,879 ( 0.00%)  	      *__first = _GLIBCXX_MOVE(__val);
    19,448 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (2,431x)
    17,017 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (2,431x)
         .           	    }
         .           	  else
    37,707 ( 0.00%)  	    std::__unguarded_linear_insert(__i,
 4,287,676 ( 0.04%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter) (12,569x)
    12,569 ( 0.00%)  				__gnu_cxx::__ops::__val_comp_iter(__comp));
    75,414 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (12,569x)
         .           	}
     6,000 ( 0.00%)      }
         .           
         .             /// This is a helper function for the sort routine.
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
     9,000 ( 0.00%)      __unguarded_insertion_sort(_RandomAccessIterator __first,
         .           			       _RandomAccessIterator __last, _Compare __comp)
         .               {
 9,850,000 ( 0.08%)        for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
33,490,000 ( 0.29%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (985,000x)
11,808,000 ( 0.10%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (984,000x)
 2,952,000 ( 0.03%)  	std::__unguarded_linear_insert(__i,
336,510,125 ( 2.87%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter) (984,000x)
   984,000 ( 0.01%)  				__gnu_cxx::__ops::__val_comp_iter(__comp));
 5,904,000 ( 0.05%)  => /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (984,000x)
     6,000 ( 0.00%)      }
         .           
         .             /**
         .              *  @doctodo
         .              *  This controls some aspect of the sort routines.
         .             */
         .             enum { _S_threshold = 16 };
         .           
         .             /// This is a helper function for the sort routine.
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
     6,000 ( 0.00%)      __final_insertion_sort(_RandomAccessIterator __first,
         .           			   _RandomAccessIterator __last, _Compare __comp)
         .               {
     9,000 ( 0.00%)        if (__last - __first > int(_S_threshold))
    35,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,000x)
         .           	{
     9,000 ( 0.00%)  	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 6,981,063 ( 0.06%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1,000x)
    38,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (1,000x)
     9,000 ( 0.00%)  	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
401,513,125 ( 3.42%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1,000x)
    38,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (1,000x)
         .           					  __comp);
         .           	}
         .                 else
         .           	std::__insertion_sort(__first, __last, __comp);
     4,000 ( 0.00%)      }
         .           
         .             /// This is a helper function...
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               _RandomAccessIterator
   725,151 ( 0.01%)      __unguarded_partition(_RandomAccessIterator __first,
         .           			  _RandomAccessIterator __last,
         .           			  _RandomAccessIterator __pivot, _Compare __comp)
         .               {
         .                 while (true)
         .           	{
35,194,037 ( 0.30%)  	  while (__comp(__first, __pivot))
155,425,752 ( 1.33%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (4,200,696x)
 7,836,681 ( 0.07%)  	    ++__first;
31,346,724 ( 0.27%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (2,612,227x)
 4,765,407 ( 0.04%)  	  --__last;
19,061,628 ( 0.16%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (1,588,469x)
37,351,157 ( 0.32%)  	  while (__comp(__pivot, __last))
165,402,432 ( 1.41%)  => /usr/include/c++/11/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const (4,470,336x)
 8,645,601 ( 0.07%)  	    --__last;
34,582,404 ( 0.29%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (2,881,867x)
12,707,752 ( 0.11%)  	  if (!(__first < __last))
54,007,946 ( 0.46%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator< <int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,588,469x)
   207,186 ( 0.00%)  	    return __first;
 7,424,380 ( 0.06%)  	  std::iter_swap(__first, __last);
133,638,840 ( 1.14%)  => /usr/include/c++/11/bits/stl_algobase.h:void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (1,484,876x)
 4,454,628 ( 0.04%)  	  ++__first;
17,818,512 ( 0.15%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (1,484,876x)
         .           	}
   207,186 ( 0.00%)      }
         .           
         .             /// This is a helper function...
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _RandomAccessIterator
 1,035,930 ( 0.01%)      __unguarded_partition_pivot(_RandomAccessIterator __first,
         .           				_RandomAccessIterator __last, _Compare __comp)
         .               {
 1,553,895 ( 0.01%)        _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 3,936,534 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (103,593x)
 3,625,755 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (103,593x)
 1,553,895 ( 0.01%)        std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
22,868,855 ( 0.19%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__move_median_to_first<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (103,593x)
 3,936,534 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (103,593x)
 4,040,127 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator-(long) const (103,593x)
         .           				  __comp);
 1,035,930 ( 0.01%)        return std::__unguarded_partition(__first + 1, __last, __first, __comp);
730,803,404 ( 6.23%)  => /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (103,593x)
 3,936,534 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (103,593x)
   621,558 ( 0.01%)      }
         .           
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
         7 ( 0.00%)      __partial_sort(_RandomAccessIterator __first,
         .           		   _RandomAccessIterator __middle,
         .           		   _RandomAccessIterator __last,
         .           		   _Compare __comp)
         .               {
         6 ( 0.00%)        std::__heap_select(__first, __middle, __last, __comp);
    12,265 ( 0.00%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__heap_select<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1x)
         6 ( 0.00%)        std::__sort_heap(__first, __middle, __comp);
    25,390 ( 0.00%)  => /usr/include/c++/11/bits/stl_heap.h:void std::__sort_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter&) (1x)
         3 ( 0.00%)      }
         .           
         .             /// This is a helper function for the sort routine.
         .             template<typename _RandomAccessIterator, typename _Size, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
 1,045,930 ( 0.01%)      __introsort_loop(_RandomAccessIterator __first,
         .           		     _RandomAccessIterator __last,
         .           		     _Size __depth_limit, _Compare __comp)
         .               {
 1,978,267 ( 0.02%)        while (__last - __first > int(_S_threshold))
   123,305 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (3,523x)
         .           	{
   207,188 ( 0.00%)  	  if (__depth_limit == 0)
         .           	    {
         7 ( 0.00%)  	      std::__partial_sort(__first, __last, __last, __comp);
    37,677 ( 0.00%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__partial_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1x)
         .           	      return;
         .           	    }
   103,593 ( 0.00%)  	  --__depth_limit;
         .           	  _RandomAccessIterator __cut =
   621,558 ( 0.01%)  	    std::__unguarded_partition_pivot(__first, __last, __comp);
100,561,229 ( 0.86%)  => /usr/include/c++/11/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (2,523x)
   621,558 ( 0.01%)  	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
690,806,258 ( 5.89%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter)'2 (2,523x)
   207,186 ( 0.00%)  	  __last = __cut;
         .           	}
   522,965 ( 0.00%)      }
         .           
         .             // sort
         .           
         .             template<typename _RandomAccessIterator, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
     6,000 ( 0.00%)      __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
         .           	   _Compare __comp)
         .               {
     7,000 ( 0.00%)        if (__first != __last)
    34,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,000x)
         .           	{
     6,000 ( 0.00%)  	  std::__introsort_loop(__first, __last,
791,581,390 ( 6.75%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter) (1,000x)
     7,000 ( 0.00%)  				std::__lg(__last - __first) * 2,
    35,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (1,000x)
    13,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_algobase.h:std::__lg(long) (1,000x)
         .           				__comp);
     5,000 ( 0.00%)  	  std::__final_insertion_sort(__first, __last, __comp);
408,642,188 ( 3.48%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1,000x)
         .           	}
     3,000 ( 0.00%)      }
         .           
         .             template<typename _RandomAccessIterator, typename _Size, typename _Compare>
         .               _GLIBCXX20_CONSTEXPR
         .               void
         .               __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
         .           		  _RandomAccessIterator __last, _Size __depth_limit,
         .           		  _Compare __comp)
         .               {
-- line 1967 ----------------------------------------
-- line 4824 ----------------------------------------
         .              *  *(i+1)<*i is false.
         .              *
         .              *  The relative ordering of equivalent elements is not preserved, use
         .              *  @p stable_sort() if this is needed.
         .             */
         .             template<typename _RandomAccessIterator>
         .               _GLIBCXX20_CONSTEXPR
         .               inline void
     6,000 ( 0.00%)      sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
         .           	    _RandomAccessIterator>)
         .                 __glibcxx_function_requires(_LessThanComparableConcept<
         .           	    typename iterator_traits<_RandomAccessIterator>::value_type>)
         .                 __glibcxx_requires_valid_range(__first, __last);
         .                 __glibcxx_requires_irreflexive(__first, __last);
         .           
     6,000 ( 0.00%)        std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
1,200,339,578 (10.23%)  => /usr/include/c++/11/bits/stl_algo.h:void std::__sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter) (1,000x)
     6,000 ( 0.00%)  => /usr/include/c++/11/bits/predefined_ops.h:__gnu_cxx::__ops::__iter_less_iter() (1,000x)
     3,000 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief Sort the elements of a sequence using a predicate for comparison.
         .              *  @ingroup sorting_algorithms
         .              *  @param  __first   An iterator.
         .              *  @param  __last    Another iterator.
         .              *  @param  __comp    A comparison functor.
         .              *  @return  Nothing.
-- line 4851 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/new
--------------------------------------------------------------------------------
Ir                  

-- line 167 ----------------------------------------
         .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
         .           void operator delete[](void*, std::size_t, std::align_val_t)
         .             _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
         .           #endif // __cpp_sized_deallocation
         .           #endif // __cpp_aligned_new
         .           
         .           // Default placement versions of operator new.
         .           _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
22,424,032 ( 0.19%)  { return __p; }
         .           _GLIBCXX_NODISCARD inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
         .           { return __p; }
         .           
         .           // Default placement versions of operator delete.
         .           inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
         .           inline void operator delete[](void*, void*) _GLIBCXX_USE_NOEXCEPT { }
         .           //@}
         .           } // extern "C++"
-- line 183 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir                   

-- line 1019 ----------------------------------------
          .           #if __cplusplus > 201703L && __cpp_lib_concepts
          .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
          .           #endif
          .           
          .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
          .                 : _M_current(_Iterator()) { }
          .           
          .                 explicit _GLIBCXX20_CONSTEXPR
 12,164,300 ( 0.10%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 17,030,020 ( 0.15%)        : _M_current(__i) { }
          .           
          .                 // Allow iterator to const_iterator conversion
          .                 template<typename _Iter>
          .                   _GLIBCXX20_CONSTEXPR
          .                   __normal_iterator(const __normal_iterator<_Iter,
          .           			  typename __enable_if<
          .                 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
          .           		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
          .                   : _M_current(__i.base()) { }
          .           
          .                 // Forward iterator requirements
          .                 _GLIBCXX20_CONSTEXPR
          .                 reference
144,351,560 ( 1.23%)        operator*() const _GLIBCXX_NOEXCEPT
144,351,560 ( 1.23%)        { return *_M_current; }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 pointer
          .                 operator->() const _GLIBCXX_NOEXCEPT
          .                 { return _M_current; }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator&
 32,388,416 ( 0.28%)        operator++() _GLIBCXX_NOEXCEPT
          .                 {
 40,485,520 ( 0.35%)  	++_M_current;
  8,097,104 ( 0.07%)  	return *this;
 16,194,208 ( 0.14%)        }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator
          .                 operator++(int) _GLIBCXX_NOEXCEPT
          .                 { return __normal_iterator(_M_current++); }
          .           
          .                 // Bidirectional iterator requirements
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator&
 32,558,956 ( 0.28%)        operator--() _GLIBCXX_NOEXCEPT
          .                 {
 40,698,695 ( 0.35%)  	--_M_current;
  8,139,739 ( 0.07%)  	return *this;
 16,279,478 ( 0.14%)        }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator
          .                 operator--(int) _GLIBCXX_NOEXCEPT
          .                 { return __normal_iterator(_M_current--); }
          .           
          .                 // Random access iterator requirements
          .                 _GLIBCXX20_CONSTEXPR
-- line 1078 ----------------------------------------
-- line 1082 ----------------------------------------
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator&
          .                 operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
          .                 { _M_current += __n; return *this; }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator
  2,871,567 ( 0.02%)        operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
  5,424,071 ( 0.05%)        { return __normal_iterator(_M_current + __n); }
  3,828,756 ( 0.03%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (319,063x)
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator&
          .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
          .                 { _M_current -= __n; return *this; }
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 __normal_iterator
  9,932,337 ( 0.08%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 19,864,674 ( 0.17%)        { return __normal_iterator(_M_current - __n); }
  1,243,116 ( 0.01%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (103,593x)
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 const _Iterator&
 47,346,896 ( 0.40%)        base() const _GLIBCXX_NOEXCEPT
 35,510,172 ( 0.30%)        { return _M_current; }
          .               };
          .           
          .             // Note: In what follows, the left- and right-hand-side iterators are
          .             // allowed to vary in types (conceptually in cv-qualification) so that
          .             // comparison between cv-qualified and non-cv-qualified iterators be
          .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
          .             // will make overload resolution ambiguous (when in scope) if we don't
          .             // provide overloads whose operands are of the same type.  Can someone
-- line 1114 ----------------------------------------
-- line 1155 ----------------------------------------
          .               operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.base() == __rhs.base(); }
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline bool
      7,000 ( 0.00%)      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
          .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
     13,000 ( 0.00%)      { return __lhs.base() == __rhs.base(); }
     14,000 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (2,000x)
          .           
          .             template<typename _IteratorL, typename _IteratorR, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline bool
          .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.base() != __rhs.base(); }
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline bool
 28,028,028 ( 0.24%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
          .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
 52,052,052 ( 0.44%)      { return __lhs.base() != __rhs.base(); }
 14,000,014 ( 0.12%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<float const*, std::vector<float, std::allocator<float> > >::base() const (2,000,002x)
          .           
          .             // Random access iterator requirements
          .             template<typename _IteratorL, typename _IteratorR, typename _Container>
          .               inline bool
          .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.base() < __rhs.base(); }
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline bool
 11,119,290 ( 0.09%)      operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
          .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
 20,650,110 ( 0.18%)      { return __lhs.base() < __rhs.base(); }
 22,238,580 ( 0.19%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (3,176,940x)
          .           
          .             template<typename _IteratorL, typename _IteratorR, typename _Container>
          .               inline bool
          .               operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
          .               { return __lhs.base() > __rhs.base(); }
          .           
-- line 1206 ----------------------------------------
-- line 1260 ----------------------------------------
          .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
          .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
          .           #endif
          .               { return __lhs.base() - __rhs.base(); }
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
  2,218,489 ( 0.02%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
          .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
          .               _GLIBCXX_NOEXCEPT
  4,436,978 ( 0.04%)      { return __lhs.base() - __rhs.base(); }
  4,436,446 ( 0.04%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (633,778x)
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               inline __normal_iterator<_Iterator, _Container>
          .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
          .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
          .               _GLIBCXX_NOEXCEPT
          .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1279 ----------------------------------------
-- line 1283 ----------------------------------------
          .           
          .           namespace std _GLIBCXX_VISIBILITY(default)
          .           {
          .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
          .           
          .             template<typename _Iterator, typename _Container>
          .               _GLIBCXX20_CONSTEXPR
          .               _Iterator
     48,620 ( 0.00%)      __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
          .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
     58,344 ( 0.00%)      { return __it.base(); }
     68,068 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (9,724x)
          .           
          .           #if __cplusplus >= 201103L
          .             /**
          .              * @addtogroup iterators
          .              * @{
          .              */
          .           
          .           #if __cplusplus > 201703L && __cpp_lib_concepts
-- line 1301 ----------------------------------------
-- line 1431 ----------------------------------------
          .           			 __base_ref>::type		reference;
          .           #endif
          .           
          .                 _GLIBCXX17_CONSTEXPR
          .                 move_iterator()
          .                 : _M_current() { }
          .           
          .                 explicit _GLIBCXX17_CONSTEXPR
         24 ( 0.00%)        move_iterator(iterator_type __i)
         36 ( 0.00%)        : _M_current(std::move(__i)) { }
         28 ( 0.00%)  => /usr/include/c++/11/bits/move.h:std::remove_reference<int*&>::type&& std::move<int*&>(int*&) (4x)
          .           
          .                 template<typename _Iter>
          .           #if __cpp_lib_concepts
          .           	requires __convertible<_Iter>
          .           #endif
          .           	_GLIBCXX17_CONSTEXPR
          .           	move_iterator(const move_iterator<_Iter>& __i)
          .           	: _M_current(__i._M_current) { }
-- line 1448 ----------------------------------------
-- line 1456 ----------------------------------------
          .           	move_iterator& operator=(const move_iterator<_Iter>& __i)
          .           	{
          .           	  _M_current = __i._M_current;
          .           	  return *this;
          .           	}
          .           
          .           #if __cplusplus <= 201703L
          .                 _GLIBCXX17_CONSTEXPR iterator_type
         16 ( 0.00%)        base() const
         16 ( 0.00%)        { return _M_current; }
          .           #else
          .                 constexpr const iterator_type&
          .                 base() const & noexcept
          .                 { return _M_current; }
          .           
          .                 constexpr iterator_type
          .                 base() &&
          .                 { return std::move(_M_current); }
-- line 1473 ----------------------------------------
-- line 1715 ----------------------------------------
          .               { return _ReturnType(__i); }
          .           
          .             // Overload for pointers that matches std::move_if_noexcept more closely,
          .             // returning a constant iterator when we don't want to move.
          .             template<typename _Tp, typename _ReturnType
          .               = typename conditional<__move_if_noexcept_cond<_Tp>::value,
          .           			   const _Tp*, move_iterator<_Tp*>>::type>
          .               inline _GLIBCXX17_CONSTEXPR _ReturnType
         32 ( 0.00%)      __make_move_if_noexcept_iterator(_Tp* __i)
         44 ( 0.00%)      { return _ReturnType(__i); }
         88 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::move_iterator<int*>::move_iterator(int*) (4x)
          .           
          .           #if __cplusplus > 201703L && __cpp_lib_concepts
          .             // [iterators.common] Common iterators
          .           
          .             namespace __detail
          .             {
          .               template<typename _It>
          .                 concept __common_iter_has_arrow = indirectly_readable<const _It>
-- line 1732 ----------------------------------------
-- line 2456 ----------------------------------------
          .               {
          .                 enum { __value = 1 };
          .                 typedef __true_type __type;
          .               };
          .           
          .             template<typename _Iterator>
          .               _GLIBCXX20_CONSTEXPR
          .               auto
         20 ( 0.00%)      __miter_base(move_iterator<_Iterator> __it)
          .               -> decltype(__miter_base(__it.base()))
         28 ( 0.00%)      { return __miter_base(__it.base()); }
         32 ( 0.00%)  => /usr/include/c++/11/bits/stl_iterator.h:std::move_iterator<int*>::base() const (4x)
         28 ( 0.00%)  => /usr/include/c++/11/bits/cpp_type_traits.h:int* std::__miter_base<int*>(int*) (4x)
          .           
          .           #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
          .           #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \
          .             std::__make_move_if_noexcept_iterator(_Iter)
          .           #else
          .           #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)
          .           #define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)
          .           #endif // C++11
-- line 2474 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./libio/./libio/genops.c
  ./libio/./libio/strops.c
  ./libio/./libio/vsnprintf.c
  ./locale/./locale/uselocale.c
  ./malloc/./malloc/malloc.c
  ./nptl/./nptl/alloca_cutoff.c
  ./nptl/./nptl/pthread_once.c
  ./stdio-common/../libio/libioP.h
  ./stdio-common/../sysdeps/generic/get-rounding-mode.h
  ./stdio-common/../sysdeps/pthread/allocalim.h
  ./stdio-common/./stdio-common/printf-parse.h
  ./stdio-common/./stdio-common/printf_fp.c
  ./stdio-common/./stdio-common/vfprintf-internal.c
  ./stdlib/../sysdeps/ieee754/dbl-64/dbl2mpn.c
  ./stdlib/../sysdeps/ieee754/flt-32/mpn2flt.c
  ./stdlib/../sysdeps/x86_64/lshift.S
  ./stdlib/../sysdeps/x86_64/mul_1.S
  ./stdlib/../sysdeps/x86_64/rshift.S
  ./stdlib/./stdlib/cmp.c
  ./stdlib/./stdlib/divrem.c
  ./stdlib/./stdlib/mul.c
  ./stdlib/./stdlib/strtod_l.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
7,099,784,896 (60.54%)  events annotated

