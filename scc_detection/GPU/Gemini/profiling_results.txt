

Graph loaded: 10876 nodes, 39994 edges.
==PROF== Connected to process 4032 (/content/second)
Phase 1: GPU Parallel Operations
--- Initial Trim ---
==PROF== Profiling "par_trim_kernel" - 0 (1/1): 0%....50%....100% - 30 passes
--- Par-FWBW (Placeholder) ---
--- Post-FWBW Trim ---
--- Par-Trim2 ---
--- Post-Trim2 Trim ---
--- Par-WCC ---
Phase 2: CPU Parallel Recursion

Found 6560 Strongly Connected Components.
==PROF== Disconnected from process 4032
[4032] second@127.0.0.1
  par_trim_kernel(int, int *, int *, int *, int *, int *, int *, int *, int *, int *) (43, 1, 1)x(256, 1, 1), Context 1, Stream 7, Device 0, CC 7.5
    Section: GPU Speed Of Light Throughput
    ----------------------- ----------- ------------
    Metric Name             Metric Unit Metric Value
    ----------------------- ----------- ------------
    DRAM Frequency                  Ghz         4.87
    SM Frequency                    Mhz       584.32
    Elapsed Cycles                cycle       22,934
    Memory Throughput                 %        13.38
    DRAM Throughput                   %         5.50
    Duration                         us        39.23
    L1/TEX Cache Throughput           %        26.75
    L2 Cache Throughput               %         9.78
    SM Active Cycles              cycle    13,816.77
    Compute (SM) Throughput           %         7.13
    ----------------------- ----------- ------------

    OPT   This kernel grid is too small to fill the available resources on this device, resulting in only 0.3 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    Section: GPU Speed Of Light Roofline Chart
    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of 
          this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide       
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline      
          analysis.                                                                                                     

    Section: PM Sampling
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Maximum Buffer Size             Kbyte       262.14
    Dropped Samples                sample            0
    Maximum Sampling Interval       cycle       20,000
    # Pass Groups                                    1
    ------------------------- ----------- ------------

    Section: Compute Workload Analysis
    -------------------- ----------- ------------
    Metric Name          Metric Unit Metric Value
    -------------------- ----------- ------------
    Executed Ipc Active   inst/cycle         0.30
    Executed Ipc Elapsed  inst/cycle         0.18
    Issue Slots Busy               %         7.51
    Issued Ipc Active     inst/cycle         0.30
    SM Busy                        %         7.51
    -------------------- ----------- ------------

    OPT   Est. Local Speedup: 93.21%                                                                                    
          All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps   
          per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.             

    Section: Memory Workload Analysis
    ----------------- ----------- ------------
    Metric Name       Metric Unit Metric Value
    ----------------- ----------- ------------
    Memory Throughput     Gbyte/s        17.14
    Mem Busy                    %        13.38
    Max Bandwidth               %        11.80
    L1/TEX Hit Rate             %        56.11
    L2 Hit Rate                 %        86.69
    Mem Pipes Busy              %         7.13
    ----------------- ----------- ------------

    Section: Memory Workload Analysis Chart
    WRN   The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an  
          additional metric could enable the rule to provide more guidance.                                             

    Section: Memory Workload Analysis Tables
    OPT   Est. Speedup: 22.71%                                                                                          
          The memory access pattern for global loads from L1TEX might not be optimal. On average, only 4.8 of the 32    
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced global loads.                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 7.517%                                                                                          
          The memory access pattern for global stores to L1TEX might not be optimal. On average, only 23.0 of the 32    
          bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between   
          threads. Check the Source Counters section for uncoalesced global stores.                                     

    Section: Scheduler Statistics
    ---------------------------- ----------- ------------
    Metric Name                  Metric Unit Metric Value
    ---------------------------- ----------- ------------
    One or More Eligible                   %         8.81
    Issued Warp Per Scheduler                        0.09
    No Eligible                            %        91.19
    Active Warps Per Scheduler          warp         1.98
    Eligible Warps Per Scheduler        warp         0.09
    ---------------------------- ----------- ------------

    OPT   Est. Local Speedup: 86.62%                                                                                    
          Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 11.3 cycles. This might leave hardware resources underutilized and may lead to    
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.98 active warps per scheduler, but only an average of 0.09 warps were eligible per cycle. Eligible warps    
          are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible   
          warp results in no instruction being issued and the issue slot remains unused. To increase the number of      
          eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp  
          State Statistics and Source Counters sections.                                                                

    Section: Warp State Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Warp Cycles Per Issued Instruction             cycle        22.48
    Warp Cycles Per Executed Instruction           cycle        22.75
    Avg. Active Threads Per Warp                                12.30
    Avg. Not Predicated Off Threads Per Warp                    11.18
    ---------------------------------------- ----------- ------------

    OPT   Est. Speedup: 72.57%                                                                                          
          On average, each warp of this kernel spends 16.3 cycles being stalled waiting for a scoreboard dependency on  
          a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited     
          upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the        
          memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by        
          increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently     
          used data to shared memory. This stall type represents about 72.6% of the total average of 22.5 cycles        
          between issuing two instructions.                                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on         
          sampling data. The Kernel Profiling Guide                                                                     
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details    
          on each stall reason.                                                                                         
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 4.639%                                                                                          
          Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is         
          achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early     
          thread completion, and divergent flow control can significantly lower the number of active threads in a warp  
          per cycle. This kernel achieves an average of 12.3 threads being active per cycle. This is further reduced    
          to 11.2 threads per warp due to predication. The compiler may use predication to avoid an actual branch.      
          Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads  
          execute the instructions. Try to avoid different execution paths within a warp when possible.                 

    Section: Instruction Statistics
    ---------------------------------------- ----------- ------------
    Metric Name                              Metric Unit Metric Value
    ---------------------------------------- ----------- ------------
    Avg. Executed Instructions Per Scheduler        inst     1,025.04
    Executed Instructions                           inst      164,007
    Avg. Issued Instructions Per Scheduler          inst     1,037.39
    Issued Instructions                             inst      165,982
    ---------------------------------------- ----------- ------------

    Section: Launch Statistics
    -------------------------------- --------------- ---------------
    Metric Name                          Metric Unit    Metric Value
    -------------------------------- --------------- ---------------
    Block Size                                                   256
    Function Cache Configuration                     CachePreferNone
    Grid Size                                                     43
    Registers Per Thread             register/thread              33
    Shared Memory Configuration Size           Kbyte           32.77
    Driver Shared Memory Per Block        byte/block               0
    Dynamic Shared Memory Per Block       byte/block               0
    Static Shared Memory Per Block        byte/block               0
    # SMs                                         SM              40
    Threads                                   thread          11,008
    Uses Green Context                                             0
    Waves Per SM                                                0.27
    -------------------------------- --------------- ---------------

    OPT   If you execute __syncthreads() to synchronize the threads of a block, it is recommended to have more than the 
          achieved 1 blocks per multiprocessor. This way, blocks that aren't waiting for __syncthreads() can keep the   
          hardware busy.                                                                                                

    Section: Occupancy
    ------------------------------- ----------- ------------
    Metric Name                     Metric Unit Metric Value
    ------------------------------- ----------- ------------
    Block Limit SM                        block           16
    Block Limit Registers                 block            6
    Block Limit Shared Mem                block           16
    Block Limit Warps                     block            4
    Theoretical Active Warps per SM        warp           32
    Theoretical Occupancy                     %          100
    Achieved Occupancy                        %        21.10
    Achieved Active Warps Per SM           warp         6.75
    ------------------------------- ----------- ------------

    OPT   Est. Speedup: 78.9%                                                                                           
          The difference between calculated theoretical (100.0%) and measured achieved occupancy (21.1%) can be the     
          result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can   
          occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices   
          Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on     
          optimizing occupancy.                                                                                         

    Section: GPU and Memory Workload Distribution
    -------------------------- ----------- ------------
    Metric Name                Metric Unit Metric Value
    -------------------------- ----------- ------------
    Average DRAM Active Cycles       cycle    10,507.50
    Total DRAM Elapsed Cycles        cycle    1,527,808
    Average L1 Active Cycles         cycle    13,816.77
    Total L1 Elapsed Cycles          cycle      894,888
    Average L2 Active Cycles         cycle    17,702.94
    Total L2 Elapsed Cycles          cycle    1,072,320
    Average SM Active Cycles         cycle    13,816.77
    Total SM Elapsed Cycles          cycle      894,888
    Average SMSP Active Cycles       cycle    11,769.99
    Total SMSP Elapsed Cycles        cycle    3,579,552
    -------------------------- ----------- ------------

    OPT   Est. Speedup: 23.19%                                                                                          
          One or more SMs have a much higher number of active cycles than the average number of active cycles.          
          Additionally, other SMs have a much lower number of active cycles than the average number of active cycles.   
          Maximum instance value is 37.55% above the average, while the minimum instance value is 36.31% below the      
          average.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 23.71%                                                                                          
          One or more SMSPs have a much higher number of active cycles than the average number of active cycles.        
          Maximum instance value is 45.06% above the average, while the minimum instance value is 38.60% below the      
          average.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 23.19%                                                                                          
          One or more L1 Slices have a much higher number of active cycles than the average number of active cycles.    
          Additionally, other L1 Slices have a much lower number of active cycles than the average number of active     
          cycles. Maximum instance value is 37.55% above the average, while the minimum instance value is 36.31% below  
          the average.                                                                                                  
    ----- --------------------------------------------------------------------------------------------------------------
    OPT   Est. Speedup: 11%                                                                                             
          One or more L2 Slices have a much higher number of active cycles than the average number of active cycles.    
          Maximum instance value is 20.82% above the average, while the minimum instance value is 8.92% below the       
          average.                                                                                                      

    Section: Source Counters
    ------------------------- ----------- ------------
    Metric Name               Metric Unit Metric Value
    ------------------------- ----------- ------------
    Branch Instructions Ratio           %         0.07
    Branch Instructions              inst       12,131
    Branch Efficiency                   %        43.63
    Avg. Divergent Branches                      19.81
    ------------------------- ----------- ------------

    OPT   Est. Speedup: 39.5%                                                                                           
          This kernel has uncoalesced global accesses resulting in a total of 161904 excessive sectors (75% of the      
          total 216524 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional      
          information on reducing uncoalesced device memory accesses.                                                   

